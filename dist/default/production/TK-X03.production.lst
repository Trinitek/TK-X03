

Microchip Technology PIC18 LITE Macro Assembler V1.30 build 55553 
                                                                                               Wed Mar 19 21:45:26 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 55553
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBIGRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    32  0000                     
    33                           	psect	idataBIGRAM
    34  0021D8                     __pidataBIGRAM:
    35                           	opt stack 0
    36                           
    37                           ;initializer for _virtualMemory
    38  0021D8  07                 	db	7
    39  0021D9  03                 	db	3
    40  0021DA  00                 	db	0
    41  0021DB  54                 	db	84
    42  0021DC  3F                 	db	63
    43  0021DD  00                 	db	0
    44  0021DE  0A                 	db	10
    45  0021DF  31                 	db	49
    46  0021E0  00                 	db	0
    47  0021E1  03                 	db	3
    48  0021E2  06                 	db	6
    49  0021E3  04                 	db	4
    50  0021E4  40                 	db	64
    51  0021E5                     	ds	2035
    52                           
    53                           	psect	smallconst
    54  001000                     __psmallconst:
    55                           	opt stack 0
    56  001000  00                 	db	0
    57  001001                     _virtualMemory_size:
    58                           	opt stack 0
    59  001001  0800               	dw	2048
    60  001003  0000               	dw	0
    61  001005                     __end_of_virtualMemory_size:
    62                           	opt stack 0
    63  0000                     _ANSELD	set	3899
    64  0000                     _BAUDCON2bits	set	3952
    65  0000                     _LATA	set	3977
    66  0000                     _LATAbits	set	3977
    67  0000                     _LATC	set	3979
    68  0000                     _LATCbits	set	3979
    69  0000                     _LATD	set	3980
    70  0000                     _LATDbits	set	3980
    71  0000                     _LATE	set	3981
    72  0000                     _LATEbits	set	3981
    73  0000                     _OSCCON2bits	set	4050
    74  0000                     _OSCCONbits	set	4051
    75  0000                     _RCREG2	set	3956
    76  0000                     _RCSTA2bits	set	3953
    77  0000                     _SPBRG2	set	3957
    78  0000                     _SPBRGH2	set	3958
    79  0000                     _TRISA	set	3986
    80  0000                     _TRISC	set	3988
    81  0000                     _TRISDbits	set	3989
    82  0000                     _TRISE	set	3990
    83  0000                     _TXREG2	set	3955
    84  0000                     _TXSTA2bits	set	3954
    85                           
    86                           ; #config settings
    87  001005  00                 	db	0	; dummy byte at the end
    88  0000                     
    89                           	psect	cinit
    90  002048                     __pcinit:
    91                           	opt stack 0
    92  002048                     start_initialization:
    93                           	opt stack 0
    94  002048                     __initialization:
    95                           	opt stack 0
    96                           
    97                           ; Clear objects allocated to BANK1 (256 bytes)
    98  002048  EE01  F000         	lfsr	0,__pbssBANK1
    99  00204C  EE11 F000          	lfsr	1,256
   100  002050                     clear_0:
   101  002050  6AEE               	clrf	postinc0,c
   102  002052  50E5               	movf	postdec1,w,c
   103  002054  50E1               	movf	fsr1l,w,c
   104  002056  E1FC               	bnz	clear_0
   105  002058  50E2               	movf	fsr1h,w,c
   106  00205A  E1FA               	bnz	clear_0
   107                           
   108                           ; Clear objects allocated to COMRAM (15 bytes)
   109  00205C  EE00  F012         	lfsr	0,__pbssCOMRAM
   110  002060  0E0F               	movlw	15
   111  002062                     clear_1:
   112  002062  6AEE               	clrf	postinc0,c
   113  002064  06E8               	decf	wreg,f,c
   114  002066  E1FD               	bnz	clear_1
   115                           
   116                           ; Initialize objects allocated to BIGRAM (2048 bytes)
   117                           ; load TBLPTR registers with __pidataBIGRAM
   118  002068  0ED8               	movlw	low __pidataBIGRAM
   119  00206A  6EF6               	movwf	tblptrl,c
   120  00206C  0E21               	movlw	high __pidataBIGRAM
   121  00206E  6EF7               	movwf	tblptrh,c
   122  002070  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
   123  002072  6EF8               	movwf	tblptru,c
   124  002074  EE02  F000         	lfsr	0,__pdataBIGRAM
   125  002078  EE18 F000          	lfsr	1,2048
   126  00207C                     copy_data0:
   127  00207C  0009               	tblrd		*+
   128  00207E  CFF5 FFEE          	movff	tablat,postinc0
   129  002082  50E5               	movf	postdec1,w,c
   130  002084  50E1               	movf	fsr1l,w,c
   131  002086  E1FA               	bnz	copy_data0
   132  002088  50E2               	movf	fsr1h,w,c
   133  00208A  E1F8               	bnz	copy_data0
   134  00208C                     end_of_initialization:
   135                           	opt stack 0
   136  00208C                     __end_of__initialization:
   137                           	opt stack 0
   138  00208C  0100               	movlb	0
   139  00208E  EF8E  F00F         	goto	_main	;jump to C main() function
   140                           tblptru	equ	0xFF8
   141                           tblptrh	equ	0xFF7
   142                           tblptrl	equ	0xFF6
   143                           tablat	equ	0xFF5
   144                           postinc0	equ	0xFEE
   145                           wreg	equ	0xFE8
   146                           postdec1	equ	0xFE5
   147                           fsr1h	equ	0xFE2
   148                           fsr1l	equ	0xFE1
   149                           
   150                           	psect	bssCOMRAM
   151  000012                     __pbssCOMRAM:
   152                           	opt stack 0
   153  000012                     wait_ms@timel:
   154                           	opt stack 0
   155  000012                     	ds	4
   156  000016                     _regMX:
   157                           	opt stack 0
   158  000016                     	ds	2
   159  000018                     _regPC:
   160                           	opt stack 0
   161  000018                     	ds	2
   162  00001A                     _haltFlag:
   163                           	opt stack 0
   164  00001A                     	ds	1
   165  00001B                     _immData_1:
   166                           	opt stack 0
   167  00001B                     	ds	1
   168  00001C                     _immData_2:
   169                           	opt stack 0
   170  00001C                     	ds	1
   171  00001D                     _regA:
   172                           	opt stack 0
   173  00001D                     	ds	1
   174  00001E                     _regB:
   175                           	opt stack 0
   176  00001E                     	ds	1
   177  00001F                     _regF:
   178                           	opt stack 0
   179  00001F                     	ds	1
   180  000020                     _regSP:
   181                           	opt stack 0
   182  000020                     	ds	1
   183                           tblptru	equ	0xFF8
   184                           tblptrh	equ	0xFF7
   185                           tblptrl	equ	0xFF6
   186                           tablat	equ	0xFF5
   187                           postinc0	equ	0xFEE
   188                           wreg	equ	0xFE8
   189                           postdec1	equ	0xFE5
   190                           fsr1h	equ	0xFE2
   191                           fsr1l	equ	0xFE1
   192                           
   193                           	psect	bssBANK1
   194  000100                     __pbssBANK1:
   195                           	opt stack 0
   196  000100                     _stack:
   197                           	opt stack 0
   198  000100                     	ds	256
   199                           tblptru	equ	0xFF8
   200                           tblptrh	equ	0xFF7
   201                           tblptrl	equ	0xFF6
   202                           tablat	equ	0xFF5
   203                           postinc0	equ	0xFEE
   204                           wreg	equ	0xFE8
   205                           postdec1	equ	0xFE5
   206                           fsr1h	equ	0xFE2
   207                           fsr1l	equ	0xFE1
   208                           
   209                           	psect	dataBIGRAM
   210  000200                     __pdataBIGRAM:
   211                           	opt stack 0
   212  000200                     _virtualMemory:
   213                           	opt stack 0
   214  000200                     	ds	2048
   215                           tblptru	equ	0xFF8
   216                           tblptrh	equ	0xFF7
   217                           tblptrl	equ	0xFF6
   218                           tablat	equ	0xFF5
   219                           postinc0	equ	0xFEE
   220                           wreg	equ	0xFE8
   221                           postdec1	equ	0xFE5
   222                           fsr1h	equ	0xFE2
   223                           fsr1l	equ	0xFE1
   224                           
   225                           	psect	cstackCOMRAM
   226  000001                     __pcstackCOMRAM:
   227                           	opt stack 0
   228  000001                     ??_initializeRegisters:
   229  000001                     ??_update_immData:
   230  000001                     ?_immData_toPointer:
   231                           	opt stack 0
   232  000001                     ?___wmul:
   233                           	opt stack 0
   234  000001                     dispSeg@letter:
   235                           	opt stack 0
   236  000001                     hexToChar@number:
   237                           	opt stack 0
   238  000001                     setMXbits@value:
   239                           	opt stack 0
   240  000001                     getFbits@subRegister:
   241                           	opt stack 0
   242  000001                     setFbits@value:
   243                           	opt stack 0
   244  000001                     getPortData@portNumber:
   245                           	opt stack 0
   246  000001                     getMXbits@regMX_temp:
   247                           	opt stack 0
   248  000001                     enableSerial@baudRate:
   249                           	opt stack 0
   250  000001                     ___wmul@multiplier:
   251                           	opt stack 0
   252                           
   253                           ; 2 bytes @ 0x0
   254  000001                     	ds	1
   255  000002                     ??_setFbits:
   256  000002                     dispSeg@segment:
   257                           	opt stack 0
   258  000002                     getFbits@regF_temp:
   259                           	opt stack 0
   260  000002                     setMXbits@value_temp:
   261                           	opt stack 0
   262                           
   263                           ; 2 bytes @ 0x1
   264  000002                     	ds	1
   265  000003                     ??_enableSerial:
   266  000003                     getMXbits@subRegister:
   267                           	opt stack 0
   268  000003                     setFbits@subRegister:
   269                           	opt stack 0
   270  000003                     immData_toPointer@pointer:
   271                           	opt stack 0
   272  000003                     ___wmul@multiplicand:
   273                           	opt stack 0
   274                           
   275                           ; 2 bytes @ 0x2
   276  000003                     	ds	1
   277  000004                     setMXbits@subRegister:
   278                           	opt stack 0
   279  000004                     setFbits@regF_temp2:
   280                           	opt stack 0
   281                           
   282                           ; 1 bytes @ 0x3
   283  000004                     	ds	1
   284  000005                     setFbits@regF_temp1:
   285                           	opt stack 0
   286  000005                     setPortData@outputData:
   287                           	opt stack 0
   288  000005                     setMXbits@regMX_temp:
   289                           	opt stack 0
   290  000005                     ___wmul@product:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0x4
   294  000005                     	ds	1
   295  000006                     setPortData@portNumber:
   296                           	opt stack 0
   297                           
   298                           ; 1 bytes @ 0x5
   299  000006                     	ds	1
   300  000007                     wait_ms@time:
   301                           	opt stack 0
   302  000007                     setPortData@outputData_temp16:
   303                           	opt stack 0
   304                           
   305                           ; 2 bytes @ 0x6
   306  000007                     	ds	2
   307  000009                     setPortData@outputData_temp8:
   308                           	opt stack 0
   309                           
   310                           ; 1 bytes @ 0x8
   311  000009                     	ds	1
   312  00000A                     ??_processOpcode:
   313                           
   314                           ; 0 bytes @ 0x9
   315  00000A                     	ds	1
   316  00000B                     processOpcode@carriedBit:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0xA
   320  00000B                     	ds	1
   321  00000C                     processOpcode@regPC_temp:
   322                           	opt stack 0
   323                           
   324                           ; 2 bytes @ 0xB
   325  00000C                     	ds	2
   326  00000E                     processOpcode@regA_temp8:
   327                           	opt stack 0
   328                           
   329                           ; 1 bytes @ 0xD
   330  00000E                     	ds	1
   331  00000F                     processOpcode@regA_temp16:
   332                           	opt stack 0
   333                           
   334                           ; 2 bytes @ 0xE
   335  00000F                     	ds	2
   336  000011                     ??_main:
   337                           
   338                           ; 0 bytes @ 0x10
   339  000011                     	ds	1
   340                           tblptru	equ	0xFF8
   341                           tblptrh	equ	0xFF7
   342                           tblptrl	equ	0xFF6
   343                           tablat	equ	0xFF5
   344                           postinc0	equ	0xFEE
   345                           wreg	equ	0xFE8
   346                           postdec1	equ	0xFE5
   347                           fsr1h	equ	0xFE2
   348                           fsr1l	equ	0xFE1
   349                           
   350 ;;
   351 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   352 ;;
   353 ;; *************** function _main *****************
   354 ;; Defined at:
   355 ;;		line 19 in file "source/main.c"
   356 ;; Parameters:    Size  Location     Type
   357 ;;		None
   358 ;; Auto vars:     Size  Location     Type
   359 ;;		None
   360 ;; Return value:  Size  Location     Type
   361 ;;		None               void
   362 ;; Registers used:
   363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   364 ;; Tracked objects:
   365 ;;		On entry : 0/0
   366 ;;		On exit  : 0/0
   367 ;;		Unchanged: 0/0
   368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   371 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   372 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   373 ;;Total ram usage:        1 bytes
   374 ;; Hardware stack levels required when called:    3
   375 ;; This function calls:
   376 ;;		_dispSeg
   377 ;;		_initOscillator
   378 ;;		_initPorts
   379 ;;		_initializeRegisters
   380 ;;		_processOpcode
   381 ;;		_wait_ms
   382 ;; This function is called by:
   383 ;;		Startup code after reset
   384 ;; This function uses a non-reentrant model
   385 ;;
   386                           
   387                           	psect	text0
   388  001F1C                     __ptext0:
   389                           	opt stack 0
   390  001F1C                     _main:
   391                           	opt stack 28
   392                           
   393                           ;main.c: 21: initOscillator();
   394                           
   395                           ;incstack = 0
   396  001F1C  ECC6  F010         	call	_initOscillator	;wreg free
   397                           
   398                           ;main.c: 22: initPorts();
   399  001F20  EC9F  F010         	call	_initPorts	;wreg free
   400                           
   401                           ;main.c: 23: dispSeg(1, '-'); dispSeg(2, '-');
   402  001F24  6E11               	movwf	??_main& (0+255),c
   403  001F26  0E2D               	movlw	45
   404  001F28  6E01               	movwf	dispSeg@letter,c
   405  001F2A  5011               	movf	??_main& (0+255),w,c
   406  001F2C  0E01               	movlw	1
   407  001F2E  EC3B  F00C         	call	_dispSeg
   408  001F32  6E11               	movwf	??_main& (0+255),c
   409  001F34  0E2D               	movlw	45
   410  001F36  6E01               	movwf	dispSeg@letter,c
   411  001F38  5011               	movf	??_main& (0+255),w,c
   412  001F3A  0E02               	movlw	2
   413  001F3C  EC3B  F00C         	call	_dispSeg
   414                           
   415                           ;main.c: 25: initializeRegisters();
   416  001F40  EC86  F010         	call	_initializeRegisters	;wreg free
   417                           
   418                           ;main.c: 27: while (haltFlag == 0)
   419  001F44  D013               	goto	l1789
   420  001F46                     l1781:
   421                           
   422                           ;main.c: 28: {
   423                           ;main.c: 29: if (regPC > 2047)
   424  001F46  0E00               	movlw	0
   425  001F48  5C18               	subwf	_regPC,w,c
   426  001F4A  0E08               	movlw	8
   427  001F4C  5819               	subwfb	_regPC+1,w,c
   428  001F4E  A0D8               	btfss	status,0,c
   429  001F50  D005               	goto	l1785
   430                           
   431                           ;main.c: 30: {
   432                           ;main.c: 31: regPC = 0;
   433  001F52  0E00               	movlw	0
   434  001F54  6E19               	movwf	_regPC+1,c
   435  001F56  0E00               	movlw	0
   436  001F58  6E18               	movwf	_regPC,c
   437                           
   438                           ;main.c: 32: continue;
   439  001F5A  D008               	goto	l1789
   440  001F5C                     l1785:
   441                           
   442                           ;main.c: 33: }
   443                           ;main.c: 35: wait_ms(1000);
   444  001F5C  0E03               	movlw	3
   445  001F5E  6E08               	movwf	wait_ms@time+1,c
   446  001F60  0EE8               	movlw	232
   447  001F62  6E07               	movwf	wait_ms@time,c
   448  001F64  EC49  F010         	call	_wait_ms	;wreg free
   449                           
   450                           ;main.c: 36: processOpcode();
   451  001F68  EC03  F008         	call	_processOpcode	;wreg free
   452  001F6C                     l1789:
   453  001F6C  501A               	movf	_haltFlag,w,c
   454  001F6E  B4D8               	btfsc	status,2,c
   455  001F70  D7EA               	goto	l1781
   456                           
   457                           ;main.c: 37: }
   458                           ;main.c: 40: dispSeg(1, '-'); dispSeg(2, '-');
   459  001F72  6E11               	movwf	??_main& (0+255),c
   460  001F74  0E2D               	movlw	45
   461  001F76  6E01               	movwf	dispSeg@letter,c
   462  001F78  5011               	movf	??_main& (0+255),w,c
   463  001F7A  0E01               	movlw	1
   464  001F7C  EC3B  F00C         	call	_dispSeg
   465  001F80  6E11               	movwf	??_main& (0+255),c
   466  001F82  0E2D               	movlw	45
   467  001F84  6E01               	movwf	dispSeg@letter,c
   468  001F86  5011               	movf	??_main& (0+255),w,c
   469  001F88  0E02               	movlw	2
   470  001F8A  EC3B  F00C         	call	_dispSeg
   471  001F8E                     l39:
   472  001F8E  D7FF               	goto	l39
   473  001F90                     __end_of_main:
   474                           	opt stack 0
   475                           tblptru	equ	0xFF8
   476                           tblptrh	equ	0xFF7
   477                           tblptrl	equ	0xFF6
   478                           tablat	equ	0xFF5
   479                           postinc0	equ	0xFEE
   480                           wreg	equ	0xFE8
   481                           postdec1	equ	0xFE5
   482                           fsr1h	equ	0xFE2
   483                           fsr1l	equ	0xFE1
   484                           status	equ	0xFD8
   485                           
   486 ;; *************** function _wait_ms *****************
   487 ;; Defined at:
   488 ;;		line 50 in file "source/system.c"
   489 ;; Parameters:    Size  Location     Type
   490 ;;  time            2    6[COMRAM] unsigned int 
   491 ;; Auto vars:     Size  Location     Type
   492 ;;		None
   493 ;; Return value:  Size  Location     Type
   494 ;;		None               void
   495 ;; Registers used:
   496 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   497 ;; Tracked objects:
   498 ;;		On entry : 0/0
   499 ;;		On exit  : 0/0
   500 ;;		Unchanged: 0/0
   501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   502 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   503 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   505 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   506 ;;Total ram usage:        2 bytes
   507 ;; Hardware stack levels used:    1
   508 ;; Hardware stack levels required when called:    1
   509 ;; This function calls:
   510 ;;		___wmul
   511 ;; This function is called by:
   512 ;;		_main
   513 ;;		_cycleSegDisplays
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517                           	psect	text1
   518  002092                     __ptext1:
   519                           	opt stack 0
   520  002092                     _wait_ms:
   521                           	opt stack 29
   522                           
   523                           ;system.c: 52: static long timel = 0;
   524                           ;system.c: 53: timel = time * 10;
   525                           
   526                           ;incstack = 0
   527  002092  C007  F001         	movff	wait_ms@time,___wmul@multiplier
   528  002096  C008  F002         	movff	wait_ms@time+1,___wmul@multiplier+1
   529  00209A  0E00               	movlw	0
   530  00209C  6E04               	movwf	___wmul@multiplicand+1,c
   531  00209E  0E0A               	movlw	10
   532  0020A0  6E03               	movwf	___wmul@multiplicand,c
   533  0020A2  EC69  F010         	call	___wmul	;wreg free
   534  0020A6  C001  F012         	movff	?___wmul,wait_ms@timel
   535  0020AA  C002  F013         	movff	?___wmul+1,wait_ms@timel+1
   536  0020AE  6A14               	clrf	wait_ms@timel+2,c
   537  0020B0  6A15               	clrf	wait_ms@timel+3,c
   538                           
   539                           ;system.c: 54: for (; timel; timel--);
   540  0020B2  D008               	goto	l137
   541  0020B4                     l1395:
   542  0020B4  0EFF               	movlw	255
   543  0020B6  2612               	addwf	wait_ms@timel,f,c
   544  0020B8  0EFF               	movlw	255
   545  0020BA  2213               	addwfc	wait_ms@timel+1,f,c
   546  0020BC  0EFF               	movlw	255
   547  0020BE  2214               	addwfc	wait_ms@timel+2,f,c
   548  0020C0  0EFF               	movlw	255
   549  0020C2  2215               	addwfc	wait_ms@timel+3,f,c
   550  0020C4                     l137:
   551  0020C4  5015               	movf	wait_ms@timel+3,w,c
   552  0020C6  1012               	iorwf	wait_ms@timel,w,c
   553  0020C8  1013               	iorwf	wait_ms@timel+1,w,c
   554  0020CA  1014               	iorwf	wait_ms@timel+2,w,c
   555  0020CC  B4D8               	btfsc	status,2,c
   556  0020CE  0012               	return	
   557  0020D0  D7F1               	goto	l1395
   558  0020D2                     __end_of_wait_ms:
   559                           	opt stack 0
   560                           tblptru	equ	0xFF8
   561                           tblptrh	equ	0xFF7
   562                           tblptrl	equ	0xFF6
   563                           tablat	equ	0xFF5
   564                           postinc0	equ	0xFEE
   565                           wreg	equ	0xFE8
   566                           postdec1	equ	0xFE5
   567                           fsr1h	equ	0xFE2
   568                           fsr1l	equ	0xFE1
   569                           status	equ	0xFD8
   570                           
   571 ;; *************** function ___wmul *****************
   572 ;; Defined at:
   573 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\wmul.c"
   574 ;; Parameters:    Size  Location     Type
   575 ;;  multiplier      2    0[COMRAM] unsigned int 
   576 ;;  multiplicand    2    2[COMRAM] unsigned int 
   577 ;; Auto vars:     Size  Location     Type
   578 ;;  product         2    4[COMRAM] unsigned int 
   579 ;; Return value:  Size  Location     Type
   580 ;;                  2    0[COMRAM] unsigned int 
   581 ;; Registers used:
   582 ;;		wreg, status,2, status,0, prodl, prodh
   583 ;; Tracked objects:
   584 ;;		On entry : 0/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   588 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   589 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   591 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   592 ;;Total ram usage:        6 bytes
   593 ;; Hardware stack levels used:    1
   594 ;; This function calls:
   595 ;;		Nothing
   596 ;; This function is called by:
   597 ;;		_wait_ms
   598 ;; This function uses a non-reentrant model
   599 ;;
   600                           
   601                           	psect	text2
   602  0020D2                     __ptext2:
   603                           	opt stack 0
   604  0020D2                     ___wmul:
   605                           	opt stack 29
   606                           
   607                           ;incstack = 0
   608  0020D2  5001               	movf	___wmul@multiplier,w,c
   609  0020D4  0203               	mulwf	___wmul@multiplicand,c
   610  0020D6  CFF3 F005          	movff	prodl,___wmul@product
   611  0020DA  CFF4 F006          	movff	prodh,___wmul@product+1
   612  0020DE  5001               	movf	___wmul@multiplier,w,c
   613  0020E0  0204               	mulwf	___wmul@multiplicand+1,c
   614  0020E2  CFF3 FFF4          	movff	prodl,prodh
   615  0020E6  6AF3               	clrf	prodl,c
   616  0020E8  50F3               	movf	prodl,w,c
   617  0020EA  2605               	addwf	___wmul@product,f,c
   618  0020EC  50F4               	movf	prodh,w,c
   619  0020EE  2206               	addwfc	___wmul@product+1,f,c
   620  0020F0  5002               	movf	___wmul@multiplier+1,w,c
   621  0020F2  0203               	mulwf	___wmul@multiplicand,c
   622  0020F4  CFF3 FFF4          	movff	prodl,prodh
   623  0020F8  6AF3               	clrf	prodl,c
   624  0020FA  50F3               	movf	prodl,w,c
   625  0020FC  2605               	addwf	___wmul@product,f,c
   626  0020FE  50F4               	movf	prodh,w,c
   627  002100  2206               	addwfc	___wmul@product+1,f,c
   628  002102  C005  F001         	movff	___wmul@product,?___wmul
   629  002106  C006  F002         	movff	___wmul@product+1,?___wmul+1
   630  00210A  0012               	return	
   631  00210C                     __end_of___wmul:
   632                           	opt stack 0
   633                           tblptru	equ	0xFF8
   634                           tblptrh	equ	0xFF7
   635                           tblptrl	equ	0xFF6
   636                           tablat	equ	0xFF5
   637                           prodh	equ	0xFF4
   638                           prodl	equ	0xFF3
   639                           postinc0	equ	0xFEE
   640                           wreg	equ	0xFE8
   641                           postdec1	equ	0xFE5
   642                           fsr1h	equ	0xFE2
   643                           fsr1l	equ	0xFE1
   644                           status	equ	0xFD8
   645                           
   646 ;; *************** function _processOpcode *****************
   647 ;; Defined at:
   648 ;;		line 238 in file "source/emulator.c"
   649 ;; Parameters:    Size  Location     Type
   650 ;;		None
   651 ;; Auto vars:     Size  Location     Type
   652 ;;  regA_temp16     2   14[COMRAM] unsigned int 
   653 ;;  regPC_temp      2   11[COMRAM] unsigned int 
   654 ;;  regA_temp8      1   13[COMRAM] unsigned char 
   655 ;;  carriedBit      1   10[COMRAM] unsigned char 
   656 ;; Return value:  Size  Location     Type
   657 ;;		None               void
   658 ;; Registers used:
   659 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   660 ;; Tracked objects:
   661 ;;		On entry : 0/0
   662 ;;		On exit  : 0/0
   663 ;;		Unchanged: 0/0
   664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   666 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   667 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   668 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   669 ;;Total ram usage:        7 bytes
   670 ;; Hardware stack levels used:    1
   671 ;; Hardware stack levels required when called:    2
   672 ;; This function calls:
   673 ;;		_getFbits
   674 ;;		_getMXbits
   675 ;;		_getPortData
   676 ;;		_immData_toPointer
   677 ;;		_setFbits
   678 ;;		_setMXbits
   679 ;;		_setPortData
   680 ;;		_update_immData
   681 ;; This function is called by:
   682 ;;		_main
   683 ;; This function uses a non-reentrant model
   684 ;;
   685                           
   686                           	psect	text3
   687  001006                     __ptext3:
   688                           	opt stack 0
   689  001006                     _processOpcode:
   690                           	opt stack 28
   691                           
   692                           ;emulator.c: 241: update_immData();
   693                           
   694                           ;incstack = 0
   695  001006  ECFE  F00E         	call	_update_immData	;wreg free
   696                           
   697                           ;emulator.c: 244: uint8_t regA_temp8 = regA;
   698  00100A  C01D  F00E         	movff	_regA,processOpcode@regA_temp8
   699                           
   700                           ;emulator.c: 245: uint16_t regA_temp16 = (uint16_t) regA;
   701  00100E  C01D  F00F         	movff	_regA,processOpcode@regA_temp16
   702  001012  6A10               	clrf	processOpcode@regA_temp16+1,c
   703                           
   704                           ;emulator.c: 246: uint16_t regPC_temp = regPC;
   705  001014  C018  F00C         	movff	_regPC,processOpcode@regPC_temp
   706  001018  C019  F00D         	movff	_regPC+1,processOpcode@regPC_temp+1
   707                           
   708                           ;emulator.c: 247: uint8_t carriedBit;
   709                           ;emulator.c: 250: switch (virtualMemory[regPC])
   710  00101C  D356               	goto	l1771
   711  00101E                     l1435:
   712                           
   713                           ;emulator.c: 258: setFbits(0, 1);
   714  00101E  6E0A               	movwf	??_processOpcode& (0+255),c
   715  001020  0E01               	movlw	1
   716  001022  6E01               	movwf	setFbits@value,c
   717  001024  500A               	movf	??_processOpcode& (0+255),w,c
   718  001026  0E00               	movlw	0
   719  001028  ECE1  F00D         	call	_setFbits
   720                           
   721                           ;emulator.c: 259: break;
   722  00102C  EF38  F00C         	goto	l1773
   723  001030                     l1437:
   724                           
   725                           ;emulator.c: 262: setFbits(0, 0);
   726  001030  6E0A               	movwf	??_processOpcode& (0+255),c
   727  001032  0E00               	movlw	0
   728  001034  6E01               	movwf	setFbits@value,c
   729  001036  500A               	movf	??_processOpcode& (0+255),w,c
   730  001038  0E00               	movlw	0
   731  00103A  ECE1  F00D         	call	_setFbits
   732                           
   733                           ;emulator.c: 263: break;
   734  00103E  EF38  F00C         	goto	l1773
   735  001042                     l1439:
   736                           
   737                           ;emulator.c: 266: haltFlag = 1;
   738  001042  6E0A               	movwf	??_processOpcode& (0+255),c
   739  001044  0E01               	movlw	1
   740  001046  6E1A               	movwf	_haltFlag,c
   741  001048  500A               	movf	??_processOpcode& (0+255),w,c
   742                           
   743                           ;emulator.c: 267: break;
   744  00104A  EF38  F00C         	goto	l1773
   745  00104E                     l1441:
   746                           
   747                           ;emulator.c: 273: regA = getPortData(regB);
   748  00104E  501E               	movf	_regB,w,c
   749  001050  ECE1  F010         	call	_getPortData
   750  001054  D23D               	goto	L10
   751  001056                     l1443:
   752                           
   753                           ;emulator.c: 277: regA = getPortData(immData_1);
   754  001056  501B               	movf	_immData_1,w,c
   755  001058  ECE1  F010         	call	_getPortData
   756  00105C  6E1D               	movwf	_regA,c
   757  00105E  D2FF               	goto	L20
   758  001060                     l1447:
   759                           
   760                           ;emulator.c: 282: setPortData(regB, regA);
   761  001060  C01D  F005         	movff	_regA,setPortData@outputData
   762  001064  501E               	movf	_regB,w,c
   763  001066  ECAA  F00E         	call	_setPortData
   764                           
   765                           ;emulator.c: 283: break;
   766  00106A  EF38  F00C         	goto	l1773
   767  00106E                     l1449:
   768                           
   769                           ;emulator.c: 286: setPortData(immData_1, regA);
   770  00106E  C01D  F005         	movff	_regA,setPortData@outputData
   771  001072  501B               	movf	_immData_1,w,c
   772  001074  ECAA  F00E         	call	_setPortData
   773  001078  D2F2               	goto	L20
   774  00107A                     l1453:
   775                           
   776                           ;emulator.c: 291: setPortData(immData_1, immData_2);
   777  00107A  C01C  F005         	movff	_immData_2,setPortData@outputData
   778  00107E  501B               	movf	_immData_1,w,c
   779  001080  ECAA  F00E         	call	_setPortData
   780  001084  D11E               	goto	l1581
   781  001086                     l1457:
   782                           
   783                           ;emulator.c: 299: regA = virtualMemory[regMX];
   784  001086  0E00               	movlw	low _virtualMemory
   785  001088  2416               	addwf	_regMX,w,c
   786  00108A  6ED9               	movwf	fsr2l,c
   787  00108C  0E02               	movlw	high _virtualMemory
   788  00108E  2017               	addwfc	_regMX+1,w,c
   789  001090  D21D               	goto	L23
   790  001092                     l1459:
   791                           
   792                           ;emulator.c: 303: regA = getMXbits(0);
   793  001092  0E00               	movlw	0
   794  001094  ECD4  F010         	call	_getMXbits
   795  001098  D21B               	goto	L10
   796  00109A                     l1461:
   797                           
   798                           ;emulator.c: 307: regA = getMXbits(1);
   799  00109A  0E01               	movlw	1
   800  00109C  ECD4  F010         	call	_getMXbits
   801  0010A0  D217               	goto	L10
   802  0010A2                     l275:
   803                           
   804                           ;emulator.c: 311: regA = regSP;
   805  0010A2  C020  F01D         	movff	_regSP,_regA
   806                           
   807                           ;emulator.c: 312: break;
   808  0010A6  D3E4               	goto	l1773
   809  0010A8                     l276:
   810                           
   811                           ;emulator.c: 315: regA = regF;
   812  0010A8  C01F  F01D         	movff	_regF,_regA
   813                           
   814                           ;emulator.c: 316: break;
   815  0010AC  D3E1               	goto	l1773
   816  0010AE                     l277:
   817                           
   818                           ;emulator.c: 319: regA = regB;
   819  0010AE  C01E  F01D         	movff	_regB,_regA
   820                           
   821                           ;emulator.c: 320: break;
   822  0010B2  D3DE               	goto	l1773
   823  0010B4                     l1463:
   824                           
   825                           ;emulator.c: 332: virtualMemory[regMX] = regA;
   826  0010B4  0E00               	movlw	low _virtualMemory
   827  0010B6  2416               	addwf	_regMX,w,c
   828  0010B8  6ED9               	movwf	fsr2l,c
   829  0010BA  0E02               	movlw	high _virtualMemory
   830  0010BC  2017               	addwfc	_regMX+1,w,c
   831  0010BE  6EDA               	movwf	fsr2h,c
   832  0010C0  C01D  FFDF         	movff	_regA,indf2
   833                           
   834                           ;emulator.c: 334: break;
   835  0010C4  D3D5               	goto	l1773
   836  0010C6                     l1465:
   837                           
   838                           ;emulator.c: 337: setMXbits(0, regA);
   839  0010C6  C01D  F001         	movff	_regA,setMXbits@value
   840  0010CA  0E00               	movlw	0
   841  0010CC  ECFB  F00F         	call	_setMXbits
   842                           
   843                           ;emulator.c: 338: break;
   844  0010D0  D3CF               	goto	l1773
   845  0010D2                     l1467:
   846                           
   847                           ;emulator.c: 341: setMXbits(1, regA);
   848  0010D2  C01D  F001         	movff	_regA,setMXbits@value
   849  0010D6  0E01               	movlw	1
   850  0010D8  ECFB  F00F         	call	_setMXbits
   851                           
   852                           ;emulator.c: 342: break;
   853  0010DC  D3C9               	goto	l1773
   854  0010DE                     l281:
   855                           
   856                           ;emulator.c: 345: regSP = regA;
   857  0010DE  C01D  F020         	movff	_regA,_regSP
   858                           
   859                           ;emulator.c: 346: break;
   860  0010E2  D3C6               	goto	l1773
   861  0010E4                     l282:
   862                           
   863                           ;emulator.c: 349: regB = regA;
   864  0010E4  C01D  F01E         	movff	_regA,_regB
   865                           
   866                           ;emulator.c: 350: break;
   867  0010E8  D3C3               	goto	l1773
   868  0010EA                     l283:
   869                           
   870                           ;emulator.c: 353: regA = immData_1;
   871  0010EA  C01B  F01D         	movff	_immData_1,_regA
   872  0010EE  D2B7               	goto	L20
   873  0010F0                     l284:
   874                           
   875                           ;emulator.c: 359: regA_temp8 = regA;
   876  0010F0  C01D  F00E         	movff	_regA,processOpcode@regA_temp8
   877                           
   878                           ;emulator.c: 360: regA = regB;
   879  0010F4  C01E  F01D         	movff	_regB,_regA
   880                           
   881                           ;emulator.c: 361: regB = regA_temp8;
   882  0010F8  C00E  F01E         	movff	processOpcode@regA_temp8,_regB
   883                           
   884                           ;emulator.c: 362: break;
   885  0010FC  D3B9               	goto	l1773
   886  0010FE                     l1471:
   887                           
   888                           ;emulator.c: 368: regA &= regB;
   889  0010FE  501E               	movf	_regB,w,c
   890  001100  161D               	andwf	_regA,f,c
   891                           
   892                           ;emulator.c: 369: break;
   893  001102  D3B6               	goto	l1773
   894  001104                     l1473:
   895                           
   896                           ;emulator.c: 373: regA = regA & regB;
   897  001104  501D               	movf	_regA,w,c
   898  001106  141E               	andwf	_regB,w,c
   899  001108  D00B               	goto	L9
   900  00110A                     l1477:
   901                           
   902                           ;emulator.c: 378: regA |= regB;
   903  00110A  501E               	movf	_regB,w,c
   904  00110C  121D               	iorwf	_regA,f,c
   905                           
   906                           ;emulator.c: 379: break;
   907  00110E  D3B0               	goto	l1773
   908  001110                     l1479:
   909                           
   910                           ;emulator.c: 383: regA = regA | regB;
   911  001110  501D               	movf	_regA,w,c
   912  001112  101E               	iorwf	_regB,w,c
   913  001114  D005               	goto	L9
   914  001116                     l1483:
   915                           
   916                           ;emulator.c: 388: regA ^= regB;
   917  001116  501E               	movf	_regB,w,c
   918  001118  1A1D               	xorwf	_regA,f,c
   919                           
   920                           ;emulator.c: 389: break;
   921  00111A  D3AA               	goto	l1773
   922  00111C                     l1485:
   923                           
   924                           ;emulator.c: 393: regA = regA ^ regB;
   925  00111C  501D               	movf	_regA,w,c
   926  00111E  181E               	xorwf	_regB,w,c
   927  001120                     L9:
   928  001120  6E1D               	movwf	_regA,c
   929  001122                     l1489:
   930                           
   931                           ;emulator.c: 398: regA =~ regA;
   932  001122  1E1D               	comf	_regA,f,c
   933                           
   934                           ;emulator.c: 399: break;
   935  001124  D3A5               	goto	l1773
   936  001126                     l292:
   937                           
   938                           ;emulator.c: 403: regA_temp8 = regA;
   939  001126  C01D  F00E         	movff	_regA,processOpcode@regA_temp8
   940                           
   941                           ;emulator.c: 404: regA_temp8 >>= 7;
   942  00112A  360E               	rlcf	processOpcode@regA_temp8,f,c
   943  00112C  6A0E               	clrf	processOpcode@regA_temp8,c
   944  00112E  360E               	rlcf	processOpcode@regA_temp8,f,c
   945                           
   946                           ;emulator.c: 405: if (regA_temp8 == 1) setFbits(0, 1);
   947  001130  040E               	decf	processOpcode@regA_temp8,w,c
   948  001132  A4D8               	btfss	status,2,c
   949  001134  D008               	goto	l1495
   950  001136  6E0A               	movwf	??_processOpcode& (0+255),c
   951  001138  0E01               	movlw	1
   952  00113A  6E01               	movwf	setFbits@value,c
   953  00113C  500A               	movf	??_processOpcode& (0+255),w,c
   954  00113E  0E00               	movlw	0
   955  001140  ECE1  F00D         	call	_setFbits
   956  001144  D007               	goto	l1497
   957  001146                     l1495:
   958                           
   959                           ;emulator.c: 406: else setFbits(0, 0);
   960  001146  6E0A               	movwf	??_processOpcode& (0+255),c
   961  001148  0E00               	movlw	0
   962  00114A  6E01               	movwf	setFbits@value,c
   963  00114C  500A               	movf	??_processOpcode& (0+255),w,c
   964  00114E  0E00               	movlw	0
   965  001150  ECE1  F00D         	call	_setFbits
   966  001154                     l1497:
   967                           
   968                           ;emulator.c: 409: regA <<= 1;
   969  001154  90D8               	bcf	status,0,c
   970  001156  361D               	rlcf	_regA,f,c
   971                           
   972                           ;emulator.c: 410: break;
   973  001158  D38B               	goto	l1773
   974  00115A                     l295:
   975                           
   976                           ;emulator.c: 414: regA_temp8 = regA;
   977  00115A  C01D  F00E         	movff	_regA,processOpcode@regA_temp8
   978                           
   979                           ;emulator.c: 415: regA_temp8 <<= 7;
   980  00115E  320E               	rrcf	processOpcode@regA_temp8,f,c
   981  001160  6A0E               	clrf	processOpcode@regA_temp8,c
   982  001162  320E               	rrcf	processOpcode@regA_temp8,f,c
   983                           
   984                           ;emulator.c: 416: regA_temp8 >>= 7;
   985  001164  360E               	rlcf	processOpcode@regA_temp8,f,c
   986  001166  6A0E               	clrf	processOpcode@regA_temp8,c
   987  001168  360E               	rlcf	processOpcode@regA_temp8,f,c
   988                           
   989                           ;emulator.c: 417: if (regA_temp8 == 1) setFbits(0, 1);
   990  00116A  040E               	decf	processOpcode@regA_temp8,w,c
   991  00116C  A4D8               	btfss	status,2,c
   992  00116E  D008               	goto	l1503
   993  001170  6E0A               	movwf	??_processOpcode& (0+255),c
   994  001172  0E01               	movlw	1
   995  001174  6E01               	movwf	setFbits@value,c
   996  001176  500A               	movf	??_processOpcode& (0+255),w,c
   997  001178  0E00               	movlw	0
   998  00117A  ECE1  F00D         	call	_setFbits
   999  00117E  D007               	goto	l1505
  1000  001180                     l1503:
  1001                           
  1002                           ;emulator.c: 418: else setFbits(0, 0);
  1003  001180  6E0A               	movwf	??_processOpcode& (0+255),c
  1004  001182  0E00               	movlw	0
  1005  001184  6E01               	movwf	setFbits@value,c
  1006  001186  500A               	movf	??_processOpcode& (0+255),w,c
  1007  001188  0E00               	movlw	0
  1008  00118A  ECE1  F00D         	call	_setFbits
  1009  00118E                     l1505:
  1010                           
  1011                           ;emulator.c: 421: regA >>= 1;
  1012  00118E  90D8               	bcf	status,0,c
  1013  001190  321D               	rrcf	_regA,f,c
  1014                           
  1015                           ;emulator.c: 422: break;
  1016  001192  D36E               	goto	l1773
  1017  001194                     l298:
  1018                           
  1019                           ;emulator.c: 426: carriedBit = regA;
  1020  001194  C01D  F00B         	movff	_regA,processOpcode@carriedBit
  1021                           
  1022                           ;emulator.c: 427: carriedBit >>= 7;
  1023  001198  360B               	rlcf	processOpcode@carriedBit,f,c
  1024  00119A  6A0B               	clrf	processOpcode@carriedBit,c
  1025  00119C  360B               	rlcf	processOpcode@carriedBit,f,c
  1026                           
  1027                           ;emulator.c: 430: regA <<= 1;
  1028  00119E  90D8               	bcf	status,0,c
  1029  0011A0  361D               	rlcf	_regA,f,c
  1030                           
  1031                           ;emulator.c: 433: regA = regA + carriedBit;
  1032  0011A2  501D               	movf	_regA,w,c
  1033  0011A4  240B               	addwf	processOpcode@carriedBit,w,c
  1034  0011A6  D194               	goto	L10
  1035  0011A8                     l299:
  1036                           
  1037                           ;emulator.c: 438: carriedBit = regA;
  1038  0011A8  C01D  F00B         	movff	_regA,processOpcode@carriedBit
  1039                           
  1040                           ;emulator.c: 439: carriedBit <<= 7;
  1041  0011AC  320B               	rrcf	processOpcode@carriedBit,f,c
  1042  0011AE  6A0B               	clrf	processOpcode@carriedBit,c
  1043  0011B0  320B               	rrcf	processOpcode@carriedBit,f,c
  1044                           
  1045                           ;emulator.c: 442: regA >>= 1;
  1046  0011B2  90D8               	bcf	status,0,c
  1047  0011B4  321D               	rrcf	_regA,f,c
  1048                           
  1049                           ;emulator.c: 445: regA += carriedBit;
  1050  0011B6  500B               	movf	processOpcode@carriedBit,w,c
  1051  0011B8  D1E9               	goto	L11
  1052  0011BA                     l1511:
  1053                           
  1054                           ;emulator.c: 450: if (regA == regB) setFbits(3, 1);
  1055  0011BA  501E               	movf	_regB,w,c
  1056  0011BC  621D               	cpfseq	_regA,c
  1057  0011BE  D008               	goto	l1515
  1058  0011C0  6E0A               	movwf	??_processOpcode& (0+255),c
  1059  0011C2  0E01               	movlw	1
  1060  0011C4  6E01               	movwf	setFbits@value,c
  1061  0011C6  500A               	movf	??_processOpcode& (0+255),w,c
  1062  0011C8  0E03               	movlw	3
  1063  0011CA  ECE1  F00D         	call	_setFbits
  1064  0011CE  D007               	goto	l1517
  1065  0011D0                     l1515:
  1066                           
  1067                           ;emulator.c: 451: else setFbits(3, 0);
  1068  0011D0  6E0A               	movwf	??_processOpcode& (0+255),c
  1069  0011D2  0E00               	movlw	0
  1070  0011D4  6E01               	movwf	setFbits@value,c
  1071  0011D6  500A               	movf	??_processOpcode& (0+255),w,c
  1072  0011D8  0E03               	movlw	3
  1073  0011DA  ECE1  F00D         	call	_setFbits
  1074  0011DE                     l1517:
  1075                           
  1076                           ;emulator.c: 454: if (regA < regB) setFbits(2, 1);
  1077  0011DE  501E               	movf	_regB,w,c
  1078  0011E0  5C1D               	subwf	_regA,w,c
  1079  0011E2  B0D8               	btfsc	status,0,c
  1080  0011E4  D008               	goto	l1521
  1081  0011E6  6E0A               	movwf	??_processOpcode& (0+255),c
  1082  0011E8  0E01               	movlw	1
  1083  0011EA  6E01               	movwf	setFbits@value,c
  1084  0011EC  500A               	movf	??_processOpcode& (0+255),w,c
  1085  0011EE  0E02               	movlw	2
  1086  0011F0  ECE1  F00D         	call	_setFbits
  1087  0011F4  D007               	goto	l1523
  1088  0011F6                     l1521:
  1089                           
  1090                           ;emulator.c: 455: else setFbits(2, 0);
  1091  0011F6  6E0A               	movwf	??_processOpcode& (0+255),c
  1092  0011F8  0E00               	movlw	0
  1093  0011FA  6E01               	movwf	setFbits@value,c
  1094  0011FC  500A               	movf	??_processOpcode& (0+255),w,c
  1095  0011FE  0E02               	movlw	2
  1096  001200  ECE1  F00D         	call	_setFbits
  1097  001204                     l1523:
  1098                           
  1099                           ;emulator.c: 458: if (regA > regB) setFbits(1, 1);
  1100  001204  501D               	movf	_regA,w,c
  1101  001206  5C1E               	subwf	_regB,w,c
  1102  001208  B0D8               	btfsc	status,0,c
  1103  00120A  D008               	goto	l1527
  1104  00120C  6E0A               	movwf	??_processOpcode& (0+255),c
  1105  00120E  0E01               	movlw	1
  1106  001210  6E01               	movwf	setFbits@value,c
  1107  001212  500A               	movf	??_processOpcode& (0+255),w,c
  1108  001214  0E01               	movlw	1
  1109  001216  ECE1  F00D         	call	_setFbits
  1110  00121A  D32A               	goto	l1773
  1111  00121C                     l1527:
  1112                           
  1113                           ;emulator.c: 459: else setFbits(1, 0);
  1114  00121C  6E0A               	movwf	??_processOpcode& (0+255),c
  1115  00121E  0E00               	movlw	0
  1116  001220  6E01               	movwf	setFbits@value,c
  1117  001222  500A               	movf	??_processOpcode& (0+255),w,c
  1118  001224  0E01               	movlw	1
  1119  001226  ECE1  F00D         	call	_setFbits
  1120  00122A  D322               	goto	l1773
  1121  00122C                     l1531:
  1122                           
  1123                           ;emulator.c: 473: regPC = immData_toPointer();
  1124  00122C  ECB7  F010         	call	_immData_toPointer	;wreg free
  1125  001230  D021               	goto	L30
  1126  001232                     l1535:
  1127                           
  1128                           ;emulator.c: 479: if (getFbits(3) == 1) regPC = regMX;
  1129  001232  0E03               	movlw	3
  1130  001234  ECC8  F00F         	call	_getFbits
  1131  001238                     L34:
  1132  001238  6E0A               	movwf	??_processOpcode& (0+255),c
  1133  00123A  040A               	decf	??_processOpcode,w,c
  1134  00123C  D024               	goto	L31
  1135  00123E                     L27:
  1136  00123E  C016  F018         	movff	_regMX,_regPC
  1137  001242  C017  F019         	movff	_regMX+1,_regPC+1
  1138  001246  D0D1               	goto	L15
  1139  001248                     l1541:
  1140                           
  1141                           ;emulator.c: 485: if (getFbits(3) == 1) regPC = immData_toPointer();
  1142  001248  0E03               	movlw	3
  1143  00124A  ECC8  F00F         	call	_getFbits
  1144  00124E  6E0A               	movwf	??_processOpcode& (0+255),c
  1145  001250  040A               	decf	??_processOpcode,w,c
  1146  001252  A4D8               	btfss	status,2,c
  1147  001254  D0CA               	goto	L15
  1148  001256  ECB7  F010         	call	_immData_toPointer	;wreg free
  1149  00125A  D00C               	goto	L30
  1150  00125C                     l1547:
  1151                           
  1152                           ;emulator.c: 491: if (getFbits(3) == 0) regPC = regMX;
  1153  00125C  0E03               	movlw	3
  1154  00125E  ECC8  F00F         	call	_getFbits
  1155  001262  D045               	goto	L33
  1156  001264                     l1553:
  1157                           
  1158                           ;emulator.c: 497: if (getFbits(3) == 0) regPC = immData_toPointer();
  1159  001264  0E03               	movlw	3
  1160  001266  ECC8  F00F         	call	_getFbits
  1161  00126A  0900               	iorlw	0
  1162  00126C  A4D8               	btfss	status,2,c
  1163  00126E  D0BD               	goto	L15
  1164  001270  ECB7  F010         	call	_immData_toPointer	;wreg free
  1165  001274                     L30:
  1166  001274  C001  F018         	movff	?_immData_toPointer,_regPC
  1167  001278  C002  F019         	movff	?_immData_toPointer+1,_regPC+1
  1168  00127C  D0B6               	goto	L15
  1169  00127E                     l1559:
  1170                           
  1171                           ;emulator.c: 503: if (getFbits(1) == 1) regPC = regMX;
  1172  00127E  0E01               	movlw	1
  1173  001280  ECC8  F00F         	call	_getFbits
  1174  001284  D7D9               	goto	L34
  1175  001286                     L31:
  1176  001286  A4D8               	btfss	status,2,c
  1177  001288  D0B0               	goto	L15
  1178  00128A  D7D9               	goto	L27
  1179  00128C                     l1565:
  1180                           
  1181                           ;emulator.c: 509: if (getFbits(1) == 1) regPC = immData_toPointer();
  1182  00128C  0E01               	movlw	1
  1183  00128E  ECC8  F00F         	call	_getFbits
  1184  001292  6E0A               	movwf	??_processOpcode& (0+255),c
  1185  001294  040A               	decf	??_processOpcode,w,c
  1186  001296  A4D8               	btfss	status,2,c
  1187  001298  D0A8               	goto	L15
  1188  00129A  ECB7  F010         	call	_immData_toPointer	;wreg free
  1189  00129E  D7EA               	goto	L30
  1190  0012A0                     l1571:
  1191                           
  1192                           ;emulator.c: 515: if (getFbits(2) == 1) regPC = regMX;
  1193  0012A0  0E02               	movlw	2
  1194  0012A2  ECC8  F00F         	call	_getFbits
  1195  0012A6  D7C8               	goto	L34
  1196  0012A8                     l1577:
  1197                           
  1198                           ;emulator.c: 521: if (getFbits(2) == 1) regPC = immData_toPointer();
  1199  0012A8  0E02               	movlw	2
  1200  0012AA  ECC8  F00F         	call	_getFbits
  1201  0012AE  6E0A               	movwf	??_processOpcode& (0+255),c
  1202  0012B0  040A               	decf	??_processOpcode,w,c
  1203  0012B2  A4D8               	btfss	status,2,c
  1204  0012B4  D006               	goto	l1581
  1205  0012B6  ECB7  F010         	call	_immData_toPointer	;wreg free
  1206  0012BA  C001  F018         	movff	?_immData_toPointer,_regPC
  1207  0012BE  C002  F019         	movff	?_immData_toPointer+1,_regPC+1
  1208  0012C2                     l1581:
  1209                           
  1210                           ;emulator.c: 522: regPC += 2;
  1211  0012C2  0E02               	movlw	2
  1212  0012C4  2618               	addwf	_regPC,f,c
  1213  0012C6  0E00               	movlw	0
  1214  0012C8  2219               	addwfc	_regPC+1,f,c
  1215                           
  1216                           ;emulator.c: 523: break;
  1217  0012CA  D2D2               	goto	l1773
  1218  0012CC                     l1583:
  1219                           
  1220                           ;emulator.c: 526: if (getFbits(0) == 1) regPC = regMX;
  1221  0012CC  0E00               	movlw	0
  1222  0012CE  ECC8  F00F         	call	_getFbits
  1223  0012D2  D7B2               	goto	L34
  1224  0012D4                     l1589:
  1225                           
  1226                           ;emulator.c: 532: if (getFbits(0) == 1) regPC = immData_toPointer();
  1227  0012D4  0E00               	movlw	0
  1228  0012D6  ECC8  F00F         	call	_getFbits
  1229  0012DA  6E0A               	movwf	??_processOpcode& (0+255),c
  1230  0012DC  040A               	decf	??_processOpcode,w,c
  1231  0012DE  A4D8               	btfss	status,2,c
  1232  0012E0  D084               	goto	L15
  1233  0012E2  ECB7  F010         	call	_immData_toPointer	;wreg free
  1234  0012E6  D7C6               	goto	L30
  1235  0012E8                     l1595:
  1236                           
  1237                           ;emulator.c: 538: if (getFbits(0) == 0) regPC = regMX;
  1238  0012E8  0E00               	movlw	0
  1239  0012EA  ECC8  F00F         	call	_getFbits
  1240  0012EE                     L33:
  1241  0012EE  0900               	iorlw	0
  1242  0012F0  D7CA               	goto	L31
  1243  0012F2                     l1601:
  1244                           
  1245                           ;emulator.c: 544: if (getFbits(0) == 0) regPC = immData_toPointer();
  1246  0012F2  0E00               	movlw	0
  1247  0012F4  ECC8  F00F         	call	_getFbits
  1248  0012F8  0900               	iorlw	0
  1249  0012FA  A4D8               	btfss	status,2,c
  1250  0012FC  D076               	goto	L15
  1251  0012FE  ECB7  F010         	call	_immData_toPointer	;wreg free
  1252  001302  D7B8               	goto	L30
  1253  001304                     l1607:
  1254                           
  1255                           ;emulator.c: 551: regPC++;
  1256  001304  4A18               	infsnz	_regPC,f,c
  1257  001306  2A19               	incf	_regPC+1,f,c
  1258                           
  1259                           ;emulator.c: 552: regPC_temp = regPC;
  1260  001308  C018  F00C         	movff	_regPC,processOpcode@regPC_temp
  1261  00130C  C019  F00D         	movff	_regPC+1,processOpcode@regPC_temp+1
  1262                           
  1263                           ;emulator.c: 553: regPC_temp >>= 8;
  1264  001310  500D               	movf	processOpcode@regPC_temp+1,w,c
  1265  001312  6E0C               	movwf	processOpcode@regPC_temp,c
  1266  001314  6A0D               	clrf	processOpcode@regPC_temp+1,c
  1267                           
  1268                           ;emulator.c: 554: stack[regSP] = (uint8_t) regPC_temp;
  1269  001316  5020               	movf	_regSP,w,c
  1270  001318  0D01               	mullw	1
  1271  00131A  0101               	movlb	1	; () banked
  1272  00131C  0E00               	movlw	low _stack
  1273  00131E  24F3               	addwf	prodl,w,c
  1274  001320  6ED9               	movwf	fsr2l,c
  1275  001322  0101               	movlb	1	; () banked
  1276  001324  0E01               	movlw	high _stack
  1277  001326  20F4               	addwfc	prodh,w,c
  1278  001328  6EDA               	movwf	fsr2h,c
  1279  00132A  C00C  FFDF         	movff	processOpcode@regPC_temp,indf2
  1280                           
  1281                           ; BSR set to: 1
  1282                           ;emulator.c: 555: regSP++;
  1283  00132E  2A20               	incf	_regSP,f,c
  1284                           
  1285                           ; BSR set to: 1
  1286                           ;emulator.c: 556: stack[regSP] = (uint8_t) regPC;
  1287  001330  5020               	movf	_regSP,w,c
  1288  001332  0D01               	mullw	1
  1289  001334  0101               	movlb	1	; () banked
  1290  001336  0E00               	movlw	low _stack
  1291  001338  24F3               	addwf	prodl,w,c
  1292  00133A  6ED9               	movwf	fsr2l,c
  1293  00133C  0101               	movlb	1	; () banked
  1294  00133E  0E01               	movlw	high _stack
  1295  001340  20F4               	addwfc	prodh,w,c
  1296  001342  6EDA               	movwf	fsr2h,c
  1297  001344  C018  FFDF         	movff	_regPC,indf2
  1298                           
  1299                           ; BSR set to: 1
  1300                           ;emulator.c: 557: regSP++;
  1301  001348  2A20               	incf	_regSP,f,c
  1302  00134A  D779               	goto	L27
  1303  00134C                     l1625:
  1304                           
  1305                           ;emulator.c: 565: regPC += 3;
  1306  00134C  0E03               	movlw	3
  1307  00134E  2618               	addwf	_regPC,f,c
  1308  001350  0E00               	movlw	0
  1309  001352  2219               	addwfc	_regPC+1,f,c
  1310                           
  1311                           ;emulator.c: 566: regPC_temp = regPC;
  1312  001354  C018  F00C         	movff	_regPC,processOpcode@regPC_temp
  1313  001358  C019  F00D         	movff	_regPC+1,processOpcode@regPC_temp+1
  1314                           
  1315                           ;emulator.c: 567: regPC_temp >>= 8;
  1316  00135C  500D               	movf	processOpcode@regPC_temp+1,w,c
  1317  00135E  6E0C               	movwf	processOpcode@regPC_temp,c
  1318  001360  6A0D               	clrf	processOpcode@regPC_temp+1,c
  1319                           
  1320                           ;emulator.c: 568: stack[regSP] = (uint8_t) regPC_temp;
  1321  001362  5020               	movf	_regSP,w,c
  1322  001364  0D01               	mullw	1
  1323  001366  0101               	movlb	1	; () banked
  1324  001368  0E00               	movlw	low _stack
  1325  00136A  24F3               	addwf	prodl,w,c
  1326  00136C  6ED9               	movwf	fsr2l,c
  1327  00136E  0101               	movlb	1	; () banked
  1328  001370  0E01               	movlw	high _stack
  1329  001372  20F4               	addwfc	prodh,w,c
  1330  001374  6EDA               	movwf	fsr2h,c
  1331  001376  C00C  FFDF         	movff	processOpcode@regPC_temp,indf2
  1332                           
  1333                           ; BSR set to: 1
  1334                           ;emulator.c: 569: regSP++;
  1335  00137A  2A20               	incf	_regSP,f,c
  1336                           
  1337                           ; BSR set to: 1
  1338                           ;emulator.c: 570: stack[regSP] = (uint8_t) regPC;
  1339  00137C  5020               	movf	_regSP,w,c
  1340  00137E  0D01               	mullw	1
  1341  001380  0101               	movlb	1	; () banked
  1342  001382  0E00               	movlw	low _stack
  1343  001384  24F3               	addwf	prodl,w,c
  1344  001386  6ED9               	movwf	fsr2l,c
  1345  001388  0101               	movlb	1	; () banked
  1346  00138A  0E01               	movlw	high _stack
  1347  00138C  20F4               	addwfc	prodh,w,c
  1348  00138E  6EDA               	movwf	fsr2h,c
  1349  001390  C018  FFDF         	movff	_regPC,indf2
  1350                           
  1351                           ; BSR set to: 1
  1352                           ;emulator.c: 571: regSP++;
  1353  001394  2A20               	incf	_regSP,f,c
  1354                           
  1355                           ; BSR set to: 1
  1356                           ;emulator.c: 572: regPC = immData_toPointer();
  1357  001396  ECB7  F010         	call	_immData_toPointer	;wreg free
  1358  00139A  D76C               	goto	L30
  1359  00139C                     l1643:
  1360                           
  1361                           ;emulator.c: 578: regSP--;
  1362  00139C  0620               	decf	_regSP,f,c
  1363                           
  1364                           ;emulator.c: 579: regPC = (uint16_t) stack[regSP];
  1365  00139E  5020               	movf	_regSP,w,c
  1366  0013A0  0D01               	mullw	1
  1367  0013A2  0101               	movlb	1	; () banked
  1368  0013A4  0E00               	movlw	low _stack
  1369  0013A6  24F3               	addwf	prodl,w,c
  1370  0013A8  6ED9               	movwf	fsr2l,c
  1371  0013AA  0101               	movlb	1	; () banked
  1372  0013AC  0E01               	movlw	high _stack
  1373  0013AE  20F4               	addwfc	prodh,w,c
  1374  0013B0  6EDA               	movwf	fsr2h,c
  1375  0013B2  50DF               	movf	indf2,w,c
  1376  0013B4  6E0A               	movwf	??_processOpcode& (0+255),c
  1377  0013B6  500A               	movf	??_processOpcode,w,c
  1378  0013B8  6E18               	movwf	_regPC,c
  1379  0013BA  6A19               	clrf	_regPC+1,c
  1380                           
  1381                           ; BSR set to: 1
  1382                           ;emulator.c: 580: regSP--;
  1383  0013BC  0620               	decf	_regSP,f,c
  1384                           
  1385                           ;emulator.c: 581: regPC_temp = (uint16_t) stack[regSP];
  1386  0013BE  5020               	movf	_regSP,w,c
  1387  0013C0  0D01               	mullw	1
  1388  0013C2  0101               	movlb	1	; () banked
  1389  0013C4  0E00               	movlw	low _stack
  1390  0013C6  24F3               	addwf	prodl,w,c
  1391  0013C8  6ED9               	movwf	fsr2l,c
  1392  0013CA  0101               	movlb	1	; () banked
  1393  0013CC  0E01               	movlw	high _stack
  1394  0013CE  20F4               	addwfc	prodh,w,c
  1395  0013D0  6EDA               	movwf	fsr2h,c
  1396  0013D2  50DF               	movf	indf2,w,c
  1397  0013D4  6E0A               	movwf	??_processOpcode& (0+255),c
  1398  0013D6  500A               	movf	??_processOpcode,w,c
  1399  0013D8  6E0C               	movwf	processOpcode@regPC_temp,c
  1400  0013DA  6A0D               	clrf	processOpcode@regPC_temp+1,c
  1401                           
  1402                           ; BSR set to: 1
  1403                           ;emulator.c: 582: regPC_temp <<= 8;
  1404  0013DC  500C               	movf	processOpcode@regPC_temp,w,c
  1405  0013DE  6E0D               	movwf	processOpcode@regPC_temp+1,c
  1406  0013E0  6A0C               	clrf	processOpcode@regPC_temp,c
  1407                           
  1408                           ; BSR set to: 1
  1409                           ;emulator.c: 583: regPC += regPC_temp;
  1410  0013E2  500C               	movf	processOpcode@regPC_temp,w,c
  1411  0013E4  2618               	addwf	_regPC,f,c
  1412  0013E6  500D               	movf	processOpcode@regPC_temp+1,w,c
  1413  0013E8  2219               	addwfc	_regPC+1,f,c
  1414  0013EA                     L15:
  1415                           
  1416                           ; BSR set to: 1
  1417                           ;emulator.c: 585: regPC--;
  1418  0013EA  0618               	decf	_regPC,f,c
  1419  0013EC  A0D8               	btfss	status,0,c
  1420  0013EE  0619               	decf	_regPC+1,f,c
  1421                           
  1422                           ;emulator.c: 586: break;
  1423  0013F0  D23F               	goto	l1773
  1424  0013F2                     l1655:
  1425                           
  1426                           ;emulator.c: 592: stack[regSP] = regA;
  1427  0013F2  5020               	movf	_regSP,w,c
  1428  0013F4  0D01               	mullw	1
  1429  0013F6  0101               	movlb	1	; () banked
  1430  0013F8  0E00               	movlw	low _stack
  1431  0013FA  24F3               	addwf	prodl,w,c
  1432  0013FC  6ED9               	movwf	fsr2l,c
  1433  0013FE  0101               	movlb	1	; () banked
  1434  001400  0E01               	movlw	high _stack
  1435  001402  20F4               	addwfc	prodh,w,c
  1436  001404  6EDA               	movwf	fsr2h,c
  1437  001406  C01D  FFDF         	movff	_regA,indf2
  1438  00140A  D02A               	goto	L17
  1439  00140C                     l1659:
  1440                           
  1441                           ;emulator.c: 597: stack[regSP] = regB;
  1442  00140C  5020               	movf	_regSP,w,c
  1443  00140E  0D01               	mullw	1
  1444  001410  0101               	movlb	1	; () banked
  1445  001412  0E00               	movlw	low _stack
  1446  001414  24F3               	addwf	prodl,w,c
  1447  001416  6ED9               	movwf	fsr2l,c
  1448  001418  0101               	movlb	1	; () banked
  1449  00141A  0E01               	movlw	high _stack
  1450  00141C  20F4               	addwfc	prodh,w,c
  1451  00141E  6EDA               	movwf	fsr2h,c
  1452  001420  C01E  FFDF         	movff	_regB,indf2
  1453  001424  D01D               	goto	L17
  1454  001426                     l1663:
  1455                           
  1456                           ;emulator.c: 602: stack[regSP] = regMX;
  1457  001426  5020               	movf	_regSP,w,c
  1458  001428  0D01               	mullw	1
  1459  00142A  0101               	movlb	1	; () banked
  1460  00142C  0E00               	movlw	low _stack
  1461  00142E  24F3               	addwf	prodl,w,c
  1462  001430  6ED9               	movwf	fsr2l,c
  1463  001432  0101               	movlb	1	; () banked
  1464  001434  0E01               	movlw	high _stack
  1465  001436  20F4               	addwfc	prodh,w,c
  1466  001438  6EDA               	movwf	fsr2h,c
  1467  00143A  C016  FFDF         	movff	_regMX,indf2
  1468                           
  1469                           ; BSR set to: 1
  1470                           ;emulator.c: 603: regSP += 2;
  1471  00143E  0E02               	movlw	2
  1472  001440  2620               	addwf	_regSP,f,c
  1473                           
  1474                           ;emulator.c: 604: break;
  1475  001442  D216               	goto	l1773
  1476  001444                     l1667:
  1477                           
  1478                           ;emulator.c: 607: stack[regSP] = getMXbits(0);
  1479  001444  5020               	movf	_regSP,w,c
  1480  001446  0D01               	mullw	1
  1481  001448  0101               	movlb	1	; () banked
  1482  00144A  0E00               	movlw	low _stack
  1483  00144C  24F3               	addwf	prodl,w,c
  1484  00144E  6ED9               	movwf	fsr2l,c
  1485  001450  0101               	movlb	1	; () banked
  1486  001452  0E01               	movlw	high _stack
  1487  001454  20F4               	addwfc	prodh,w,c
  1488  001456  6EDA               	movwf	fsr2h,c
  1489  001458  0E00               	movlw	0
  1490  00145A  ECD4  F010         	call	_getMXbits
  1491  00145E  D00F               	goto	L18
  1492  001460                     L17:
  1493                           
  1494                           ;emulator.c: 608: regSP++;
  1495  001460  2A20               	incf	_regSP,f,c
  1496                           
  1497                           ;emulator.c: 609: break;
  1498  001462  D206               	goto	l1773
  1499  001464                     l1671:
  1500                           
  1501                           ;emulator.c: 612: stack[regSP] = getMXbits(1);
  1502  001464  5020               	movf	_regSP,w,c
  1503  001466  0D01               	mullw	1
  1504  001468  0101               	movlb	1	; () banked
  1505  00146A  0E00               	movlw	low _stack
  1506  00146C  24F3               	addwf	prodl,w,c
  1507  00146E  6ED9               	movwf	fsr2l,c
  1508  001470  0101               	movlb	1	; () banked
  1509  001472  0E01               	movlw	high _stack
  1510  001474  20F4               	addwfc	prodh,w,c
  1511  001476  6EDA               	movwf	fsr2h,c
  1512  001478  0E01               	movlw	1
  1513  00147A  ECD4  F010         	call	_getMXbits
  1514  00147E                     L18:
  1515  00147E  6EDF               	movwf	indf2,c
  1516  001480  D7EF               	goto	L17
  1517  001482                     l1675:
  1518                           
  1519                           ;emulator.c: 617: stack[regSP] = regF;
  1520  001482  5020               	movf	_regSP,w,c
  1521  001484  0D01               	mullw	1
  1522  001486  0101               	movlb	1	; () banked
  1523  001488  0E00               	movlw	low _stack
  1524  00148A  24F3               	addwf	prodl,w,c
  1525  00148C  6ED9               	movwf	fsr2l,c
  1526  00148E  0101               	movlb	1	; () banked
  1527  001490  0E01               	movlw	high _stack
  1528  001492  20F4               	addwfc	prodh,w,c
  1529  001494  6EDA               	movwf	fsr2h,c
  1530  001496  C01F  FFDF         	movff	_regF,indf2
  1531  00149A  D7E2               	goto	L17
  1532  00149C                     l1679:
  1533                           
  1534                           ;emulator.c: 622: stack[regSP] = immData_1;
  1535  00149C  5020               	movf	_regSP,w,c
  1536  00149E  0D01               	mullw	1
  1537  0014A0  0101               	movlb	1	; () banked
  1538  0014A2  0E00               	movlw	low _stack
  1539  0014A4  24F3               	addwf	prodl,w,c
  1540  0014A6  6ED9               	movwf	fsr2l,c
  1541  0014A8  0101               	movlb	1	; () banked
  1542  0014AA  0E01               	movlw	high _stack
  1543  0014AC  20F4               	addwfc	prodh,w,c
  1544  0014AE  6EDA               	movwf	fsr2h,c
  1545  0014B0  C01B  FFDF         	movff	_immData_1,indf2
  1546                           
  1547                           ; BSR set to: 1
  1548                           ;emulator.c: 623: regSP++;
  1549  0014B4  2A20               	incf	_regSP,f,c
  1550  0014B6  D0D3               	goto	L20
  1551  0014B8                     l1685:
  1552                           
  1553                           ;emulator.c: 628: regSP--;
  1554  0014B8  0620               	decf	_regSP,f,c
  1555                           
  1556                           ;emulator.c: 629: regA = stack[regSP];
  1557  0014BA  5020               	movf	_regSP,w,c
  1558  0014BC  0D01               	mullw	1
  1559  0014BE  0101               	movlb	1	; () banked
  1560  0014C0  0E00               	movlw	low _stack
  1561  0014C2  24F3               	addwf	prodl,w,c
  1562  0014C4  6ED9               	movwf	fsr2l,c
  1563  0014C6  0101               	movlb	1	; () banked
  1564  0014C8  0E01               	movlw	high _stack
  1565  0014CA  20F4               	addwfc	prodh,w,c
  1566  0014CC                     L23:
  1567  0014CC  6EDA               	movwf	fsr2h,c
  1568  0014CE  50DF               	movf	indf2,w,c
  1569  0014D0                     L10:
  1570  0014D0  6E1D               	movwf	_regA,c
  1571                           
  1572                           ;emulator.c: 630: break;
  1573  0014D2  D1CE               	goto	l1773
  1574  0014D4                     l1689:
  1575                           
  1576                           ;emulator.c: 633: regSP--;
  1577  0014D4  0620               	decf	_regSP,f,c
  1578                           
  1579                           ;emulator.c: 634: regB = stack[regSP];
  1580  0014D6  5020               	movf	_regSP,w,c
  1581  0014D8  0D01               	mullw	1
  1582  0014DA  0101               	movlb	1	; () banked
  1583  0014DC  0E00               	movlw	low _stack
  1584  0014DE  24F3               	addwf	prodl,w,c
  1585  0014E0  6ED9               	movwf	fsr2l,c
  1586  0014E2  0101               	movlb	1	; () banked
  1587  0014E4  0E01               	movlw	high _stack
  1588  0014E6  20F4               	addwfc	prodh,w,c
  1589  0014E8  6EDA               	movwf	fsr2h,c
  1590  0014EA  50DF               	movf	indf2,w,c
  1591  0014EC  6E1E               	movwf	_regB,c
  1592                           
  1593                           ;emulator.c: 635: break;
  1594  0014EE  D1C0               	goto	l1773
  1595  0014F0                     l1693:
  1596                           
  1597                           ;emulator.c: 638: regSP -= 2;
  1598  0014F0  0E02               	movlw	2
  1599  0014F2  5E20               	subwf	_regSP,f,c
  1600                           
  1601                           ;emulator.c: 639: regMX = stack[regSP];
  1602  0014F4  5020               	movf	_regSP,w,c
  1603  0014F6  0D01               	mullw	1
  1604  0014F8  0101               	movlb	1	; () banked
  1605  0014FA  0E00               	movlw	low _stack
  1606  0014FC  24F3               	addwf	prodl,w,c
  1607  0014FE  6ED9               	movwf	fsr2l,c
  1608  001500  0101               	movlb	1	; () banked
  1609  001502  0E01               	movlw	high _stack
  1610  001504  20F4               	addwfc	prodh,w,c
  1611  001506  6EDA               	movwf	fsr2h,c
  1612  001508  50DF               	movf	indf2,w,c
  1613  00150A  6E0A               	movwf	??_processOpcode& (0+255),c
  1614  00150C  500A               	movf	??_processOpcode,w,c
  1615  00150E  6E16               	movwf	_regMX,c
  1616  001510  6A17               	clrf	_regMX+1,c
  1617                           
  1618                           ;emulator.c: 640: break;
  1619  001512  D1AE               	goto	l1773
  1620  001514                     l1697:
  1621                           
  1622                           ;emulator.c: 643: regSP--;
  1623  001514  0620               	decf	_regSP,f,c
  1624                           
  1625                           ;emulator.c: 644: setMXbits(0, stack[regSP]);
  1626  001516  5020               	movf	_regSP,w,c
  1627  001518  0D01               	mullw	1
  1628  00151A  0101               	movlb	1	; () banked
  1629  00151C  0E00               	movlw	low _stack
  1630  00151E  24F3               	addwf	prodl,w,c
  1631  001520  6ED9               	movwf	fsr2l,c
  1632  001522  0101               	movlb	1	; () banked
  1633  001524  0E01               	movlw	high _stack
  1634  001526  20F4               	addwfc	prodh,w,c
  1635  001528  6EDA               	movwf	fsr2h,c
  1636  00152A  50DF               	movf	indf2,w,c
  1637  00152C  6E01               	movwf	setMXbits@value,c
  1638  00152E  0E00               	movlw	0
  1639  001530  ECFB  F00F         	call	_setMXbits
  1640                           
  1641                           ;emulator.c: 645: break;
  1642  001534  D19D               	goto	l1773
  1643  001536                     l1701:
  1644                           
  1645                           ;emulator.c: 648: regSP--;
  1646  001536  0620               	decf	_regSP,f,c
  1647                           
  1648                           ;emulator.c: 649: setMXbits(1, stack[regSP]);
  1649  001538  5020               	movf	_regSP,w,c
  1650  00153A  0D01               	mullw	1
  1651  00153C  0101               	movlb	1	; () banked
  1652  00153E  0E00               	movlw	low _stack
  1653  001540  24F3               	addwf	prodl,w,c
  1654  001542  6ED9               	movwf	fsr2l,c
  1655  001544  0101               	movlb	1	; () banked
  1656  001546  0E01               	movlw	high _stack
  1657  001548  20F4               	addwfc	prodh,w,c
  1658  00154A  6EDA               	movwf	fsr2h,c
  1659  00154C  50DF               	movf	indf2,w,c
  1660  00154E  6E01               	movwf	setMXbits@value,c
  1661  001550  0E01               	movlw	1
  1662  001552  ECFB  F00F         	call	_setMXbits
  1663                           
  1664                           ;emulator.c: 650: break;
  1665  001556  D18C               	goto	l1773
  1666  001558                     l1705:
  1667                           
  1668                           ;emulator.c: 657: regA_temp16 += (uint16_t) regB;
  1669  001558  501E               	movf	_regB,w,c
  1670  00155A  260F               	addwf	processOpcode@regA_temp16,f,c
  1671  00155C  0E00               	movlw	0
  1672  00155E  2210               	addwfc	processOpcode@regA_temp16+1,f,c
  1673                           
  1674                           ;emulator.c: 658: if (regA_temp16 > 255) setFbits(4, 1);
  1675  001560  0E00               	movlw	0
  1676  001562  5C0F               	subwf	processOpcode@regA_temp16,w,c
  1677  001564  0E01               	movlw	1
  1678  001566  5810               	subwfb	processOpcode@regA_temp16+1,w,c
  1679  001568  A0D8               	btfss	status,0,c
  1680  00156A  D008               	goto	l1709
  1681  00156C  6E0A               	movwf	??_processOpcode& (0+255),c
  1682  00156E  0E01               	movlw	1
  1683  001570  6E01               	movwf	setFbits@value,c
  1684  001572  500A               	movf	??_processOpcode& (0+255),w,c
  1685  001574  0E04               	movlw	4
  1686  001576  ECE1  F00D         	call	_setFbits
  1687  00157A  D007               	goto	l1711
  1688  00157C                     l1709:
  1689                           
  1690                           ;emulator.c: 659: else setFbits(4, 0);
  1691  00157C  6E0A               	movwf	??_processOpcode& (0+255),c
  1692  00157E  0E00               	movlw	0
  1693  001580  6E01               	movwf	setFbits@value,c
  1694  001582  500A               	movf	??_processOpcode& (0+255),w,c
  1695  001584  0E04               	movlw	4
  1696  001586  ECE1  F00D         	call	_setFbits
  1697  00158A                     l1711:
  1698                           
  1699                           ;emulator.c: 660: regA += regB;
  1700  00158A  501E               	movf	_regB,w,c
  1701  00158C                     L11:
  1702  00158C  261D               	addwf	_regA,f,c
  1703                           
  1704                           ;emulator.c: 661: break;
  1705  00158E  D170               	goto	l1773
  1706  001590                     l1713:
  1707                           
  1708                           ;emulator.c: 665: regA_temp16 += (uint16_t) immData_1;
  1709  001590  501B               	movf	_immData_1,w,c
  1710  001592  260F               	addwf	processOpcode@regA_temp16,f,c
  1711  001594  0E00               	movlw	0
  1712  001596  2210               	addwfc	processOpcode@regA_temp16+1,f,c
  1713                           
  1714                           ;emulator.c: 666: if (regA_temp16 > 255) setFbits(4, 1);
  1715  001598  0E00               	movlw	0
  1716  00159A  5C0F               	subwf	processOpcode@regA_temp16,w,c
  1717  00159C  0E01               	movlw	1
  1718  00159E  5810               	subwfb	processOpcode@regA_temp16+1,w,c
  1719  0015A0  A0D8               	btfss	status,0,c
  1720  0015A2  D008               	goto	l1717
  1721  0015A4  6E0A               	movwf	??_processOpcode& (0+255),c
  1722  0015A6  0E01               	movlw	1
  1723  0015A8  6E01               	movwf	setFbits@value,c
  1724  0015AA  500A               	movf	??_processOpcode& (0+255),w,c
  1725  0015AC  0E04               	movlw	4
  1726  0015AE  ECE1  F00D         	call	_setFbits
  1727  0015B2  D007               	goto	l1719
  1728  0015B4                     l1717:
  1729                           
  1730                           ;emulator.c: 667: else setFbits(4, 0);
  1731  0015B4  6E0A               	movwf	??_processOpcode& (0+255),c
  1732  0015B6  0E00               	movlw	0
  1733  0015B8  6E01               	movwf	setFbits@value,c
  1734  0015BA  500A               	movf	??_processOpcode& (0+255),w,c
  1735  0015BC  0E04               	movlw	4
  1736  0015BE  ECE1  F00D         	call	_setFbits
  1737  0015C2                     l1719:
  1738                           
  1739                           ;emulator.c: 669: regA += immData_1;
  1740  0015C2  501B               	movf	_immData_1,w,c
  1741  0015C4  261D               	addwf	_regA,f,c
  1742  0015C6  D04B               	goto	L20
  1743  0015C8                     l354:
  1744                           
  1745                           ;emulator.c: 676: regA_temp16 = regA;
  1746  0015C8  C01D  F00F         	movff	_regA,processOpcode@regA_temp16
  1747  0015CC  6A10               	clrf	processOpcode@regA_temp16+1,c
  1748                           
  1749                           ;emulator.c: 677: regA_temp16 <<= 8;
  1750  0015CE  500F               	movf	processOpcode@regA_temp16,w,c
  1751  0015D0  6E10               	movwf	processOpcode@regA_temp16+1,c
  1752  0015D2  6A0F               	clrf	processOpcode@regA_temp16,c
  1753                           
  1754                           ;emulator.c: 678: regA_temp16 += 255;
  1755  0015D4  0EFF               	movlw	255
  1756  0015D6  260F               	addwf	processOpcode@regA_temp16,f,c
  1757  0015D8  0E00               	movlw	0
  1758  0015DA  2210               	addwfc	processOpcode@regA_temp16+1,f,c
  1759                           
  1760                           ;emulator.c: 679: regA_temp16 -= regB;
  1761  0015DC  501E               	movf	_regB,w,c
  1762  0015DE  5E0F               	subwf	processOpcode@regA_temp16,f,c
  1763  0015E0  0E00               	movlw	0
  1764  0015E2  5A10               	subwfb	processOpcode@regA_temp16+1,f,c
  1765                           
  1766                           ;emulator.c: 680: if (regA_temp16 < 255) setFbits(4, 1);
  1767  0015E4  0EFF               	movlw	255
  1768  0015E6  5C0F               	subwf	processOpcode@regA_temp16,w,c
  1769  0015E8  0E00               	movlw	0
  1770  0015EA  5810               	subwfb	processOpcode@regA_temp16+1,w,c
  1771  0015EC  B0D8               	btfsc	status,0,c
  1772  0015EE  D008               	goto	l1733
  1773  0015F0  6E0A               	movwf	??_processOpcode& (0+255),c
  1774  0015F2  0E01               	movlw	1
  1775  0015F4  6E01               	movwf	setFbits@value,c
  1776  0015F6  500A               	movf	??_processOpcode& (0+255),w,c
  1777  0015F8  0E04               	movlw	4
  1778  0015FA  ECE1  F00D         	call	_setFbits
  1779  0015FE  D007               	goto	l1735
  1780  001600                     l1733:
  1781                           
  1782                           ;emulator.c: 681: else setFbits(4, 0);
  1783  001600  6E0A               	movwf	??_processOpcode& (0+255),c
  1784  001602  0E00               	movlw	0
  1785  001604  6E01               	movwf	setFbits@value,c
  1786  001606  500A               	movf	??_processOpcode& (0+255),w,c
  1787  001608  0E04               	movlw	4
  1788  00160A  ECE1  F00D         	call	_setFbits
  1789  00160E                     l1735:
  1790                           
  1791                           ;emulator.c: 682: regA -= regB;
  1792  00160E  501E               	movf	_regB,w,c
  1793  001610  5E1D               	subwf	_regA,f,c
  1794                           
  1795                           ;emulator.c: 683: break;
  1796  001612  D12E               	goto	l1773
  1797  001614                     l357:
  1798                           
  1799                           ;emulator.c: 687: regA_temp16 = regA;
  1800  001614  C01D  F00F         	movff	_regA,processOpcode@regA_temp16
  1801  001618  6A10               	clrf	processOpcode@regA_temp16+1,c
  1802                           
  1803                           ;emulator.c: 688: regA_temp16 <<= 8;
  1804  00161A  500F               	movf	processOpcode@regA_temp16,w,c
  1805  00161C  6E10               	movwf	processOpcode@regA_temp16+1,c
  1806  00161E  6A0F               	clrf	processOpcode@regA_temp16,c
  1807                           
  1808                           ;emulator.c: 689: regA_temp16 += 255;
  1809  001620  0EFF               	movlw	255
  1810  001622  260F               	addwf	processOpcode@regA_temp16,f,c
  1811  001624  0E00               	movlw	0
  1812  001626  2210               	addwfc	processOpcode@regA_temp16+1,f,c
  1813                           
  1814                           ;emulator.c: 690: regA_temp16 -= immData_1;
  1815  001628  501B               	movf	_immData_1,w,c
  1816  00162A  5E0F               	subwf	processOpcode@regA_temp16,f,c
  1817  00162C  0E00               	movlw	0
  1818  00162E  5A10               	subwfb	processOpcode@regA_temp16+1,f,c
  1819                           
  1820                           ;emulator.c: 691: if (regA_temp16 < 255) setFbits(4, 1);
  1821  001630  0EFF               	movlw	255
  1822  001632  5C0F               	subwf	processOpcode@regA_temp16,w,c
  1823  001634  0E00               	movlw	0
  1824  001636  5810               	subwfb	processOpcode@regA_temp16+1,w,c
  1825  001638  B0D8               	btfsc	status,0,c
  1826  00163A  D008               	goto	l1747
  1827  00163C  6E0A               	movwf	??_processOpcode& (0+255),c
  1828  00163E  0E01               	movlw	1
  1829  001640  6E01               	movwf	setFbits@value,c
  1830  001642  500A               	movf	??_processOpcode& (0+255),w,c
  1831  001644  0E04               	movlw	4
  1832  001646  ECE1  F00D         	call	_setFbits
  1833  00164A  D007               	goto	l1749
  1834  00164C                     l1747:
  1835                           
  1836                           ;emulator.c: 692: else setFbits(4, 0);
  1837  00164C  6E0A               	movwf	??_processOpcode& (0+255),c
  1838  00164E  0E00               	movlw	0
  1839  001650  6E01               	movwf	setFbits@value,c
  1840  001652  500A               	movf	??_processOpcode& (0+255),w,c
  1841  001654  0E04               	movlw	4
  1842  001656  ECE1  F00D         	call	_setFbits
  1843  00165A                     l1749:
  1844                           
  1845                           ;emulator.c: 693: regA -= immData_1;
  1846  00165A  501B               	movf	_immData_1,w,c
  1847  00165C  5E1D               	subwf	_regA,f,c
  1848  00165E                     L20:
  1849                           
  1850                           ;emulator.c: 694: regPC++;
  1851  00165E  4A18               	infsnz	_regPC,f,c
  1852  001660  2A19               	incf	_regPC+1,f,c
  1853                           
  1854                           ;emulator.c: 695: break;
  1855  001662  D106               	goto	l1773
  1856  001664                     l1753:
  1857                           
  1858                           ;emulator.c: 699: regA_temp16 = regA + 1;
  1859  001664  0E01               	movlw	1
  1860  001666  241D               	addwf	_regA,w,c
  1861  001668  6E0F               	movwf	processOpcode@regA_temp16,c
  1862  00166A  6A10               	clrf	processOpcode@regA_temp16+1,c
  1863  00166C  0E00               	movlw	0
  1864  00166E  2210               	addwfc	processOpcode@regA_temp16+1,f,c
  1865                           
  1866                           ;emulator.c: 700: if (regA_temp16 > 255) setFbits(4, 1);
  1867  001670  0E00               	movlw	0
  1868  001672  5C0F               	subwf	processOpcode@regA_temp16,w,c
  1869  001674  0E01               	movlw	1
  1870  001676  5810               	subwfb	processOpcode@regA_temp16+1,w,c
  1871  001678  A0D8               	btfss	status,0,c
  1872  00167A  D008               	goto	l1757
  1873  00167C  6E0A               	movwf	??_processOpcode& (0+255),c
  1874  00167E  0E01               	movlw	1
  1875  001680  6E01               	movwf	setFbits@value,c
  1876  001682  500A               	movf	??_processOpcode& (0+255),w,c
  1877  001684  0E04               	movlw	4
  1878  001686  ECE1  F00D         	call	_setFbits
  1879  00168A  D007               	goto	l1759
  1880  00168C                     l1757:
  1881                           
  1882                           ;emulator.c: 701: else setFbits(4, 0);
  1883  00168C  6E0A               	movwf	??_processOpcode& (0+255),c
  1884  00168E  0E00               	movlw	0
  1885  001690  6E01               	movwf	setFbits@value,c
  1886  001692  500A               	movf	??_processOpcode& (0+255),w,c
  1887  001694  0E04               	movlw	4
  1888  001696  ECE1  F00D         	call	_setFbits
  1889  00169A                     l1759:
  1890                           
  1891                           ;emulator.c: 702: regA++;
  1892  00169A  2A1D               	incf	_regA,f,c
  1893                           
  1894                           ;emulator.c: 703: break;
  1895  00169C  D0E9               	goto	l1773
  1896  00169E                     l1761:
  1897                           
  1898                           ;emulator.c: 707: regA_temp8 = regA - 1;
  1899  00169E  041D               	decf	_regA,w,c
  1900  0016A0  6E0E               	movwf	processOpcode@regA_temp8,c
  1901                           
  1902                           ;emulator.c: 708: if (regA_temp8 == 255) setFbits(4, 1);
  1903  0016A2  280E               	incf	processOpcode@regA_temp8,w,c
  1904  0016A4  A4D8               	btfss	status,2,c
  1905  0016A6  D008               	goto	l1765
  1906  0016A8  6E0A               	movwf	??_processOpcode& (0+255),c
  1907  0016AA  0E01               	movlw	1
  1908  0016AC  6E01               	movwf	setFbits@value,c
  1909  0016AE  500A               	movf	??_processOpcode& (0+255),w,c
  1910  0016B0  0E04               	movlw	4
  1911  0016B2  ECE1  F00D         	call	_setFbits
  1912  0016B6  D007               	goto	l1767
  1913  0016B8                     l1765:
  1914                           
  1915                           ;emulator.c: 709: else setFbits(4, 0);
  1916  0016B8  6E0A               	movwf	??_processOpcode& (0+255),c
  1917  0016BA  0E00               	movlw	0
  1918  0016BC  6E01               	movwf	setFbits@value,c
  1919  0016BE  500A               	movf	??_processOpcode& (0+255),w,c
  1920  0016C0  0E04               	movlw	4
  1921  0016C2  ECE1  F00D         	call	_setFbits
  1922  0016C6                     l1767:
  1923                           
  1924                           ;emulator.c: 710: regA--;
  1925  0016C6  061D               	decf	_regA,f,c
  1926                           
  1927                           ;emulator.c: 711: break;
  1928  0016C8  D0D3               	goto	l1773
  1929  0016CA                     l1771:
  1930  0016CA  0E00               	movlw	low _virtualMemory
  1931  0016CC  2418               	addwf	_regPC,w,c
  1932  0016CE  6ED9               	movwf	fsr2l,c
  1933  0016D0  0E02               	movlw	high _virtualMemory
  1934  0016D2  2019               	addwfc	_regPC+1,w,c
  1935  0016D4  6EDA               	movwf	fsr2h,c
  1936  0016D6  50DF               	movf	indf2,w,c
  1937                           
  1938                           ; Switch size 1, requested type "space"
  1939                           ; Number of cases is 68, Range of values is 1 to 85
  1940                           ; switch strategies available:
  1941                           ; Name         Instructions Cycles
  1942                           ; simple_byte          205   103 (average)
  1943                           ;	Chosen strategy is simple_byte
  1944  0016D8  0A01               	xorlw	1	; case 1
  1945  0016DA  B4D8               	btfsc	status,2,c
  1946  0016DC  D4A0               	goto	l1435
  1947  0016DE  0A03               	xorlw	3	; case 2
  1948  0016E0  B4D8               	btfsc	status,2,c
  1949  0016E2  D4A6               	goto	l1437
  1950  0016E4  0A01               	xorlw	1	; case 3
  1951  0016E6  B4D8               	btfsc	status,2,c
  1952  0016E8  D4B2               	goto	l1441
  1953  0016EA  0A07               	xorlw	7	; case 4
  1954  0016EC  B4D8               	btfsc	status,2,c
  1955  0016EE  D4B3               	goto	l1443
  1956  0016F0  0A01               	xorlw	1	; case 5
  1957  0016F2  B4D8               	btfsc	status,2,c
  1958  0016F4  D4B5               	goto	l1447
  1959  0016F6  0A03               	xorlw	3	; case 6
  1960  0016F8  B4D8               	btfsc	status,2,c
  1961  0016FA  D4B9               	goto	l1449
  1962  0016FC  0A01               	xorlw	1	; case 7
  1963  0016FE  B4D8               	btfsc	status,2,c
  1964  001700  D4BC               	goto	l1453
  1965  001702  0A0F               	xorlw	15	; case 8
  1966  001704  B4D8               	btfsc	status,2,c
  1967  001706  D49D               	goto	l1439
  1968  001708  0A18               	xorlw	24	; case 16
  1969  00170A  B4D8               	btfsc	status,2,c
  1970  00170C  D4BC               	goto	l1457
  1971  00170E  0A01               	xorlw	1	; case 17
  1972  001710  B4D8               	btfsc	status,2,c
  1973  001712  D4BF               	goto	l1459
  1974  001714  0A03               	xorlw	3	; case 18
  1975  001716  B4D8               	btfsc	status,2,c
  1976  001718  D4C0               	goto	l1461
  1977  00171A  0A01               	xorlw	1	; case 19
  1978  00171C  B4D8               	btfsc	status,2,c
  1979  00171E  D4C1               	goto	l275
  1980  001720  0A07               	xorlw	7	; case 20
  1981  001722  B4D8               	btfsc	status,2,c
  1982  001724  D4C1               	goto	l276
  1983  001726  0A01               	xorlw	1	; case 21
  1984  001728  B4D8               	btfsc	status,2,c
  1985  00172A  D4C1               	goto	l277
  1986  00172C  0A03               	xorlw	3	; case 22
  1987  00172E  B4D8               	btfsc	status,2,c
  1988  001730  D4C1               	goto	l1463
  1989  001732  0A01               	xorlw	1	; case 23
  1990  001734  B4D8               	btfsc	status,2,c
  1991  001736  D4C7               	goto	l1465
  1992  001738  0A0F               	xorlw	15	; case 24
  1993  00173A  B4D8               	btfsc	status,2,c
  1994  00173C  D4CA               	goto	l1467
  1995  00173E  0A01               	xorlw	1	; case 25
  1996  001740  B4D8               	btfsc	status,2,c
  1997  001742  D4CD               	goto	l281
  1998  001744  0A03               	xorlw	3	; case 26
  1999  001746  B4D8               	btfsc	status,2,c
  2000  001748  D4CD               	goto	l282
  2001  00174A  0A01               	xorlw	1	; case 27
  2002  00174C  B4D8               	btfsc	status,2,c
  2003  00174E  D4CD               	goto	l283
  2004  001750  0A07               	xorlw	7	; case 28
  2005  001752  B4D8               	btfsc	status,2,c
  2006  001754  D4CD               	goto	l284
  2007  001756  0A3C               	xorlw	60	; case 32
  2008  001758  B4D8               	btfsc	status,2,c
  2009  00175A  D4D1               	goto	l1471
  2010  00175C  0A01               	xorlw	1	; case 33
  2011  00175E  B4D8               	btfsc	status,2,c
  2012  001760  D4D1               	goto	l1473
  2013  001762  0A03               	xorlw	3	; case 34
  2014  001764  B4D8               	btfsc	status,2,c
  2015  001766  D4D1               	goto	l1477
  2016  001768  0A01               	xorlw	1	; case 35
  2017  00176A  B4D8               	btfsc	status,2,c
  2018  00176C  D4D1               	goto	l1479
  2019  00176E  0A07               	xorlw	7	; case 36
  2020  001770  B4D8               	btfsc	status,2,c
  2021  001772  D4D4               	goto	l1485
  2022  001774  0A01               	xorlw	1	; case 37
  2023  001776  B4D8               	btfsc	status,2,c
  2024  001778  D4D4               	goto	l1489
  2025  00177A  0A03               	xorlw	3	; case 38
  2026  00177C  B4D8               	btfsc	status,2,c
  2027  00177E  D4D3               	goto	l292
  2028  001780  0A01               	xorlw	1	; case 39
  2029  001782  B4D8               	btfsc	status,2,c
  2030  001784  D4EA               	goto	l295
  2031  001786  0A0F               	xorlw	15	; case 40
  2032  001788  B4D8               	btfsc	status,2,c
  2033  00178A  D504               	goto	l298
  2034  00178C  0A01               	xorlw	1	; case 41
  2035  00178E  B4D8               	btfsc	status,2,c
  2036  001790  D50B               	goto	l299
  2037  001792  0A03               	xorlw	3	; case 42
  2038  001794  B4D8               	btfsc	status,2,c
  2039  001796  D511               	goto	l1511
  2040  001798  0A01               	xorlw	1	; case 43
  2041  00179A  B4D8               	btfsc	status,2,c
  2042  00179C  D4BC               	goto	l1483
  2043  00179E  0A1B               	xorlw	27	; case 48
  2044  0017A0  B4D8               	btfsc	status,2,c
  2045  0017A2  D54D               	goto	L27
  2046  0017A4  0A01               	xorlw	1	; case 49
  2047  0017A6  B4D8               	btfsc	status,2,c
  2048  0017A8  D541               	goto	l1531
  2049  0017AA  0A03               	xorlw	3	; case 50
  2050  0017AC  B4D8               	btfsc	status,2,c
  2051  0017AE  D541               	goto	l1535
  2052  0017B0  0A01               	xorlw	1	; case 51
  2053  0017B2  B4D8               	btfsc	status,2,c
  2054  0017B4  D549               	goto	l1541
  2055  0017B6  0A07               	xorlw	7	; case 52
  2056  0017B8  B4D8               	btfsc	status,2,c
  2057  0017BA  D550               	goto	l1547
  2058  0017BC  0A01               	xorlw	1	; case 53
  2059  0017BE  B4D8               	btfsc	status,2,c
  2060  0017C0  D551               	goto	l1553
  2061  0017C2  0A03               	xorlw	3	; case 54
  2062  0017C4  B4D8               	btfsc	status,2,c
  2063  0017C6  D55B               	goto	l1559
  2064  0017C8  0A01               	xorlw	1	; case 55
  2065  0017CA  B4D8               	btfsc	status,2,c
  2066  0017CC  D55F               	goto	l1565
  2067  0017CE  0A0F               	xorlw	15	; case 56
  2068  0017D0  B4D8               	btfsc	status,2,c
  2069  0017D2  D566               	goto	l1571
  2070  0017D4  0A01               	xorlw	1	; case 57
  2071  0017D6  B4D8               	btfsc	status,2,c
  2072  0017D8  D567               	goto	l1577
  2073  0017DA  0A03               	xorlw	3	; case 58
  2074  0017DC  B4D8               	btfsc	status,2,c
  2075  0017DE  D576               	goto	l1583
  2076  0017E0  0A01               	xorlw	1	; case 59
  2077  0017E2  B4D8               	btfsc	status,2,c
  2078  0017E4  D577               	goto	l1589
  2079  0017E6  0A07               	xorlw	7	; case 60
  2080  0017E8  B4D8               	btfsc	status,2,c
  2081  0017EA  D57E               	goto	l1595
  2082  0017EC  0A01               	xorlw	1	; case 61
  2083  0017EE  B4D8               	btfsc	status,2,c
  2084  0017F0  D580               	goto	l1601
  2085  0017F2  0A03               	xorlw	3	; case 62
  2086  0017F4  B4D8               	btfsc	status,2,c
  2087  0017F6  D586               	goto	l1607
  2088  0017F8  0A01               	xorlw	1	; case 63
  2089  0017FA  B4D8               	btfsc	status,2,c
  2090  0017FC  D5A7               	goto	l1625
  2091  0017FE  0A7F               	xorlw	127	; case 64
  2092  001800  B4D8               	btfsc	status,2,c
  2093  001802  D5CC               	goto	l1643
  2094  001804  0A01               	xorlw	1	; case 65
  2095  001806  B4D8               	btfsc	status,2,c
  2096  001808  D5F4               	goto	l1655
  2097  00180A  0A03               	xorlw	3	; case 66
  2098  00180C  B4D8               	btfsc	status,2,c
  2099  00180E  D5FE               	goto	l1659
  2100  001810  0A01               	xorlw	1	; case 67
  2101  001812  B4D8               	btfsc	status,2,c
  2102  001814  D608               	goto	l1663
  2103  001816  0A07               	xorlw	7	; case 68
  2104  001818  B4D8               	btfsc	status,2,c
  2105  00181A  D614               	goto	l1667
  2106  00181C  0A01               	xorlw	1	; case 69
  2107  00181E  B4D8               	btfsc	status,2,c
  2108  001820  D621               	goto	l1671
  2109  001822  0A03               	xorlw	3	; case 70
  2110  001824  B4D8               	btfsc	status,2,c
  2111  001826  D62D               	goto	l1675
  2112  001828  0A01               	xorlw	1	; case 71
  2113  00182A  B4D8               	btfsc	status,2,c
  2114  00182C  D637               	goto	l1679
  2115  00182E  0A0F               	xorlw	15	; case 72
  2116  001830  B4D8               	btfsc	status,2,c
  2117  001832  D642               	goto	l1685
  2118  001834  0A01               	xorlw	1	; case 73
  2119  001836  B4D8               	btfsc	status,2,c
  2120  001838  D64D               	goto	l1689
  2121  00183A  0A03               	xorlw	3	; case 74
  2122  00183C  B4D8               	btfsc	status,2,c
  2123  00183E  D658               	goto	l1693
  2124  001840  0A01               	xorlw	1	; case 75
  2125  001842  B4D8               	btfsc	status,2,c
  2126  001844  D667               	goto	l1697
  2127  001846  0A07               	xorlw	7	; case 76
  2128  001848  B4D8               	btfsc	status,2,c
  2129  00184A  D675               	goto	l1701
  2130  00184C  0A1C               	xorlw	28	; case 80
  2131  00184E  B4D8               	btfsc	status,2,c
  2132  001850  D683               	goto	l1705
  2133  001852  0A01               	xorlw	1	; case 81
  2134  001854  B4D8               	btfsc	status,2,c
  2135  001856  D69C               	goto	l1713
  2136  001858  0A03               	xorlw	3	; case 82
  2137  00185A  B4D8               	btfsc	status,2,c
  2138  00185C  D6B5               	goto	l354
  2139  00185E  0A01               	xorlw	1	; case 83
  2140  001860  B4D8               	btfsc	status,2,c
  2141  001862  D6D8               	goto	l357
  2142  001864  0A07               	xorlw	7	; case 84
  2143  001866  B4D8               	btfsc	status,2,c
  2144  001868  D6FD               	goto	l1753
  2145  00186A  0A01               	xorlw	1	; case 85
  2146  00186C  B4D8               	btfsc	status,2,c
  2147  00186E  D717               	goto	l1761
  2148  001870                     l1773:
  2149                           
  2150                           ;emulator.c: 715: regPC++;
  2151  001870  4A18               	infsnz	_regPC,f,c
  2152  001872  2A19               	incf	_regPC+1,f,c
  2153  001874  0012               	return	
  2154  001876                     __end_of_processOpcode:
  2155                           	opt stack 0
  2156                           tblptru	equ	0xFF8
  2157                           tblptrh	equ	0xFF7
  2158                           tblptrl	equ	0xFF6
  2159                           tablat	equ	0xFF5
  2160                           prodh	equ	0xFF4
  2161                           prodl	equ	0xFF3
  2162                           postinc0	equ	0xFEE
  2163                           wreg	equ	0xFE8
  2164                           postdec1	equ	0xFE5
  2165                           fsr1h	equ	0xFE2
  2166                           fsr1l	equ	0xFE1
  2167                           indf2	equ	0xFDF
  2168                           fsr2h	equ	0xFDA
  2169                           fsr2l	equ	0xFD9
  2170                           status	equ	0xFD8
  2171                           
  2172 ;; *************** function _update_immData *****************
  2173 ;; Defined at:
  2174 ;;		line 221 in file "source/emulator.c"
  2175 ;; Parameters:    Size  Location     Type
  2176 ;;		None
  2177 ;; Auto vars:     Size  Location     Type
  2178 ;;		None
  2179 ;; Return value:  Size  Location     Type
  2180 ;;		None               void
  2181 ;; Registers used:
  2182 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2183 ;; Tracked objects:
  2184 ;;		On entry : 0/0
  2185 ;;		On exit  : 0/0
  2186 ;;		Unchanged: 0/0
  2187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2190 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2191 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2192 ;;Total ram usage:        2 bytes
  2193 ;; Hardware stack levels used:    1
  2194 ;; This function calls:
  2195 ;;		Nothing
  2196 ;; This function is called by:
  2197 ;;		_processOpcode
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           	psect	text4
  2202  001DFC                     __ptext4:
  2203                           	opt stack 0
  2204  001DFC                     _update_immData:
  2205                           	opt stack 29
  2206                           
  2207                           ;emulator.c: 224: if (regPC + 1 == 2047 + 1) immData_1 = 0;
  2208                           
  2209                           ;incstack = 0
  2210  001DFC  0E01               	movlw	1
  2211  001DFE  2418               	addwf	_regPC,w,c
  2212  001E00  6E01               	movwf	??_update_immData& (0+255),c
  2213  001E02  0E00               	movlw	0
  2214  001E04  2019               	addwfc	_regPC+1,w,c
  2215  001E06  6E02               	movwf	(??_update_immData+1)& (0+255),c
  2216  001E08  5002               	movf	??_update_immData+1,w,c
  2217  001E0A  0A08               	xorlw	8
  2218  001E0C  1001               	iorwf	??_update_immData,w,c
  2219  001E0E  A4D8               	btfss	status,2,c
  2220  001E10  D004               	goto	l1375
  2221  001E12  6E01               	movwf	??_update_immData& (0+255),c
  2222  001E14  0E00               	movlw	0
  2223  001E16  6E1B               	movwf	_immData_1,c
  2224  001E18  5001               	movf	??_update_immData& (0+255),w,c
  2225  001E1A                     l1375:
  2226                           
  2227                           ;emulator.c: 225: if (regPC + 2 == 2047 + 1) immData_2 = 0;
  2228  001E1A  0E02               	movlw	2
  2229  001E1C  2418               	addwf	_regPC,w,c
  2230  001E1E  6E01               	movwf	??_update_immData& (0+255),c
  2231  001E20  0E00               	movlw	0
  2232  001E22  2019               	addwfc	_regPC+1,w,c
  2233  001E24  6E02               	movwf	(??_update_immData+1)& (0+255),c
  2234  001E26  5002               	movf	??_update_immData+1,w,c
  2235  001E28  0A08               	xorlw	8
  2236  001E2A  1001               	iorwf	??_update_immData,w,c
  2237  001E2C  A4D8               	btfss	status,2,c
  2238  001E2E  D004               	goto	l1379
  2239  001E30  6E01               	movwf	??_update_immData& (0+255),c
  2240  001E32  0E00               	movlw	0
  2241  001E34  6E1C               	movwf	_immData_2,c
  2242  001E36  5001               	movf	??_update_immData& (0+255),w,c
  2243  001E38                     l1379:
  2244                           
  2245                           ;emulator.c: 226: if (regPC + 2 == 2047 + 2) immData_2 = 1;
  2246  001E38  0E02               	movlw	2
  2247  001E3A  2418               	addwf	_regPC,w,c
  2248  001E3C  6E01               	movwf	??_update_immData& (0+255),c
  2249  001E3E  0E00               	movlw	0
  2250  001E40  2019               	addwfc	_regPC+1,w,c
  2251  001E42  6E02               	movwf	(??_update_immData+1)& (0+255),c
  2252  001E44  0401               	decf	??_update_immData,w,c
  2253  001E46  0E08               	movlw	8
  2254  001E48  B4D8               	btfsc	status,2,c
  2255  001E4A  1802               	xorwf	??_update_immData+1,w,c
  2256  001E4C  A4D8               	btfss	status,2,c
  2257  001E4E  D004               	goto	l1383
  2258  001E50  6E01               	movwf	??_update_immData& (0+255),c
  2259  001E52  0E01               	movlw	1
  2260  001E54  6E1C               	movwf	_immData_2,c
  2261  001E56  5001               	movf	??_update_immData& (0+255),w,c
  2262  001E58                     l1383:
  2263                           
  2264                           ;emulator.c: 230: immData_1 = virtualMemory[regPC + 1];
  2265  001E58  0E01               	movlw	1
  2266  001E5A  2418               	addwf	_regPC,w,c
  2267  001E5C  6E01               	movwf	??_update_immData& (0+255),c
  2268  001E5E  0E00               	movlw	0
  2269  001E60  2019               	addwfc	_regPC+1,w,c
  2270  001E62  6E02               	movwf	(??_update_immData+1)& (0+255),c
  2271  001E64  0E00               	movlw	low _virtualMemory
  2272  001E66  2401               	addwf	??_update_immData,w,c
  2273  001E68  6ED9               	movwf	fsr2l,c
  2274  001E6A  0E02               	movlw	high _virtualMemory
  2275  001E6C  2002               	addwfc	??_update_immData+1,w,c
  2276  001E6E  6EDA               	movwf	fsr2h,c
  2277  001E70  50DF               	movf	indf2,w,c
  2278  001E72  6E1B               	movwf	_immData_1,c
  2279                           
  2280                           ;emulator.c: 231: immData_2 = virtualMemory[regPC + 2];
  2281  001E74  0E02               	movlw	2
  2282  001E76  2418               	addwf	_regPC,w,c
  2283  001E78  6E01               	movwf	??_update_immData& (0+255),c
  2284  001E7A  0E00               	movlw	0
  2285  001E7C  2019               	addwfc	_regPC+1,w,c
  2286  001E7E  6E02               	movwf	(??_update_immData+1)& (0+255),c
  2287  001E80  0E00               	movlw	low _virtualMemory
  2288  001E82  2401               	addwf	??_update_immData,w,c
  2289  001E84  6ED9               	movwf	fsr2l,c
  2290  001E86  0E02               	movlw	high _virtualMemory
  2291  001E88  2002               	addwfc	??_update_immData+1,w,c
  2292  001E8A  6EDA               	movwf	fsr2h,c
  2293  001E8C  50DF               	movf	indf2,w,c
  2294  001E8E  6E1C               	movwf	_immData_2,c
  2295  001E90  0012               	return	
  2296  001E92                     __end_of_update_immData:
  2297                           	opt stack 0
  2298                           tblptru	equ	0xFF8
  2299                           tblptrh	equ	0xFF7
  2300                           tblptrl	equ	0xFF6
  2301                           tablat	equ	0xFF5
  2302                           prodh	equ	0xFF4
  2303                           prodl	equ	0xFF3
  2304                           postinc0	equ	0xFEE
  2305                           wreg	equ	0xFE8
  2306                           postdec1	equ	0xFE5
  2307                           fsr1h	equ	0xFE2
  2308                           fsr1l	equ	0xFE1
  2309                           indf2	equ	0xFDF
  2310                           fsr2h	equ	0xFDA
  2311                           fsr2l	equ	0xFD9
  2312                           status	equ	0xFD8
  2313                           
  2314 ;; *************** function _setPortData *****************
  2315 ;; Defined at:
  2316 ;;		line 190 in file "source/emulator.c"
  2317 ;; Parameters:    Size  Location     Type
  2318 ;;  portNumber      1    wreg     unsigned char 
  2319 ;;  outputData      1    4[COMRAM] unsigned char 
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;  portNumber      1    5[COMRAM] unsigned char 
  2322 ;;  outputData_t    2    6[COMRAM] unsigned int 
  2323 ;;  outputData_t    1    8[COMRAM] unsigned char 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;		None               void
  2326 ;; Registers used:
  2327 ;;		wreg, status,2, status,0, cstack
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2333 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2334 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;Total ram usage:        5 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    1
  2340 ;; This function calls:
  2341 ;;		_dispSeg
  2342 ;;		_enableSerial
  2343 ;;		_hexToChar
  2344 ;; This function is called by:
  2345 ;;		_processOpcode
  2346 ;; This function uses a non-reentrant model
  2347 ;;
  2348                           
  2349                           	psect	text5
  2350  001D54                     __ptext5:
  2351                           	opt stack 0
  2352  001D54                     _setPortData:
  2353                           	opt stack 28
  2354                           
  2355                           ;incstack = 0
  2356                           ;setPortData@portNumber stored from wreg
  2357  001D54  CFE8 F006          	movff	wreg,setPortData@portNumber
  2358                           
  2359                           ;emulator.c: 192: uint16_t outputData_temp16;
  2360                           ;emulator.c: 193: uint8_t outputData_temp8;
  2361                           ;emulator.c: 194: switch (portNumber)
  2362  001D58  D043               	goto	l1425
  2363  001D5A                     l242:
  2364                           
  2365                           ;emulator.c: 197: if (outputData == 0) outputData_temp16 = 1200;
  2366  001D5A  6605               	tstfsz	setPortData@outputData,c
  2367  001D5C  D004               	goto	l1401
  2368  001D5E  0E04               	movlw	4
  2369  001D60  6E08               	movwf	setPortData@outputData_temp16+1,c
  2370  001D62  0EB0               	movlw	176
  2371  001D64  6E07               	movwf	setPortData@outputData_temp16,c
  2372  001D66                     l1401:
  2373                           
  2374                           ;emulator.c: 198: if (outputData == 1) outputData_temp16 = 2400;
  2375  001D66  0405               	decf	setPortData@outputData,w,c
  2376  001D68  A4D8               	btfss	status,2,c
  2377  001D6A  D004               	goto	l1405
  2378  001D6C  0E09               	movlw	9
  2379  001D6E  6E08               	movwf	setPortData@outputData_temp16+1,c
  2380  001D70  0E60               	movlw	96
  2381  001D72  6E07               	movwf	setPortData@outputData_temp16,c
  2382  001D74                     l1405:
  2383                           
  2384                           ;emulator.c: 199: if (outputData == 2) outputData_temp16 = 9600;
  2385  001D74  5005               	movf	setPortData@outputData,w,c
  2386  001D76  0A02               	xorlw	2
  2387  001D78  A4D8               	btfss	status,2,c
  2388  001D7A  D004               	goto	l1409
  2389  001D7C  0E25               	movlw	37
  2390  001D7E  6E08               	movwf	setPortData@outputData_temp16+1,c
  2391  001D80  0E80               	movlw	128
  2392  001D82  6E07               	movwf	setPortData@outputData_temp16,c
  2393  001D84                     l1409:
  2394                           
  2395                           ;emulator.c: 200: if (outputData == 3) outputData_temp16 = 10417;
  2396  001D84  5005               	movf	setPortData@outputData,w,c
  2397  001D86  0A03               	xorlw	3
  2398  001D88  A4D8               	btfss	status,2,c
  2399  001D8A  D004               	goto	l1413
  2400  001D8C  0E28               	movlw	40
  2401  001D8E  6E08               	movwf	setPortData@outputData_temp16+1,c
  2402  001D90  0EB1               	movlw	177
  2403  001D92  6E07               	movwf	setPortData@outputData_temp16,c
  2404  001D94                     l1413:
  2405                           
  2406                           ;emulator.c: 201: if (outputData == 4) outputData_temp16 = 19200;
  2407  001D94  5005               	movf	setPortData@outputData,w,c
  2408  001D96  0A04               	xorlw	4
  2409  001D98  A4D8               	btfss	status,2,c
  2410  001D9A  D004               	goto	l1417
  2411  001D9C  0E4B               	movlw	75
  2412  001D9E  6E08               	movwf	setPortData@outputData_temp16+1,c
  2413  001DA0  0E00               	movlw	0
  2414  001DA2  6E07               	movwf	setPortData@outputData_temp16,c
  2415  001DA4                     l1417:
  2416                           
  2417                           ;emulator.c: 202: enableSerial(outputData_temp16);
  2418  001DA4  C007  F001         	movff	setPortData@outputData_temp16,enableSerial@baudRate
  2419  001DA8  C008  F002         	movff	setPortData@outputData_temp16+1,enableSerial@baudRate+1
  2420  001DAC  EC49  F00F         	call	_enableSerial	;wreg free
  2421                           
  2422                           ;emulator.c: 203: break;
  2423  001DB0  0012               	return	
  2424  001DB2                     l249:
  2425                           
  2426                           ;emulator.c: 206: TXREG2 = outputData;
  2427  001DB2  C005  FF73         	movff	setPortData@outputData,3955	;volatile
  2428                           
  2429                           ;emulator.c: 207: break;
  2430  001DB6  0012               	return	
  2431  001DB8                     l1419:
  2432                           
  2433                           ;emulator.c: 210: outputData_temp8 = hexToChar(outputData);
  2434  001DB8  5005               	movf	setPortData@outputData,w,c
  2435  001DBA  EC4E  F00E         	call	_hexToChar
  2436  001DBE  6E09               	movwf	setPortData@outputData_temp8,c
  2437                           
  2438                           ;emulator.c: 211: dispSeg(1, outputData_temp8);
  2439  001DC0  C009  F001         	movff	setPortData@outputData_temp8,dispSeg@letter
  2440  001DC4  0E01               	movlw	1
  2441  001DC6  EC3B  F00C         	call	_dispSeg
  2442                           
  2443                           ;emulator.c: 212: break;
  2444  001DCA  0012               	return	
  2445  001DCC                     l1421:
  2446                           
  2447                           ;emulator.c: 215: outputData_temp8 = hexToChar(outputData);
  2448  001DCC  5005               	movf	setPortData@outputData,w,c
  2449  001DCE  EC4E  F00E         	call	_hexToChar
  2450  001DD2  6E09               	movwf	setPortData@outputData_temp8,c
  2451                           
  2452                           ;emulator.c: 216: dispSeg(2, outputData_temp8);
  2453  001DD4  C009  F001         	movff	setPortData@outputData_temp8,dispSeg@letter
  2454  001DD8  0E02               	movlw	2
  2455  001DDA  EC3B  F00C         	call	_dispSeg
  2456                           
  2457                           ;emulator.c: 217: break;
  2458  001DDE  0012               	return	
  2459  001DE0                     l1425:
  2460  001DE0  5006               	movf	setPortData@portNumber,w,c
  2461                           
  2462                           ; Switch size 1, requested type "space"
  2463                           ; Number of cases is 4, Range of values is 0 to 4
  2464                           ; switch strategies available:
  2465                           ; Name         Instructions Cycles
  2466                           ; simple_byte           13     7 (average)
  2467                           ;	Chosen strategy is simple_byte
  2468  001DE2  0A00               	xorlw	0	; case 0
  2469  001DE4  B4D8               	btfsc	status,2,c
  2470  001DE6  D7B9               	goto	l242
  2471  001DE8  0A01               	xorlw	1	; case 1
  2472  001DEA  B4D8               	btfsc	status,2,c
  2473  001DEC  D7E2               	goto	l249
  2474  001DEE  0A02               	xorlw	2	; case 3
  2475  001DF0  B4D8               	btfsc	status,2,c
  2476  001DF2  D7E2               	goto	l1419
  2477  001DF4  0A07               	xorlw	7	; case 4
  2478  001DF6  A4D8               	btfss	status,2,c
  2479  001DF8  0012               	return	
  2480  001DFA  D7E8               	goto	l1421
  2481  001DFC                     __end_of_setPortData:
  2482                           	opt stack 0
  2483                           tblptru	equ	0xFF8
  2484                           tblptrh	equ	0xFF7
  2485                           tblptrl	equ	0xFF6
  2486                           tablat	equ	0xFF5
  2487                           prodh	equ	0xFF4
  2488                           prodl	equ	0xFF3
  2489                           postinc0	equ	0xFEE
  2490                           wreg	equ	0xFE8
  2491                           postdec1	equ	0xFE5
  2492                           fsr1h	equ	0xFE2
  2493                           fsr1l	equ	0xFE1
  2494                           indf2	equ	0xFDF
  2495                           fsr2h	equ	0xFDA
  2496                           fsr2l	equ	0xFD9
  2497                           status	equ	0xFD8
  2498                           
  2499 ;; *************** function _hexToChar *****************
  2500 ;; Defined at:
  2501 ;;		line 63 in file "source/system.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;  number          1    wreg     unsigned char 
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;  number          1    0[COMRAM] unsigned char 
  2506 ;; Return value:  Size  Location     Type
  2507 ;;                  1    wreg      unsigned char 
  2508 ;; Registers used:
  2509 ;;		wreg, status,2, status,0
  2510 ;; Tracked objects:
  2511 ;;		On entry : 0/0
  2512 ;;		On exit  : 0/0
  2513 ;;		Unchanged: 0/0
  2514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2516 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2518 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2519 ;;Total ram usage:        1 bytes
  2520 ;; Hardware stack levels used:    1
  2521 ;; This function calls:
  2522 ;;		Nothing
  2523 ;; This function is called by:
  2524 ;;		_setPortData
  2525 ;; This function uses a non-reentrant model
  2526 ;;
  2527                           
  2528                           	psect	text6
  2529  001C9C                     __ptext6:
  2530                           	opt stack 0
  2531  001C9C                     _hexToChar:
  2532                           	opt stack 28
  2533                           
  2534                           ;incstack = 0
  2535                           ;hexToChar@number stored from wreg
  2536  001C9C  CFE8 F001          	movff	wreg,hexToChar@number
  2537                           
  2538                           ;system.c: 65: number = number << 4;
  2539  001CA0  3801               	swapf	hexToChar@number,w,c
  2540  001CA2  0BF0               	andlw	240
  2541  001CA4  6E01               	movwf	hexToChar@number,c
  2542                           
  2543                           ;system.c: 66: number = number >> 4;
  2544  001CA6  3801               	swapf	hexToChar@number,w,c
  2545  001CA8  0B0F               	andlw	15
  2546  001CAA  6E01               	movwf	hexToChar@number,c
  2547                           
  2548                           ;system.c: 67: switch (number)
  2549  001CAC  D020               	goto	l1229
  2550  001CAE                     l1163:
  2551                           
  2552                           ;system.c: 70: return '0';
  2553  001CAE  0E30               	movlw	48
  2554  001CB0  0012               	return	
  2555  001CB2                     l1167:
  2556                           
  2557                           ;system.c: 72: return '1';
  2558  001CB2  0E31               	movlw	49
  2559  001CB4  0012               	return	
  2560  001CB6                     l1171:
  2561                           
  2562                           ;system.c: 74: return '2';
  2563  001CB6  0E32               	movlw	50
  2564  001CB8  0012               	return	
  2565  001CBA                     l1175:
  2566                           
  2567                           ;system.c: 76: return '3';
  2568  001CBA  0E33               	movlw	51
  2569  001CBC  0012               	return	
  2570  001CBE                     l1179:
  2571                           
  2572                           ;system.c: 78: return '4';
  2573  001CBE  0E34               	movlw	52
  2574  001CC0  0012               	return	
  2575  001CC2                     l1183:
  2576                           
  2577                           ;system.c: 80: return '5';
  2578  001CC2  0E35               	movlw	53
  2579  001CC4  0012               	return	
  2580  001CC6                     l1187:
  2581                           
  2582                           ;system.c: 82: return '6';
  2583  001CC6  0E36               	movlw	54
  2584  001CC8  0012               	return	
  2585  001CCA                     l1191:
  2586                           
  2587                           ;system.c: 84: return '7';
  2588  001CCA  0E37               	movlw	55
  2589  001CCC  0012               	return	
  2590  001CCE                     l1195:
  2591                           
  2592                           ;system.c: 86: return '8';
  2593  001CCE  0E38               	movlw	56
  2594  001CD0  0012               	return	
  2595  001CD2                     l1199:
  2596                           
  2597                           ;system.c: 88: return '9';
  2598  001CD2  0E39               	movlw	57
  2599  001CD4  0012               	return	
  2600  001CD6                     l1203:
  2601                           
  2602                           ;system.c: 90: return 'A';
  2603  001CD6  0E41               	movlw	65
  2604  001CD8  0012               	return	
  2605  001CDA                     l1207:
  2606                           
  2607                           ;system.c: 92: return 'B';
  2608  001CDA  0E42               	movlw	66
  2609  001CDC  0012               	return	
  2610  001CDE                     l1211:
  2611                           
  2612                           ;system.c: 94: return 'C';
  2613  001CDE  0E43               	movlw	67
  2614  001CE0  0012               	return	
  2615  001CE2                     l1215:
  2616                           
  2617                           ;system.c: 96: return 'D';
  2618  001CE2  0E44               	movlw	68
  2619  001CE4  0012               	return	
  2620  001CE6                     l1219:
  2621                           
  2622                           ;system.c: 98: return 'E';
  2623  001CE6  0E45               	movlw	69
  2624  001CE8  0012               	return	
  2625  001CEA                     l1223:
  2626                           
  2627                           ;system.c: 100: return 'F';
  2628  001CEA  0E46               	movlw	70
  2629  001CEC  0012               	return	
  2630  001CEE                     l1229:
  2631  001CEE  5001               	movf	hexToChar@number,w,c
  2632                           
  2633                           ; Switch size 1, requested type "space"
  2634                           ; Number of cases is 16, Range of values is 0 to 15
  2635                           ; switch strategies available:
  2636                           ; Name         Instructions Cycles
  2637                           ; simple_byte           49    25 (average)
  2638                           ;	Chosen strategy is simple_byte
  2639  001CF0  0A00               	xorlw	0	; case 0
  2640  001CF2  B4D8               	btfsc	status,2,c
  2641  001CF4  D7DC               	goto	l1163
  2642  001CF6  0A01               	xorlw	1	; case 1
  2643  001CF8  B4D8               	btfsc	status,2,c
  2644  001CFA  D7DB               	goto	l1167
  2645  001CFC  0A03               	xorlw	3	; case 2
  2646  001CFE  B4D8               	btfsc	status,2,c
  2647  001D00  D7DA               	goto	l1171
  2648  001D02  0A01               	xorlw	1	; case 3
  2649  001D04  B4D8               	btfsc	status,2,c
  2650  001D06  D7D9               	goto	l1175
  2651  001D08  0A07               	xorlw	7	; case 4
  2652  001D0A  B4D8               	btfsc	status,2,c
  2653  001D0C  D7D8               	goto	l1179
  2654  001D0E  0A01               	xorlw	1	; case 5
  2655  001D10  B4D8               	btfsc	status,2,c
  2656  001D12  D7D7               	goto	l1183
  2657  001D14  0A03               	xorlw	3	; case 6
  2658  001D16  B4D8               	btfsc	status,2,c
  2659  001D18  D7D6               	goto	l1187
  2660  001D1A  0A01               	xorlw	1	; case 7
  2661  001D1C  B4D8               	btfsc	status,2,c
  2662  001D1E  D7D5               	goto	l1191
  2663  001D20  0A0F               	xorlw	15	; case 8
  2664  001D22  B4D8               	btfsc	status,2,c
  2665  001D24  D7D4               	goto	l1195
  2666  001D26  0A01               	xorlw	1	; case 9
  2667  001D28  B4D8               	btfsc	status,2,c
  2668  001D2A  D7D3               	goto	l1199
  2669  001D2C  0A03               	xorlw	3	; case 10
  2670  001D2E  B4D8               	btfsc	status,2,c
  2671  001D30  D7D2               	goto	l1203
  2672  001D32  0A01               	xorlw	1	; case 11
  2673  001D34  B4D8               	btfsc	status,2,c
  2674  001D36  D7D1               	goto	l1207
  2675  001D38  0A07               	xorlw	7	; case 12
  2676  001D3A  B4D8               	btfsc	status,2,c
  2677  001D3C  D7D0               	goto	l1211
  2678  001D3E  0A01               	xorlw	1	; case 13
  2679  001D40  B4D8               	btfsc	status,2,c
  2680  001D42  D7CF               	goto	l1215
  2681  001D44  0A03               	xorlw	3	; case 14
  2682  001D46  B4D8               	btfsc	status,2,c
  2683  001D48  D7CE               	goto	l1219
  2684  001D4A  0A01               	xorlw	1	; case 15
  2685  001D4C  B4D8               	btfsc	status,2,c
  2686  001D4E  D7CD               	goto	l1223
  2687                           
  2688                           ;system.c: 102: return 0;
  2689  001D50  0E00               	movlw	0
  2690  001D52  0012               	return	
  2691  001D54                     __end_of_hexToChar:
  2692                           	opt stack 0
  2693                           tblptru	equ	0xFF8
  2694                           tblptrh	equ	0xFF7
  2695                           tblptrl	equ	0xFF6
  2696                           tablat	equ	0xFF5
  2697                           prodh	equ	0xFF4
  2698                           prodl	equ	0xFF3
  2699                           postinc0	equ	0xFEE
  2700                           wreg	equ	0xFE8
  2701                           postdec1	equ	0xFE5
  2702                           fsr1h	equ	0xFE2
  2703                           fsr1l	equ	0xFE1
  2704                           indf2	equ	0xFDF
  2705                           fsr2h	equ	0xFDA
  2706                           fsr2l	equ	0xFD9
  2707                           status	equ	0xFD8
  2708                           
  2709 ;; *************** function _enableSerial *****************
  2710 ;; Defined at:
  2711 ;;		line 21 in file "source/serial.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;  baudRate        2    0[COMRAM] unsigned int 
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;		None
  2716 ;; Return value:  Size  Location     Type
  2717 ;;		None               void
  2718 ;; Registers used:
  2719 ;;		wreg, status,2, status,0
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2725 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2726 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2727 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2728 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2729 ;;Total ram usage:        4 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; This function calls:
  2732 ;;		Nothing
  2733 ;; This function is called by:
  2734 ;;		_setPortData
  2735 ;; This function uses a non-reentrant model
  2736 ;;
  2737                           
  2738                           	psect	text7
  2739  001E92                     __ptext7:
  2740                           	opt stack 0
  2741  001E92                     _enableSerial:
  2742                           	opt stack 28
  2743                           
  2744                           ;serial.c: 23: LATDbits.LD3 = 1;
  2745                           
  2746                           ;incstack = 0
  2747  001E92  868C               	bsf	3980,3,c	;volatile
  2748                           
  2749                           ;serial.c: 26: switch (baudRate) {
  2750  001E94  D00B               	goto	l1329
  2751  001E96                     l1319:
  2752                           
  2753                           ;serial.c: 31: SPBRG2 = 103;
  2754  001E96  0E67               	movlw	103
  2755  001E98  D007               	goto	L39
  2756  001E9A                     l1321:
  2757                           
  2758                           ;serial.c: 34: SPBRG2 = 25;
  2759  001E9A  0E19               	movlw	25
  2760  001E9C  D005               	goto	L39
  2761  001E9E                     l1323:
  2762                           
  2763                           ;serial.c: 37: SPBRG2 = 23;
  2764  001E9E  0E17               	movlw	23
  2765  001EA0  D003               	goto	L39
  2766  001EA2                     l1325:
  2767                           
  2768                           ;serial.c: 40: SPBRG2 = 12;
  2769  001EA2  0E0C               	movlw	12
  2770  001EA4  D001               	goto	L39
  2771  001EA6                     l1327:
  2772                           
  2773                           ;serial.c: 43: SPBRG2 = 207;
  2774  001EA6  0ECF               	movlw	207
  2775  001EA8                     L39:
  2776  001EA8  6E75               	movwf	3957,c	;volatile
  2777                           
  2778                           ;serial.c: 44: }
  2779  001EAA  D02C               	goto	l1331
  2780  001EAC                     l1329:
  2781  001EAC  C001  F003         	movff	enableSerial@baudRate,??_enableSerial
  2782  001EB0  C002  F004         	movff	enableSerial@baudRate+1,??_enableSerial+1
  2783                           
  2784                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 5 sub-sw
      +                          itches
  2785                           ; Switch size 1, requested type "space"
  2786                           ; Number of cases is 5, Range of values is 4 to 75
  2787                           ; switch strategies available:
  2788                           ; Name         Instructions Cycles
  2789                           ; simple_byte           16     9 (average)
  2790                           ;	Chosen strategy is simple_byte
  2791  001EB4  5004               	movf	??_enableSerial+1,w,c
  2792  001EB6  0A04               	xorlw	4	; case 4
  2793  001EB8  B4D8               	btfsc	status,2,c
  2794  001EBA  D00D               	goto	l1893
  2795  001EBC  0A0D               	xorlw	13	; case 9
  2796  001EBE  B4D8               	btfsc	status,2,c
  2797  001EC0  D00D               	goto	l1895
  2798  001EC2  0A2C               	xorlw	44	; case 37
  2799  001EC4  B4D8               	btfsc	status,2,c
  2800  001EC6  D00F               	goto	l1897
  2801  001EC8  0A0D               	xorlw	13	; case 40
  2802  001ECA  B4D8               	btfsc	status,2,c
  2803  001ECC  D011               	goto	l1899
  2804  001ECE  0A63               	xorlw	99	; case 75
  2805  001ED0  B4D8               	btfsc	status,2,c
  2806  001ED2  D013               	goto	l1901
  2807  001ED4  D7E8               	goto	l1327
  2808  001ED6                     l1893:
  2809                           
  2810                           ; Switch size 1, requested type "space"
  2811                           ; Number of cases is 1, Range of values is 176 to 176
  2812                           ; switch strategies available:
  2813                           ; Name         Instructions Cycles
  2814                           ; simple_byte            4     3 (average)
  2815                           ;	Chosen strategy is simple_byte
  2816  001ED6  5003               	movf	??_enableSerial,w,c
  2817  001ED8  0AB0               	xorlw	176	; case 176
  2818  001EDA  D7E5               	goto	l1327
  2819  001EDC                     l1895:
  2820                           
  2821                           ; Switch size 1, requested type "space"
  2822                           ; Number of cases is 1, Range of values is 96 to 96
  2823                           ; switch strategies available:
  2824                           ; Name         Instructions Cycles
  2825                           ; simple_byte            4     3 (average)
  2826                           ;	Chosen strategy is simple_byte
  2827  001EDC  5003               	movf	??_enableSerial,w,c
  2828  001EDE  0A60               	xorlw	96	; case 96
  2829  001EE0  B4D8               	btfsc	status,2,c
  2830  001EE2  D7D9               	goto	l1319
  2831  001EE4  D7E0               	goto	l1327
  2832  001EE6                     l1897:
  2833                           
  2834                           ; Switch size 1, requested type "space"
  2835                           ; Number of cases is 1, Range of values is 128 to 128
  2836                           ; switch strategies available:
  2837                           ; Name         Instructions Cycles
  2838                           ; simple_byte            4     3 (average)
  2839                           ;	Chosen strategy is simple_byte
  2840  001EE6  5003               	movf	??_enableSerial,w,c
  2841  001EE8  0A80               	xorlw	128	; case 128
  2842  001EEA  B4D8               	btfsc	status,2,c
  2843  001EEC  D7D6               	goto	l1321
  2844  001EEE  D7DB               	goto	l1327
  2845  001EF0                     l1899:
  2846                           
  2847                           ; Switch size 1, requested type "space"
  2848                           ; Number of cases is 1, Range of values is 177 to 177
  2849                           ; switch strategies available:
  2850                           ; Name         Instructions Cycles
  2851                           ; simple_byte            4     3 (average)
  2852                           ;	Chosen strategy is simple_byte
  2853  001EF0  5003               	movf	??_enableSerial,w,c
  2854  001EF2  0AB1               	xorlw	177	; case 177
  2855  001EF4  B4D8               	btfsc	status,2,c
  2856  001EF6  D7D3               	goto	l1323
  2857  001EF8  D7D6               	goto	l1327
  2858  001EFA                     l1901:
  2859                           
  2860                           ; Switch size 1, requested type "space"
  2861                           ; Number of cases is 1, Range of values is 0 to 0
  2862                           ; switch strategies available:
  2863                           ; Name         Instructions Cycles
  2864                           ; simple_byte            4     3 (average)
  2865                           ;	Chosen strategy is simple_byte
  2866  001EFA  5003               	movf	??_enableSerial,w,c
  2867  001EFC  0A00               	xorlw	0	; case 0
  2868  001EFE  B4D8               	btfsc	status,2,c
  2869  001F00  D7D0               	goto	l1325
  2870  001F02  D7D1               	goto	l1327
  2871  001F04                     l1331:
  2872                           
  2873                           ;serial.c: 46: SPBRGH2 = 0;
  2874  001F04  0E00               	movlw	0
  2875  001F06  6E76               	movwf	3958,c	;volatile
  2876                           
  2877                           ;serial.c: 47: TXSTA2bits.BRGH = 0;
  2878  001F08  9472               	bcf	3954,2,c	;volatile
  2879                           
  2880                           ;serial.c: 48: BAUDCON2bits.BRG16 = 0;
  2881  001F0A  9670               	bcf	3952,3,c	;volatile
  2882                           
  2883                           ;serial.c: 50: TXSTA2bits.TX9 = 0;
  2884  001F0C  9C72               	bcf	3954,6,c	;volatile
  2885                           
  2886                           ;serial.c: 51: RCSTA2bits.RX9 = 0;
  2887  001F0E  9C71               	bcf	3953,6,c	;volatile
  2888                           
  2889                           ;serial.c: 53: TXSTA2bits.SYNC = 0;
  2890  001F10  9872               	bcf	3954,4,c	;volatile
  2891                           
  2892                           ;serial.c: 54: BAUDCON2bits.DTRXP = 0;
  2893  001F12  9A70               	bcf	3952,5,c	;volatile
  2894                           
  2895                           ;serial.c: 56: TXSTA2bits.TXEN = 1;
  2896  001F14  8A72               	bsf	3954,5,c	;volatile
  2897                           
  2898                           ;serial.c: 57: RCSTA2bits.CREN = 1;
  2899  001F16  8871               	bsf	3953,4,c	;volatile
  2900                           
  2901                           ;serial.c: 59: RCSTA2bits.SPEN = 1;
  2902  001F18  8E71               	bsf	3953,7,c	;volatile
  2903  001F1A  0012               	return	
  2904  001F1C                     __end_of_enableSerial:
  2905                           	opt stack 0
  2906                           tblptru	equ	0xFF8
  2907                           tblptrh	equ	0xFF7
  2908                           tblptrl	equ	0xFF6
  2909                           tablat	equ	0xFF5
  2910                           prodh	equ	0xFF4
  2911                           prodl	equ	0xFF3
  2912                           postinc0	equ	0xFEE
  2913                           wreg	equ	0xFE8
  2914                           postdec1	equ	0xFE5
  2915                           fsr1h	equ	0xFE2
  2916                           fsr1l	equ	0xFE1
  2917                           indf2	equ	0xFDF
  2918                           fsr2h	equ	0xFDA
  2919                           fsr2l	equ	0xFD9
  2920                           status	equ	0xFD8
  2921                           
  2922 ;; *************** function _dispSeg *****************
  2923 ;; Defined at:
  2924 ;;		line 13 in file "source/segment.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;  segment         1    wreg     unsigned char 
  2927 ;;  letter          1    0[COMRAM] unsigned char 
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;  segment         1    1[COMRAM] unsigned char 
  2930 ;; Return value:  Size  Location     Type
  2931 ;;		None               void
  2932 ;; Registers used:
  2933 ;;		wreg, status,2, status,0
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2939 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;Total ram usage:        2 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; This function calls:
  2946 ;;		Nothing
  2947 ;; This function is called by:
  2948 ;;		_main
  2949 ;;		_setPortData
  2950 ;;		_cycleSegDisplays
  2951 ;; This function uses a non-reentrant model
  2952 ;;
  2953                           
  2954                           	psect	text8
  2955  001876                     __ptext8:
  2956                           	opt stack 0
  2957  001876                     _dispSeg:
  2958                           	opt stack 28
  2959                           
  2960                           ;incstack = 0
  2961                           ;dispSeg@segment stored from wreg
  2962  001876  CFE8 F002          	movff	wreg,dispSeg@segment
  2963                           
  2964                           ;segment.c: 15: switch (letter) {
  2965  00187A  D156               	goto	l1077
  2966  00187C                     l1003:
  2967                           
  2968                           ;segment.c: 17: case 'X':
  2969                           ;segment.c: 18: if (segment == 1) {
  2970  00187C  0402               	decf	dispSeg@segment,w,c
  2971  00187E  A4D8               	btfss	status,2,c
  2972  001880  D008               	goto	l56
  2973                           
  2974                           ;segment.c: 19: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = LATAbits.LA1 = 0;
  2975  001882  9289               	bcf	3977,1,c	;volatile
  2976  001884  9089               	bcf	3977,0,c	;volatile
  2977  001886  908D               	bcf	3981,0,c	;volatile
  2978  001888  9A89               	bcf	3977,5,c	;volatile
  2979  00188A  9889               	bcf	3977,4,c	;volatile
  2980  00188C  9689               	bcf	3977,3,c	;volatile
  2981  00188E  9489               	bcf	3977,2,c	;volatile
  2982                           
  2983                           ;segment.c: 20: return;
  2984  001890  0012               	return	
  2985  001892                     l56:
  2986                           
  2987                           ;segment.c: 21: }
  2988                           ;segment.c: 22: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = LATEbits.LE2 = 0;
  2989  001892  948D               	bcf	3981,2,c	;volatile
  2990  001894  928D               	bcf	3981,1,c	;volatile
  2991  001896  928B               	bcf	3979,1,c	;volatile
  2992  001898  908B               	bcf	3979,0,c	;volatile
  2993  00189A  948B               	bcf	3979,2,c	;volatile
  2994  00189C  9C89               	bcf	3977,6,c	;volatile
  2995  00189E  9E89               	bcf	3977,7,c	;volatile
  2996                           
  2997                           ;segment.c: 23: break;
  2998  0018A0  0012               	return	
  2999  0018A2                     l1007:
  3000                           
  3001                           ;segment.c: 25: if (segment == 1) {
  3002  0018A2  0402               	decf	dispSeg@segment,w,c
  3003  0018A4  A4D8               	btfss	status,2,c
  3004  0018A6  D008               	goto	l60
  3005                           
  3006                           ;segment.c: 26: LATAbits.LA1 = 1;
  3007  0018A8  8289               	bsf	3977,1,c	;volatile
  3008                           
  3009                           ;segment.c: 27: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = 0;
  3010  0018AA  9089               	bcf	3977,0,c	;volatile
  3011  0018AC  908D               	bcf	3981,0,c	;volatile
  3012  0018AE  9A89               	bcf	3977,5,c	;volatile
  3013  0018B0  9889               	bcf	3977,4,c	;volatile
  3014  0018B2  9689               	bcf	3977,3,c	;volatile
  3015  0018B4  9489               	bcf	3977,2,c	;volatile
  3016                           
  3017                           ;segment.c: 28: return;
  3018  0018B6  0012               	return	
  3019  0018B8                     l60:
  3020                           
  3021                           ;segment.c: 29: }
  3022                           ;segment.c: 30: LATEbits.LE2 = 1;
  3023  0018B8  848D               	bsf	3981,2,c	;volatile
  3024                           
  3025                           ;segment.c: 31: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = 0;
  3026  0018BA  928D               	bcf	3981,1,c	;volatile
  3027  0018BC  928B               	bcf	3979,1,c	;volatile
  3028  0018BE  908B               	bcf	3979,0,c	;volatile
  3029  0018C0  948B               	bcf	3979,2,c	;volatile
  3030  0018C2  9C89               	bcf	3977,6,c	;volatile
  3031  0018C4  9E89               	bcf	3977,7,c	;volatile
  3032                           
  3033                           ;segment.c: 32: break;
  3034  0018C6  0012               	return	
  3035  0018C8                     l1011:
  3036                           
  3037                           ;segment.c: 34: if (segment == 1) {
  3038  0018C8  0402               	decf	dispSeg@segment,w,c
  3039  0018CA  A4D8               	btfss	status,2,c
  3040  0018CC  D008               	goto	l62
  3041                           
  3042                           ;segment.c: 35: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = 1;
  3043  0018CE  8089               	bsf	3977,0,c	;volatile
  3044  0018D0  808D               	bsf	3981,0,c	;volatile
  3045  0018D2  8A89               	bsf	3977,5,c	;volatile
  3046  0018D4  8889               	bsf	3977,4,c	;volatile
  3047  0018D6  8689               	bsf	3977,3,c	;volatile
  3048  0018D8  8489               	bsf	3977,2,c	;volatile
  3049                           
  3050                           ;segment.c: 36: LATAbits.LA1 = 0;
  3051  0018DA  9289               	bcf	3977,1,c	;volatile
  3052                           
  3053                           ;segment.c: 37: return;
  3054  0018DC  0012               	return	
  3055  0018DE                     l62:
  3056                           
  3057                           ;segment.c: 38: }
  3058                           ;segment.c: 39: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = 1;
  3059  0018DE  828D               	bsf	3981,1,c	;volatile
  3060  0018E0  828B               	bsf	3979,1,c	;volatile
  3061  0018E2  808B               	bsf	3979,0,c	;volatile
  3062  0018E4  848B               	bsf	3979,2,c	;volatile
  3063  0018E6  8C89               	bsf	3977,6,c	;volatile
  3064  0018E8  8E89               	bsf	3977,7,c	;volatile
  3065                           
  3066                           ;segment.c: 40: LATEbits.LE2 = 0;
  3067  0018EA  948D               	bcf	3981,2,c	;volatile
  3068                           
  3069                           ;segment.c: 41: break;
  3070  0018EC  0012               	return	
  3071  0018EE                     l1015:
  3072                           
  3073                           ;segment.c: 43: if (segment == 1) {
  3074  0018EE  0402               	decf	dispSeg@segment,w,c
  3075  0018F0  A4D8               	btfss	status,2,c
  3076  0018F2  D008               	goto	l64
  3077                           
  3078                           ;segment.c: 44: LATAbits.LA3 = LATAbits.LA4 = 1;
  3079  0018F4  8889               	bsf	3977,4,c	;volatile
  3080  0018F6  8689               	bsf	3977,3,c	;volatile
  3081                           
  3082                           ;segment.c: 45: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1
      +                           = 0;
  3083  0018F8  9289               	bcf	3977,1,c	;volatile
  3084  0018FA  9089               	bcf	3977,0,c	;volatile
  3085  0018FC  908D               	bcf	3981,0,c	;volatile
  3086  0018FE  9A89               	bcf	3977,5,c	;volatile
  3087  001900  9489               	bcf	3977,2,c	;volatile
  3088                           
  3089                           ;segment.c: 46: return;
  3090  001902  0012               	return	
  3091  001904                     l64:
  3092                           
  3093                           ;segment.c: 47: }
  3094                           ;segment.c: 48: LATAbits.LA6 = LATCbits.LC2 = 1;
  3095  001904  848B               	bsf	3979,2,c	;volatile
  3096  001906  8C89               	bsf	3977,6,c	;volatile
  3097                           
  3098                           ;segment.c: 49: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2
      +                           = 0;
  3099  001908  948D               	bcf	3981,2,c	;volatile
  3100  00190A  928D               	bcf	3981,1,c	;volatile
  3101  00190C  928B               	bcf	3979,1,c	;volatile
  3102  00190E  908B               	bcf	3979,0,c	;volatile
  3103  001910  9E89               	bcf	3977,7,c	;volatile
  3104                           
  3105                           ;segment.c: 50: break;
  3106  001912  0012               	return	
  3107  001914                     l1019:
  3108                           
  3109                           ;segment.c: 52: if (segment == 1) {
  3110  001914  0402               	decf	dispSeg@segment,w,c
  3111  001916  A4D8               	btfss	status,2,c
  3112  001918  D008               	goto	l66
  3113                           
  3114                           ;segment.c: 53: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA1 = LATEbits.LE0 = LATAbits.LA5
      +                           = 1;
  3115  00191A  8A89               	bsf	3977,5,c	;volatile
  3116  00191C  808D               	bsf	3981,0,c	;volatile
  3117  00191E  8289               	bsf	3977,1,c	;volatile
  3118  001920  8689               	bsf	3977,3,c	;volatile
  3119  001922  8489               	bsf	3977,2,c	;volatile
  3120                           
  3121                           ;segment.c: 54: LATAbits.LA4 = LATAbits.LA0 = 0;
  3122  001924  9089               	bcf	3977,0,c	;volatile
  3123  001926  9889               	bcf	3977,4,c	;volatile
  3124                           
  3125                           ;segment.c: 55: return;
  3126  001928  0012               	return	
  3127  00192A                     l66:
  3128                           
  3129                           ;segment.c: 56: }
  3130                           ;segment.c: 57: LATAbits.LA7 = LATAbits.LA6 = LATEbits.LE2 = LATCbits.LC1 = LATCbits.LC0
      +                           = 1;
  3131  00192A  808B               	bsf	3979,0,c	;volatile
  3132  00192C  828B               	bsf	3979,1,c	;volatile
  3133  00192E  848D               	bsf	3981,2,c	;volatile
  3134  001930  8C89               	bsf	3977,6,c	;volatile
  3135  001932  8E89               	bsf	3977,7,c	;volatile
  3136                           
  3137                           ;segment.c: 58: LATCbits.LC2 = LATEbits.LE1 = 0;
  3138  001934  928D               	bcf	3981,1,c	;volatile
  3139  001936  948B               	bcf	3979,2,c	;volatile
  3140                           
  3141                           ;segment.c: 59: break;
  3142  001938  0012               	return	
  3143  00193A                     l1023:
  3144                           
  3145                           ;segment.c: 61: if (segment == 1) {
  3146  00193A  0402               	decf	dispSeg@segment,w,c
  3147  00193C  A4D8               	btfss	status,2,c
  3148  00193E  D008               	goto	l68
  3149                           
  3150                           ;segment.c: 62: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = 1;
  3151  001940  8A89               	bsf	3977,5,c	;volatile
  3152  001942  8889               	bsf	3977,4,c	;volatile
  3153  001944  8289               	bsf	3977,1,c	;volatile
  3154  001946  8689               	bsf	3977,3,c	;volatile
  3155  001948  8489               	bsf	3977,2,c	;volatile
  3156                           
  3157                           ;segment.c: 63: LATEbits.LE0 = LATAbits.LA0 = 0;
  3158  00194A  9089               	bcf	3977,0,c	;volatile
  3159  00194C  908D               	bcf	3981,0,c	;volatile
  3160                           
  3161                           ;segment.c: 64: return;
  3162  00194E  0012               	return	
  3163  001950                     l68:
  3164                           
  3165                           ;segment.c: 65: }
  3166                           ;segment.c: 66: LATAbits.LA7 = LATAbits.LA6 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = 1;
  3167  001950  808B               	bsf	3979,0,c	;volatile
  3168  001952  848B               	bsf	3979,2,c	;volatile
  3169  001954  848D               	bsf	3981,2,c	;volatile
  3170  001956  8C89               	bsf	3977,6,c	;volatile
  3171  001958  8E89               	bsf	3977,7,c	;volatile
  3172                           
  3173                           ;segment.c: 67: LATCbits.LC1 = LATEbits.LE1 = 0;
  3174  00195A  928D               	bcf	3981,1,c	;volatile
  3175  00195C  928B               	bcf	3979,1,c	;volatile
  3176                           
  3177                           ;segment.c: 68: break;
  3178  00195E  0012               	return	
  3179  001960                     l1027:
  3180                           
  3181                           ;segment.c: 70: if (segment == 1) {
  3182  001960  0402               	decf	dispSeg@segment,w,c
  3183  001962  A4D8               	btfss	status,2,c
  3184  001964  D008               	goto	l70
  3185                           
  3186                           ;segment.c: 71: LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA3 = LATAbits.LA4 = 1;
  3187  001966  8889               	bsf	3977,4,c	;volatile
  3188  001968  8689               	bsf	3977,3,c	;volatile
  3189  00196A  8289               	bsf	3977,1,c	;volatile
  3190  00196C  8089               	bsf	3977,0,c	;volatile
  3191                           
  3192                           ;segment.c: 72: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = 0;
  3193  00196E  908D               	bcf	3981,0,c	;volatile
  3194  001970  9A89               	bcf	3977,5,c	;volatile
  3195  001972  9489               	bcf	3977,2,c	;volatile
  3196                           
  3197                           ;segment.c: 73: return;
  3198  001974  0012               	return	
  3199  001976                     l70:
  3200                           
  3201                           ;segment.c: 74: }
  3202                           ;segment.c: 75: LATEbits.LE1 = LATEbits.LE2 = LATAbits.LA6 = LATCbits.LC2 = 1;
  3203  001976  848B               	bsf	3979,2,c	;volatile
  3204  001978  8C89               	bsf	3977,6,c	;volatile
  3205  00197A  848D               	bsf	3981,2,c	;volatile
  3206  00197C  828D               	bsf	3981,1,c	;volatile
  3207                           
  3208                           ;segment.c: 76: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = 0;
  3209  00197E  928B               	bcf	3979,1,c	;volatile
  3210  001980  908B               	bcf	3979,0,c	;volatile
  3211  001982  9E89               	bcf	3977,7,c	;volatile
  3212                           
  3213                           ;segment.c: 77: break;
  3214  001984  0012               	return	
  3215  001986                     l1031:
  3216                           
  3217                           ;segment.c: 79: if (segment == 1) {
  3218  001986  0402               	decf	dispSeg@segment,w,c
  3219  001988  A4D8               	btfss	status,2,c
  3220  00198A  D008               	goto	l72
  3221                           
  3222                           ;segment.c: 80: LATAbits.LA2 = LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = 1;
  3223  00198C  8A89               	bsf	3977,5,c	;volatile
  3224  00198E  8889               	bsf	3977,4,c	;volatile
  3225  001990  8289               	bsf	3977,1,c	;volatile
  3226  001992  8089               	bsf	3977,0,c	;volatile
  3227  001994  8489               	bsf	3977,2,c	;volatile
  3228                           
  3229                           ;segment.c: 81: LATAbits.LA3 = LATEbits.LE0 = 0;
  3230  001996  908D               	bcf	3981,0,c	;volatile
  3231  001998  9689               	bcf	3977,3,c	;volatile
  3232                           
  3233                           ;segment.c: 82: return;
  3234  00199A  0012               	return	
  3235  00199C                     l72:
  3236                           
  3237                           ;segment.c: 83: }
  3238                           ;segment.c: 84: LATAbits.LA7 = LATEbits.LE1 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = 1;
  3239  00199C  808B               	bsf	3979,0,c	;volatile
  3240  00199E  848B               	bsf	3979,2,c	;volatile
  3241  0019A0  848D               	bsf	3981,2,c	;volatile
  3242  0019A2  828D               	bsf	3981,1,c	;volatile
  3243  0019A4  8E89               	bsf	3977,7,c	;volatile
  3244                           
  3245                           ;segment.c: 85: LATAbits.LA6 = LATCbits.LC1 = 0;
  3246  0019A6  928B               	bcf	3979,1,c	;volatile
  3247  0019A8  9C89               	bcf	3977,6,c	;volatile
  3248                           
  3249                           ;segment.c: 86: break;
  3250  0019AA  0012               	return	
  3251  0019AC                     l1035:
  3252                           
  3253                           ;segment.c: 88: if (segment == 1) {
  3254  0019AC  0402               	decf	dispSeg@segment,w,c
  3255  0019AE  A4D8               	btfss	status,2,c
  3256  0019B0  D008               	goto	l74
  3257                           
  3258                           ;segment.c: 89: LATAbits.LA2 = LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = LATEbits.LE0 = 1;
  3259  0019B2  808D               	bsf	3981,0,c	;volatile
  3260  0019B4  8A89               	bsf	3977,5,c	;volatile
  3261  0019B6  8889               	bsf	3977,4,c	;volatile
  3262  0019B8  8289               	bsf	3977,1,c	;volatile
  3263  0019BA  8089               	bsf	3977,0,c	;volatile
  3264  0019BC  8489               	bsf	3977,2,c	;volatile
  3265                           
  3266                           ;segment.c: 90: LATAbits.LA3 = 0;
  3267  0019BE  9689               	bcf	3977,3,c	;volatile
  3268                           
  3269                           ;segment.c: 91: return;
  3270  0019C0  0012               	return	
  3271  0019C2                     l74:
  3272                           
  3273                           ;segment.c: 92: }
  3274                           ;segment.c: 93: LATAbits.LA7 = LATEbits.LE1 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = LATCbits.LC1 = 1;
  3275  0019C2  828B               	bsf	3979,1,c	;volatile
  3276  0019C4  808B               	bsf	3979,0,c	;volatile
  3277  0019C6  848B               	bsf	3979,2,c	;volatile
  3278  0019C8  848D               	bsf	3981,2,c	;volatile
  3279  0019CA  828D               	bsf	3981,1,c	;volatile
  3280  0019CC  8E89               	bsf	3977,7,c	;volatile
  3281                           
  3282                           ;segment.c: 94: LATAbits.LA6 = 0;
  3283  0019CE  9C89               	bcf	3977,6,c	;volatile
  3284                           
  3285                           ;segment.c: 95: break;
  3286  0019D0  0012               	return	
  3287  0019D2                     l1039:
  3288                           
  3289                           ;segment.c: 97: if (segment == 1) {
  3290  0019D2  0402               	decf	dispSeg@segment,w,c
  3291  0019D4  A4D8               	btfss	status,2,c
  3292  0019D6  D008               	goto	l76
  3293                           
  3294                           ;segment.c: 98: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = 1;
  3295  0019D8  8889               	bsf	3977,4,c	;volatile
  3296  0019DA  8689               	bsf	3977,3,c	;volatile
  3297  0019DC  8489               	bsf	3977,2,c	;volatile
  3298                           
  3299                           ;segment.c: 99: LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1 = 0;
  3300  0019DE  9289               	bcf	3977,1,c	;volatile
  3301  0019E0  9089               	bcf	3977,0,c	;volatile
  3302  0019E2  908D               	bcf	3981,0,c	;volatile
  3303  0019E4  9A89               	bcf	3977,5,c	;volatile
  3304                           
  3305                           ;segment.c: 100: return;
  3306  0019E6  0012               	return	
  3307  0019E8                     l76:
  3308                           
  3309                           ;segment.c: 101: }
  3310                           ;segment.c: 102: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = 1;
  3311  0019E8  848B               	bsf	3979,2,c	;volatile
  3312  0019EA  8C89               	bsf	3977,6,c	;volatile
  3313  0019EC  8E89               	bsf	3977,7,c	;volatile
  3314                           
  3315                           ;segment.c: 103: LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2 = 0;
  3316  0019EE  948D               	bcf	3981,2,c	;volatile
  3317  0019F0  928D               	bcf	3981,1,c	;volatile
  3318  0019F2  928B               	bcf	3979,1,c	;volatile
  3319  0019F4  908B               	bcf	3979,0,c	;volatile
  3320                           
  3321                           ;segment.c: 104: break;
  3322  0019F6  0012               	return	
  3323  0019F8                     l1043:
  3324                           
  3325                           ;segment.c: 106: if (segment == 1) {
  3326  0019F8  0402               	decf	dispSeg@segment,w,c
  3327  0019FA  A4D8               	btfss	status,2,c
  3328  0019FC  D008               	goto	l78
  3329                           
  3330                           ;segment.c: 107: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE
      +                          0 = LATAbits.LA0 = LATAbits.LA1 = 1;
  3331  0019FE  8289               	bsf	3977,1,c	;volatile
  3332  001A00  8089               	bsf	3977,0,c	;volatile
  3333  001A02  808D               	bsf	3981,0,c	;volatile
  3334  001A04  8A89               	bsf	3977,5,c	;volatile
  3335  001A06  8889               	bsf	3977,4,c	;volatile
  3336  001A08  8689               	bsf	3977,3,c	;volatile
  3337  001A0A  8489               	bsf	3977,2,c	;volatile
  3338                           
  3339                           ;segment.c: 108: return;
  3340  001A0C  0012               	return	
  3341  001A0E                     l78:
  3342                           
  3343                           ;segment.c: 109: }
  3344                           ;segment.c: 110: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC
      +                          1 = LATEbits.LE1 = LATEbits.LE2 = 1;
  3345  001A0E  848D               	bsf	3981,2,c	;volatile
  3346  001A10  828D               	bsf	3981,1,c	;volatile
  3347  001A12  828B               	bsf	3979,1,c	;volatile
  3348  001A14  808B               	bsf	3979,0,c	;volatile
  3349  001A16  848B               	bsf	3979,2,c	;volatile
  3350  001A18  8C89               	bsf	3977,6,c	;volatile
  3351  001A1A  8E89               	bsf	3977,7,c	;volatile
  3352                           
  3353                           ;segment.c: 111: break;
  3354  001A1C  0012               	return	
  3355  001A1E                     l1047:
  3356                           
  3357                           ;segment.c: 113: if (segment == 1) {
  3358  001A1E  0402               	decf	dispSeg@segment,w,c
  3359  001A20  A4D8               	btfss	status,2,c
  3360  001A22  D008               	goto	l80
  3361                           
  3362                           ;segment.c: 114: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATAbits.LA
      +                          0 = LATAbits.LA1 = 1;
  3363  001A24  8289               	bsf	3977,1,c	;volatile
  3364  001A26  8089               	bsf	3977,0,c	;volatile
  3365  001A28  8A89               	bsf	3977,5,c	;volatile
  3366  001A2A  8889               	bsf	3977,4,c	;volatile
  3367  001A2C  8689               	bsf	3977,3,c	;volatile
  3368  001A2E  8489               	bsf	3977,2,c	;volatile
  3369                           
  3370                           ;segment.c: 115: LATEbits.LE0 = 0;
  3371  001A30  908D               	bcf	3981,0,c	;volatile
  3372                           
  3373                           ;segment.c: 116: return;
  3374  001A32  0012               	return	
  3375  001A34                     l80:
  3376                           
  3377                           ;segment.c: 117: }
  3378                           ;segment.c: 118: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATEbits.LE
      +                          1 = LATEbits.LE2 = 1;
  3379  001A34  848D               	bsf	3981,2,c	;volatile
  3380  001A36  828D               	bsf	3981,1,c	;volatile
  3381  001A38  808B               	bsf	3979,0,c	;volatile
  3382  001A3A  848B               	bsf	3979,2,c	;volatile
  3383  001A3C  8C89               	bsf	3977,6,c	;volatile
  3384  001A3E  8E89               	bsf	3977,7,c	;volatile
  3385                           
  3386                           ;segment.c: 119: LATCbits.LC1 = 0;
  3387  001A40  928B               	bcf	3979,1,c	;volatile
  3388                           
  3389                           ;segment.c: 120: break;
  3390  001A42  0012               	return	
  3391  001A44                     l1051:
  3392                           
  3393                           ;segment.c: 122: case 'A':
  3394                           ;segment.c: 123: if (segment == 1) {
  3395  001A44  0402               	decf	dispSeg@segment,w,c
  3396  001A46  A4D8               	btfss	status,2,c
  3397  001A48  D008               	goto	l83
  3398                           
  3399                           ;segment.c: 124: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATEbits.LE0 = LATAbits.LA
      +                          0 = LATAbits.LA1 = 1;
  3400  001A4A  8289               	bsf	3977,1,c	;volatile
  3401  001A4C  8089               	bsf	3977,0,c	;volatile
  3402  001A4E  808D               	bsf	3981,0,c	;volatile
  3403  001A50  8889               	bsf	3977,4,c	;volatile
  3404  001A52  8689               	bsf	3977,3,c	;volatile
  3405  001A54  8489               	bsf	3977,2,c	;volatile
  3406                           
  3407                           ;segment.c: 125: LATAbits.LA5 = 0;
  3408  001A56  9A89               	bcf	3977,5,c	;volatile
  3409                           
  3410                           ;segment.c: 126: return;
  3411  001A58  0012               	return	
  3412  001A5A                     l83:
  3413                           
  3414                           ;segment.c: 127: }
  3415                           ;segment.c: 128: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC1 = LATEbits.LE
      +                          1 = LATEbits.LE2 = 1;
  3416  001A5A  848D               	bsf	3981,2,c	;volatile
  3417  001A5C  828D               	bsf	3981,1,c	;volatile
  3418  001A5E  828B               	bsf	3979,1,c	;volatile
  3419  001A60  848B               	bsf	3979,2,c	;volatile
  3420  001A62  8C89               	bsf	3977,6,c	;volatile
  3421  001A64  8E89               	bsf	3977,7,c	;volatile
  3422                           
  3423                           ;segment.c: 129: LATCbits.LC0 = 0;
  3424  001A66  908B               	bcf	3979,0,c	;volatile
  3425                           
  3426                           ;segment.c: 130: break;
  3427  001A68  0012               	return	
  3428  001A6A                     l1055:
  3429                           
  3430                           ;segment.c: 132: case 'B':
  3431                           ;segment.c: 133: if (segment == 1) {
  3432  001A6A  0402               	decf	dispSeg@segment,w,c
  3433  001A6C  A4D8               	btfss	status,2,c
  3434  001A6E  D008               	goto	l86
  3435                           
  3436                           ;segment.c: 134: LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA
      +                          1 = 1;
  3437  001A70  8289               	bsf	3977,1,c	;volatile
  3438  001A72  8089               	bsf	3977,0,c	;volatile
  3439  001A74  808D               	bsf	3981,0,c	;volatile
  3440  001A76  8A89               	bsf	3977,5,c	;volatile
  3441  001A78  8889               	bsf	3977,4,c	;volatile
  3442                           
  3443                           ;segment.c: 135: LATAbits.LA2 = LATAbits.LA3 = 0;
  3444  001A7A  9689               	bcf	3977,3,c	;volatile
  3445  001A7C  9489               	bcf	3977,2,c	;volatile
  3446                           
  3447                           ;segment.c: 136: return;
  3448  001A7E  0012               	return	
  3449  001A80                     l86:
  3450                           
  3451                           ;segment.c: 137: }
  3452                           ;segment.c: 138: LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE
      +                          2 = 1;
  3453  001A80  848D               	bsf	3981,2,c	;volatile
  3454  001A82  828D               	bsf	3981,1,c	;volatile
  3455  001A84  828B               	bsf	3979,1,c	;volatile
  3456  001A86  808B               	bsf	3979,0,c	;volatile
  3457  001A88  848B               	bsf	3979,2,c	;volatile
  3458                           
  3459                           ;segment.c: 139: LATAbits.LA7 = LATAbits.LA6 = 0;
  3460  001A8A  9C89               	bcf	3977,6,c	;volatile
  3461  001A8C  9E89               	bcf	3977,7,c	;volatile
  3462                           
  3463                           ;segment.c: 140: break;
  3464  001A8E  0012               	return	
  3465  001A90                     l1059:
  3466                           
  3467                           ;segment.c: 142: case 'C':
  3468                           ;segment.c: 143: if (segment == 1) {
  3469  001A90  0402               	decf	dispSeg@segment,w,c
  3470  001A92  A4D8               	btfss	status,2,c
  3471  001A94  D008               	goto	l89
  3472                           
  3473                           ;segment.c: 144: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = 1;
  3474  001A96  8089               	bsf	3977,0,c	;volatile
  3475  001A98  808D               	bsf	3981,0,c	;volatile
  3476  001A9A  8A89               	bsf	3977,5,c	;volatile
  3477  001A9C  8489               	bsf	3977,2,c	;volatile
  3478                           
  3479                           ;segment.c: 145: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA1 = 0;
  3480  001A9E  9289               	bcf	3977,1,c	;volatile
  3481  001AA0  9889               	bcf	3977,4,c	;volatile
  3482  001AA2  9689               	bcf	3977,3,c	;volatile
  3483                           
  3484                           ;segment.c: 146: return;
  3485  001AA4  0012               	return	
  3486  001AA6                     l89:
  3487                           
  3488                           ;segment.c: 147: }
  3489                           ;segment.c: 148: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = 1;
  3490  001AA6  828D               	bsf	3981,1,c	;volatile
  3491  001AA8  828B               	bsf	3979,1,c	;volatile
  3492  001AAA  808B               	bsf	3979,0,c	;volatile
  3493  001AAC  8E89               	bsf	3977,7,c	;volatile
  3494                           
  3495                           ;segment.c: 149: LATAbits.LA6 = LATCbits.LC2 = LATEbits.LE2 = 0;
  3496  001AAE  948D               	bcf	3981,2,c	;volatile
  3497  001AB0  948B               	bcf	3979,2,c	;volatile
  3498  001AB2  9C89               	bcf	3977,6,c	;volatile
  3499                           
  3500                           ;segment.c: 150: break;
  3501  001AB4  0012               	return	
  3502  001AB6                     l1063:
  3503                           
  3504                           ;segment.c: 152: case 'D':
  3505                           ;segment.c: 153: if (segment == 1) {
  3506  001AB6  0402               	decf	dispSeg@segment,w,c
  3507  001AB8  A4D8               	btfss	status,2,c
  3508  001ABA  D008               	goto	l92
  3509                           
  3510                           ;segment.c: 154: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA
      +                          1 = 1;
  3511  001ABC  8289               	bsf	3977,1,c	;volatile
  3512  001ABE  808D               	bsf	3981,0,c	;volatile
  3513  001AC0  8A89               	bsf	3977,5,c	;volatile
  3514  001AC2  8889               	bsf	3977,4,c	;volatile
  3515  001AC4  8689               	bsf	3977,3,c	;volatile
  3516                           
  3517                           ;segment.c: 155: LATAbits.LA2 = LATAbits.LA0 = 0;
  3518  001AC6  9089               	bcf	3977,0,c	;volatile
  3519  001AC8  9489               	bcf	3977,2,c	;volatile
  3520                           
  3521                           ;segment.c: 156: return;
  3522  001ACA  0012               	return	
  3523  001ACC                     l92:
  3524                           
  3525                           ;segment.c: 157: }
  3526                           ;segment.c: 158: LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE
      +                          2 = 1;
  3527  001ACC  848D               	bsf	3981,2,c	;volatile
  3528  001ACE  828B               	bsf	3979,1,c	;volatile
  3529  001AD0  808B               	bsf	3979,0,c	;volatile
  3530  001AD2  848B               	bsf	3979,2,c	;volatile
  3531  001AD4  8C89               	bsf	3977,6,c	;volatile
  3532                           
  3533                           ;segment.c: 159: LATAbits.LA7 = LATEbits.LE1 = 0;
  3534  001AD6  928D               	bcf	3981,1,c	;volatile
  3535  001AD8  9E89               	bcf	3977,7,c	;volatile
  3536                           
  3537                           ;segment.c: 160: break;
  3538  001ADA  0012               	return	
  3539  001ADC                     l1067:
  3540                           
  3541                           ;segment.c: 162: case 'E':
  3542                           ;segment.c: 163: if (segment == 1) {
  3543  001ADC  0402               	decf	dispSeg@segment,w,c
  3544  001ADE  A4D8               	btfss	status,2,c
  3545  001AE0  D008               	goto	l95
  3546                           
  3547                           ;segment.c: 164: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA
      +                          1 = 1;
  3548  001AE2  8289               	bsf	3977,1,c	;volatile
  3549  001AE4  8089               	bsf	3977,0,c	;volatile
  3550  001AE6  808D               	bsf	3981,0,c	;volatile
  3551  001AE8  8A89               	bsf	3977,5,c	;volatile
  3552  001AEA  8489               	bsf	3977,2,c	;volatile
  3553                           
  3554                           ;segment.c: 165: LATAbits.LA3 = LATAbits.LA4 = 0;
  3555  001AEC  9889               	bcf	3977,4,c	;volatile
  3556  001AEE  9689               	bcf	3977,3,c	;volatile
  3557                           
  3558                           ;segment.c: 166: return;
  3559  001AF0  0012               	return	
  3560  001AF2                     l95:
  3561                           
  3562                           ;segment.c: 167: }
  3563                           ;segment.c: 168: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE
      +                          2 = 1;
  3564  001AF2  848D               	bsf	3981,2,c	;volatile
  3565  001AF4  828D               	bsf	3981,1,c	;volatile
  3566  001AF6  828B               	bsf	3979,1,c	;volatile
  3567  001AF8  808B               	bsf	3979,0,c	;volatile
  3568  001AFA  8E89               	bsf	3977,7,c	;volatile
  3569                           
  3570                           ;segment.c: 169: LATAbits.LA6 = LATCbits.LC2 = 0;
  3571  001AFC  948B               	bcf	3979,2,c	;volatile
  3572  001AFE  9C89               	bcf	3977,6,c	;volatile
  3573                           
  3574                           ;segment.c: 170: break;
  3575  001B00  0012               	return	
  3576  001B02                     l1071:
  3577                           
  3578                           ;segment.c: 172: case 'F':
  3579                           ;segment.c: 173: if (segment == 1) {
  3580  001B02  0402               	decf	dispSeg@segment,w,c
  3581  001B04  A4D8               	btfss	status,2,c
  3582  001B06  D008               	goto	l98
  3583                           
  3584                           ;segment.c: 174: LATAbits.LA2 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1 = 1;
  3585  001B08  8289               	bsf	3977,1,c	;volatile
  3586  001B0A  8089               	bsf	3977,0,c	;volatile
  3587  001B0C  808D               	bsf	3981,0,c	;volatile
  3588  001B0E  8489               	bsf	3977,2,c	;volatile
  3589                           
  3590                           ;segment.c: 175: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = 0;
  3591  001B10  9A89               	bcf	3977,5,c	;volatile
  3592  001B12  9889               	bcf	3977,4,c	;volatile
  3593  001B14  9689               	bcf	3977,3,c	;volatile
  3594                           
  3595                           ;segment.c: 176: return;
  3596  001B16  0012               	return	
  3597  001B18                     l98:
  3598                           
  3599                           ;segment.c: 177: }
  3600                           ;segment.c: 178: LATAbits.LA7 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2 = 1;
  3601  001B18  848D               	bsf	3981,2,c	;volatile
  3602  001B1A  828D               	bsf	3981,1,c	;volatile
  3603  001B1C  828B               	bsf	3979,1,c	;volatile
  3604  001B1E  8E89               	bsf	3977,7,c	;volatile
  3605                           
  3606                           ;segment.c: 179: LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = 0;
  3607  001B20  908B               	bcf	3979,0,c	;volatile
  3608  001B22  948B               	bcf	3979,2,c	;volatile
  3609  001B24  9C89               	bcf	3977,6,c	;volatile
  3610                           
  3611                           ;segment.c: 180: break;
  3612  001B26  0012               	return	
  3613  001B28                     l1077:
  3614  001B28  5001               	movf	dispSeg@letter,w,c
  3615                           
  3616                           ; Switch size 1, requested type "space"
  3617                           ; Number of cases is 25, Range of values is 45 to 120
  3618                           ; switch strategies available:
  3619                           ; Name         Instructions Cycles
  3620                           ; simple_byte           76    39 (average)
  3621                           ;	Chosen strategy is simple_byte
  3622  001B2A  0A2D               	xorlw	45	; case 45
  3623  001B2C  B4D8               	btfsc	status,2,c
  3624  001B2E  D6B9               	goto	l1007
  3625  001B30  0A1D               	xorlw	29	; case 48
  3626  001B32  B4D8               	btfsc	status,2,c
  3627  001B34  D6C9               	goto	l1011
  3628  001B36  0A01               	xorlw	1	; case 49
  3629  001B38  B4D8               	btfsc	status,2,c
  3630  001B3A  D6D9               	goto	l1015
  3631  001B3C  0A03               	xorlw	3	; case 50
  3632  001B3E  B4D8               	btfsc	status,2,c
  3633  001B40  D6E9               	goto	l1019
  3634  001B42  0A01               	xorlw	1	; case 51
  3635  001B44  B4D8               	btfsc	status,2,c
  3636  001B46  D6F9               	goto	l1023
  3637  001B48  0A07               	xorlw	7	; case 52
  3638  001B4A  B4D8               	btfsc	status,2,c
  3639  001B4C  D709               	goto	l1027
  3640  001B4E  0A01               	xorlw	1	; case 53
  3641  001B50  B4D8               	btfsc	status,2,c
  3642  001B52  D719               	goto	l1031
  3643  001B54  0A03               	xorlw	3	; case 54
  3644  001B56  B4D8               	btfsc	status,2,c
  3645  001B58  D729               	goto	l1035
  3646  001B5A  0A01               	xorlw	1	; case 55
  3647  001B5C  B4D8               	btfsc	status,2,c
  3648  001B5E  D739               	goto	l1039
  3649  001B60  0A0F               	xorlw	15	; case 56
  3650  001B62  B4D8               	btfsc	status,2,c
  3651  001B64  D749               	goto	l1043
  3652  001B66  0A01               	xorlw	1	; case 57
  3653  001B68  B4D8               	btfsc	status,2,c
  3654  001B6A  D759               	goto	l1047
  3655  001B6C  0A78               	xorlw	120	; case 65
  3656  001B6E  B4D8               	btfsc	status,2,c
  3657  001B70  D769               	goto	l1051
  3658  001B72  0A03               	xorlw	3	; case 66
  3659  001B74  B4D8               	btfsc	status,2,c
  3660  001B76  D779               	goto	l1055
  3661  001B78  0A01               	xorlw	1	; case 67
  3662  001B7A  B4D8               	btfsc	status,2,c
  3663  001B7C  D789               	goto	l1059
  3664  001B7E  0A07               	xorlw	7	; case 68
  3665  001B80  B4D8               	btfsc	status,2,c
  3666  001B82  D799               	goto	l1063
  3667  001B84  0A01               	xorlw	1	; case 69
  3668  001B86  B4D8               	btfsc	status,2,c
  3669  001B88  D7A9               	goto	l1067
  3670  001B8A  0A03               	xorlw	3	; case 70
  3671  001B8C  B4D8               	btfsc	status,2,c
  3672  001B8E  D7B9               	goto	l1071
  3673  001B90  0A1E               	xorlw	30	; case 88
  3674  001B92  B4D8               	btfsc	status,2,c
  3675  001B94  D673               	goto	l1003
  3676  001B96  0A39               	xorlw	57	; case 97
  3677  001B98  B4D8               	btfsc	status,2,c
  3678  001B9A  D754               	goto	l1051
  3679  001B9C  0A03               	xorlw	3	; case 98
  3680  001B9E  B4D8               	btfsc	status,2,c
  3681  001BA0  D764               	goto	l1055
  3682  001BA2  0A01               	xorlw	1	; case 99
  3683  001BA4  B4D8               	btfsc	status,2,c
  3684  001BA6  D774               	goto	l1059
  3685  001BA8  0A07               	xorlw	7	; case 100
  3686  001BAA  B4D8               	btfsc	status,2,c
  3687  001BAC  D784               	goto	l1063
  3688  001BAE  0A01               	xorlw	1	; case 101
  3689  001BB0  B4D8               	btfsc	status,2,c
  3690  001BB2  D794               	goto	l1067
  3691  001BB4  0A03               	xorlw	3	; case 102
  3692  001BB6  B4D8               	btfsc	status,2,c
  3693  001BB8  D7A4               	goto	l1071
  3694  001BBA  0A1E               	xorlw	30	; case 120
  3695  001BBC  A4D8               	btfss	status,2,c
  3696  001BBE  0012               	return	
  3697  001BC0  D65D               	goto	l1003
  3698  001BC2                     __end_of_dispSeg:
  3699                           	opt stack 0
  3700                           tblptru	equ	0xFF8
  3701                           tblptrh	equ	0xFF7
  3702                           tblptrl	equ	0xFF6
  3703                           tablat	equ	0xFF5
  3704                           prodh	equ	0xFF4
  3705                           prodl	equ	0xFF3
  3706                           postinc0	equ	0xFEE
  3707                           wreg	equ	0xFE8
  3708                           postdec1	equ	0xFE5
  3709                           fsr1h	equ	0xFE2
  3710                           fsr1l	equ	0xFE1
  3711                           indf2	equ	0xFDF
  3712                           fsr2h	equ	0xFDA
  3713                           fsr2l	equ	0xFD9
  3714                           status	equ	0xFD8
  3715                           
  3716 ;; *************** function _setMXbits *****************
  3717 ;; Defined at:
  3718 ;;		line 37 in file "source/emulator.c"
  3719 ;; Parameters:    Size  Location     Type
  3720 ;;  subRegister     1    wreg     unsigned char 
  3721 ;;  value           1    0[COMRAM] unsigned char 
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;  subRegister     1    3[COMRAM] unsigned char 
  3724 ;;  regMX_temp      2    4[COMRAM] unsigned int 
  3725 ;;  value_temp      2    1[COMRAM] unsigned int 
  3726 ;; Return value:  Size  Location     Type
  3727 ;;		None               void
  3728 ;; Registers used:
  3729 ;;		wreg, status,2, status,0
  3730 ;; Tracked objects:
  3731 ;;		On entry : 0/0
  3732 ;;		On exit  : 0/0
  3733 ;;		Unchanged: 0/0
  3734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3735 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3736 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3738 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3739 ;;Total ram usage:        6 bytes
  3740 ;; Hardware stack levels used:    1
  3741 ;; This function calls:
  3742 ;;		Nothing
  3743 ;; This function is called by:
  3744 ;;		_processOpcode
  3745 ;; This function uses a non-reentrant model
  3746 ;;
  3747                           
  3748                           	psect	text9
  3749  001FF6                     __ptext9:
  3750                           	opt stack 0
  3751  001FF6                     _setMXbits:
  3752                           	opt stack 29
  3753                           
  3754                           ;incstack = 0
  3755                           ;setMXbits@subRegister stored from wreg
  3756  001FF6  CFE8 F004          	movff	wreg,setMXbits@subRegister
  3757                           
  3758                           ;emulator.c: 39: uint16_t value_temp = (uint16_t) value;
  3759  001FFA  C001  F002         	movff	setMXbits@value,setMXbits@value_temp
  3760  001FFE  6A03               	clrf	setMXbits@value_temp+1,c
  3761                           
  3762                           ;emulator.c: 40: uint16_t regMX_temp = regMX;
  3763  002000  C016  F005         	movff	_regMX,setMXbits@regMX_temp
  3764  002004  C017  F006         	movff	_regMX+1,setMXbits@regMX_temp+1
  3765                           
  3766                           ;emulator.c: 42: switch(subRegister)
  3767  002008  D011               	goto	l1251
  3768  00200A                     l1245:
  3769                           
  3770                           ;emulator.c: 45: regMX_temp <<= 8;
  3771  00200A  5005               	movf	setMXbits@regMX_temp,w,c
  3772  00200C  6E06               	movwf	setMXbits@regMX_temp+1,c
  3773  00200E  6A05               	clrf	setMXbits@regMX_temp,c
  3774                           
  3775                           ;emulator.c: 46: regMX_temp >>= 8;
  3776  002010  5006               	movf	setMXbits@regMX_temp+1,w,c
  3777  002012  6E05               	movwf	setMXbits@regMX_temp,c
  3778  002014  6A06               	clrf	setMXbits@regMX_temp+1,c
  3779                           
  3780                           ;emulator.c: 47: value_temp <<= 8;
  3781  002016  5002               	movf	setMXbits@value_temp,w,c
  3782  002018  6E03               	movwf	setMXbits@value_temp+1,c
  3783  00201A  6A02               	clrf	setMXbits@value_temp,c
  3784                           
  3785                           ;emulator.c: 48: break;
  3786  00201C  D00E               	goto	l1253
  3787  00201E                     l1247:
  3788                           
  3789                           ;emulator.c: 51: regMX_temp >>= 8;
  3790  00201E  5006               	movf	setMXbits@regMX_temp+1,w,c
  3791  002020  6E05               	movwf	setMXbits@regMX_temp,c
  3792  002022  6A06               	clrf	setMXbits@regMX_temp+1,c
  3793                           
  3794                           ;emulator.c: 52: regMX_temp <<= 8;
  3795  002024  5005               	movf	setMXbits@regMX_temp,w,c
  3796  002026  6E06               	movwf	setMXbits@regMX_temp+1,c
  3797  002028  6A05               	clrf	setMXbits@regMX_temp,c
  3798                           
  3799                           ;emulator.c: 53: break;
  3800  00202A  D007               	goto	l1253
  3801  00202C                     l1251:
  3802  00202C  5004               	movf	setMXbits@subRegister,w,c
  3803                           
  3804                           ; Switch size 1, requested type "space"
  3805                           ; Number of cases is 2, Range of values is 0 to 1
  3806                           ; switch strategies available:
  3807                           ; Name         Instructions Cycles
  3808                           ; simple_byte            7     4 (average)
  3809                           ;	Chosen strategy is simple_byte
  3810  00202E  0A00               	xorlw	0	; case 0
  3811  002030  B4D8               	btfsc	status,2,c
  3812  002032  D7EB               	goto	l1245
  3813  002034  0A01               	xorlw	1	; case 1
  3814  002036  B4D8               	btfsc	status,2,c
  3815  002038  D7F2               	goto	l1247
  3816  00203A                     l1253:
  3817                           
  3818                           ;emulator.c: 56: regMX = regMX_temp + value_temp;
  3819  00203A  5002               	movf	setMXbits@value_temp,w,c
  3820  00203C  2405               	addwf	setMXbits@regMX_temp,w,c
  3821  00203E  6E16               	movwf	_regMX,c
  3822  002040  5003               	movf	setMXbits@value_temp+1,w,c
  3823  002042  2006               	addwfc	setMXbits@regMX_temp+1,w,c
  3824  002044  6E17               	movwf	_regMX+1,c
  3825  002046  0012               	return	
  3826  002048                     __end_of_setMXbits:
  3827                           	opt stack 0
  3828                           tblptru	equ	0xFF8
  3829                           tblptrh	equ	0xFF7
  3830                           tblptrl	equ	0xFF6
  3831                           tablat	equ	0xFF5
  3832                           prodh	equ	0xFF4
  3833                           prodl	equ	0xFF3
  3834                           postinc0	equ	0xFEE
  3835                           wreg	equ	0xFE8
  3836                           postdec1	equ	0xFE5
  3837                           fsr1h	equ	0xFE2
  3838                           fsr1l	equ	0xFE1
  3839                           indf2	equ	0xFDF
  3840                           fsr2h	equ	0xFDA
  3841                           fsr2l	equ	0xFD9
  3842                           status	equ	0xFD8
  3843                           
  3844 ;; *************** function _setFbits *****************
  3845 ;; Defined at:
  3846 ;;		line 105 in file "source/emulator.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;  subRegister     1    wreg     unsigned char 
  3849 ;;  value           1    0[COMRAM] unsigned char 
  3850 ;; Auto vars:     Size  Location     Type
  3851 ;;  subRegister     1    2[COMRAM] unsigned char 
  3852 ;;  regF_temp1      1    4[COMRAM] unsigned char 
  3853 ;;  regF_temp2      1    3[COMRAM] unsigned char 
  3854 ;; Return value:  Size  Location     Type
  3855 ;;		None               void
  3856 ;; Registers used:
  3857 ;;		wreg, status,2, status,0
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3863 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3864 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3865 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;Total ram usage:        5 bytes
  3868 ;; Hardware stack levels used:    1
  3869 ;; This function calls:
  3870 ;;		Nothing
  3871 ;; This function is called by:
  3872 ;;		_processOpcode
  3873 ;; This function uses a non-reentrant model
  3874 ;;
  3875                           
  3876                           	psect	text10
  3877  001BC2                     __ptext10:
  3878                           	opt stack 0
  3879  001BC2                     _setFbits:
  3880                           	opt stack 29
  3881                           
  3882                           ;incstack = 0
  3883                           ;setFbits@subRegister stored from wreg
  3884  001BC2  CFE8 F003          	movff	wreg,setFbits@subRegister
  3885                           
  3886                           ;emulator.c: 107: uint8_t regF_temp1 = regF;
  3887  001BC6  C01F  F005         	movff	_regF,setFbits@regF_temp1
  3888                           
  3889                           ;emulator.c: 108: uint8_t regF_temp2 = regF;
  3890  001BCA  C01F  F004         	movff	_regF,setFbits@regF_temp2
  3891                           
  3892                           ;emulator.c: 110: switch(subRegister)
  3893  001BCE  D051               	goto	l1291
  3894  001BD0                     l1277:
  3895                           
  3896                           ;emulator.c: 113: regF_temp1 >>= 1;
  3897  001BD0  90D8               	bcf	status,0,c
  3898  001BD2  3205               	rrcf	setFbits@regF_temp1,f,c
  3899                           
  3900                           ;emulator.c: 114: regF_temp1 <<= 1;
  3901  001BD4  90D8               	bcf	status,0,c
  3902  001BD6  3605               	rlcf	setFbits@regF_temp1,f,c
  3903                           
  3904                           ;emulator.c: 115: regF_temp2 = 0;
  3905  001BD8  6E02               	movwf	??_setFbits& (0+255),c
  3906  001BDA  0E00               	movlw	0
  3907  001BDC  6E04               	movwf	setFbits@regF_temp2,c
  3908  001BDE  5002               	movf	??_setFbits& (0+255),w,c
  3909                           
  3910                           ;emulator.c: 116: break;
  3911  001BE0  D058               	goto	l1293
  3912  001BE2                     l1281:
  3913                           
  3914                           ;emulator.c: 119: regF_temp1 >>= 2;
  3915  001BE2  90D8               	bcf	status,0,c
  3916  001BE4  3205               	rrcf	setFbits@regF_temp1,f,c
  3917  001BE6  90D8               	bcf	status,0,c
  3918  001BE8  3205               	rrcf	setFbits@regF_temp1,f,c
  3919                           
  3920                           ;emulator.c: 120: regF_temp1 <<= 2;
  3921  001BEA  90D8               	bcf	status,0,c
  3922  001BEC  3605               	rlcf	setFbits@regF_temp1,f,c
  3923  001BEE  90D8               	bcf	status,0,c
  3924  001BF0  3605               	rlcf	setFbits@regF_temp1,f,c
  3925                           
  3926                           ;emulator.c: 121: regF_temp2 <<= 6;
  3927  001BF2  3A04               	swapf	setFbits@regF_temp2,f,c
  3928  001BF4  3604               	rlcf	setFbits@regF_temp2,f,c
  3929  001BF6  3604               	rlcf	setFbits@regF_temp2,f,c
  3930  001BF8  0EC0               	movlw	192
  3931  001BFA  1604               	andwf	setFbits@regF_temp2,f,c
  3932                           
  3933                           ;emulator.c: 122: regF_temp2 >>= 6;
  3934  001BFC  3A04               	swapf	setFbits@regF_temp2,f,c
  3935  001BFE  3204               	rrcf	setFbits@regF_temp2,f,c
  3936  001C00  3204               	rrcf	setFbits@regF_temp2,f,c
  3937  001C02  0E03               	movlw	3
  3938  001C04  D01F               	goto	L41
  3939  001C06                     l1283:
  3940                           
  3941                           ;emulator.c: 126: regF_temp1 >>= 3;
  3942  001C06  90D8               	bcf	status,0,c
  3943  001C08  3205               	rrcf	setFbits@regF_temp1,f,c
  3944  001C0A  90D8               	bcf	status,0,c
  3945  001C0C  3205               	rrcf	setFbits@regF_temp1,f,c
  3946  001C0E  90D8               	bcf	status,0,c
  3947  001C10  3205               	rrcf	setFbits@regF_temp1,f,c
  3948                           
  3949                           ;emulator.c: 127: regF_temp1 <<= 3;
  3950  001C12  90D8               	bcf	status,0,c
  3951  001C14  3605               	rlcf	setFbits@regF_temp1,f,c
  3952  001C16  90D8               	bcf	status,0,c
  3953  001C18  3605               	rlcf	setFbits@regF_temp1,f,c
  3954  001C1A  90D8               	bcf	status,0,c
  3955  001C1C  3605               	rlcf	setFbits@regF_temp1,f,c
  3956                           
  3957                           ;emulator.c: 128: regF_temp2 <<= 5;
  3958  001C1E  3A04               	swapf	setFbits@regF_temp2,f,c
  3959  001C20  3604               	rlcf	setFbits@regF_temp2,f,c
  3960  001C22  0EE0               	movlw	224
  3961  001C24  1604               	andwf	setFbits@regF_temp2,f,c
  3962                           
  3963                           ;emulator.c: 129: regF_temp2 >>= 5;
  3964  001C26  3A04               	swapf	setFbits@regF_temp2,f,c
  3965  001C28  3204               	rrcf	setFbits@regF_temp2,f,c
  3966  001C2A  0E07               	movlw	7
  3967  001C2C  D00B               	goto	L41
  3968  001C2E                     l1285:
  3969                           
  3970                           ;emulator.c: 133: regF_temp1 >>= 4;
  3971  001C2E  3A05               	swapf	setFbits@regF_temp1,f,c
  3972  001C30  0E0F               	movlw	15
  3973  001C32  1605               	andwf	setFbits@regF_temp1,f,c
  3974                           
  3975                           ;emulator.c: 134: regF_temp1 <<= 4;
  3976  001C34  3A05               	swapf	setFbits@regF_temp1,f,c
  3977  001C36  0EF0               	movlw	240
  3978  001C38  1605               	andwf	setFbits@regF_temp1,f,c
  3979                           
  3980                           ;emulator.c: 135: regF_temp2 <<= 4;
  3981  001C3A  3A04               	swapf	setFbits@regF_temp2,f,c
  3982  001C3C  0EF0               	movlw	240
  3983  001C3E  1604               	andwf	setFbits@regF_temp2,f,c
  3984                           
  3985                           ;emulator.c: 136: regF_temp2 >>= 4;
  3986  001C40  3A04               	swapf	setFbits@regF_temp2,f,c
  3987  001C42  0E0F               	movlw	15
  3988  001C44                     L41:
  3989  001C44  1604               	andwf	setFbits@regF_temp2,f,c
  3990                           
  3991                           ;emulator.c: 137: break;
  3992  001C46  D025               	goto	l1293
  3993  001C48                     l1287:
  3994                           
  3995                           ;emulator.c: 140: regF_temp1 >>= 5;
  3996  001C48  3A05               	swapf	setFbits@regF_temp1,f,c
  3997  001C4A  3205               	rrcf	setFbits@regF_temp1,f,c
  3998  001C4C  0E07               	movlw	7
  3999  001C4E  1605               	andwf	setFbits@regF_temp1,f,c
  4000                           
  4001                           ;emulator.c: 141: regF_temp1 <<= 5;
  4002  001C50  3A05               	swapf	setFbits@regF_temp1,f,c
  4003  001C52  3605               	rlcf	setFbits@regF_temp1,f,c
  4004  001C54  0EE0               	movlw	224
  4005  001C56  1605               	andwf	setFbits@regF_temp1,f,c
  4006                           
  4007                           ;emulator.c: 142: regF_temp2 <<= 3;
  4008  001C58  90D8               	bcf	status,0,c
  4009  001C5A  3604               	rlcf	setFbits@regF_temp2,f,c
  4010  001C5C  90D8               	bcf	status,0,c
  4011  001C5E  3604               	rlcf	setFbits@regF_temp2,f,c
  4012  001C60  90D8               	bcf	status,0,c
  4013  001C62  3604               	rlcf	setFbits@regF_temp2,f,c
  4014                           
  4015                           ;emulator.c: 143: regF_temp2 >>= 3;
  4016  001C64  90D8               	bcf	status,0,c
  4017  001C66  3204               	rrcf	setFbits@regF_temp2,f,c
  4018  001C68  90D8               	bcf	status,0,c
  4019  001C6A  3204               	rrcf	setFbits@regF_temp2,f,c
  4020  001C6C  90D8               	bcf	status,0,c
  4021  001C6E  3204               	rrcf	setFbits@regF_temp2,f,c
  4022                           
  4023                           ;emulator.c: 144: break;
  4024  001C70  D010               	goto	l1293
  4025  001C72                     l1291:
  4026  001C72  5003               	movf	setFbits@subRegister,w,c
  4027                           
  4028                           ; Switch size 1, requested type "space"
  4029                           ; Number of cases is 5, Range of values is 0 to 4
  4030                           ; switch strategies available:
  4031                           ; Name         Instructions Cycles
  4032                           ; simple_byte           16     9 (average)
  4033                           ;	Chosen strategy is simple_byte
  4034  001C74  0A00               	xorlw	0	; case 0
  4035  001C76  B4D8               	btfsc	status,2,c
  4036  001C78  D7AB               	goto	l1277
  4037  001C7A  0A01               	xorlw	1	; case 1
  4038  001C7C  B4D8               	btfsc	status,2,c
  4039  001C7E  D7B1               	goto	l1281
  4040  001C80  0A03               	xorlw	3	; case 2
  4041  001C82  B4D8               	btfsc	status,2,c
  4042  001C84  D7C0               	goto	l1283
  4043  001C86  0A01               	xorlw	1	; case 3
  4044  001C88  B4D8               	btfsc	status,2,c
  4045  001C8A  D7D1               	goto	l1285
  4046  001C8C  0A07               	xorlw	7	; case 4
  4047  001C8E  B4D8               	btfsc	status,2,c
  4048  001C90  D7DB               	goto	l1287
  4049  001C92                     l1293:
  4050                           
  4051                           ;emulator.c: 147: regF = regF_temp1 + regF_temp2 + value;
  4052  001C92  5005               	movf	setFbits@regF_temp1,w,c
  4053  001C94  2404               	addwf	setFbits@regF_temp2,w,c
  4054  001C96  2401               	addwf	setFbits@value,w,c
  4055  001C98  6E1F               	movwf	_regF,c
  4056  001C9A  0012               	return	
  4057  001C9C                     __end_of_setFbits:
  4058                           	opt stack 0
  4059                           tblptru	equ	0xFF8
  4060                           tblptrh	equ	0xFF7
  4061                           tblptrl	equ	0xFF6
  4062                           tablat	equ	0xFF5
  4063                           prodh	equ	0xFF4
  4064                           prodl	equ	0xFF3
  4065                           postinc0	equ	0xFEE
  4066                           wreg	equ	0xFE8
  4067                           postdec1	equ	0xFE5
  4068                           fsr1h	equ	0xFE2
  4069                           fsr1l	equ	0xFE1
  4070                           indf2	equ	0xFDF
  4071                           fsr2h	equ	0xFDA
  4072                           fsr2l	equ	0xFD9
  4073                           status	equ	0xFD8
  4074                           
  4075 ;; *************** function _immData_toPointer *****************
  4076 ;; Defined at:
  4077 ;;		line 150 in file "source/emulator.c"
  4078 ;; Parameters:    Size  Location     Type
  4079 ;;		None
  4080 ;; Auto vars:     Size  Location     Type
  4081 ;;  pointer         2    2[COMRAM] unsigned int 
  4082 ;; Return value:  Size  Location     Type
  4083 ;;                  2    0[COMRAM] unsigned int 
  4084 ;; Registers used:
  4085 ;;		wreg, status,2, status,0
  4086 ;; Tracked objects:
  4087 ;;		On entry : 0/0
  4088 ;;		On exit  : 0/0
  4089 ;;		Unchanged: 0/0
  4090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4091 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4092 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4094 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4095 ;;Total ram usage:        4 bytes
  4096 ;; Hardware stack levels used:    1
  4097 ;; This function calls:
  4098 ;;		Nothing
  4099 ;; This function is called by:
  4100 ;;		_processOpcode
  4101 ;; This function uses a non-reentrant model
  4102 ;;
  4103                           
  4104                           	psect	text11
  4105  00216E                     __ptext11:
  4106                           	opt stack 0
  4107  00216E                     _immData_toPointer:
  4108                           	opt stack 29
  4109                           
  4110                           ;emulator.c: 152: uint16_t pointer = (uint16_t) immData_1;
  4111                           
  4112                           ;incstack = 0
  4113  00216E  C01B  F003         	movff	_immData_1,immData_toPointer@pointer
  4114  002172  6A04               	clrf	immData_toPointer@pointer+1,c
  4115                           
  4116                           ;emulator.c: 153: pointer <<= 8;
  4117  002174  5003               	movf	immData_toPointer@pointer,w,c
  4118  002176  6E04               	movwf	immData_toPointer@pointer+1,c
  4119  002178  6A03               	clrf	immData_toPointer@pointer,c
  4120                           
  4121                           ;emulator.c: 154: pointer += immData_2;
  4122  00217A  501C               	movf	_immData_2,w,c
  4123  00217C  2603               	addwf	immData_toPointer@pointer,f,c
  4124  00217E  0E00               	movlw	0
  4125  002180  2204               	addwfc	immData_toPointer@pointer+1,f,c
  4126                           
  4127                           ;emulator.c: 155: return pointer;
  4128  002182  C003  F001         	movff	immData_toPointer@pointer,?_immData_toPointer
  4129  002186  C004  F002         	movff	immData_toPointer@pointer+1,?_immData_toPointer+1
  4130  00218A  0012               	return	
  4131  00218C                     __end_of_immData_toPointer:
  4132                           	opt stack 0
  4133                           tblptru	equ	0xFF8
  4134                           tblptrh	equ	0xFF7
  4135                           tblptrl	equ	0xFF6
  4136                           tablat	equ	0xFF5
  4137                           prodh	equ	0xFF4
  4138                           prodl	equ	0xFF3
  4139                           postinc0	equ	0xFEE
  4140                           wreg	equ	0xFE8
  4141                           postdec1	equ	0xFE5
  4142                           fsr1h	equ	0xFE2
  4143                           fsr1l	equ	0xFE1
  4144                           indf2	equ	0xFDF
  4145                           fsr2h	equ	0xFDA
  4146                           fsr2l	equ	0xFD9
  4147                           status	equ	0xFD8
  4148                           
  4149 ;; *************** function _getPortData *****************
  4150 ;; Defined at:
  4151 ;;		line 174 in file "source/emulator.c"
  4152 ;; Parameters:    Size  Location     Type
  4153 ;;  portNumber      1    wreg     unsigned char 
  4154 ;; Auto vars:     Size  Location     Type
  4155 ;;  portNumber      1    0[COMRAM] unsigned char 
  4156 ;; Return value:  Size  Location     Type
  4157 ;;                  1    wreg      unsigned char 
  4158 ;; Registers used:
  4159 ;;		wreg, status,2, status,0
  4160 ;; Tracked objects:
  4161 ;;		On entry : 0/0
  4162 ;;		On exit  : 0/0
  4163 ;;		Unchanged: 0/0
  4164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4168 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;Total ram usage:        1 bytes
  4170 ;; Hardware stack levels used:    1
  4171 ;; This function calls:
  4172 ;;		Nothing
  4173 ;; This function is called by:
  4174 ;;		_processOpcode
  4175 ;; This function uses a non-reentrant model
  4176 ;;
  4177                           
  4178                           	psect	text12
  4179  0021C2                     __ptext12:
  4180                           	opt stack 0
  4181  0021C2                     _getPortData:
  4182                           	opt stack 29
  4183                           
  4184                           ;incstack = 0
  4185                           ;getPortData@portNumber stored from wreg
  4186  0021C2  CFE8 F001          	movff	wreg,getPortData@portNumber
  4187                           
  4188                           ;emulator.c: 176: switch (portNumber)
  4189  0021C6  D002               	goto	l1309
  4190  0021C8                     l236:
  4191                           
  4192                           ;emulator.c: 179: return RCREG2;
  4193  0021C8  5074               	movf	3956,w,c	;volatile
  4194  0021CA  0012               	return	
  4195  0021CC                     l1309:
  4196  0021CC  5001               	movf	getPortData@portNumber,w,c
  4197                           
  4198                           ; Switch size 1, requested type "space"
  4199                           ; Number of cases is 1, Range of values is 2 to 2
  4200                           ; switch strategies available:
  4201                           ; Name         Instructions Cycles
  4202                           ; simple_byte            4     3 (average)
  4203                           ;	Chosen strategy is simple_byte
  4204  0021CE  0A02               	xorlw	2	; case 2
  4205  0021D0  B4D8               	btfsc	status,2,c
  4206  0021D2  D7FA               	goto	l236
  4207                           
  4208                           ;emulator.c: 182: return 0;
  4209  0021D4  0E00               	movlw	0
  4210  0021D6  0012               	return	
  4211  0021D8                     __end_of_getPortData:
  4212                           	opt stack 0
  4213                           tblptru	equ	0xFF8
  4214                           tblptrh	equ	0xFF7
  4215                           tblptrl	equ	0xFF6
  4216                           tablat	equ	0xFF5
  4217                           prodh	equ	0xFF4
  4218                           prodl	equ	0xFF3
  4219                           postinc0	equ	0xFEE
  4220                           wreg	equ	0xFE8
  4221                           postdec1	equ	0xFE5
  4222                           fsr1h	equ	0xFE2
  4223                           fsr1l	equ	0xFE1
  4224                           indf2	equ	0xFDF
  4225                           fsr2h	equ	0xFDA
  4226                           fsr2l	equ	0xFD9
  4227                           status	equ	0xFD8
  4228                           
  4229 ;; *************** function _getMXbits *****************
  4230 ;; Defined at:
  4231 ;;		line 20 in file "source/emulator.c"
  4232 ;; Parameters:    Size  Location     Type
  4233 ;;  subRegister     1    wreg     unsigned char 
  4234 ;; Auto vars:     Size  Location     Type
  4235 ;;  subRegister     1    2[COMRAM] unsigned char 
  4236 ;;  regMX_temp      2    0[COMRAM] unsigned int 
  4237 ;; Return value:  Size  Location     Type
  4238 ;;                  1    wreg      unsigned char 
  4239 ;; Registers used:
  4240 ;;		wreg, status,2
  4241 ;; Tracked objects:
  4242 ;;		On entry : 0/0
  4243 ;;		On exit  : 0/0
  4244 ;;		Unchanged: 0/0
  4245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;Total ram usage:        3 bytes
  4251 ;; Hardware stack levels used:    1
  4252 ;; This function calls:
  4253 ;;		Nothing
  4254 ;; This function is called by:
  4255 ;;		_processOpcode
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           	psect	text13
  4260  0021A8                     __ptext13:
  4261                           	opt stack 0
  4262  0021A8                     _getMXbits:
  4263                           	opt stack 29
  4264                           
  4265                           ;incstack = 0
  4266                           ;getMXbits@subRegister stored from wreg
  4267  0021A8  CFE8 F003          	movff	wreg,getMXbits@subRegister
  4268                           
  4269                           ;emulator.c: 22: uint16_t regMX_temp = regMX;
  4270  0021AC  C016  F001         	movff	_regMX,getMXbits@regMX_temp
  4271  0021B0  C017  F002         	movff	_regMX+1,getMXbits@regMX_temp+1
  4272                           
  4273                           ;emulator.c: 24: if (subRegister == 0)
  4274  0021B4  6603               	tstfsz	getMXbits@subRegister,c
  4275  0021B6  D003               	goto	l198
  4276                           
  4277                           ;emulator.c: 25: {
  4278                           ;emulator.c: 26: regMX_temp >>= 8;
  4279  0021B8  5002               	movf	getMXbits@regMX_temp+1,w,c
  4280  0021BA  6E01               	movwf	getMXbits@regMX_temp,c
  4281  0021BC  6A02               	clrf	getMXbits@regMX_temp+1,c
  4282  0021BE                     l198:
  4283                           
  4284                           ;emulator.c: 27: }
  4285                           ;emulator.c: 29: return (uint8_t) regMX_temp;
  4286  0021BE  5001               	movf	getMXbits@regMX_temp,w,c
  4287  0021C0  0012               	return	
  4288  0021C2                     __end_of_getMXbits:
  4289                           	opt stack 0
  4290                           tblptru	equ	0xFF8
  4291                           tblptrh	equ	0xFF7
  4292                           tblptrl	equ	0xFF6
  4293                           tablat	equ	0xFF5
  4294                           prodh	equ	0xFF4
  4295                           prodl	equ	0xFF3
  4296                           postinc0	equ	0xFEE
  4297                           wreg	equ	0xFE8
  4298                           postdec1	equ	0xFE5
  4299                           fsr1h	equ	0xFE2
  4300                           fsr1l	equ	0xFE1
  4301                           indf2	equ	0xFDF
  4302                           fsr2h	equ	0xFDA
  4303                           fsr2l	equ	0xFD9
  4304                           status	equ	0xFD8
  4305                           
  4306 ;; *************** function _getFbits *****************
  4307 ;; Defined at:
  4308 ;;		line 65 in file "source/emulator.c"
  4309 ;; Parameters:    Size  Location     Type
  4310 ;;  subRegister     1    wreg     unsigned char 
  4311 ;; Auto vars:     Size  Location     Type
  4312 ;;  subRegister     1    0[COMRAM] unsigned char 
  4313 ;;  regF_temp       1    1[COMRAM] unsigned char 
  4314 ;; Return value:  Size  Location     Type
  4315 ;;                  1    wreg      unsigned char 
  4316 ;; Registers used:
  4317 ;;		wreg, status,2, status,0
  4318 ;; Tracked objects:
  4319 ;;		On entry : 0/0
  4320 ;;		On exit  : 0/0
  4321 ;;		Unchanged: 0/0
  4322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;Total ram usage:        2 bytes
  4328 ;; Hardware stack levels used:    1
  4329 ;; This function calls:
  4330 ;;		Nothing
  4331 ;; This function is called by:
  4332 ;;		_processOpcode
  4333 ;; This function uses a non-reentrant model
  4334 ;;
  4335                           
  4336                           	psect	text14
  4337  001F90                     __ptext14:
  4338                           	opt stack 0
  4339  001F90                     _getFbits:
  4340                           	opt stack 29
  4341                           
  4342                           ;incstack = 0
  4343                           ;getFbits@subRegister stored from wreg
  4344  001F90  CFE8 F001          	movff	wreg,getFbits@subRegister
  4345                           
  4346                           ;emulator.c: 67: uint8_t regF_temp = regF;
  4347  001F94  C01F  F002         	movff	_regF,getFbits@regF_temp
  4348                           
  4349                           ;emulator.c: 69: switch(subRegister)
  4350  001F98  D01C               	goto	l1269
  4351  001F9A                     l1257:
  4352                           
  4353                           ;emulator.c: 72: regF_temp <<= 7;
  4354  001F9A  3202               	rrcf	getFbits@regF_temp,f,c
  4355  001F9C  6A02               	clrf	getFbits@regF_temp,c
  4356  001F9E  3202               	rrcf	getFbits@regF_temp,f,c
  4357  001FA0  D005               	goto	L42
  4358  001FA2                     l1259:
  4359                           
  4360                           ;emulator.c: 77: regF_temp <<= 6;
  4361  001FA2  3A02               	swapf	getFbits@regF_temp,f,c
  4362  001FA4  3602               	rlcf	getFbits@regF_temp,f,c
  4363  001FA6  3602               	rlcf	getFbits@regF_temp,f,c
  4364  001FA8  0EC0               	movlw	192
  4365  001FAA  D00A               	goto	L44
  4366  001FAC                     L42:
  4367                           
  4368                           ;emulator.c: 78: regF_temp >>= 7;
  4369  001FAC  3602               	rlcf	getFbits@regF_temp,f,c
  4370  001FAE  6A02               	clrf	getFbits@regF_temp,c
  4371  001FB0  3602               	rlcf	getFbits@regF_temp,f,c
  4372                           
  4373                           ;emulator.c: 79: break;
  4374  001FB2  D01F               	goto	l1271
  4375  001FB4                     l1261:
  4376                           
  4377                           ;emulator.c: 82: regF_temp <<= 5;
  4378  001FB4  3A02               	swapf	getFbits@regF_temp,f,c
  4379  001FB6  3602               	rlcf	getFbits@regF_temp,f,c
  4380  001FB8  0EE0               	movlw	224
  4381  001FBA  D002               	goto	L44
  4382  001FBC                     l1263:
  4383                           
  4384                           ;emulator.c: 87: regF_temp <<= 4;
  4385  001FBC  3A02               	swapf	getFbits@regF_temp,f,c
  4386  001FBE  0EF0               	movlw	240
  4387  001FC0                     L44:
  4388  001FC0  1602               	andwf	getFbits@regF_temp,f,c
  4389  001FC2  D7F4               	goto	L42
  4390  001FC4                     l1265:
  4391                           
  4392                           ;emulator.c: 92: regF_temp <<= 3;
  4393  001FC4  90D8               	bcf	status,0,c
  4394  001FC6  3602               	rlcf	getFbits@regF_temp,f,c
  4395  001FC8  90D8               	bcf	status,0,c
  4396  001FCA  3602               	rlcf	getFbits@regF_temp,f,c
  4397  001FCC  90D8               	bcf	status,0,c
  4398  001FCE  3602               	rlcf	getFbits@regF_temp,f,c
  4399  001FD0  D7ED               	goto	L42
  4400  001FD2                     l1269:
  4401  001FD2  5001               	movf	getFbits@subRegister,w,c
  4402                           
  4403                           ; Switch size 1, requested type "space"
  4404                           ; Number of cases is 5, Range of values is 0 to 4
  4405                           ; switch strategies available:
  4406                           ; Name         Instructions Cycles
  4407                           ; simple_byte           16     9 (average)
  4408                           ;	Chosen strategy is simple_byte
  4409  001FD4  0A00               	xorlw	0	; case 0
  4410  001FD6  B4D8               	btfsc	status,2,c
  4411  001FD8  D7E0               	goto	l1257
  4412  001FDA  0A01               	xorlw	1	; case 1
  4413  001FDC  B4D8               	btfsc	status,2,c
  4414  001FDE  D7E1               	goto	l1259
  4415  001FE0  0A03               	xorlw	3	; case 2
  4416  001FE2  B4D8               	btfsc	status,2,c
  4417  001FE4  D7E7               	goto	l1261
  4418  001FE6  0A01               	xorlw	1	; case 3
  4419  001FE8  B4D8               	btfsc	status,2,c
  4420  001FEA  D7E8               	goto	l1263
  4421  001FEC  0A07               	xorlw	7	; case 4
  4422  001FEE  B4D8               	btfsc	status,2,c
  4423  001FF0  D7E9               	goto	l1265
  4424  001FF2                     l1271:
  4425                           
  4426                           ;emulator.c: 97: return regF_temp;
  4427  001FF2  5002               	movf	getFbits@regF_temp,w,c
  4428  001FF4  0012               	return	
  4429  001FF6                     __end_of_getFbits:
  4430                           	opt stack 0
  4431                           tblptru	equ	0xFF8
  4432                           tblptrh	equ	0xFF7
  4433                           tblptrl	equ	0xFF6
  4434                           tablat	equ	0xFF5
  4435                           prodh	equ	0xFF4
  4436                           prodl	equ	0xFF3
  4437                           postinc0	equ	0xFEE
  4438                           wreg	equ	0xFE8
  4439                           postdec1	equ	0xFE5
  4440                           fsr1h	equ	0xFE2
  4441                           fsr1l	equ	0xFE1
  4442                           indf2	equ	0xFDF
  4443                           fsr2h	equ	0xFDA
  4444                           fsr2l	equ	0xFD9
  4445                           status	equ	0xFD8
  4446                           
  4447 ;; *************** function _initializeRegisters *****************
  4448 ;; Defined at:
  4449 ;;		line 158 in file "source/emulator.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;		None
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;		None
  4454 ;; Return value:  Size  Location     Type
  4455 ;;		None               void
  4456 ;; Registers used:
  4457 ;;		wreg, status,2
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;Total ram usage:        1 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; This function calls:
  4470 ;;		Nothing
  4471 ;; This function is called by:
  4472 ;;		_main
  4473 ;; This function uses a non-reentrant model
  4474 ;;
  4475                           
  4476                           	psect	text15
  4477  00210C                     __ptext15:
  4478                           	opt stack 0
  4479  00210C                     _initializeRegisters:
  4480                           	opt stack 30
  4481                           
  4482                           ;emulator.c: 160: haltFlag = 0;
  4483                           
  4484                           ;incstack = 0
  4485  00210C  6E01               	movwf	??_initializeRegisters& (0+255),c
  4486  00210E  0E00               	movlw	0
  4487  002110  6E1A               	movwf	_haltFlag,c
  4488  002112  5001               	movf	??_initializeRegisters& (0+255),w,c
  4489                           
  4490                           ;emulator.c: 161: regA = 0;
  4491  002114  6E01               	movwf	??_initializeRegisters& (0+255),c
  4492  002116  0E00               	movlw	0
  4493  002118  6E1D               	movwf	_regA,c
  4494  00211A  5001               	movf	??_initializeRegisters& (0+255),w,c
  4495                           
  4496                           ;emulator.c: 162: regB = 0;
  4497  00211C  6E01               	movwf	??_initializeRegisters& (0+255),c
  4498  00211E  0E00               	movlw	0
  4499  002120  6E1E               	movwf	_regB,c
  4500  002122  5001               	movf	??_initializeRegisters& (0+255),w,c
  4501                           
  4502                           ;emulator.c: 163: regPC = 0;
  4503  002124  0E00               	movlw	0
  4504  002126  6E19               	movwf	_regPC+1,c
  4505  002128  0E00               	movlw	0
  4506  00212A  6E18               	movwf	_regPC,c
  4507                           
  4508                           ;emulator.c: 164: regSP = 0;
  4509  00212C  6E01               	movwf	??_initializeRegisters& (0+255),c
  4510  00212E  0E00               	movlw	0
  4511  002130  6E20               	movwf	_regSP,c
  4512  002132  5001               	movf	??_initializeRegisters& (0+255),w,c
  4513                           
  4514                           ;emulator.c: 165: regF = 0;
  4515  002134  6E01               	movwf	??_initializeRegisters& (0+255),c
  4516  002136  0E00               	movlw	0
  4517  002138  6E1F               	movwf	_regF,c
  4518  00213A  5001               	movf	??_initializeRegisters& (0+255),w,c
  4519  00213C  0012               	return	
  4520  00213E                     __end_of_initializeRegisters:
  4521                           	opt stack 0
  4522                           tblptru	equ	0xFF8
  4523                           tblptrh	equ	0xFF7
  4524                           tblptrl	equ	0xFF6
  4525                           tablat	equ	0xFF5
  4526                           prodh	equ	0xFF4
  4527                           prodl	equ	0xFF3
  4528                           postinc0	equ	0xFEE
  4529                           wreg	equ	0xFE8
  4530                           postdec1	equ	0xFE5
  4531                           fsr1h	equ	0xFE2
  4532                           fsr1l	equ	0xFE1
  4533                           indf2	equ	0xFDF
  4534                           fsr2h	equ	0xFDA
  4535                           fsr2l	equ	0xFD9
  4536                           status	equ	0xFD8
  4537                           
  4538 ;; *************** function _initPorts *****************
  4539 ;; Defined at:
  4540 ;;		line 26 in file "source/system.c"
  4541 ;; Parameters:    Size  Location     Type
  4542 ;;		None
  4543 ;; Auto vars:     Size  Location     Type
  4544 ;;		None
  4545 ;; Return value:  Size  Location     Type
  4546 ;;		None               void
  4547 ;; Registers used:
  4548 ;;		wreg, status,2
  4549 ;; Tracked objects:
  4550 ;;		On entry : 0/0
  4551 ;;		On exit  : 0/0
  4552 ;;		Unchanged: 0/0
  4553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4558 ;;Total ram usage:        0 bytes
  4559 ;; Hardware stack levels used:    1
  4560 ;; This function calls:
  4561 ;;		Nothing
  4562 ;; This function is called by:
  4563 ;;		_main
  4564 ;; This function uses a non-reentrant model
  4565 ;;
  4566                           
  4567                           	psect	text16
  4568  00213E                     __ptext16:
  4569                           	opt stack 0
  4570  00213E                     _initPorts:
  4571                           	opt stack 30
  4572                           
  4573                           ;system.c: 28: TRISA = 0;
  4574                           
  4575                           ;incstack = 0
  4576  00213E  0E00               	movlw	0
  4577  002140  6E92               	movwf	3986,c	;volatile
  4578                           
  4579                           ;system.c: 29: TRISC = 0;
  4580  002142  0E00               	movlw	0
  4581  002144  6E94               	movwf	3988,c	;volatile
  4582                           
  4583                           ;system.c: 30: TRISE = 0;
  4584  002146  0E00               	movlw	0
  4585  002148  6E96               	movwf	3990,c	;volatile
  4586                           
  4587                           ;system.c: 32: ANSELD = 0;
  4588  00214A  0E00               	movlw	0
  4589  00214C  010F               	movlb	15	; () banked
  4590  00214E  010F               	movlb	15	; () banked
  4591  002150  6F3B               	movwf	59,b	;volatile
  4592                           
  4593                           ; BSR set to: 15
  4594                           ;system.c: 33: TRISDbits.RD3 = 0;
  4595  002152  9695               	bcf	3989,3,c	;volatile
  4596                           
  4597                           ; BSR set to: 15
  4598                           ;system.c: 34: TRISDbits.RD4 = 1;
  4599  002154  8895               	bsf	3989,4,c	;volatile
  4600                           
  4601                           ; BSR set to: 15
  4602                           ;system.c: 35: TRISDbits.RD5 = 0;
  4603  002156  9A95               	bcf	3989,5,c	;volatile
  4604                           
  4605                           ; BSR set to: 15
  4606                           ;system.c: 36: TRISDbits.RD7 = 1;
  4607  002158  8E95               	bsf	3989,7,c	;volatile
  4608                           
  4609                           ; BSR set to: 15
  4610                           ;system.c: 37: TRISDbits.RD6 = 0;
  4611  00215A  9C95               	bcf	3989,6,c	;volatile
  4612                           
  4613                           ;system.c: 39: LATA = 0;
  4614  00215C  0E00               	movlw	0
  4615  00215E  6E89               	movwf	3977,c	;volatile
  4616                           
  4617                           ;system.c: 40: LATC = 0;
  4618  002160  0E00               	movlw	0
  4619  002162  6E8B               	movwf	3979,c	;volatile
  4620                           
  4621                           ;system.c: 41: LATD = 0;
  4622  002164  0E00               	movlw	0
  4623  002166  6E8C               	movwf	3980,c	;volatile
  4624                           
  4625                           ;system.c: 42: LATE = 0;
  4626  002168  0E00               	movlw	0
  4627  00216A  6E8D               	movwf	3981,c	;volatile
  4628                           
  4629                           ; BSR set to: 15
  4630  00216C  0012               	return	
  4631  00216E                     __end_of_initPorts:
  4632                           	opt stack 0
  4633                           tblptru	equ	0xFF8
  4634                           tblptrh	equ	0xFF7
  4635                           tblptrl	equ	0xFF6
  4636                           tablat	equ	0xFF5
  4637                           prodh	equ	0xFF4
  4638                           prodl	equ	0xFF3
  4639                           postinc0	equ	0xFEE
  4640                           wreg	equ	0xFE8
  4641                           postdec1	equ	0xFE5
  4642                           fsr1h	equ	0xFE2
  4643                           fsr1l	equ	0xFE1
  4644                           indf2	equ	0xFDF
  4645                           fsr2h	equ	0xFDA
  4646                           fsr2l	equ	0xFD9
  4647                           status	equ	0xFD8
  4648                           
  4649 ;; *************** function _initOscillator *****************
  4650 ;; Defined at:
  4651 ;;		line 9 in file "source/system.c"
  4652 ;; Parameters:    Size  Location     Type
  4653 ;;		None
  4654 ;; Auto vars:     Size  Location     Type
  4655 ;;		None
  4656 ;; Return value:  Size  Location     Type
  4657 ;;		None               void
  4658 ;; Registers used:
  4659 ;;		wreg, status,2
  4660 ;; Tracked objects:
  4661 ;;		On entry : 0/0
  4662 ;;		On exit  : 0/0
  4663 ;;		Unchanged: 0/0
  4664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4669 ;;Total ram usage:        0 bytes
  4670 ;; Hardware stack levels used:    1
  4671 ;; This function calls:
  4672 ;;		Nothing
  4673 ;; This function is called by:
  4674 ;;		_main
  4675 ;; This function uses a non-reentrant model
  4676 ;;
  4677                           
  4678                           	psect	text17
  4679  00218C                     __ptext17:
  4680                           	opt stack 0
  4681  00218C                     _initOscillator:
  4682                           	opt stack 30
  4683                           
  4684                           ;system.c: 11: OSCCONbits.IDLEN = 0;
  4685                           
  4686                           ; BSR set to: 15
  4687                           ;incstack = 0
  4688  00218C  9ED3               	bcf	4051,7,c	;volatile
  4689                           
  4690                           ;system.c: 12: OSCCONbits.IRCF = 0b111;
  4691  00218E  88D3               	bsf	4051,4,c	;volatile
  4692  002190  8AD3               	bsf	4051,5,c	;volatile
  4693  002192  8CD3               	bsf	4051,6,c	;volatile
  4694                           
  4695                           ;system.c: 13: OSCCONbits.SCS = 0b10;
  4696  002194  50D3               	movf	4051,w,c	;volatile
  4697  002196  0BFC               	andlw	-4
  4698  002198  0902               	iorlw	2
  4699  00219A  6ED3               	movwf	4051,c	;volatile
  4700                           
  4701                           ;system.c: 14: OSCCON2bits.MFIOSEL = 0;
  4702  00219C  98D2               	bcf	4050,4,c	;volatile
  4703                           
  4704                           ;system.c: 15: OSCCON2bits.SOSCGO = 0;
  4705  00219E  96D2               	bcf	4050,3,c	;volatile
  4706                           
  4707                           ;system.c: 16: OSCCON2bits.PRISD = 0;
  4708  0021A0  94D2               	bcf	4050,2,c	;volatile
  4709  0021A2                     l126:
  4710  0021A2  B4D3               	btfsc	4051,2,c	;volatile
  4711  0021A4  0012               	return	
  4712  0021A6  D7FD               	goto	l126
  4713  0021A8                     __end_of_initOscillator:
  4714                           	opt stack 0
  4715                           tblptru	equ	0xFF8
  4716                           tblptrh	equ	0xFF7
  4717                           tblptrl	equ	0xFF6
  4718                           tablat	equ	0xFF5
  4719                           prodh	equ	0xFF4
  4720                           prodl	equ	0xFF3
  4721                           postinc0	equ	0xFEE
  4722                           wreg	equ	0xFE8
  4723                           postdec1	equ	0xFE5
  4724                           fsr1h	equ	0xFE2
  4725                           fsr1l	equ	0xFE1
  4726                           indf2	equ	0xFDF
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           tblptru	equ	0xFF8
  4731                           tblptrh	equ	0xFF7
  4732                           tblptrl	equ	0xFF6
  4733                           tablat	equ	0xFF5
  4734                           prodh	equ	0xFF4
  4735                           prodl	equ	0xFF3
  4736                           postinc0	equ	0xFEE
  4737                           wreg	equ	0xFE8
  4738                           postdec1	equ	0xFE5
  4739                           fsr1h	equ	0xFE2
  4740                           fsr1l	equ	0xFE1
  4741                           indf2	equ	0xFDF
  4742                           fsr2h	equ	0xFDA
  4743                           fsr2l	equ	0xFD9
  4744                           status	equ	0xFD8
  4745                           
  4746                           	psect	rparam
  4747  0000                     tblptru	equ	0xFF8
  4748                           tblptrh	equ	0xFF7
  4749                           tblptrl	equ	0xFF6
  4750                           tablat	equ	0xFF5
  4751                           prodh	equ	0xFF4
  4752                           prodl	equ	0xFF3
  4753                           postinc0	equ	0xFEE
  4754                           wreg	equ	0xFE8
  4755                           postdec1	equ	0xFE5
  4756                           fsr1h	equ	0xFE2
  4757                           fsr1l	equ	0xFE1
  4758                           indf2	equ	0xFDF
  4759                           fsr2h	equ	0xFDA
  4760                           fsr2l	equ	0xFD9
  4761                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        2048
    BSS         271
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     17      32
    BANK0           160      0       0
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_processOpcode
    _wait_ms->___wmul
    _processOpcode->_setPortData
    _setPortData->_enableSerial

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    6008
                                             16 COMRAM     1     1      0
                            _dispSeg
                     _initOscillator
                          _initPorts
                _initializeRegisters
                      _processOpcode
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _wait_ms                                              2     0      2     834
                                              6 COMRAM     2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     173
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _processOpcode                                        7     7      0    3461
                                              9 COMRAM     7     7      0
                           _getFbits
                          _getMXbits
                        _getPortData
                  _immData_toPointer
                           _setFbits
                          _setMXbits
                        _setPortData
                     _update_immData
 ---------------------------------------------------------------------------------
 (2) _update_immData                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setPortData                                          5     4      1    2089
                                              4 COMRAM     5     4      1
                            _dispSeg
                       _enableSerial
                          _hexToChar
 ---------------------------------------------------------------------------------
 (3) _hexToChar                                            1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _enableSerial                                         4     2      2      49
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _dispSeg                                              2     1      1    1713
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _setMXbits                                            6     5      1     196
                                              0 COMRAM     6     5      1
 ---------------------------------------------------------------------------------
 (2) _setFbits                                             5     4      1     876
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (2) _immData_toPointer                                    4     2      2      15
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _getPortData                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMXbits                                            3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getFbits                                             2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initializeRegisters                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initOscillator                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dispSeg
   _initOscillator
   _initPorts
   _initializeRegisters
   _processOpcode
     _getFbits
     _getMXbits
     _getPortData
     _immData_toPointer
     _setFbits
     _setMXbits
     _setPortData
       _dispSeg
       _enableSerial
       _hexToChar
     _update_immData
   _wait_ms
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     800      37       52.6%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     11      20       1       33.7%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     120      12        0.0%
DATA                 0      0     920       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Wed Mar 19 21:45:26 2014

                          l60 18B8                            l70 1976                            l62 18DE  
                          l39 1F8E                            l80 1A34                            l72 199C  
                          l64 1904                            l56 1892                            l74 19C2  
                          l66 192A                            l83 1A5A                            l92 1ACC  
                          l76 19E8                            l68 1950                            l86 1A80  
                          l78 1A0E                            l95 1AF2                            l89 1AA6  
                          l98 1B18           ___wmul@multiplicand 0003                _update_immData 1DFC  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l126 21A2                           l137 20C4  
                         l242 1D5A                           l236 21C8                           l249 1DB2  
                         l281 10DE                           l354 15C8                           l282 10E4  
                         l283 10EA                           l275 10A2                           l292 1126  
                         l284 10F0                           l276 10A8                           l357 1614  
                         l277 10AE                           l198 21BE                           l295 115A  
                         l298 1194                           l299 11A8                  __CFG_CPB$OFF 000000  
                __CFG_CPD$OFF 000000                           prod 000FF3                           wreg 000FE8  
       getPortData@portNumber 0001                    _TXSTA2bits 000F72                  __CFG_LVP$OFF 000000  
                        l1011 18C8                          l1003 187C                          l1031 1986  
                        l1023 193A                          l1015 18EE                          l1007 18A2  
                        l1051 1A44                          l1043 19F8                          l1035 19AC  
                        l1027 1960                          l1019 1914                          l1211 1CDE  
                        l1203 1CD6                          l1071 1B02                          l1063 1AB6  
                        l1055 1A6A                          l1047 1A1E                          l1039 19D2  
                        l1223 1CEA                          l1215 1CE2                          l1207 1CDA  
                        l1321 1E9A                          l1401 1D66                          l1251 202C  
                        l1067 1ADC                          l1059 1A90                          l1323 1E9E  
                        l1331 1F04                          l1219 1CE6                          l1171 1CB6  
                        l1163 1CAE                          l1261 1FB4                          l1309 21CC  
                        l1253 203A                          l1245 200A                          l1077 1B28  
                        l1325 1EA2                          l1229 1CEE                          l1421 1DCC  
                        l1413 1D94                          l1405 1D74                          l1263 1FBC  
                        l1271 1FF2                          l1247 201E                          l1327 1EA6  
                        l1319 1E96                          l1191 1CCA                          l1183 1CC2  
                        l1175 1CBA                          l1167 1CB2                          l1511 11BA  
                        l1503 1180                          l1265 1FC4                          l1257 1F9A  
                        l1281 1BE2                          l1329 1EAC                          l1417 1DA4  
                        l1409 1D84                          l1425 1DE0                          l1601 12F2  
                        l1521 11F6                          l1505 118E                          l1441 104E  
                        l1259 1FA2                          l1283 1C06                          l1291 1C72  
                        l1195 1CCE                          l1187 1CC6                          l1179 1CBE  
                        l1419 1DB8                          l1531 122C                          l1523 1204  
                        l1515 11D0                          l1443 1056                          l1435 101E  
                        l1269 1FD2                          l1285 1C2E                          l1293 1C92  
                        l1277 1BD0                          l1701 1536                          l1541 1248  
                        l1517 11DE                          l1461 109A                          l1453 107A  
                        l1437 1030                          l1287 1C48                          l1199 1CD2  
                        l1383 1E58                          l1375 1E1A                          l1711 158A  
                        l1607 1304                          l1535 1232                          l1527 121C  
                        l1471 10FE                          l1463 10B4                          l1447 1060  
                        l1439 1042                          l1713 1590                          l1705 1558  
                        l1625 134C                          l1553 1264                          l1473 1104  
                        l1465 10C6                          l1457 1086                          l1449 106E  
       setPortData@portNumber 0006                          l1379 1E38                          l1643 139C  
                        l1571 12A0                          l1547 125C                          l1483 1116  
                        l1467 10D2                          l1459 1092                          l1395 20B4  
                        l1901 1EFA                          l1733 1600                          l1717 15B4  
                        l1709 157C                          l1581 12C2                          l1565 128C  
                        l1485 111C                          l1477 110A                          l1735 160E  
                        l1719 15C2                          l1671 1464                          l1663 1426  
                        l1655 13F2                          l1583 12CC                          l1559 127E  
                        l1495 1146                          l1479 1110                          l1761 169E  
                        l1753 1664                          l1577 12A8                          l1497 1154  
                        l1489 1122                          l1747 164C                          l1675 1482  
                        l1667 1444                          l1659 140C                          l1595 12E8  
                        l1771 16CA                          l1765 16B8                          l1757 168C  
                        l1749 165A                          l1693 14F0                          l1685 14B8  
                        l1589 12D4                          l1773 1870                          l1781 1F46  
                        l1767 16C6                          l1759 169A                          l1679 149C  
                        l1697 1514                          l1689 14D4                          l1785 1F5C  
                        l1893 1ED6                          l1789 1F6C                          l1895 1EDC  
                        l1897 1EE6                          l1899 1EF0                          _LATA 000F89  
                        _LATC 000F8B                          _LATD 000F8C                          _LATE 000F8D  
                        _main 1F1C                          _regA 001D                          _regB 001E  
                        _regF 001F                          fsr1h 000FE2                          fsr1l 000FE1  
                        indf2 000FDF                          fsr2l 000FD9                 __CFG_BORV$190 000000  
                        prodh 000FF4                          prodl 000FF3                          start 0000  
               __CFG_IESO$OFF 000000        __end_of_update_immData 1E92         setPortData@outputData 0005  
           getFbits@regF_temp 0002                  _BAUDCON2bits 000F70                         ?_main 0001  
                       _TRISA 000F92                         _TRISC 000F94                         _TRISE 000F96  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
             __end_of_dispSeg 1BC2                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000               ??_processOpcode 000A  
                       _regPC 0018                         _regMX 0016                         _regSP 0020  
          __CFG_MCLRE$EXTMCLR 000000                         _stack 0100      processOpcode@regA_temp16 000F  
              __CFG_BOREN$OFF 000000                         tablat 000FF5               __end_of_wait_ms 20D2  
                       status 000FD8                __CFG_HFOFST$ON 000000               __initialization 2048  
                __end_of_main 1F90               ?_update_immData 0001    __end_of_virtualMemory_size 1005  
        __end_of_enableSerial 1F1C                        ??_main 0011                 __activetblptr 000003  
        enableSerial@baudRate 0001            setFbits@regF_temp1 0005            setFbits@regF_temp2 0004  
                ?_setPortData 0005                        _ANSELD 000F3B                __CFG_WDTEN$OFF 000000  
        __size_of_getPortData 0016                        _RCREG2 000F74                        _SPBRG2 000F75  
         getMXbits@regMX_temp 0001           setMXbits@regMX_temp 0005                        _TXREG2 000F73  
            __end_of_getFbits 1FF6                __CFG_XINST$OFF 000000                        ___wmul 20D2  
              __CFG_STVREN$ON 000000  __size_of_initializeRegisters 0032                        clear_0 2050  
                      clear_1 2062                     ??_dispSeg 0002              __end_of_setFbits 1C9C  
                __pdataBIGRAM 0200                  __mediumconst 0000                 _virtualMemory 0200  
                      tblptrh 000FF7                        tblptrl 000FF6                        tblptru 000FF8  
           _immData_toPointer 216E                     ??_wait_ms 0009               hexToChar@number 0001  
          ?_immData_toPointer 0001                    __accesstop 0060       __end_of__initialization 208C  
             __CFG_PBADEN$OFF 000000  setPortData@outputData_temp16 0007                 setFbits@value 0001  
         ??_immData_toPointer 0003           setMXbits@value_temp 0002                __pcstackCOMRAM 0001  
          __size_of_getMXbits 001A     __end_of_immData_toPointer 218C            __size_of_hexToChar 00B8  
     __size_of_initOscillator 001C                    __pbssBANK1 0100               __CFG_PLLCFG$OFF 000000  
          __size_of_initPorts 0030            __CFG_CCP2MX$PORTC1 000000   setPortData@outputData_temp8 0009  
       __size_of_enableSerial 008A            __size_of_setMXbits 0052                       ?___wmul 0001  
          __CFG_CCP3MX$PORTB5 000000                     ?_getFbits 0001             __CFG_PRICLKEN$OFF 000000  
                     _SPBRGH2 000F76          __size_of_setPortData 00A8                  _enableSerial 1E92  
           __end_of_getMXbits 21C2                     ?_setFbits 0001              ??_update_immData 0001  
             __CFG_PWRTEN$OFF 000000                       __Hparam 0000                       __Lparam 0000  
           __end_of_hexToChar 1D54               __size_of___wmul 003A                  __psmallconst 1000  
                     __pcinit 2048                       __ramtop 1000                       __ptext0 1F1C  
                     __ptext1 2092                       __ptext2 20D2                       __ptext3 1006  
                     __ptext4 1DFC                       __ptext5 1D54                       __ptext6 1C9C  
                     __ptext7 1E92                       __ptext8 1876                       __ptext9 1FF6  
                     _dispSeg 1876             __end_of_initPorts 216E    __size_of_immData_toPointer 001E  
                  ??_getFbits 0001                       _wait_ms 2092            _virtualMemory_size 1001  
           __end_of_setMXbits 2048          end_of_initialization 208C         __end_of_processOpcode 1876  
         _initializeRegisters 210C                    ??_setFbits 0002                       postdec1 000FE5  
                     postinc0 000FEE                   wait_ms@time 0007           getFbits@subRegister 0001  
        ?_initializeRegisters 0001           setFbits@subRegister 0003       processOpcode@carriedBit 000B  
                   _TRISDbits 000F95                 ??_getPortData 0001                _initOscillator 218C  
              setMXbits@value 0001          getMXbits@subRegister 0003          setMXbits@subRegister 0004  
       ??_initializeRegisters 0001                 __pidataBIGRAM 21D8                __end_of___wmul 210C  
     processOpcode@regPC_temp 000C       processOpcode@regA_temp8 000E           start_initialization 2048  
      __end_of_initOscillator 21A8           __end_of_getPortData 21D8                      ??___wmul 0005  
                 __pbssCOMRAM 0012               ?_initOscillator 0001             __size_of_getFbits 0066  
                   _getMXbits 21A8             __size_of_setFbits 00DA                     _hexToChar 1C9C  
                   _immData_1 001B                     _immData_2 001C                      ?_dispSeg 0001  
                 __smallconst 1000                      ?_wait_ms 0007                     _initPorts 213E  
                 _getPortData 21C2                 ??_setPortData 0006                     _setMXbits 1FF6  
              ___wmul@product 0005                      _LATAbits 000F89                      _LATCbits 000F8B  
                    _LATDbits 000F8C                      _LATEbits 000F8D                    ?_getMXbits 0001  
            __CFG_WDTPS$32768 000000                    ?_hexToChar 0001             ___wmul@multiplier 0001  
                  ?_initPorts 0001                     copy_data0 207C                    ?_setMXbits 0001  
         __end_of_setPortData 1DFC                      __Hrparam 0000                      __Lrparam 0000  
           __CFG_P2BMX$PORTD2 000000        __size_of_processOpcode 0870       __size_of_update_immData 0096  
            __size_of_dispSeg 034C                      _getFbits 1F90                      _haltFlag 001A  
                    __ptext10 1BC2                      __ptext11 216E                      __ptext12 21C2  
                    __ptext13 21A8                      __ptext14 1F90                      __ptext15 210C  
                    __ptext16 213E                      __ptext17 218C              __size_of_wait_ms 0040  
                 _OSCCON2bits 000FD2      immData_toPointer@pointer 0003                 __size_of_main 0074  
                    _setFbits 1BC2   __end_of_initializeRegisters 213E                   ??_getMXbits 0001  
                 ??_hexToChar 0001              ??_initOscillator 0001                   ??_initPorts 0001  
                 _setPortData 1D54                 ?_enableSerial 0001                 _processOpcode 1006  
                 ??_setMXbits 0002                    _RCSTA2bits 000F71                    _OSCCONbits 000FD3  
              dispSeg@segment 0002                  wait_ms@timel 0012             __CFG_T3CMX$PORTC0 000000  
               dispSeg@letter 0001                  ?_getPortData 0001                ??_enableSerial 0003  
              ?_processOpcode 0001             __CFG_FOSC$INTIO67 000000  
