

Microchip Technology PIC18 LITE Macro Assembler V1.30 build 55553 
                                                                                               Mon Mar 17 22:12:50 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 55553
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBIGRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           	psect	idataBIGRAM
    32  001006                     __pidataBIGRAM:
    33                           	opt stack 0
    34                           
    35                           ;initializer for _virtualMemory
    36  001006  07                 	db	7
    37  001007  03                 	db	3
    38  001008  0F                 	db	15
    39  001009  08                 	db	8
    40  00100A  00                 	db	0
    41  00100B  00                 	db	0
    42  00100C  00                 	db	0
    43  00100D  00                 	db	0
    44  00100E  00                 	db	0
    45  00100F  00                 	db	0
    46  001010  00                 	db	0
    47  001011  00                 	db	0
    48  001012  00                 	db	0
    49  001013  00                 	db	0
    50  001014  00                 	db	0
    51  001015  00                 	db	0
    52  001016  00                 	db	0
    53  001017  00                 	db	0
    54  001018  00                 	db	0
    55  001019  00                 	db	0
    56  00101A  00                 	db	0
    57  00101B  00                 	db	0
    58  00101C  00                 	db	0
    59  00101D  00                 	db	0
    60  00101E  00                 	db	0
    61  00101F  00                 	db	0
    62  001020  00                 	db	0
    63  001021  00                 	db	0
    64  001022  00                 	db	0
    65  001023  00                 	db	0
    66  001024  00                 	db	0
    67  001025  00                 	db	0
    68  001026  00                 	db	0
    69  001027  00                 	db	0
    70  001028  00                 	db	0
    71  001029  00                 	db	0
    72  00102A  00                 	db	0
    73  00102B  00                 	db	0
    74  00102C  00                 	db	0
    75  00102D  00                 	db	0
    76  00102E  00                 	db	0
    77  00102F  00                 	db	0
    78  001030  00                 	db	0
    79  001031  00                 	db	0
    80  001032  00                 	db	0
    81  001033  00                 	db	0
    82  001034  00                 	db	0
    83  001035  00                 	db	0
    84  001036  00                 	db	0
    85  001037  00                 	db	0
    86  001038  00                 	db	0
    87  001039  00                 	db	0
    88  00103A  00                 	db	0
    89  00103B  00                 	db	0
    90  00103C  00                 	db	0
    91  00103D  00                 	db	0
    92  00103E  00                 	db	0
    93  00103F  00                 	db	0
    94  001040  00                 	db	0
    95  001041  00                 	db	0
    96  001042  00                 	db	0
    97  001043  00                 	db	0
    98  001044  00                 	db	0
    99  001045  00                 	db	0
   100  001046  00                 	db	0
   101  001047  00                 	db	0
   102  001048  00                 	db	0
   103  001049  00                 	db	0
   104  00104A  00                 	db	0
   105  00104B  00                 	db	0
   106  00104C  00                 	db	0
   107  00104D  00                 	db	0
   108  00104E  00                 	db	0
   109  00104F  00                 	db	0
   110  001050  00                 	db	0
   111  001051  00                 	db	0
   112  001052  00                 	db	0
   113  001053  00                 	db	0
   114  001054  00                 	db	0
   115  001055  00                 	db	0
   116  001056  00                 	db	0
   117  001057  00                 	db	0
   118  001058  00                 	db	0
   119  001059  00                 	db	0
   120  00105A  00                 	db	0
   121  00105B  00                 	db	0
   122  00105C  00                 	db	0
   123  00105D  00                 	db	0
   124  00105E  00                 	db	0
   125  00105F  00                 	db	0
   126  001060  00                 	db	0
   127  001061  00                 	db	0
   128  001062  00                 	db	0
   129  001063  00                 	db	0
   130  001064  00                 	db	0
   131  001065  00                 	db	0
   132  001066  00                 	db	0
   133  001067  00                 	db	0
   134  001068  00                 	db	0
   135  001069  00                 	db	0
   136  00106A  00                 	db	0
   137  00106B  00                 	db	0
   138  00106C  00                 	db	0
   139  00106D  00                 	db	0
   140  00106E  00                 	db	0
   141  00106F  00                 	db	0
   142  001070  00                 	db	0
   143  001071  00                 	db	0
   144  001072  00                 	db	0
   145  001073  00                 	db	0
   146  001074  00                 	db	0
   147  001075  00                 	db	0
   148  001076  00                 	db	0
   149  001077  00                 	db	0
   150  001078  00                 	db	0
   151  001079  00                 	db	0
   152  00107A  00                 	db	0
   153  00107B  00                 	db	0
   154  00107C  00                 	db	0
   155  00107D  00                 	db	0
   156  00107E  00                 	db	0
   157  00107F  00                 	db	0
   158  001080  00                 	db	0
   159  001081  00                 	db	0
   160  001082  00                 	db	0
   161  001083  00                 	db	0
   162  001084  00                 	db	0
   163  001085  00                 	db	0
   164  001086  00                 	db	0
   165  001087  00                 	db	0
   166  001088  00                 	db	0
   167  001089  00                 	db	0
   168  00108A  00                 	db	0
   169  00108B  00                 	db	0
   170  00108C  00                 	db	0
   171  00108D  00                 	db	0
   172  00108E  00                 	db	0
   173  00108F  00                 	db	0
   174  001090  00                 	db	0
   175  001091  00                 	db	0
   176  001092  00                 	db	0
   177  001093  00                 	db	0
   178  001094  00                 	db	0
   179  001095  00                 	db	0
   180  001096  00                 	db	0
   181  001097  00                 	db	0
   182  001098  00                 	db	0
   183  001099  00                 	db	0
   184  00109A  00                 	db	0
   185  00109B  00                 	db	0
   186  00109C  00                 	db	0
   187  00109D  00                 	db	0
   188  00109E  00                 	db	0
   189  00109F  00                 	db	0
   190  0010A0  00                 	db	0
   191  0010A1  00                 	db	0
   192  0010A2  00                 	db	0
   193  0010A3  00                 	db	0
   194  0010A4  00                 	db	0
   195  0010A5  00                 	db	0
   196  0010A6  00                 	db	0
   197  0010A7  00                 	db	0
   198  0010A8  00                 	db	0
   199  0010A9  00                 	db	0
   200  0010AA  00                 	db	0
   201  0010AB  00                 	db	0
   202  0010AC  00                 	db	0
   203  0010AD  00                 	db	0
   204  0010AE  00                 	db	0
   205  0010AF  00                 	db	0
   206  0010B0  00                 	db	0
   207  0010B1  00                 	db	0
   208  0010B2  00                 	db	0
   209  0010B3  00                 	db	0
   210  0010B4  00                 	db	0
   211  0010B5  00                 	db	0
   212  0010B6  00                 	db	0
   213  0010B7  00                 	db	0
   214  0010B8  00                 	db	0
   215  0010B9  00                 	db	0
   216  0010BA  00                 	db	0
   217  0010BB  00                 	db	0
   218  0010BC  00                 	db	0
   219  0010BD  00                 	db	0
   220  0010BE  00                 	db	0
   221  0010BF  00                 	db	0
   222  0010C0  00                 	db	0
   223  0010C1  00                 	db	0
   224  0010C2  00                 	db	0
   225  0010C3  00                 	db	0
   226  0010C4  00                 	db	0
   227  0010C5  00                 	db	0
   228  0010C6  00                 	db	0
   229  0010C7  00                 	db	0
   230  0010C8  00                 	db	0
   231  0010C9  00                 	db	0
   232  0010CA  00                 	db	0
   233  0010CB  00                 	db	0
   234  0010CC  00                 	db	0
   235  0010CD  00                 	db	0
   236  0010CE  00                 	db	0
   237  0010CF  00                 	db	0
   238  0010D0  00                 	db	0
   239  0010D1  00                 	db	0
   240  0010D2  00                 	db	0
   241  0010D3  00                 	db	0
   242  0010D4  00                 	db	0
   243  0010D5  00                 	db	0
   244  0010D6  00                 	db	0
   245  0010D7  00                 	db	0
   246  0010D8  00                 	db	0
   247  0010D9  00                 	db	0
   248  0010DA  00                 	db	0
   249  0010DB  00                 	db	0
   250  0010DC  00                 	db	0
   251  0010DD  00                 	db	0
   252  0010DE  00                 	db	0
   253  0010DF  00                 	db	0
   254  0010E0  00                 	db	0
   255  0010E1  00                 	db	0
   256  0010E2  00                 	db	0
   257  0010E3  00                 	db	0
   258  0010E4  00                 	db	0
   259  0010E5  00                 	db	0
   260  0010E6  00                 	db	0
   261  0010E7  00                 	db	0
   262  0010E8  00                 	db	0
   263  0010E9  00                 	db	0
   264  0010EA  00                 	db	0
   265  0010EB  00                 	db	0
   266  0010EC  00                 	db	0
   267  0010ED  00                 	db	0
   268  0010EE  00                 	db	0
   269  0010EF  00                 	db	0
   270  0010F0  00                 	db	0
   271  0010F1  00                 	db	0
   272  0010F2  00                 	db	0
   273  0010F3  00                 	db	0
   274  0010F4  00                 	db	0
   275  0010F5  00                 	db	0
   276  0010F6  00                 	db	0
   277  0010F7  00                 	db	0
   278  0010F8  00                 	db	0
   279  0010F9  00                 	db	0
   280  0010FA  00                 	db	0
   281  0010FB  00                 	db	0
   282  0010FC  00                 	db	0
   283  0010FD  00                 	db	0
   284  0010FE  00                 	db	0
   285  0010FF  00                 	db	0
   286  001100  00                 	db	0
   287  001101  00                 	db	0
   288  001102  00                 	db	0
   289  001103  00                 	db	0
   290  001104  00                 	db	0
   291  001105  00                 	db	0
   292  001106  00                 	db	0
   293  001107  00                 	db	0
   294  001108  00                 	db	0
   295  001109  00                 	db	0
   296  00110A  00                 	db	0
   297  00110B  00                 	db	0
   298  00110C  00                 	db	0
   299  00110D  00                 	db	0
   300  00110E  00                 	db	0
   301  00110F  00                 	db	0
   302  001110  00                 	db	0
   303  001111  00                 	db	0
   304  001112  00                 	db	0
   305  001113  00                 	db	0
   306  001114  00                 	db	0
   307  001115  00                 	db	0
   308  001116  00                 	db	0
   309  001117  00                 	db	0
   310  001118  00                 	db	0
   311  001119  00                 	db	0
   312  00111A  00                 	db	0
   313  00111B  00                 	db	0
   314  00111C  00                 	db	0
   315  00111D  00                 	db	0
   316  00111E  00                 	db	0
   317  00111F  00                 	db	0
   318  001120  00                 	db	0
   319  001121  00                 	db	0
   320  001122  00                 	db	0
   321  001123  00                 	db	0
   322  001124  00                 	db	0
   323  001125  00                 	db	0
   324  001126  00                 	db	0
   325  001127  00                 	db	0
   326  001128  00                 	db	0
   327  001129  00                 	db	0
   328  00112A  00                 	db	0
   329  00112B  00                 	db	0
   330  00112C  00                 	db	0
   331  00112D  00                 	db	0
   332  00112E  00                 	db	0
   333  00112F  00                 	db	0
   334  001130  00                 	db	0
   335  001131  00                 	db	0
   336  001132  00                 	db	0
   337  001133  00                 	db	0
   338  001134  00                 	db	0
   339  001135  00                 	db	0
   340  001136  00                 	db	0
   341  001137  00                 	db	0
   342  001138  00                 	db	0
   343  001139  00                 	db	0
   344  00113A  00                 	db	0
   345  00113B  00                 	db	0
   346  00113C  00                 	db	0
   347  00113D  00                 	db	0
   348  00113E  00                 	db	0
   349  00113F  00                 	db	0
   350  001140  00                 	db	0
   351  001141  00                 	db	0
   352  001142  00                 	db	0
   353  001143  00                 	db	0
   354  001144  00                 	db	0
   355  001145  00                 	db	0
   356  001146  00                 	db	0
   357  001147  00                 	db	0
   358  001148  00                 	db	0
   359  001149  00                 	db	0
   360  00114A  00                 	db	0
   361  00114B  00                 	db	0
   362  00114C  00                 	db	0
   363  00114D  00                 	db	0
   364  00114E  00                 	db	0
   365  00114F  00                 	db	0
   366  001150  00                 	db	0
   367  001151  00                 	db	0
   368  001152  00                 	db	0
   369  001153  00                 	db	0
   370  001154  00                 	db	0
   371  001155  00                 	db	0
   372  001156  00                 	db	0
   373  001157  00                 	db	0
   374  001158  00                 	db	0
   375  001159  00                 	db	0
   376  00115A  00                 	db	0
   377  00115B  00                 	db	0
   378  00115C  00                 	db	0
   379  00115D  00                 	db	0
   380  00115E  00                 	db	0
   381  00115F  00                 	db	0
   382  001160  00                 	db	0
   383  001161  00                 	db	0
   384  001162  00                 	db	0
   385  001163  00                 	db	0
   386  001164  00                 	db	0
   387  001165  00                 	db	0
   388  001166  00                 	db	0
   389  001167  00                 	db	0
   390  001168  00                 	db	0
   391  001169  00                 	db	0
   392  00116A  00                 	db	0
   393  00116B  00                 	db	0
   394  00116C  00                 	db	0
   395  00116D  00                 	db	0
   396  00116E  00                 	db	0
   397  00116F  00                 	db	0
   398  001170  00                 	db	0
   399  001171  00                 	db	0
   400  001172  00                 	db	0
   401  001173  00                 	db	0
   402  001174  00                 	db	0
   403  001175  00                 	db	0
   404  001176  00                 	db	0
   405  001177  00                 	db	0
   406  001178  00                 	db	0
   407  001179  00                 	db	0
   408  00117A  00                 	db	0
   409  00117B  00                 	db	0
   410  00117C  00                 	db	0
   411  00117D  00                 	db	0
   412  00117E  00                 	db	0
   413  00117F  00                 	db	0
   414  001180  00                 	db	0
   415  001181  00                 	db	0
   416  001182  00                 	db	0
   417  001183  00                 	db	0
   418  001184  00                 	db	0
   419  001185  00                 	db	0
   420  001186  00                 	db	0
   421  001187  00                 	db	0
   422  001188  00                 	db	0
   423  001189  00                 	db	0
   424  00118A  00                 	db	0
   425  00118B  00                 	db	0
   426  00118C  00                 	db	0
   427  00118D  00                 	db	0
   428  00118E  00                 	db	0
   429  00118F  00                 	db	0
   430  001190  00                 	db	0
   431  001191  00                 	db	0
   432  001192  00                 	db	0
   433  001193  00                 	db	0
   434  001194  00                 	db	0
   435  001195  00                 	db	0
   436  001196  00                 	db	0
   437  001197  00                 	db	0
   438  001198  00                 	db	0
   439  001199  00                 	db	0
   440  00119A  00                 	db	0
   441  00119B  00                 	db	0
   442  00119C  00                 	db	0
   443  00119D  00                 	db	0
   444  00119E  00                 	db	0
   445  00119F  00                 	db	0
   446  0011A0  00                 	db	0
   447  0011A1  00                 	db	0
   448  0011A2  00                 	db	0
   449  0011A3  00                 	db	0
   450  0011A4  00                 	db	0
   451  0011A5  00                 	db	0
   452  0011A6  00                 	db	0
   453  0011A7  00                 	db	0
   454  0011A8  00                 	db	0
   455  0011A9  00                 	db	0
   456  0011AA  00                 	db	0
   457  0011AB  00                 	db	0
   458  0011AC  00                 	db	0
   459  0011AD  00                 	db	0
   460  0011AE  00                 	db	0
   461  0011AF  00                 	db	0
   462  0011B0  00                 	db	0
   463  0011B1  00                 	db	0
   464  0011B2  00                 	db	0
   465  0011B3  00                 	db	0
   466  0011B4  00                 	db	0
   467  0011B5  00                 	db	0
   468  0011B6  00                 	db	0
   469  0011B7  00                 	db	0
   470  0011B8  00                 	db	0
   471  0011B9  00                 	db	0
   472  0011BA  00                 	db	0
   473  0011BB  00                 	db	0
   474  0011BC  00                 	db	0
   475  0011BD  00                 	db	0
   476  0011BE  00                 	db	0
   477  0011BF  00                 	db	0
   478  0011C0  00                 	db	0
   479  0011C1  00                 	db	0
   480  0011C2  00                 	db	0
   481  0011C3  00                 	db	0
   482  0011C4  00                 	db	0
   483  0011C5  00                 	db	0
   484  0011C6  00                 	db	0
   485  0011C7  00                 	db	0
   486  0011C8  00                 	db	0
   487  0011C9  00                 	db	0
   488  0011CA  00                 	db	0
   489  0011CB  00                 	db	0
   490  0011CC  00                 	db	0
   491  0011CD  00                 	db	0
   492  0011CE  00                 	db	0
   493  0011CF  00                 	db	0
   494  0011D0  00                 	db	0
   495  0011D1  00                 	db	0
   496  0011D2  00                 	db	0
   497  0011D3  00                 	db	0
   498  0011D4  00                 	db	0
   499  0011D5  00                 	db	0
   500  0011D6  00                 	db	0
   501  0011D7  00                 	db	0
   502  0011D8  00                 	db	0
   503  0011D9  00                 	db	0
   504  0011DA  00                 	db	0
   505  0011DB  00                 	db	0
   506  0011DC  00                 	db	0
   507  0011DD  00                 	db	0
   508  0011DE  00                 	db	0
   509  0011DF  00                 	db	0
   510  0011E0  00                 	db	0
   511  0011E1  00                 	db	0
   512  0011E2  00                 	db	0
   513  0011E3  00                 	db	0
   514  0011E4  00                 	db	0
   515  0011E5  00                 	db	0
   516  0011E6  00                 	db	0
   517  0011E7  00                 	db	0
   518  0011E8  00                 	db	0
   519  0011E9  00                 	db	0
   520  0011EA  00                 	db	0
   521  0011EB  00                 	db	0
   522  0011EC  00                 	db	0
   523  0011ED  00                 	db	0
   524  0011EE  00                 	db	0
   525  0011EF  00                 	db	0
   526  0011F0  00                 	db	0
   527  0011F1  00                 	db	0
   528  0011F2  00                 	db	0
   529  0011F3  00                 	db	0
   530  0011F4  00                 	db	0
   531  0011F5  00                 	db	0
   532  0011F6  00                 	db	0
   533  0011F7  00                 	db	0
   534  0011F8  00                 	db	0
   535  0011F9  00                 	db	0
   536  0011FA  00                 	db	0
   537  0011FB  00                 	db	0
   538  0011FC  00                 	db	0
   539  0011FD  00                 	db	0
   540  0011FE  00                 	db	0
   541  0011FF  00                 	db	0
   542  001200  00                 	db	0
   543  001201  00                 	db	0
   544  001202  00                 	db	0
   545  001203  00                 	db	0
   546  001204  00                 	db	0
   547  001205  00                 	db	0
   548  001206  00                 	db	0
   549  001207  00                 	db	0
   550  001208  00                 	db	0
   551  001209  00                 	db	0
   552  00120A  00                 	db	0
   553  00120B  00                 	db	0
   554  00120C  00                 	db	0
   555  00120D  00                 	db	0
   556  00120E  00                 	db	0
   557  00120F  00                 	db	0
   558  001210  00                 	db	0
   559  001211  00                 	db	0
   560  001212  00                 	db	0
   561  001213  00                 	db	0
   562  001214  00                 	db	0
   563  001215  00                 	db	0
   564  001216  00                 	db	0
   565  001217  00                 	db	0
   566  001218  00                 	db	0
   567  001219  00                 	db	0
   568  00121A  00                 	db	0
   569  00121B  00                 	db	0
   570  00121C  00                 	db	0
   571  00121D  00                 	db	0
   572  00121E  00                 	db	0
   573  00121F  00                 	db	0
   574  001220  00                 	db	0
   575  001221  00                 	db	0
   576  001222  00                 	db	0
   577  001223  00                 	db	0
   578  001224  00                 	db	0
   579  001225  00                 	db	0
   580  001226  00                 	db	0
   581  001227  00                 	db	0
   582  001228  00                 	db	0
   583  001229  00                 	db	0
   584  00122A  00                 	db	0
   585  00122B  00                 	db	0
   586  00122C  00                 	db	0
   587  00122D  00                 	db	0
   588  00122E  00                 	db	0
   589  00122F  00                 	db	0
   590  001230  00                 	db	0
   591  001231  00                 	db	0
   592  001232  00                 	db	0
   593  001233  00                 	db	0
   594  001234  00                 	db	0
   595  001235  00                 	db	0
   596  001236  00                 	db	0
   597  001237  00                 	db	0
   598  001238  00                 	db	0
   599  001239  00                 	db	0
   600  00123A  00                 	db	0
   601  00123B  00                 	db	0
   602  00123C  00                 	db	0
   603  00123D  00                 	db	0
   604  00123E  00                 	db	0
   605  00123F  00                 	db	0
   606  001240  00                 	db	0
   607  001241  00                 	db	0
   608  001242  00                 	db	0
   609  001243  00                 	db	0
   610  001244  00                 	db	0
   611  001245  00                 	db	0
   612  001246  00                 	db	0
   613  001247  00                 	db	0
   614  001248  00                 	db	0
   615  001249  00                 	db	0
   616  00124A  00                 	db	0
   617  00124B  00                 	db	0
   618  00124C  00                 	db	0
   619  00124D  00                 	db	0
   620  00124E  00                 	db	0
   621  00124F  00                 	db	0
   622  001250  00                 	db	0
   623  001251  00                 	db	0
   624  001252  00                 	db	0
   625  001253  00                 	db	0
   626  001254  00                 	db	0
   627  001255  00                 	db	0
   628  001256  00                 	db	0
   629  001257  00                 	db	0
   630  001258  00                 	db	0
   631  001259  00                 	db	0
   632  00125A  00                 	db	0
   633  00125B  00                 	db	0
   634  00125C  00                 	db	0
   635  00125D  00                 	db	0
   636  00125E  00                 	db	0
   637  00125F  00                 	db	0
   638  001260  00                 	db	0
   639  001261  00                 	db	0
   640  001262  00                 	db	0
   641  001263  00                 	db	0
   642  001264  00                 	db	0
   643  001265  00                 	db	0
   644  001266  00                 	db	0
   645  001267  00                 	db	0
   646  001268  00                 	db	0
   647  001269  00                 	db	0
   648  00126A  00                 	db	0
   649  00126B  00                 	db	0
   650  00126C  00                 	db	0
   651  00126D  00                 	db	0
   652  00126E  00                 	db	0
   653  00126F  00                 	db	0
   654  001270  00                 	db	0
   655  001271  00                 	db	0
   656  001272  00                 	db	0
   657  001273  00                 	db	0
   658  001274  00                 	db	0
   659  001275  00                 	db	0
   660  001276  00                 	db	0
   661  001277  00                 	db	0
   662  001278  00                 	db	0
   663  001279  00                 	db	0
   664  00127A  00                 	db	0
   665  00127B  00                 	db	0
   666  00127C  00                 	db	0
   667  00127D  00                 	db	0
   668  00127E  00                 	db	0
   669  00127F  00                 	db	0
   670  001280  00                 	db	0
   671  001281  00                 	db	0
   672  001282  00                 	db	0
   673  001283  00                 	db	0
   674  001284  00                 	db	0
   675  001285  00                 	db	0
   676  001286  00                 	db	0
   677  001287  00                 	db	0
   678  001288  00                 	db	0
   679  001289  00                 	db	0
   680  00128A  00                 	db	0
   681  00128B  00                 	db	0
   682  00128C  00                 	db	0
   683  00128D  00                 	db	0
   684  00128E  00                 	db	0
   685  00128F  00                 	db	0
   686  001290  00                 	db	0
   687  001291  00                 	db	0
   688  001292  00                 	db	0
   689  001293  00                 	db	0
   690  001294  00                 	db	0
   691  001295  00                 	db	0
   692  001296  00                 	db	0
   693  001297  00                 	db	0
   694  001298  00                 	db	0
   695  001299  00                 	db	0
   696  00129A  00                 	db	0
   697  00129B  00                 	db	0
   698  00129C  00                 	db	0
   699  00129D  00                 	db	0
   700  00129E  00                 	db	0
   701  00129F  00                 	db	0
   702  0012A0  00                 	db	0
   703  0012A1  00                 	db	0
   704  0012A2  00                 	db	0
   705  0012A3  00                 	db	0
   706  0012A4  00                 	db	0
   707  0012A5  00                 	db	0
   708  0012A6  00                 	db	0
   709  0012A7  00                 	db	0
   710  0012A8  00                 	db	0
   711  0012A9  00                 	db	0
   712  0012AA  00                 	db	0
   713  0012AB  00                 	db	0
   714  0012AC  00                 	db	0
   715  0012AD  00                 	db	0
   716  0012AE  00                 	db	0
   717  0012AF  00                 	db	0
   718  0012B0  00                 	db	0
   719  0012B1  00                 	db	0
   720  0012B2  00                 	db	0
   721  0012B3  00                 	db	0
   722  0012B4  00                 	db	0
   723  0012B5  00                 	db	0
   724  0012B6  00                 	db	0
   725  0012B7  00                 	db	0
   726  0012B8  00                 	db	0
   727  0012B9  00                 	db	0
   728  0012BA  00                 	db	0
   729  0012BB  00                 	db	0
   730  0012BC  00                 	db	0
   731  0012BD  00                 	db	0
   732  0012BE  00                 	db	0
   733  0012BF  00                 	db	0
   734  0012C0  00                 	db	0
   735  0012C1  00                 	db	0
   736  0012C2  00                 	db	0
   737  0012C3  00                 	db	0
   738  0012C4  00                 	db	0
   739  0012C5  00                 	db	0
   740  0012C6  00                 	db	0
   741  0012C7  00                 	db	0
   742  0012C8  00                 	db	0
   743  0012C9  00                 	db	0
   744  0012CA  00                 	db	0
   745  0012CB  00                 	db	0
   746  0012CC  00                 	db	0
   747  0012CD  00                 	db	0
   748  0012CE  00                 	db	0
   749  0012CF  00                 	db	0
   750  0012D0  00                 	db	0
   751  0012D1  00                 	db	0
   752  0012D2  00                 	db	0
   753  0012D3  00                 	db	0
   754  0012D4  00                 	db	0
   755  0012D5  00                 	db	0
   756  0012D6  00                 	db	0
   757  0012D7  00                 	db	0
   758  0012D8  00                 	db	0
   759  0012D9  00                 	db	0
   760  0012DA  00                 	db	0
   761  0012DB  00                 	db	0
   762  0012DC  00                 	db	0
   763  0012DD  00                 	db	0
   764  0012DE  00                 	db	0
   765  0012DF  00                 	db	0
   766  0012E0  00                 	db	0
   767  0012E1  00                 	db	0
   768  0012E2  00                 	db	0
   769  0012E3  00                 	db	0
   770  0012E4  00                 	db	0
   771  0012E5  00                 	db	0
   772  0012E6  00                 	db	0
   773  0012E7  00                 	db	0
   774  0012E8  00                 	db	0
   775  0012E9  00                 	db	0
   776  0012EA  00                 	db	0
   777  0012EB  00                 	db	0
   778  0012EC  00                 	db	0
   779  0012ED  00                 	db	0
   780  0012EE  00                 	db	0
   781  0012EF  00                 	db	0
   782  0012F0  00                 	db	0
   783  0012F1  00                 	db	0
   784  0012F2  00                 	db	0
   785  0012F3  00                 	db	0
   786  0012F4  00                 	db	0
   787  0012F5  00                 	db	0
   788  0012F6  00                 	db	0
   789  0012F7  00                 	db	0
   790  0012F8  00                 	db	0
   791  0012F9  00                 	db	0
   792  0012FA  00                 	db	0
   793  0012FB  00                 	db	0
   794  0012FC  00                 	db	0
   795  0012FD  00                 	db	0
   796  0012FE  00                 	db	0
   797  0012FF  00                 	db	0
   798  001300  00                 	db	0
   799  001301  00                 	db	0
   800  001302  00                 	db	0
   801  001303  00                 	db	0
   802  001304  00                 	db	0
   803  001305  00                 	db	0
   804  001306  00                 	db	0
   805  001307  00                 	db	0
   806  001308  00                 	db	0
   807  001309  00                 	db	0
   808  00130A  00                 	db	0
   809  00130B  00                 	db	0
   810  00130C  00                 	db	0
   811  00130D  00                 	db	0
   812  00130E  00                 	db	0
   813  00130F  00                 	db	0
   814  001310  00                 	db	0
   815  001311  00                 	db	0
   816  001312  00                 	db	0
   817  001313  00                 	db	0
   818  001314  00                 	db	0
   819  001315  00                 	db	0
   820  001316  00                 	db	0
   821  001317  00                 	db	0
   822  001318  00                 	db	0
   823  001319  00                 	db	0
   824  00131A  00                 	db	0
   825  00131B  00                 	db	0
   826  00131C  00                 	db	0
   827  00131D  00                 	db	0
   828  00131E  00                 	db	0
   829  00131F  00                 	db	0
   830  001320  00                 	db	0
   831  001321  00                 	db	0
   832  001322  00                 	db	0
   833  001323  00                 	db	0
   834  001324  00                 	db	0
   835  001325  00                 	db	0
   836  001326  00                 	db	0
   837  001327  00                 	db	0
   838  001328  00                 	db	0
   839  001329  00                 	db	0
   840  00132A  00                 	db	0
   841  00132B  00                 	db	0
   842  00132C  00                 	db	0
   843  00132D  00                 	db	0
   844  00132E  00                 	db	0
   845  00132F  00                 	db	0
   846  001330  00                 	db	0
   847  001331  00                 	db	0
   848  001332  00                 	db	0
   849  001333  00                 	db	0
   850  001334  00                 	db	0
   851  001335  00                 	db	0
   852  001336  00                 	db	0
   853  001337  00                 	db	0
   854  001338  00                 	db	0
   855  001339  00                 	db	0
   856  00133A  00                 	db	0
   857  00133B  00                 	db	0
   858  00133C  00                 	db	0
   859  00133D  00                 	db	0
   860  00133E  00                 	db	0
   861  00133F  00                 	db	0
   862  001340  00                 	db	0
   863  001341  00                 	db	0
   864  001342  00                 	db	0
   865  001343  00                 	db	0
   866  001344  00                 	db	0
   867  001345  00                 	db	0
   868  001346  00                 	db	0
   869  001347  00                 	db	0
   870  001348  00                 	db	0
   871  001349  00                 	db	0
   872  00134A  00                 	db	0
   873  00134B  00                 	db	0
   874  00134C  00                 	db	0
   875  00134D  00                 	db	0
   876  00134E  00                 	db	0
   877  00134F  00                 	db	0
   878  001350  00                 	db	0
   879  001351  00                 	db	0
   880  001352  00                 	db	0
   881  001353  00                 	db	0
   882  001354  00                 	db	0
   883  001355  00                 	db	0
   884  001356  00                 	db	0
   885  001357  00                 	db	0
   886  001358  00                 	db	0
   887  001359  00                 	db	0
   888  00135A  00                 	db	0
   889  00135B  00                 	db	0
   890  00135C  00                 	db	0
   891  00135D  00                 	db	0
   892  00135E  00                 	db	0
   893  00135F  00                 	db	0
   894  001360  00                 	db	0
   895  001361  00                 	db	0
   896  001362  00                 	db	0
   897  001363  00                 	db	0
   898  001364  00                 	db	0
   899  001365  00                 	db	0
   900  001366  00                 	db	0
   901  001367  00                 	db	0
   902  001368  00                 	db	0
   903  001369  00                 	db	0
   904  00136A  00                 	db	0
   905  00136B  00                 	db	0
   906  00136C  00                 	db	0
   907  00136D  00                 	db	0
   908  00136E  00                 	db	0
   909  00136F  00                 	db	0
   910  001370  00                 	db	0
   911  001371  00                 	db	0
   912  001372  00                 	db	0
   913  001373  00                 	db	0
   914  001374  00                 	db	0
   915  001375  00                 	db	0
   916  001376  00                 	db	0
   917  001377  00                 	db	0
   918  001378  00                 	db	0
   919  001379  00                 	db	0
   920  00137A  00                 	db	0
   921  00137B  00                 	db	0
   922  00137C  00                 	db	0
   923  00137D  00                 	db	0
   924  00137E  00                 	db	0
   925  00137F  00                 	db	0
   926  001380  00                 	db	0
   927  001381  00                 	db	0
   928  001382  00                 	db	0
   929  001383  00                 	db	0
   930  001384  00                 	db	0
   931  001385  00                 	db	0
   932  001386  00                 	db	0
   933  001387  00                 	db	0
   934  001388  00                 	db	0
   935  001389  00                 	db	0
   936  00138A  00                 	db	0
   937  00138B  00                 	db	0
   938  00138C  00                 	db	0
   939  00138D  00                 	db	0
   940  00138E  00                 	db	0
   941  00138F  00                 	db	0
   942  001390  00                 	db	0
   943  001391  00                 	db	0
   944  001392  00                 	db	0
   945  001393  00                 	db	0
   946  001394  00                 	db	0
   947  001395  00                 	db	0
   948  001396  00                 	db	0
   949  001397  00                 	db	0
   950  001398  00                 	db	0
   951  001399  00                 	db	0
   952  00139A  00                 	db	0
   953  00139B  00                 	db	0
   954  00139C  00                 	db	0
   955  00139D  00                 	db	0
   956  00139E  00                 	db	0
   957  00139F  00                 	db	0
   958  0013A0  00                 	db	0
   959  0013A1  00                 	db	0
   960  0013A2  00                 	db	0
   961  0013A3  00                 	db	0
   962  0013A4  00                 	db	0
   963  0013A5  00                 	db	0
   964  0013A6  00                 	db	0
   965  0013A7  00                 	db	0
   966  0013A8  00                 	db	0
   967  0013A9  00                 	db	0
   968  0013AA  00                 	db	0
   969  0013AB  00                 	db	0
   970  0013AC  00                 	db	0
   971  0013AD  00                 	db	0
   972  0013AE  00                 	db	0
   973  0013AF  00                 	db	0
   974  0013B0  00                 	db	0
   975  0013B1  00                 	db	0
   976  0013B2  00                 	db	0
   977  0013B3  00                 	db	0
   978  0013B4  00                 	db	0
   979  0013B5  00                 	db	0
   980  0013B6  00                 	db	0
   981  0013B7  00                 	db	0
   982  0013B8  00                 	db	0
   983  0013B9  00                 	db	0
   984  0013BA  00                 	db	0
   985  0013BB  00                 	db	0
   986  0013BC  00                 	db	0
   987  0013BD  00                 	db	0
   988  0013BE  00                 	db	0
   989  0013BF  00                 	db	0
   990  0013C0  00                 	db	0
   991  0013C1  00                 	db	0
   992  0013C2  00                 	db	0
   993  0013C3  00                 	db	0
   994  0013C4  00                 	db	0
   995  0013C5  00                 	db	0
   996  0013C6  00                 	db	0
   997  0013C7  00                 	db	0
   998  0013C8  00                 	db	0
   999  0013C9  00                 	db	0
  1000  0013CA  00                 	db	0
  1001  0013CB  00                 	db	0
  1002  0013CC  00                 	db	0
  1003  0013CD  00                 	db	0
  1004  0013CE  00                 	db	0
  1005  0013CF  00                 	db	0
  1006  0013D0  00                 	db	0
  1007  0013D1  00                 	db	0
  1008  0013D2  00                 	db	0
  1009  0013D3  00                 	db	0
  1010  0013D4  00                 	db	0
  1011  0013D5  00                 	db	0
  1012  0013D6  00                 	db	0
  1013  0013D7  00                 	db	0
  1014  0013D8  00                 	db	0
  1015  0013D9  00                 	db	0
  1016  0013DA  00                 	db	0
  1017  0013DB  00                 	db	0
  1018  0013DC  00                 	db	0
  1019  0013DD  00                 	db	0
  1020  0013DE  00                 	db	0
  1021  0013DF  00                 	db	0
  1022  0013E0  00                 	db	0
  1023  0013E1  00                 	db	0
  1024  0013E2  00                 	db	0
  1025  0013E3  00                 	db	0
  1026  0013E4  00                 	db	0
  1027  0013E5  00                 	db	0
  1028  0013E6  00                 	db	0
  1029  0013E7  00                 	db	0
  1030  0013E8  00                 	db	0
  1031  0013E9  00                 	db	0
  1032  0013EA  00                 	db	0
  1033  0013EB  00                 	db	0
  1034  0013EC  00                 	db	0
  1035  0013ED  00                 	db	0
  1036  0013EE  00                 	db	0
  1037  0013EF  00                 	db	0
  1038  0013F0  00                 	db	0
  1039  0013F1  00                 	db	0
  1040  0013F2  00                 	db	0
  1041  0013F3  00                 	db	0
  1042  0013F4  00                 	db	0
  1043  0013F5  00                 	db	0
  1044  0013F6  00                 	db	0
  1045  0013F7  00                 	db	0
  1046  0013F8  00                 	db	0
  1047  0013F9  00                 	db	0
  1048  0013FA  00                 	db	0
  1049  0013FB  00                 	db	0
  1050  0013FC  00                 	db	0
  1051  0013FD  00                 	db	0
  1052  0013FE  00                 	db	0
  1053  0013FF  00                 	db	0
  1054  001400  00                 	db	0
  1055  001401  00                 	db	0
  1056  001402  00                 	db	0
  1057  001403  00                 	db	0
  1058  001404  00                 	db	0
  1059  001405  00                 	db	0
  1060  001406  00                 	db	0
  1061  001407  00                 	db	0
  1062  001408  00                 	db	0
  1063  001409  00                 	db	0
  1064  00140A  00                 	db	0
  1065  00140B  00                 	db	0
  1066  00140C  00                 	db	0
  1067  00140D  00                 	db	0
  1068  00140E  00                 	db	0
  1069  00140F  00                 	db	0
  1070  001410  00                 	db	0
  1071  001411  00                 	db	0
  1072  001412  00                 	db	0
  1073  001413  00                 	db	0
  1074  001414  00                 	db	0
  1075  001415  00                 	db	0
  1076  001416  00                 	db	0
  1077  001417  00                 	db	0
  1078  001418  00                 	db	0
  1079  001419  00                 	db	0
  1080  00141A  00                 	db	0
  1081  00141B  00                 	db	0
  1082  00141C  00                 	db	0
  1083  00141D  00                 	db	0
  1084  00141E  00                 	db	0
  1085  00141F  00                 	db	0
  1086  001420  00                 	db	0
  1087  001421  00                 	db	0
  1088  001422  00                 	db	0
  1089  001423  00                 	db	0
  1090  001424  00                 	db	0
  1091  001425  00                 	db	0
  1092  001426  00                 	db	0
  1093  001427  00                 	db	0
  1094  001428  00                 	db	0
  1095  001429  00                 	db	0
  1096  00142A  00                 	db	0
  1097  00142B  00                 	db	0
  1098  00142C  00                 	db	0
  1099  00142D  00                 	db	0
  1100  00142E  00                 	db	0
  1101  00142F  00                 	db	0
  1102  001430  00                 	db	0
  1103  001431  00                 	db	0
  1104  001432  00                 	db	0
  1105  001433  00                 	db	0
  1106  001434  00                 	db	0
  1107  001435  00                 	db	0
  1108  001436  00                 	db	0
  1109  001437  00                 	db	0
  1110  001438  00                 	db	0
  1111  001439  00                 	db	0
  1112  00143A  00                 	db	0
  1113  00143B  00                 	db	0
  1114  00143C  00                 	db	0
  1115  00143D  00                 	db	0
  1116  00143E  00                 	db	0
  1117  00143F  00                 	db	0
  1118  001440  00                 	db	0
  1119  001441  00                 	db	0
  1120  001442  00                 	db	0
  1121  001443  00                 	db	0
  1122  001444  00                 	db	0
  1123  001445  00                 	db	0
  1124  001446  00                 	db	0
  1125  001447  00                 	db	0
  1126  001448  00                 	db	0
  1127  001449  00                 	db	0
  1128  00144A  00                 	db	0
  1129  00144B  00                 	db	0
  1130  00144C  00                 	db	0
  1131  00144D  00                 	db	0
  1132  00144E  00                 	db	0
  1133  00144F  00                 	db	0
  1134  001450  00                 	db	0
  1135  001451  00                 	db	0
  1136  001452  00                 	db	0
  1137  001453  00                 	db	0
  1138  001454  00                 	db	0
  1139  001455  00                 	db	0
  1140  001456  00                 	db	0
  1141  001457  00                 	db	0
  1142  001458  00                 	db	0
  1143  001459  00                 	db	0
  1144  00145A  00                 	db	0
  1145  00145B  00                 	db	0
  1146  00145C  00                 	db	0
  1147  00145D  00                 	db	0
  1148  00145E  00                 	db	0
  1149  00145F  00                 	db	0
  1150  001460  00                 	db	0
  1151  001461  00                 	db	0
  1152  001462  00                 	db	0
  1153  001463  00                 	db	0
  1154  001464  00                 	db	0
  1155  001465  00                 	db	0
  1156  001466  00                 	db	0
  1157  001467  00                 	db	0
  1158  001468  00                 	db	0
  1159  001469  00                 	db	0
  1160  00146A  00                 	db	0
  1161  00146B  00                 	db	0
  1162  00146C  00                 	db	0
  1163  00146D  00                 	db	0
  1164  00146E  00                 	db	0
  1165  00146F  00                 	db	0
  1166  001470  00                 	db	0
  1167  001471  00                 	db	0
  1168  001472  00                 	db	0
  1169  001473  00                 	db	0
  1170  001474  00                 	db	0
  1171  001475  00                 	db	0
  1172  001476  00                 	db	0
  1173  001477  00                 	db	0
  1174  001478  00                 	db	0
  1175  001479  00                 	db	0
  1176  00147A  00                 	db	0
  1177  00147B  00                 	db	0
  1178  00147C  00                 	db	0
  1179  00147D  00                 	db	0
  1180  00147E  00                 	db	0
  1181  00147F  00                 	db	0
  1182  001480  00                 	db	0
  1183  001481  00                 	db	0
  1184  001482  00                 	db	0
  1185  001483  00                 	db	0
  1186  001484  00                 	db	0
  1187  001485  00                 	db	0
  1188  001486  00                 	db	0
  1189  001487  00                 	db	0
  1190  001488  00                 	db	0
  1191  001489  00                 	db	0
  1192  00148A  00                 	db	0
  1193  00148B  00                 	db	0
  1194  00148C  00                 	db	0
  1195  00148D  00                 	db	0
  1196  00148E  00                 	db	0
  1197  00148F  00                 	db	0
  1198  001490  00                 	db	0
  1199  001491  00                 	db	0
  1200  001492  00                 	db	0
  1201  001493  00                 	db	0
  1202  001494  00                 	db	0
  1203  001495  00                 	db	0
  1204  001496  00                 	db	0
  1205  001497  00                 	db	0
  1206  001498  00                 	db	0
  1207  001499  00                 	db	0
  1208  00149A  00                 	db	0
  1209  00149B  00                 	db	0
  1210  00149C  00                 	db	0
  1211  00149D  00                 	db	0
  1212  00149E  00                 	db	0
  1213  00149F  00                 	db	0
  1214  0014A0  00                 	db	0
  1215  0014A1  00                 	db	0
  1216  0014A2  00                 	db	0
  1217  0014A3  00                 	db	0
  1218  0014A4  00                 	db	0
  1219  0014A5  00                 	db	0
  1220  0014A6  00                 	db	0
  1221  0014A7  00                 	db	0
  1222  0014A8  00                 	db	0
  1223  0014A9  00                 	db	0
  1224  0014AA  00                 	db	0
  1225  0014AB  00                 	db	0
  1226  0014AC  00                 	db	0
  1227  0014AD  00                 	db	0
  1228  0014AE  00                 	db	0
  1229  0014AF  00                 	db	0
  1230  0014B0  00                 	db	0
  1231  0014B1  00                 	db	0
  1232  0014B2  00                 	db	0
  1233  0014B3  00                 	db	0
  1234  0014B4  00                 	db	0
  1235  0014B5  00                 	db	0
  1236  0014B6  00                 	db	0
  1237  0014B7  00                 	db	0
  1238  0014B8  00                 	db	0
  1239  0014B9  00                 	db	0
  1240  0014BA  00                 	db	0
  1241  0014BB  00                 	db	0
  1242  0014BC  00                 	db	0
  1243  0014BD  00                 	db	0
  1244  0014BE  00                 	db	0
  1245  0014BF  00                 	db	0
  1246  0014C0  00                 	db	0
  1247  0014C1  00                 	db	0
  1248  0014C2  00                 	db	0
  1249  0014C3  00                 	db	0
  1250  0014C4  00                 	db	0
  1251  0014C5  00                 	db	0
  1252  0014C6  00                 	db	0
  1253  0014C7  00                 	db	0
  1254  0014C8  00                 	db	0
  1255  0014C9  00                 	db	0
  1256  0014CA  00                 	db	0
  1257  0014CB  00                 	db	0
  1258  0014CC  00                 	db	0
  1259  0014CD  00                 	db	0
  1260  0014CE  00                 	db	0
  1261  0014CF  00                 	db	0
  1262  0014D0  00                 	db	0
  1263  0014D1  00                 	db	0
  1264  0014D2  00                 	db	0
  1265  0014D3  00                 	db	0
  1266  0014D4  00                 	db	0
  1267  0014D5  00                 	db	0
  1268  0014D6  00                 	db	0
  1269  0014D7  00                 	db	0
  1270  0014D8  00                 	db	0
  1271  0014D9  00                 	db	0
  1272  0014DA  00                 	db	0
  1273  0014DB  00                 	db	0
  1274  0014DC  00                 	db	0
  1275  0014DD  00                 	db	0
  1276  0014DE  00                 	db	0
  1277  0014DF  00                 	db	0
  1278  0014E0  00                 	db	0
  1279  0014E1  00                 	db	0
  1280  0014E2  00                 	db	0
  1281  0014E3  00                 	db	0
  1282  0014E4  00                 	db	0
  1283  0014E5  00                 	db	0
  1284  0014E6  00                 	db	0
  1285  0014E7  00                 	db	0
  1286  0014E8  00                 	db	0
  1287  0014E9  00                 	db	0
  1288  0014EA  00                 	db	0
  1289  0014EB  00                 	db	0
  1290  0014EC  00                 	db	0
  1291  0014ED  00                 	db	0
  1292  0014EE  00                 	db	0
  1293  0014EF  00                 	db	0
  1294  0014F0  00                 	db	0
  1295  0014F1  00                 	db	0
  1296  0014F2  00                 	db	0
  1297  0014F3  00                 	db	0
  1298  0014F4  00                 	db	0
  1299  0014F5  00                 	db	0
  1300  0014F6  00                 	db	0
  1301  0014F7  00                 	db	0
  1302  0014F8  00                 	db	0
  1303  0014F9  00                 	db	0
  1304  0014FA  00                 	db	0
  1305  0014FB  00                 	db	0
  1306  0014FC  00                 	db	0
  1307  0014FD  00                 	db	0
  1308  0014FE  00                 	db	0
  1309  0014FF  00                 	db	0
  1310  001500  00                 	db	0
  1311  001501  00                 	db	0
  1312  001502  00                 	db	0
  1313  001503  00                 	db	0
  1314  001504  00                 	db	0
  1315  001505  00                 	db	0
  1316  001506  00                 	db	0
  1317  001507  00                 	db	0
  1318  001508  00                 	db	0
  1319  001509  00                 	db	0
  1320  00150A  00                 	db	0
  1321  00150B  00                 	db	0
  1322  00150C  00                 	db	0
  1323  00150D  00                 	db	0
  1324  00150E  00                 	db	0
  1325  00150F  00                 	db	0
  1326  001510  00                 	db	0
  1327  001511  00                 	db	0
  1328  001512  00                 	db	0
  1329  001513  00                 	db	0
  1330  001514  00                 	db	0
  1331  001515  00                 	db	0
  1332  001516  00                 	db	0
  1333  001517  00                 	db	0
  1334  001518  00                 	db	0
  1335  001519  00                 	db	0
  1336  00151A  00                 	db	0
  1337  00151B  00                 	db	0
  1338  00151C  00                 	db	0
  1339  00151D  00                 	db	0
  1340  00151E  00                 	db	0
  1341  00151F  00                 	db	0
  1342  001520  00                 	db	0
  1343  001521  00                 	db	0
  1344  001522  00                 	db	0
  1345  001523  00                 	db	0
  1346  001524  00                 	db	0
  1347  001525  00                 	db	0
  1348  001526  00                 	db	0
  1349  001527  00                 	db	0
  1350  001528  00                 	db	0
  1351  001529  00                 	db	0
  1352  00152A  00                 	db	0
  1353  00152B  00                 	db	0
  1354  00152C  00                 	db	0
  1355  00152D  00                 	db	0
  1356  00152E  00                 	db	0
  1357  00152F  00                 	db	0
  1358  001530  00                 	db	0
  1359  001531  00                 	db	0
  1360  001532  00                 	db	0
  1361  001533  00                 	db	0
  1362  001534  00                 	db	0
  1363  001535  00                 	db	0
  1364  001536  00                 	db	0
  1365  001537  00                 	db	0
  1366  001538  00                 	db	0
  1367  001539  00                 	db	0
  1368  00153A  00                 	db	0
  1369  00153B  00                 	db	0
  1370  00153C  00                 	db	0
  1371  00153D  00                 	db	0
  1372  00153E  00                 	db	0
  1373  00153F  00                 	db	0
  1374  001540  00                 	db	0
  1375  001541  00                 	db	0
  1376  001542  00                 	db	0
  1377  001543  00                 	db	0
  1378  001544  00                 	db	0
  1379  001545  00                 	db	0
  1380  001546  00                 	db	0
  1381  001547  00                 	db	0
  1382  001548  00                 	db	0
  1383  001549  00                 	db	0
  1384  00154A  00                 	db	0
  1385  00154B  00                 	db	0
  1386  00154C  00                 	db	0
  1387  00154D  00                 	db	0
  1388  00154E  00                 	db	0
  1389  00154F  00                 	db	0
  1390  001550  00                 	db	0
  1391  001551  00                 	db	0
  1392  001552  00                 	db	0
  1393  001553  00                 	db	0
  1394  001554  00                 	db	0
  1395  001555  00                 	db	0
  1396  001556  00                 	db	0
  1397  001557  00                 	db	0
  1398  001558  00                 	db	0
  1399  001559  00                 	db	0
  1400  00155A  00                 	db	0
  1401  00155B  00                 	db	0
  1402  00155C  00                 	db	0
  1403  00155D  00                 	db	0
  1404  00155E  00                 	db	0
  1405  00155F  00                 	db	0
  1406  001560  00                 	db	0
  1407  001561  00                 	db	0
  1408  001562  00                 	db	0
  1409  001563  00                 	db	0
  1410  001564  00                 	db	0
  1411  001565  00                 	db	0
  1412  001566  00                 	db	0
  1413  001567  00                 	db	0
  1414  001568  00                 	db	0
  1415  001569  00                 	db	0
  1416  00156A  00                 	db	0
  1417  00156B  00                 	db	0
  1418  00156C  00                 	db	0
  1419  00156D  00                 	db	0
  1420  00156E  00                 	db	0
  1421  00156F  00                 	db	0
  1422  001570  00                 	db	0
  1423  001571  00                 	db	0
  1424  001572  00                 	db	0
  1425  001573  00                 	db	0
  1426  001574  00                 	db	0
  1427  001575  00                 	db	0
  1428  001576  00                 	db	0
  1429  001577  00                 	db	0
  1430  001578  00                 	db	0
  1431  001579  00                 	db	0
  1432  00157A  00                 	db	0
  1433  00157B  00                 	db	0
  1434  00157C  00                 	db	0
  1435  00157D  00                 	db	0
  1436  00157E  00                 	db	0
  1437  00157F  00                 	db	0
  1438  001580  00                 	db	0
  1439  001581  00                 	db	0
  1440  001582  00                 	db	0
  1441  001583  00                 	db	0
  1442  001584  00                 	db	0
  1443  001585  00                 	db	0
  1444  001586  00                 	db	0
  1445  001587  00                 	db	0
  1446  001588  00                 	db	0
  1447  001589  00                 	db	0
  1448  00158A  00                 	db	0
  1449  00158B  00                 	db	0
  1450  00158C  00                 	db	0
  1451  00158D  00                 	db	0
  1452  00158E  00                 	db	0
  1453  00158F  00                 	db	0
  1454  001590  00                 	db	0
  1455  001591  00                 	db	0
  1456  001592  00                 	db	0
  1457  001593  00                 	db	0
  1458  001594  00                 	db	0
  1459  001595  00                 	db	0
  1460  001596  00                 	db	0
  1461  001597  00                 	db	0
  1462  001598  00                 	db	0
  1463  001599  00                 	db	0
  1464  00159A  00                 	db	0
  1465  00159B  00                 	db	0
  1466  00159C  00                 	db	0
  1467  00159D  00                 	db	0
  1468  00159E  00                 	db	0
  1469  00159F  00                 	db	0
  1470  0015A0  00                 	db	0
  1471  0015A1  00                 	db	0
  1472  0015A2  00                 	db	0
  1473  0015A3  00                 	db	0
  1474  0015A4  00                 	db	0
  1475  0015A5  00                 	db	0
  1476  0015A6  00                 	db	0
  1477  0015A7  00                 	db	0
  1478  0015A8  00                 	db	0
  1479  0015A9  00                 	db	0
  1480  0015AA  00                 	db	0
  1481  0015AB  00                 	db	0
  1482  0015AC  00                 	db	0
  1483  0015AD  00                 	db	0
  1484  0015AE  00                 	db	0
  1485  0015AF  00                 	db	0
  1486  0015B0  00                 	db	0
  1487  0015B1  00                 	db	0
  1488  0015B2  00                 	db	0
  1489  0015B3  00                 	db	0
  1490  0015B4  00                 	db	0
  1491  0015B5  00                 	db	0
  1492  0015B6  00                 	db	0
  1493  0015B7  00                 	db	0
  1494  0015B8  00                 	db	0
  1495  0015B9  00                 	db	0
  1496  0015BA  00                 	db	0
  1497  0015BB  00                 	db	0
  1498  0015BC  00                 	db	0
  1499  0015BD  00                 	db	0
  1500  0015BE  00                 	db	0
  1501  0015BF  00                 	db	0
  1502  0015C0  00                 	db	0
  1503  0015C1  00                 	db	0
  1504  0015C2  00                 	db	0
  1505  0015C3  00                 	db	0
  1506  0015C4  00                 	db	0
  1507  0015C5  00                 	db	0
  1508  0015C6  00                 	db	0
  1509  0015C7  00                 	db	0
  1510  0015C8  00                 	db	0
  1511  0015C9  00                 	db	0
  1512  0015CA  00                 	db	0
  1513  0015CB  00                 	db	0
  1514  0015CC  00                 	db	0
  1515  0015CD  00                 	db	0
  1516  0015CE  00                 	db	0
  1517  0015CF  00                 	db	0
  1518  0015D0  00                 	db	0
  1519  0015D1  00                 	db	0
  1520  0015D2  00                 	db	0
  1521  0015D3  00                 	db	0
  1522  0015D4  00                 	db	0
  1523  0015D5  00                 	db	0
  1524  0015D6  00                 	db	0
  1525  0015D7  00                 	db	0
  1526  0015D8  00                 	db	0
  1527  0015D9  00                 	db	0
  1528  0015DA  00                 	db	0
  1529  0015DB  00                 	db	0
  1530  0015DC  00                 	db	0
  1531  0015DD  00                 	db	0
  1532  0015DE  00                 	db	0
  1533  0015DF  00                 	db	0
  1534  0015E0  00                 	db	0
  1535  0015E1  00                 	db	0
  1536  0015E2  00                 	db	0
  1537  0015E3  00                 	db	0
  1538  0015E4  00                 	db	0
  1539  0015E5  00                 	db	0
  1540  0015E6  00                 	db	0
  1541  0015E7  00                 	db	0
  1542  0015E8  00                 	db	0
  1543  0015E9  00                 	db	0
  1544  0015EA  00                 	db	0
  1545  0015EB  00                 	db	0
  1546  0015EC  00                 	db	0
  1547  0015ED  00                 	db	0
  1548  0015EE  00                 	db	0
  1549  0015EF  00                 	db	0
  1550  0015F0  00                 	db	0
  1551  0015F1  00                 	db	0
  1552  0015F2  00                 	db	0
  1553  0015F3  00                 	db	0
  1554  0015F4  00                 	db	0
  1555  0015F5  00                 	db	0
  1556  0015F6  00                 	db	0
  1557  0015F7  00                 	db	0
  1558  0015F8  00                 	db	0
  1559  0015F9  00                 	db	0
  1560  0015FA  00                 	db	0
  1561  0015FB  00                 	db	0
  1562  0015FC  00                 	db	0
  1563  0015FD  00                 	db	0
  1564  0015FE  00                 	db	0
  1565  0015FF  00                 	db	0
  1566  001600  00                 	db	0
  1567  001601  00                 	db	0
  1568  001602  00                 	db	0
  1569  001603  00                 	db	0
  1570  001604  00                 	db	0
  1571  001605  00                 	db	0
  1572  001606  00                 	db	0
  1573  001607  00                 	db	0
  1574  001608  00                 	db	0
  1575  001609  00                 	db	0
  1576  00160A  00                 	db	0
  1577  00160B  00                 	db	0
  1578  00160C  00                 	db	0
  1579  00160D  00                 	db	0
  1580  00160E  00                 	db	0
  1581  00160F  00                 	db	0
  1582  001610  00                 	db	0
  1583  001611  00                 	db	0
  1584  001612  00                 	db	0
  1585  001613  00                 	db	0
  1586  001614  00                 	db	0
  1587  001615  00                 	db	0
  1588  001616  00                 	db	0
  1589  001617  00                 	db	0
  1590  001618  00                 	db	0
  1591  001619  00                 	db	0
  1592  00161A  00                 	db	0
  1593  00161B  00                 	db	0
  1594  00161C  00                 	db	0
  1595  00161D  00                 	db	0
  1596  00161E  00                 	db	0
  1597  00161F  00                 	db	0
  1598  001620  00                 	db	0
  1599  001621  00                 	db	0
  1600  001622  00                 	db	0
  1601  001623  00                 	db	0
  1602  001624  00                 	db	0
  1603  001625  00                 	db	0
  1604  001626  00                 	db	0
  1605  001627  00                 	db	0
  1606  001628  00                 	db	0
  1607  001629  00                 	db	0
  1608  00162A  00                 	db	0
  1609  00162B  00                 	db	0
  1610  00162C  00                 	db	0
  1611  00162D  00                 	db	0
  1612  00162E  00                 	db	0
  1613  00162F  00                 	db	0
  1614  001630  00                 	db	0
  1615  001631  00                 	db	0
  1616  001632  00                 	db	0
  1617  001633  00                 	db	0
  1618  001634  00                 	db	0
  1619  001635  00                 	db	0
  1620  001636  00                 	db	0
  1621  001637  00                 	db	0
  1622  001638  00                 	db	0
  1623  001639  00                 	db	0
  1624  00163A  00                 	db	0
  1625  00163B  00                 	db	0
  1626  00163C  00                 	db	0
  1627  00163D  00                 	db	0
  1628  00163E  00                 	db	0
  1629  00163F  00                 	db	0
  1630  001640  00                 	db	0
  1631  001641  00                 	db	0
  1632  001642  00                 	db	0
  1633  001643  00                 	db	0
  1634  001644  00                 	db	0
  1635  001645  00                 	db	0
  1636  001646  00                 	db	0
  1637  001647  00                 	db	0
  1638  001648  00                 	db	0
  1639  001649  00                 	db	0
  1640  00164A  00                 	db	0
  1641  00164B  00                 	db	0
  1642  00164C  00                 	db	0
  1643  00164D  00                 	db	0
  1644  00164E  00                 	db	0
  1645  00164F  00                 	db	0
  1646  001650  00                 	db	0
  1647  001651  00                 	db	0
  1648  001652  00                 	db	0
  1649  001653  00                 	db	0
  1650  001654  00                 	db	0
  1651  001655  00                 	db	0
  1652  001656  00                 	db	0
  1653  001657  00                 	db	0
  1654  001658  00                 	db	0
  1655  001659  00                 	db	0
  1656  00165A  00                 	db	0
  1657  00165B  00                 	db	0
  1658  00165C  00                 	db	0
  1659  00165D  00                 	db	0
  1660  00165E  00                 	db	0
  1661  00165F  00                 	db	0
  1662  001660  00                 	db	0
  1663  001661  00                 	db	0
  1664  001662  00                 	db	0
  1665  001663  00                 	db	0
  1666  001664  00                 	db	0
  1667  001665  00                 	db	0
  1668  001666  00                 	db	0
  1669  001667  00                 	db	0
  1670  001668  00                 	db	0
  1671  001669  00                 	db	0
  1672  00166A  00                 	db	0
  1673  00166B  00                 	db	0
  1674  00166C  00                 	db	0
  1675  00166D  00                 	db	0
  1676  00166E  00                 	db	0
  1677  00166F  00                 	db	0
  1678  001670  00                 	db	0
  1679  001671  00                 	db	0
  1680  001672  00                 	db	0
  1681  001673  00                 	db	0
  1682  001674  00                 	db	0
  1683  001675  00                 	db	0
  1684  001676  00                 	db	0
  1685  001677  00                 	db	0
  1686  001678  00                 	db	0
  1687  001679  00                 	db	0
  1688  00167A  00                 	db	0
  1689  00167B  00                 	db	0
  1690  00167C  00                 	db	0
  1691  00167D  00                 	db	0
  1692  00167E  00                 	db	0
  1693  00167F  00                 	db	0
  1694  001680  00                 	db	0
  1695  001681  00                 	db	0
  1696  001682  00                 	db	0
  1697  001683  00                 	db	0
  1698  001684  00                 	db	0
  1699  001685  00                 	db	0
  1700  001686  00                 	db	0
  1701  001687  00                 	db	0
  1702  001688  00                 	db	0
  1703  001689  00                 	db	0
  1704  00168A  00                 	db	0
  1705  00168B  00                 	db	0
  1706  00168C  00                 	db	0
  1707  00168D  00                 	db	0
  1708  00168E  00                 	db	0
  1709  00168F  00                 	db	0
  1710  001690  00                 	db	0
  1711  001691  00                 	db	0
  1712  001692  00                 	db	0
  1713  001693  00                 	db	0
  1714  001694  00                 	db	0
  1715  001695  00                 	db	0
  1716  001696  00                 	db	0
  1717  001697  00                 	db	0
  1718  001698  00                 	db	0
  1719  001699  00                 	db	0
  1720  00169A  00                 	db	0
  1721  00169B  00                 	db	0
  1722  00169C  00                 	db	0
  1723  00169D  00                 	db	0
  1724  00169E  00                 	db	0
  1725  00169F  00                 	db	0
  1726  0016A0  00                 	db	0
  1727  0016A1  00                 	db	0
  1728  0016A2  00                 	db	0
  1729  0016A3  00                 	db	0
  1730  0016A4  00                 	db	0
  1731  0016A5  00                 	db	0
  1732  0016A6  00                 	db	0
  1733  0016A7  00                 	db	0
  1734  0016A8  00                 	db	0
  1735  0016A9  00                 	db	0
  1736  0016AA  00                 	db	0
  1737  0016AB  00                 	db	0
  1738  0016AC  00                 	db	0
  1739  0016AD  00                 	db	0
  1740  0016AE  00                 	db	0
  1741  0016AF  00                 	db	0
  1742  0016B0  00                 	db	0
  1743  0016B1  00                 	db	0
  1744  0016B2  00                 	db	0
  1745  0016B3  00                 	db	0
  1746  0016B4  00                 	db	0
  1747  0016B5  00                 	db	0
  1748  0016B6  00                 	db	0
  1749  0016B7  00                 	db	0
  1750  0016B8  00                 	db	0
  1751  0016B9  00                 	db	0
  1752  0016BA  00                 	db	0
  1753  0016BB  00                 	db	0
  1754  0016BC  00                 	db	0
  1755  0016BD  00                 	db	0
  1756  0016BE  00                 	db	0
  1757  0016BF  00                 	db	0
  1758  0016C0  00                 	db	0
  1759  0016C1  00                 	db	0
  1760  0016C2  00                 	db	0
  1761  0016C3  00                 	db	0
  1762  0016C4  00                 	db	0
  1763  0016C5  00                 	db	0
  1764  0016C6  00                 	db	0
  1765  0016C7  00                 	db	0
  1766  0016C8  00                 	db	0
  1767  0016C9  00                 	db	0
  1768  0016CA  00                 	db	0
  1769  0016CB  00                 	db	0
  1770  0016CC  00                 	db	0
  1771  0016CD  00                 	db	0
  1772  0016CE  00                 	db	0
  1773  0016CF  00                 	db	0
  1774  0016D0  00                 	db	0
  1775  0016D1  00                 	db	0
  1776  0016D2  00                 	db	0
  1777  0016D3  00                 	db	0
  1778  0016D4  00                 	db	0
  1779  0016D5  00                 	db	0
  1780  0016D6  00                 	db	0
  1781  0016D7  00                 	db	0
  1782  0016D8  00                 	db	0
  1783  0016D9  00                 	db	0
  1784  0016DA  00                 	db	0
  1785  0016DB  00                 	db	0
  1786  0016DC  00                 	db	0
  1787  0016DD  00                 	db	0
  1788  0016DE  00                 	db	0
  1789  0016DF  00                 	db	0
  1790  0016E0  00                 	db	0
  1791  0016E1  00                 	db	0
  1792  0016E2  00                 	db	0
  1793  0016E3  00                 	db	0
  1794  0016E4  00                 	db	0
  1795  0016E5  00                 	db	0
  1796  0016E6  00                 	db	0
  1797  0016E7  00                 	db	0
  1798  0016E8  00                 	db	0
  1799  0016E9  00                 	db	0
  1800  0016EA  00                 	db	0
  1801  0016EB  00                 	db	0
  1802  0016EC  00                 	db	0
  1803  0016ED  00                 	db	0
  1804  0016EE  00                 	db	0
  1805  0016EF  00                 	db	0
  1806  0016F0  00                 	db	0
  1807  0016F1  00                 	db	0
  1808  0016F2  00                 	db	0
  1809  0016F3  00                 	db	0
  1810  0016F4  00                 	db	0
  1811  0016F5  00                 	db	0
  1812  0016F6  00                 	db	0
  1813  0016F7  00                 	db	0
  1814  0016F8  00                 	db	0
  1815  0016F9  00                 	db	0
  1816  0016FA  00                 	db	0
  1817  0016FB  00                 	db	0
  1818  0016FC  00                 	db	0
  1819  0016FD  00                 	db	0
  1820  0016FE  00                 	db	0
  1821  0016FF  00                 	db	0
  1822  001700  00                 	db	0
  1823  001701  00                 	db	0
  1824  001702  00                 	db	0
  1825  001703  00                 	db	0
  1826  001704  00                 	db	0
  1827  001705  00                 	db	0
  1828  001706  00                 	db	0
  1829  001707  00                 	db	0
  1830  001708  00                 	db	0
  1831  001709  00                 	db	0
  1832  00170A  00                 	db	0
  1833  00170B  00                 	db	0
  1834  00170C  00                 	db	0
  1835  00170D  00                 	db	0
  1836  00170E  00                 	db	0
  1837  00170F  00                 	db	0
  1838  001710  00                 	db	0
  1839  001711  00                 	db	0
  1840  001712  00                 	db	0
  1841  001713  00                 	db	0
  1842  001714  00                 	db	0
  1843  001715  00                 	db	0
  1844  001716  00                 	db	0
  1845  001717  00                 	db	0
  1846  001718  00                 	db	0
  1847  001719  00                 	db	0
  1848  00171A  00                 	db	0
  1849  00171B  00                 	db	0
  1850  00171C  00                 	db	0
  1851  00171D  00                 	db	0
  1852  00171E  00                 	db	0
  1853  00171F  00                 	db	0
  1854  001720  00                 	db	0
  1855  001721  00                 	db	0
  1856  001722  00                 	db	0
  1857  001723  00                 	db	0
  1858  001724  00                 	db	0
  1859  001725  00                 	db	0
  1860  001726  00                 	db	0
  1861  001727  00                 	db	0
  1862  001728  00                 	db	0
  1863  001729  00                 	db	0
  1864  00172A  00                 	db	0
  1865  00172B  00                 	db	0
  1866  00172C  00                 	db	0
  1867  00172D  00                 	db	0
  1868  00172E  00                 	db	0
  1869  00172F  00                 	db	0
  1870  001730  00                 	db	0
  1871  001731  00                 	db	0
  1872  001732  00                 	db	0
  1873  001733  00                 	db	0
  1874  001734  00                 	db	0
  1875  001735  00                 	db	0
  1876  001736  00                 	db	0
  1877  001737  00                 	db	0
  1878  001738  00                 	db	0
  1879  001739  00                 	db	0
  1880  00173A  00                 	db	0
  1881  00173B  00                 	db	0
  1882  00173C  00                 	db	0
  1883  00173D  00                 	db	0
  1884  00173E  00                 	db	0
  1885  00173F  00                 	db	0
  1886  001740  00                 	db	0
  1887  001741  00                 	db	0
  1888  001742  00                 	db	0
  1889  001743  00                 	db	0
  1890  001744  00                 	db	0
  1891  001745  00                 	db	0
  1892  001746  00                 	db	0
  1893  001747  00                 	db	0
  1894  001748  00                 	db	0
  1895  001749  00                 	db	0
  1896  00174A  00                 	db	0
  1897  00174B  00                 	db	0
  1898  00174C  00                 	db	0
  1899  00174D  00                 	db	0
  1900  00174E  00                 	db	0
  1901  00174F  00                 	db	0
  1902  001750  00                 	db	0
  1903  001751  00                 	db	0
  1904  001752  00                 	db	0
  1905  001753  00                 	db	0
  1906  001754  00                 	db	0
  1907  001755  00                 	db	0
  1908  001756  00                 	db	0
  1909  001757  00                 	db	0
  1910  001758  00                 	db	0
  1911  001759  00                 	db	0
  1912  00175A  00                 	db	0
  1913  00175B  00                 	db	0
  1914  00175C  00                 	db	0
  1915  00175D  00                 	db	0
  1916  00175E  00                 	db	0
  1917  00175F  00                 	db	0
  1918  001760  00                 	db	0
  1919  001761  00                 	db	0
  1920  001762  00                 	db	0
  1921  001763  00                 	db	0
  1922  001764  00                 	db	0
  1923  001765  00                 	db	0
  1924  001766  00                 	db	0
  1925  001767  00                 	db	0
  1926  001768  00                 	db	0
  1927  001769  00                 	db	0
  1928  00176A  00                 	db	0
  1929  00176B  00                 	db	0
  1930  00176C  00                 	db	0
  1931  00176D  00                 	db	0
  1932  00176E  00                 	db	0
  1933  00176F  00                 	db	0
  1934  001770  00                 	db	0
  1935  001771  00                 	db	0
  1936  001772  00                 	db	0
  1937  001773  00                 	db	0
  1938  001774  00                 	db	0
  1939  001775  00                 	db	0
  1940  001776  00                 	db	0
  1941  001777  00                 	db	0
  1942  001778  00                 	db	0
  1943  001779  00                 	db	0
  1944  00177A  00                 	db	0
  1945  00177B  00                 	db	0
  1946  00177C  00                 	db	0
  1947  00177D  00                 	db	0
  1948  00177E  00                 	db	0
  1949  00177F  00                 	db	0
  1950  001780  00                 	db	0
  1951  001781  00                 	db	0
  1952  001782  00                 	db	0
  1953  001783  00                 	db	0
  1954  001784  00                 	db	0
  1955  001785  00                 	db	0
  1956  001786  00                 	db	0
  1957  001787  00                 	db	0
  1958  001788  00                 	db	0
  1959  001789  00                 	db	0
  1960  00178A  00                 	db	0
  1961  00178B  00                 	db	0
  1962  00178C  00                 	db	0
  1963  00178D  00                 	db	0
  1964  00178E  00                 	db	0
  1965  00178F  00                 	db	0
  1966  001790  00                 	db	0
  1967  001791  00                 	db	0
  1968  001792  00                 	db	0
  1969  001793  00                 	db	0
  1970  001794  00                 	db	0
  1971  001795  00                 	db	0
  1972  001796  00                 	db	0
  1973  001797  00                 	db	0
  1974  001798  00                 	db	0
  1975  001799  00                 	db	0
  1976  00179A  00                 	db	0
  1977  00179B  00                 	db	0
  1978  00179C  00                 	db	0
  1979  00179D  00                 	db	0
  1980  00179E  00                 	db	0
  1981  00179F  00                 	db	0
  1982  0017A0  00                 	db	0
  1983  0017A1  00                 	db	0
  1984  0017A2  00                 	db	0
  1985  0017A3  00                 	db	0
  1986  0017A4  00                 	db	0
  1987  0017A5  00                 	db	0
  1988  0017A6  00                 	db	0
  1989  0017A7  00                 	db	0
  1990  0017A8  00                 	db	0
  1991  0017A9  00                 	db	0
  1992  0017AA  00                 	db	0
  1993  0017AB  00                 	db	0
  1994  0017AC  00                 	db	0
  1995  0017AD  00                 	db	0
  1996  0017AE  00                 	db	0
  1997  0017AF  00                 	db	0
  1998  0017B0  00                 	db	0
  1999  0017B1  00                 	db	0
  2000  0017B2  00                 	db	0
  2001  0017B3  00                 	db	0
  2002  0017B4  00                 	db	0
  2003  0017B5  00                 	db	0
  2004  0017B6  00                 	db	0
  2005  0017B7  00                 	db	0
  2006  0017B8  00                 	db	0
  2007  0017B9  00                 	db	0
  2008  0017BA  00                 	db	0
  2009  0017BB  00                 	db	0
  2010  0017BC  00                 	db	0
  2011  0017BD  00                 	db	0
  2012  0017BE  00                 	db	0
  2013  0017BF  00                 	db	0
  2014  0017C0  00                 	db	0
  2015  0017C1  00                 	db	0
  2016  0017C2  00                 	db	0
  2017  0017C3  00                 	db	0
  2018  0017C4  00                 	db	0
  2019  0017C5  00                 	db	0
  2020  0017C6  00                 	db	0
  2021  0017C7  00                 	db	0
  2022  0017C8  00                 	db	0
  2023  0017C9  00                 	db	0
  2024  0017CA  00                 	db	0
  2025  0017CB  00                 	db	0
  2026  0017CC  00                 	db	0
  2027  0017CD  00                 	db	0
  2028  0017CE  00                 	db	0
  2029  0017CF  00                 	db	0
  2030  0017D0  00                 	db	0
  2031  0017D1  00                 	db	0
  2032  0017D2  00                 	db	0
  2033  0017D3  00                 	db	0
  2034  0017D4  00                 	db	0
  2035  0017D5  00                 	db	0
  2036  0017D6  00                 	db	0
  2037  0017D7  00                 	db	0
  2038  0017D8  00                 	db	0
  2039  0017D9  00                 	db	0
  2040  0017DA  00                 	db	0
  2041  0017DB  00                 	db	0
  2042  0017DC  00                 	db	0
  2043  0017DD  00                 	db	0
  2044  0017DE  00                 	db	0
  2045  0017DF  00                 	db	0
  2046  0017E0  00                 	db	0
  2047  0017E1  00                 	db	0
  2048  0017E2  00                 	db	0
  2049  0017E3  00                 	db	0
  2050  0017E4  00                 	db	0
  2051  0017E5  00                 	db	0
  2052  0017E6  00                 	db	0
  2053  0017E7  00                 	db	0
  2054  0017E8  00                 	db	0
  2055  0017E9  00                 	db	0
  2056  0017EA  00                 	db	0
  2057  0017EB  00                 	db	0
  2058  0017EC  00                 	db	0
  2059  0017ED  00                 	db	0
  2060  0017EE  00                 	db	0
  2061  0017EF  00                 	db	0
  2062  0017F0  00                 	db	0
  2063  0017F1  00                 	db	0
  2064  0017F2  00                 	db	0
  2065  0017F3  00                 	db	0
  2066  0017F4  00                 	db	0
  2067  0017F5  00                 	db	0
  2068  0017F6  00                 	db	0
  2069  0017F7  00                 	db	0
  2070  0017F8  00                 	db	0
  2071  0017F9  00                 	db	0
  2072  0017FA  00                 	db	0
  2073  0017FB  00                 	db	0
  2074  0017FC  00                 	db	0
  2075  0017FD  00                 	db	0
  2076  0017FE  00                 	db	0
  2077  0017FF  00                 	db	0
  2078  001800  00                 	db	0
  2079  001801  00                 	db	0
  2080  001802  00                 	db	0
  2081  001803  00                 	db	0
  2082  001804  00                 	db	0
  2083  001805  00                 	db	0
  2084                           
  2085                           	psect	smallconst
  2086  001000                     __psmallconst:
  2087                           	opt stack 0
  2088  001000  00                 	db	0
  2089  001001                     _virtualMemory_size:
  2090                           	opt stack 0
  2091  001001  0800               	dw	2048
  2092  001003  0000               	dw	0
  2093  001005                     __end_of_virtualMemory_size:
  2094                           	opt stack 0
  2095  0000                     _ANSELD	set	3899
  2096  0000                     _BAUDCON2bits	set	3952
  2097  0000                     _LATA	set	3977
  2098  0000                     _LATAbits	set	3977
  2099  0000                     _LATC	set	3979
  2100  0000                     _LATCbits	set	3979
  2101  0000                     _LATD	set	3980
  2102  0000                     _LATDbits	set	3980
  2103  0000                     _LATE	set	3981
  2104  0000                     _LATEbits	set	3981
  2105  0000                     _OSCCON2bits	set	4050
  2106  0000                     _OSCCONbits	set	4051
  2107  0000                     _RCREG2	set	3956
  2108  0000                     _RCSTA2bits	set	3953
  2109  0000                     _SPBRG2	set	3957
  2110  0000                     _SPBRGH2	set	3958
  2111  0000                     _TRISA	set	3986
  2112  0000                     _TRISC	set	3988
  2113  0000                     _TRISDbits	set	3989
  2114  0000                     _TRISE	set	3990
  2115  0000                     _TXREG2	set	3955
  2116  0000                     _TXSTA2bits	set	3954
  2117                           
  2118                           ; #config settings
  2119  001005  00                 	db	0	; dummy byte at the end
  2120  0000                     
  2121                           	psect	cinit
  2122  002606                     __pcinit:
  2123                           	opt stack 0
  2124  002606                     start_initialization:
  2125                           	opt stack 0
  2126  002606                     __initialization:
  2127                           	opt stack 0
  2128                           
  2129                           ; Clear objects allocated to BANK1 (256 bytes)
  2130  002606  EE01  F000         	lfsr	0,__pbssBANK1
  2131  00260A  EE11 F000          	lfsr	1,256
  2132  00260E                     clear_0:
  2133  00260E  6AEE               	clrf	postinc0,c
  2134  002610  50E5               	movf	postdec1,w,c
  2135  002612  50E1               	movf	fsr1l,w,c
  2136  002614  E1FC               	bnz	clear_0
  2137  002616  50E2               	movf	fsr1h,w,c
  2138  002618  E1FA               	bnz	clear_0
  2139                           
  2140                           ; Clear objects allocated to COMRAM (15 bytes)
  2141  00261A  EE00  F015         	lfsr	0,__pbssCOMRAM
  2142  00261E  0E0F               	movlw	15
  2143  002620                     clear_1:
  2144  002620  6AEE               	clrf	postinc0,c
  2145  002622  06E8               	decf	wreg,f,c
  2146  002624  E1FD               	bnz	clear_1
  2147                           
  2148                           ; Initialize objects allocated to BIGRAM (2048 bytes)
  2149                           ; load TBLPTR registers with __pidataBIGRAM
  2150  002626  0E06               	movlw	low __pidataBIGRAM
  2151  002628  6EF6               	movwf	tblptrl,c
  2152  00262A  0E10               	movlw	high __pidataBIGRAM
  2153  00262C  6EF7               	movwf	tblptrh,c
  2154  00262E  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
  2155  002630  6EF8               	movwf	tblptru,c
  2156  002632  EE02  F000         	lfsr	0,__pdataBIGRAM
  2157  002636  EE18 F000          	lfsr	1,2048
  2158  00263A                     copy_data0:
  2159  00263A  0009               	tblrd		*+
  2160  00263C  CFF5 FFEE          	movff	tablat,postinc0
  2161  002640  50E5               	movf	postdec1,w,c
  2162  002642  50E1               	movf	fsr1l,w,c
  2163  002644  E1FA               	bnz	copy_data0
  2164  002646  50E2               	movf	fsr1h,w,c
  2165  002648  E1F8               	bnz	copy_data0
  2166  00264A                     end_of_initialization:
  2167                           	opt stack 0
  2168  00264A                     __end_of__initialization:
  2169                           	opt stack 0
  2170  00264A  0100               	movlb	0
  2171  00264C  EFD2  F012         	goto	_main	;jump to C main() function
  2172                           tblptru	equ	0xFF8
  2173                           tblptrh	equ	0xFF7
  2174                           tblptrl	equ	0xFF6
  2175                           tablat	equ	0xFF5
  2176                           postinc0	equ	0xFEE
  2177                           wreg	equ	0xFE8
  2178                           postdec1	equ	0xFE5
  2179                           fsr1h	equ	0xFE2
  2180                           fsr1l	equ	0xFE1
  2181                           
  2182                           	psect	bssCOMRAM
  2183  000015                     __pbssCOMRAM:
  2184                           	opt stack 0
  2185  000015                     wait_ms@timel:
  2186                           	opt stack 0
  2187  000015                     	ds	4
  2188  000019                     _regMX:
  2189                           	opt stack 0
  2190  000019                     	ds	2
  2191  00001B                     _regPC:
  2192                           	opt stack 0
  2193  00001B                     	ds	2
  2194  00001D                     _haltFlag:
  2195                           	opt stack 0
  2196  00001D                     	ds	1
  2197  00001E                     _immData_1:
  2198                           	opt stack 0
  2199  00001E                     	ds	1
  2200  00001F                     _immData_2:
  2201                           	opt stack 0
  2202  00001F                     	ds	1
  2203  000020                     _regA:
  2204                           	opt stack 0
  2205  000020                     	ds	1
  2206  000021                     _regB:
  2207                           	opt stack 0
  2208  000021                     	ds	1
  2209  000022                     _regF:
  2210                           	opt stack 0
  2211  000022                     	ds	1
  2212  000023                     _regSP:
  2213                           	opt stack 0
  2214  000023                     	ds	1
  2215                           tblptru	equ	0xFF8
  2216                           tblptrh	equ	0xFF7
  2217                           tblptrl	equ	0xFF6
  2218                           tablat	equ	0xFF5
  2219                           postinc0	equ	0xFEE
  2220                           wreg	equ	0xFE8
  2221                           postdec1	equ	0xFE5
  2222                           fsr1h	equ	0xFE2
  2223                           fsr1l	equ	0xFE1
  2224                           
  2225                           	psect	bssBANK1
  2226  000100                     __pbssBANK1:
  2227                           	opt stack 0
  2228  000100                     _stack:
  2229                           	opt stack 0
  2230  000100                     	ds	256
  2231                           tblptru	equ	0xFF8
  2232                           tblptrh	equ	0xFF7
  2233                           tblptrl	equ	0xFF6
  2234                           tablat	equ	0xFF5
  2235                           postinc0	equ	0xFEE
  2236                           wreg	equ	0xFE8
  2237                           postdec1	equ	0xFE5
  2238                           fsr1h	equ	0xFE2
  2239                           fsr1l	equ	0xFE1
  2240                           
  2241                           	psect	dataBIGRAM
  2242  000200                     __pdataBIGRAM:
  2243                           	opt stack 0
  2244  000200                     _virtualMemory:
  2245                           	opt stack 0
  2246  000200                     	ds	2048
  2247                           tblptru	equ	0xFF8
  2248                           tblptrh	equ	0xFF7
  2249                           tblptrl	equ	0xFF6
  2250                           tablat	equ	0xFF5
  2251                           postinc0	equ	0xFEE
  2252                           wreg	equ	0xFE8
  2253                           postdec1	equ	0xFE5
  2254                           fsr1h	equ	0xFE2
  2255                           fsr1l	equ	0xFE1
  2256                           
  2257                           	psect	cstackCOMRAM
  2258  000001                     __pcstackCOMRAM:
  2259                           	opt stack 0
  2260  000001                     ??_initializeRegisters:
  2261  000001                     ??_update_immData:
  2262  000001                     ?_immData_toPointer:
  2263                           	opt stack 0
  2264  000001                     dispSeg@letter:
  2265                           	opt stack 0
  2266  000001                     hexToChar@number:
  2267                           	opt stack 0
  2268  000001                     setMXbits@value:
  2269                           	opt stack 0
  2270  000001                     getFbits@subRegister:
  2271                           	opt stack 0
  2272  000001                     setFbits@value:
  2273                           	opt stack 0
  2274  000001                     getPortData@portNumber:
  2275                           	opt stack 0
  2276  000001                     getMXbits@regMX_temp:
  2277                           	opt stack 0
  2278  000001                     enableSerial@baudRate:
  2279                           	opt stack 0
  2280                           
  2281                           ; 2 bytes @ 0x0
  2282  000001                     	ds	1
  2283  000002                     ??_setFbits:
  2284  000002                     dispSeg@segment:
  2285                           	opt stack 0
  2286  000002                     getFbits@regF_temp:
  2287                           	opt stack 0
  2288  000002                     setMXbits@value_temp:
  2289                           	opt stack 0
  2290                           
  2291                           ; 2 bytes @ 0x1
  2292  000002                     	ds	1
  2293  000003                     ??_enableSerial:
  2294  000003                     getMXbits@subRegister:
  2295                           	opt stack 0
  2296  000003                     setFbits@subRegister:
  2297                           	opt stack 0
  2298  000003                     immData_toPointer@pointer:
  2299                           	opt stack 0
  2300                           
  2301                           ; 2 bytes @ 0x2
  2302  000003                     	ds	1
  2303  000004                     setFbits@regF_temp1:
  2304                           	opt stack 0
  2305  000004                     setMXbits@regMX_temp:
  2306                           	opt stack 0
  2307                           
  2308                           ; 2 bytes @ 0x3
  2309  000004                     	ds	1
  2310  000005                     setFbits@regF_temp2:
  2311                           	opt stack 0
  2312  000005                     setPortData@outputData:
  2313                           	opt stack 0
  2314                           
  2315                           ; 1 bytes @ 0x4
  2316  000005                     	ds	1
  2317  000006                     ??_setPortData:
  2318  000006                     setMXbits@subRegister:
  2319                           	opt stack 0
  2320                           
  2321                           ; 1 bytes @ 0x5
  2322  000006                     	ds	1
  2323  000007                     setPortData@portNumber:
  2324                           	opt stack 0
  2325                           
  2326                           ; 1 bytes @ 0x6
  2327  000007                     	ds	1
  2328  000008                     setPortData@outputData_temp16:
  2329                           	opt stack 0
  2330                           
  2331                           ; 2 bytes @ 0x7
  2332  000008                     	ds	2
  2333  00000A                     setPortData@outputData_temp8:
  2334                           	opt stack 0
  2335                           
  2336                           ; 1 bytes @ 0x9
  2337  00000A                     	ds	1
  2338  00000B                     ??_processOpcode:
  2339                           
  2340                           ; 0 bytes @ 0xA
  2341  00000B                     	ds	3
  2342  00000E                     processOpcode@regPC_temp:
  2343                           	opt stack 0
  2344                           
  2345                           ; 2 bytes @ 0xD
  2346  00000E                     	ds	2
  2347  000010                     processOpcode@carriedBit:
  2348                           	opt stack 0
  2349                           
  2350                           ; 1 bytes @ 0xF
  2351  000010                     	ds	1
  2352  000011                     processOpcode@regA_temp8:
  2353                           	opt stack 0
  2354                           
  2355                           ; 1 bytes @ 0x10
  2356  000011                     	ds	1
  2357  000012                     processOpcode@regA_temp16:
  2358                           	opt stack 0
  2359                           
  2360                           ; 2 bytes @ 0x11
  2361  000012                     	ds	2
  2362  000014                     ??_main:
  2363                           
  2364                           ; 0 bytes @ 0x13
  2365  000014                     	ds	1
  2366                           tblptru	equ	0xFF8
  2367                           tblptrh	equ	0xFF7
  2368                           tblptrl	equ	0xFF6
  2369                           tablat	equ	0xFF5
  2370                           postinc0	equ	0xFEE
  2371                           wreg	equ	0xFE8
  2372                           postdec1	equ	0xFE5
  2373                           fsr1h	equ	0xFE2
  2374                           fsr1l	equ	0xFE1
  2375                           
  2376 ;;
  2377 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2378 ;;
  2379 ;; *************** function _main *****************
  2380 ;; Defined at:
  2381 ;;		line 19 in file "source/main.c"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;		None
  2384 ;; Auto vars:     Size  Location     Type
  2385 ;;		None
  2386 ;; Return value:  Size  Location     Type
  2387 ;;		None               void
  2388 ;; Registers used:
  2389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2390 ;; Tracked objects:
  2391 ;;		On entry : 0/0
  2392 ;;		On exit  : 0/0
  2393 ;;		Unchanged: 0/0
  2394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2397 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2398 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;Total ram usage:        1 bytes
  2400 ;; Hardware stack levels required when called:    3
  2401 ;; This function calls:
  2402 ;;		_dispSeg
  2403 ;;		_initOscillator
  2404 ;;		_initPorts
  2405 ;;		_initializeRegisters
  2406 ;;		_processOpcode
  2407 ;; This function is called by:
  2408 ;;		Startup code after reset
  2409 ;; This function uses a non-reentrant model
  2410 ;;
  2411                           
  2412                           	psect	text0
  2413  0025A4                     __ptext0:
  2414                           	opt stack 0
  2415  0025A4                     _main:
  2416                           	opt stack 28
  2417                           
  2418                           ;main.c: 22: initOscillator();
  2419                           
  2420                           ;incstack = 0
  2421  0025A4  EC9E  F013         	call	_initOscillator	;wreg free
  2422                           
  2423                           ;main.c: 23: initPorts();
  2424  0025A8  EC5F  F013         	call	_initPorts	;wreg free
  2425                           
  2426                           ;main.c: 24: dispSeg(1, '-'); dispSeg(2, '-');
  2427  0025AC  6E14               	movwf	??_main& (0+255),c
  2428  0025AE  0E2D               	movlw	45
  2429  0025B0  6E01               	movwf	dispSeg@letter,c
  2430  0025B2  5014               	movf	??_main& (0+255),w,c
  2431  0025B4  0E01               	movlw	1
  2432  0025B6  ECE5  F00F         	call	_dispSeg
  2433  0025BA  6E14               	movwf	??_main& (0+255),c
  2434  0025BC  0E2D               	movlw	45
  2435  0025BE  6E01               	movwf	dispSeg@letter,c
  2436  0025C0  5014               	movf	??_main& (0+255),w,c
  2437  0025C2  0E02               	movlw	2
  2438  0025C4  ECE5  F00F         	call	_dispSeg
  2439                           
  2440                           ;main.c: 26: initializeRegisters();
  2441  0025C8  EC46  F013         	call	_initializeRegisters	;wreg free
  2442                           
  2443                           ;main.c: 28: while (haltFlag == 0)
  2444  0025CC  D00D               	goto	l1688
  2445  0025CE                     l1682:
  2446                           
  2447                           ;main.c: 29: {
  2448                           ;main.c: 30: if (regPC > 2047)
  2449  0025CE  0E00               	movlw	0
  2450  0025D0  5C1B               	subwf	_regPC,w,c
  2451  0025D2  0E08               	movlw	8
  2452  0025D4  581C               	subwfb	_regPC+1,w,c
  2453  0025D6  A0D8               	btfss	status,0,c
  2454  0025D8  D005               	goto	l1686
  2455                           
  2456                           ;main.c: 31: {
  2457                           ;main.c: 32: regPC = 0;
  2458  0025DA  0E00               	movlw	0
  2459  0025DC  6E1C               	movwf	_regPC+1,c
  2460  0025DE  0E00               	movlw	0
  2461  0025E0  6E1B               	movwf	_regPC,c
  2462                           
  2463                           ;main.c: 33: continue;
  2464  0025E2  D002               	goto	l1688
  2465  0025E4                     l1686:
  2466                           
  2467                           ;main.c: 34: }
  2468                           ;main.c: 39: processOpcode();
  2469  0025E4  EC03  F00C         	call	_processOpcode	;wreg free
  2470  0025E8                     l1688:
  2471  0025E8  501D               	movf	_haltFlag,w,c
  2472  0025EA  B4D8               	btfsc	status,2,c
  2473  0025EC  D7F0               	goto	l1682
  2474                           
  2475                           ;main.c: 40: }
  2476                           ;main.c: 42: if (haltFlag == 1)
  2477  0025EE  041D               	decf	_haltFlag,w,c
  2478  0025F0  A4D8               	btfss	status,2,c
  2479  0025F2  EF00  F000         	goto	start
  2480                           
  2481                           ;main.c: 43: {
  2482                           ;main.c: 44: dispSeg(2, '0');
  2483  0025F6  6E14               	movwf	??_main& (0+255),c
  2484  0025F8  0E30               	movlw	48
  2485  0025FA  6E01               	movwf	dispSeg@letter,c
  2486  0025FC  5014               	movf	??_main& (0+255),w,c
  2487  0025FE  0E02               	movlw	2
  2488  002600  ECE5  F00F         	call	_dispSeg
  2489  002604                     l38:
  2490  002604  D7FF               	goto	l38
  2491  002606                     __end_of_main:
  2492                           	opt stack 0
  2493                           tblptru	equ	0xFF8
  2494                           tblptrh	equ	0xFF7
  2495                           tblptrl	equ	0xFF6
  2496                           tablat	equ	0xFF5
  2497                           postinc0	equ	0xFEE
  2498                           wreg	equ	0xFE8
  2499                           postdec1	equ	0xFE5
  2500                           fsr1h	equ	0xFE2
  2501                           fsr1l	equ	0xFE1
  2502                           status	equ	0xFD8
  2503                           
  2504 ;; *************** function _processOpcode *****************
  2505 ;; Defined at:
  2506 ;;		line 239 in file "source/emulator.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;		None
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;  regA_temp16     2   17[COMRAM] unsigned int 
  2511 ;;  regPC_temp      2   13[COMRAM] unsigned int 
  2512 ;;  regA_temp8      1   16[COMRAM] unsigned char 
  2513 ;;  carriedBit      1   15[COMRAM] unsigned char 
  2514 ;; Return value:  Size  Location     Type
  2515 ;;		None               void
  2516 ;; Registers used:
  2517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2518 ;; Tracked objects:
  2519 ;;		On entry : 0/0
  2520 ;;		On exit  : 0/0
  2521 ;;		Unchanged: 0/0
  2522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2525 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2526 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2527 ;;Total ram usage:        9 bytes
  2528 ;; Hardware stack levels used:    1
  2529 ;; Hardware stack levels required when called:    2
  2530 ;; This function calls:
  2531 ;;		_getFbits
  2532 ;;		_getMXbits
  2533 ;;		_getPortData
  2534 ;;		_immData_toPointer
  2535 ;;		_setFbits
  2536 ;;		_setMXbits
  2537 ;;		_setPortData
  2538 ;;		_update_immData
  2539 ;; This function is called by:
  2540 ;;		_main
  2541 ;; This function uses a non-reentrant model
  2542 ;;
  2543                           
  2544                           	psect	text1
  2545  001806                     __ptext1:
  2546                           	opt stack 0
  2547  001806                     _processOpcode:
  2548                           	opt stack 28
  2549                           
  2550                           ;emulator.c: 242: update_immData();
  2551                           
  2552                           ;incstack = 0
  2553  001806  EC42  F012         	call	_update_immData	;wreg free
  2554                           
  2555                           ;emulator.c: 245: uint8_t regA_temp8 = regA;
  2556  00180A  C020  F011         	movff	_regA,processOpcode@regA_temp8
  2557                           
  2558                           ;emulator.c: 246: uint16_t regA_temp16 = (uint16_t) regA;
  2559  00180E  C020  F012         	movff	_regA,processOpcode@regA_temp16
  2560  001812  6A13               	clrf	processOpcode@regA_temp16+1,c
  2561                           
  2562                           ;emulator.c: 247: uint16_t regPC_temp = regPC;
  2563  001814  C01B  F00E         	movff	_regPC,processOpcode@regPC_temp
  2564  001818  C01C  F00F         	movff	_regPC+1,processOpcode@regPC_temp+1
  2565                           
  2566                           ;emulator.c: 248: uint8_t carriedBit;
  2567                           ;emulator.c: 251: switch (virtualMemory[regPC])
  2568  00181C  D300               	goto	l1672
  2569  00181E                     l1394:
  2570                           
  2571                           ;emulator.c: 259: setFbits(0, 1);
  2572  00181E  6E0B               	movwf	??_processOpcode& (0+255),c
  2573  001820  0E01               	movlw	1
  2574  001822  6E01               	movwf	setFbits@value,c
  2575  001824  500B               	movf	??_processOpcode& (0+255),w,c
  2576  001826  0E00               	movlw	0
  2577  001828  EC28  F013         	call	_setFbits
  2578                           
  2579                           ;emulator.c: 260: break;
  2580  00182C  D3CB               	goto	l1674
  2581  00182E                     l1396:
  2582                           
  2583                           ;emulator.c: 263: setFbits(0, 0);
  2584  00182E  6E0B               	movwf	??_processOpcode& (0+255),c
  2585  001830  0E00               	movlw	0
  2586  001832  6E01               	movwf	setFbits@value,c
  2587  001834  500B               	movf	??_processOpcode& (0+255),w,c
  2588  001836  0E00               	movlw	0
  2589  001838  EC28  F013         	call	_setFbits
  2590                           
  2591                           ;emulator.c: 264: break;
  2592  00183C  D3C3               	goto	l1674
  2593  00183E                     l1398:
  2594                           
  2595                           ;emulator.c: 267: haltFlag = 1;
  2596  00183E  6E0B               	movwf	??_processOpcode& (0+255),c
  2597  001840  0E01               	movlw	1
  2598  001842  6E1D               	movwf	_haltFlag,c
  2599  001844  500B               	movf	??_processOpcode& (0+255),w,c
  2600                           
  2601                           ;emulator.c: 268: break;
  2602  001846  D3BE               	goto	l1674
  2603  001848                     l1400:
  2604                           
  2605                           ;emulator.c: 274: regA = getPortData(regB);
  2606  001848  5021               	movf	_regB,w,c
  2607  00184A  ECB8  F013         	call	_getPortData
  2608  00184E  D1F0               	goto	L11
  2609  001850                     l1402:
  2610                           
  2611                           ;emulator.c: 278: regA = getPortData(immData_1);
  2612  001850  501E               	movf	_immData_1,w,c
  2613  001852  ECB8  F013         	call	_getPortData
  2614  001856  6E20               	movwf	_regA,c
  2615  001858  D2AC               	goto	L20
  2616  00185A                     l1406:
  2617                           
  2618                           ;emulator.c: 283: setPortData(regB, regA);
  2619  00185A  C020  F005         	movff	_regA,setPortData@outputData
  2620  00185E  5021               	movf	_regB,w,c
  2621  001860  ECE7  F011         	call	_setPortData
  2622                           
  2623                           ;emulator.c: 284: break;
  2624  001864  D3AF               	goto	l1674
  2625  001866                     l1408:
  2626                           
  2627                           ;emulator.c: 287: setPortData(immData_1, regA);
  2628  001866  C020  F005         	movff	_regA,setPortData@outputData
  2629  00186A  501E               	movf	_immData_1,w,c
  2630  00186C  ECE7  F011         	call	_setPortData
  2631  001870  D2A0               	goto	L20
  2632  001872                     l1412:
  2633                           
  2634                           ;emulator.c: 292: setPortData(immData_1, immData_2);
  2635  001872  C01F  F005         	movff	_immData_2,setPortData@outputData
  2636  001876  501E               	movf	_immData_1,w,c
  2637  001878  ECE7  F011         	call	_setPortData
  2638  00187C  D11A               	goto	l1546
  2639  00187E                     l1416:
  2640                           
  2641                           ;emulator.c: 300: regA = virtualMemory[regMX];
  2642  00187E  0E00               	movlw	low _virtualMemory
  2643  001880  2419               	addwf	_regMX,w,c
  2644  001882  6ED9               	movwf	fsr2l,c
  2645  001884  0E02               	movlw	high _virtualMemory
  2646  001886  201A               	addwfc	_regMX+1,w,c
  2647  001888  D1D1               	goto	L26
  2648  00188A                     l1418:
  2649                           
  2650                           ;emulator.c: 304: regA = getMXbits(0);
  2651  00188A  0E00               	movlw	0
  2652  00188C  ECC3  F013         	call	_getMXbits
  2653  001890  D1CF               	goto	L11
  2654  001892                     l1420:
  2655                           
  2656                           ;emulator.c: 308: regA = getMXbits(1);
  2657  001892  0E01               	movlw	1
  2658  001894  ECC3  F013         	call	_getMXbits
  2659  001898  D1CB               	goto	L11
  2660  00189A                     l274:
  2661                           
  2662                           ;emulator.c: 312: regA = regSP;
  2663  00189A  C023  F020         	movff	_regSP,_regA
  2664                           
  2665                           ;emulator.c: 313: break;
  2666  00189E  D392               	goto	l1674
  2667  0018A0                     l275:
  2668                           
  2669                           ;emulator.c: 316: regA = regF;
  2670  0018A0  C022  F020         	movff	_regF,_regA
  2671                           
  2672                           ;emulator.c: 317: break;
  2673  0018A4  D38F               	goto	l1674
  2674  0018A6                     l276:
  2675                           
  2676                           ;emulator.c: 320: regA = regB;
  2677  0018A6  C021  F020         	movff	_regB,_regA
  2678                           
  2679                           ;emulator.c: 321: break;
  2680  0018AA  D38C               	goto	l1674
  2681  0018AC                     l1422:
  2682                           
  2683                           ;emulator.c: 333: virtualMemory[regMX] = regA;
  2684  0018AC  0E00               	movlw	low _virtualMemory
  2685  0018AE  2419               	addwf	_regMX,w,c
  2686  0018B0  6ED9               	movwf	fsr2l,c
  2687  0018B2  0E02               	movlw	high _virtualMemory
  2688  0018B4  201A               	addwfc	_regMX+1,w,c
  2689  0018B6  6EDA               	movwf	fsr2h,c
  2690  0018B8  C020  FFDF         	movff	_regA,indf2
  2691                           
  2692                           ;emulator.c: 335: break;
  2693  0018BC  D383               	goto	l1674
  2694  0018BE                     l1424:
  2695                           
  2696                           ;emulator.c: 338: setMXbits(0, regA);
  2697  0018BE  C020  F001         	movff	_regA,setMXbits@value
  2698  0018C2  0E00               	movlw	0
  2699  0018C4  EC77  F013         	call	_setMXbits
  2700                           
  2701                           ;emulator.c: 339: break;
  2702  0018C8  D37D               	goto	l1674
  2703  0018CA                     l1426:
  2704                           
  2705                           ;emulator.c: 342: setMXbits(1, regA);
  2706  0018CA  C020  F001         	movff	_regA,setMXbits@value
  2707  0018CE  0E01               	movlw	1
  2708  0018D0  EC77  F013         	call	_setMXbits
  2709                           
  2710                           ;emulator.c: 343: break;
  2711  0018D4  D377               	goto	l1674
  2712  0018D6                     l280:
  2713                           
  2714                           ;emulator.c: 346: regSP = regA;
  2715  0018D6  C020  F023         	movff	_regA,_regSP
  2716                           
  2717                           ;emulator.c: 347: break;
  2718  0018DA  D374               	goto	l1674
  2719  0018DC                     l281:
  2720                           
  2721                           ;emulator.c: 350: regB = regA;
  2722  0018DC  C020  F021         	movff	_regA,_regB
  2723                           
  2724                           ;emulator.c: 351: break;
  2725  0018E0  D371               	goto	l1674
  2726  0018E2                     l282:
  2727                           
  2728                           ;emulator.c: 354: regA = immData_1;
  2729  0018E2  C01E  F020         	movff	_immData_1,_regA
  2730  0018E6  D265               	goto	L20
  2731  0018E8                     l283:
  2732                           
  2733                           ;emulator.c: 360: regA_temp8 = regA;
  2734  0018E8  C020  F011         	movff	_regA,processOpcode@regA_temp8
  2735                           
  2736                           ;emulator.c: 361: regA = regB;
  2737  0018EC  C021  F020         	movff	_regB,_regA
  2738                           
  2739                           ;emulator.c: 362: regB = regA_temp8;
  2740  0018F0  C011  F021         	movff	processOpcode@regA_temp8,_regB
  2741                           
  2742                           ;emulator.c: 363: break;
  2743  0018F4  D367               	goto	l1674
  2744  0018F6                     l1430:
  2745                           
  2746                           ;emulator.c: 369: regA &= regB;
  2747  0018F6  5021               	movf	_regB,w,c
  2748  0018F8  1620               	andwf	_regA,f,c
  2749                           
  2750                           ;emulator.c: 370: break;
  2751  0018FA  D364               	goto	l1674
  2752  0018FC                     l1432:
  2753                           
  2754                           ;emulator.c: 374: regA = regA & regB;
  2755  0018FC  5020               	movf	_regA,w,c
  2756  0018FE  1421               	andwf	_regB,w,c
  2757  001900  D00B               	goto	L10
  2758  001902                     l1436:
  2759                           
  2760                           ;emulator.c: 379: regA |= regB;
  2761  001902  5021               	movf	_regB,w,c
  2762  001904  1220               	iorwf	_regA,f,c
  2763                           
  2764                           ;emulator.c: 380: break;
  2765  001906  D35E               	goto	l1674
  2766  001908                     l1438:
  2767                           
  2768                           ;emulator.c: 384: regA = regA | regB;
  2769  001908  5020               	movf	_regA,w,c
  2770  00190A  1021               	iorwf	_regB,w,c
  2771  00190C  D005               	goto	L10
  2772  00190E                     l1442:
  2773                           
  2774                           ;emulator.c: 389: regA ^= regB;
  2775  00190E  5021               	movf	_regB,w,c
  2776  001910  1A20               	xorwf	_regA,f,c
  2777                           
  2778                           ;emulator.c: 390: break;
  2779  001912  D358               	goto	l1674
  2780  001914                     l1444:
  2781                           
  2782                           ;emulator.c: 394: regA = regA ^ regB;
  2783  001914  5020               	movf	_regA,w,c
  2784  001916  1821               	xorwf	_regB,w,c
  2785  001918                     L10:
  2786  001918  6E20               	movwf	_regA,c
  2787  00191A                     l1448:
  2788                           
  2789                           ;emulator.c: 399: regA =~ regA;
  2790  00191A  1E20               	comf	_regA,f,c
  2791                           
  2792                           ;emulator.c: 400: break;
  2793  00191C  D353               	goto	l1674
  2794  00191E                     l291:
  2795                           
  2796                           ;emulator.c: 404: regA_temp8 = regA;
  2797  00191E  C020  F011         	movff	_regA,processOpcode@regA_temp8
  2798                           
  2799                           ;emulator.c: 406: if (regA_temp8 == 1) setFbits(0, 1);
  2800  001922  0411               	decf	processOpcode@regA_temp8,w,c
  2801  001924  A4D8               	btfss	status,2,c
  2802  001926  D008               	goto	l1454
  2803  001928  6E0B               	movwf	??_processOpcode& (0+255),c
  2804  00192A  0E01               	movlw	1
  2805  00192C  6E01               	movwf	setFbits@value,c
  2806  00192E  500B               	movf	??_processOpcode& (0+255),w,c
  2807  001930  0E00               	movlw	0
  2808  001932  EC28  F013         	call	_setFbits
  2809  001936  D346               	goto	l1674
  2810  001938                     l1454:
  2811                           
  2812                           ;emulator.c: 407: else setFbits(0, 0);
  2813  001938  6E0B               	movwf	??_processOpcode& (0+255),c
  2814  00193A  0E00               	movlw	0
  2815  00193C  6E01               	movwf	setFbits@value,c
  2816  00193E  500B               	movf	??_processOpcode& (0+255),w,c
  2817  001940  0E00               	movlw	0
  2818  001942  EC28  F013         	call	_setFbits
  2819  001946  D33E               	goto	l1674
  2820  001948                     l294:
  2821                           
  2822                           ;emulator.c: 415: regA_temp8 = regA;
  2823  001948  C020  F011         	movff	_regA,processOpcode@regA_temp8
  2824                           
  2825                           ;emulator.c: 418: if (regA_temp8 == 1) setFbits(0, 1);
  2826  00194C  0411               	decf	processOpcode@regA_temp8,w,c
  2827  00194E  A4D8               	btfss	status,2,c
  2828  001950  D008               	goto	l1460
  2829  001952  6E0B               	movwf	??_processOpcode& (0+255),c
  2830  001954  0E01               	movlw	1
  2831  001956  6E01               	movwf	setFbits@value,c
  2832  001958  500B               	movf	??_processOpcode& (0+255),w,c
  2833  00195A  0E00               	movlw	0
  2834  00195C  EC28  F013         	call	_setFbits
  2835  001960  D331               	goto	l1674
  2836  001962                     l1460:
  2837                           
  2838                           ;emulator.c: 419: else setFbits(0, 0);
  2839  001962  6E0B               	movwf	??_processOpcode& (0+255),c
  2840  001964  0E00               	movlw	0
  2841  001966  6E01               	movwf	setFbits@value,c
  2842  001968  500B               	movf	??_processOpcode& (0+255),w,c
  2843  00196A  0E00               	movlw	0
  2844  00196C  EC28  F013         	call	_setFbits
  2845  001970  D329               	goto	l1674
  2846  001972                     l297:
  2847                           
  2848                           ;emulator.c: 427: carriedBit = regA;
  2849  001972  C020  F010         	movff	_regA,processOpcode@carriedBit
  2850                           
  2851                           ;emulator.c: 434: regA = regA + carriedBit;
  2852  001976  5020               	movf	_regA,w,c
  2853  001978  2410               	addwf	processOpcode@carriedBit,w,c
  2854  00197A  D15A               	goto	L11
  2855  00197C                     l298:
  2856                           
  2857                           ;emulator.c: 439: carriedBit = regA;
  2858  00197C  C020  F010         	movff	_regA,processOpcode@carriedBit
  2859                           
  2860                           ;emulator.c: 446: regA += carriedBit;
  2861  001980  5010               	movf	processOpcode@carriedBit,w,c
  2862  001982  D1B4               	goto	L12
  2863  001984                     l1466:
  2864                           
  2865                           ;emulator.c: 451: if (regA == regB) setFbits(3, 1);
  2866  001984  5021               	movf	_regB,w,c
  2867  001986  6220               	cpfseq	_regA,c
  2868  001988  D008               	goto	l1470
  2869  00198A  6E0B               	movwf	??_processOpcode& (0+255),c
  2870  00198C  0E01               	movlw	1
  2871  00198E  6E01               	movwf	setFbits@value,c
  2872  001990  500B               	movf	??_processOpcode& (0+255),w,c
  2873  001992  0E03               	movlw	3
  2874  001994  EC28  F013         	call	_setFbits
  2875  001998  D007               	goto	l1472
  2876  00199A                     l1470:
  2877                           
  2878                           ;emulator.c: 452: else setFbits(3, 0);
  2879  00199A  6E0B               	movwf	??_processOpcode& (0+255),c
  2880  00199C  0E00               	movlw	0
  2881  00199E  6E01               	movwf	setFbits@value,c
  2882  0019A0  500B               	movf	??_processOpcode& (0+255),w,c
  2883  0019A2  0E03               	movlw	3
  2884  0019A4  EC28  F013         	call	_setFbits
  2885  0019A8                     l1472:
  2886                           
  2887                           ;emulator.c: 455: if (regA < regB) setFbits(2, 1);
  2888  0019A8  5021               	movf	_regB,w,c
  2889  0019AA  5C20               	subwf	_regA,w,c
  2890  0019AC  B0D8               	btfsc	status,0,c
  2891  0019AE  D008               	goto	l1476
  2892  0019B0  6E0B               	movwf	??_processOpcode& (0+255),c
  2893  0019B2  0E01               	movlw	1
  2894  0019B4  6E01               	movwf	setFbits@value,c
  2895  0019B6  500B               	movf	??_processOpcode& (0+255),w,c
  2896  0019B8  0E02               	movlw	2
  2897  0019BA  EC28  F013         	call	_setFbits
  2898  0019BE  D007               	goto	l1478
  2899  0019C0                     l1476:
  2900                           
  2901                           ;emulator.c: 456: else setFbits(2, 0);
  2902  0019C0  6E0B               	movwf	??_processOpcode& (0+255),c
  2903  0019C2  0E00               	movlw	0
  2904  0019C4  6E01               	movwf	setFbits@value,c
  2905  0019C6  500B               	movf	??_processOpcode& (0+255),w,c
  2906  0019C8  0E02               	movlw	2
  2907  0019CA  EC28  F013         	call	_setFbits
  2908  0019CE                     l1478:
  2909                           
  2910                           ;emulator.c: 459: if (regA > regB) setFbits(1, 1);
  2911  0019CE  5020               	movf	_regA,w,c
  2912  0019D0  5C21               	subwf	_regB,w,c
  2913  0019D2  B0D8               	btfsc	status,0,c
  2914  0019D4  D008               	goto	l1482
  2915  0019D6  6E0B               	movwf	??_processOpcode& (0+255),c
  2916  0019D8  0E01               	movlw	1
  2917  0019DA  6E01               	movwf	setFbits@value,c
  2918  0019DC  500B               	movf	??_processOpcode& (0+255),w,c
  2919  0019DE  0E01               	movlw	1
  2920  0019E0  EC28  F013         	call	_setFbits
  2921  0019E4  D2EF               	goto	l1674
  2922  0019E6                     l1482:
  2923                           
  2924                           ;emulator.c: 460: else setFbits(1, 0);
  2925  0019E6  6E0B               	movwf	??_processOpcode& (0+255),c
  2926  0019E8  0E00               	movlw	0
  2927  0019EA  6E01               	movwf	setFbits@value,c
  2928  0019EC  500B               	movf	??_processOpcode& (0+255),w,c
  2929  0019EE  0E01               	movlw	1
  2930  0019F0  EC28  F013         	call	_setFbits
  2931  0019F4  D2E7               	goto	l1674
  2932  0019F6                     l1484:
  2933                           
  2934                           ;emulator.c: 472: regPC = immData_toPointer();
  2935  0019F6  ECAC  F013         	call	_immData_toPointer	;wreg free
  2936  0019FA  D011               	goto	L28
  2937  0019FC                     l1488:
  2938                           
  2939                           ;emulator.c: 477: if (getFbits(3) == 1) regPC = regMX;
  2940  0019FC  0E03               	movlw	3
  2941  0019FE  EC8B  F013         	call	_getFbits
  2942  001A02                     L22:
  2943  001A02  6E0B               	movwf	??_processOpcode& (0+255),c
  2944  001A04  040B               	decf	??_processOpcode,w,c
  2945  001A06                     L21:
  2946  001A06  A4D8               	btfss	status,2,c
  2947  001A08  D2DD               	goto	l1674
  2948  001A0A  D066               	goto	L13
  2949  001A0C                     l1492:
  2950                           
  2951                           ;emulator.c: 481: if (getFbits(3) == 1) regPC = immData_toPointer();
  2952  001A0C  0E03               	movlw	3
  2953  001A0E  EC8B  F013         	call	_getFbits
  2954  001A12  6E0B               	movwf	??_processOpcode& (0+255),c
  2955  001A14  040B               	decf	??_processOpcode,w,c
  2956  001A16  A4D8               	btfss	status,2,c
  2957  001A18  D04C               	goto	l1546
  2958  001A1A  ECAC  F013         	call	_immData_toPointer	;wreg free
  2959  001A1E                     L28:
  2960  001A1E  C001  F01B         	movff	?_immData_toPointer,_regPC
  2961  001A22  C002  F01C         	movff	?_immData_toPointer+1,_regPC+1
  2962  001A26  D045               	goto	l1546
  2963  001A28                     l1498:
  2964                           
  2965                           ;emulator.c: 486: if (getFbits(3) == 0) regPC = regMX;
  2966  001A28  0E03               	movlw	3
  2967  001A2A  EC8B  F013         	call	_getFbits
  2968  001A2E  D036               	goto	L24
  2969  001A30                     l1502:
  2970                           
  2971                           ;emulator.c: 490: if (getFbits(3) == 0) regPC = immData_toPointer();
  2972  001A30  0E03               	movlw	3
  2973  001A32  EC8B  F013         	call	_getFbits
  2974  001A36  0900               	iorlw	0
  2975  001A38  A4D8               	btfss	status,2,c
  2976  001A3A  D03B               	goto	l1546
  2977  001A3C  ECAC  F013         	call	_immData_toPointer	;wreg free
  2978  001A40  D7EE               	goto	L28
  2979  001A42                     l1508:
  2980                           
  2981                           ;emulator.c: 495: if (getFbits(1) == 1) regPC = regMX;
  2982  001A42  0E01               	movlw	1
  2983  001A44  EC8B  F013         	call	_getFbits
  2984  001A48  D7DC               	goto	L22
  2985  001A4A                     l1512:
  2986                           
  2987                           ;emulator.c: 499: if (getFbits(1) == 1) regPC = immData_toPointer();
  2988  001A4A  0E01               	movlw	1
  2989  001A4C  EC8B  F013         	call	_getFbits
  2990  001A50  6E0B               	movwf	??_processOpcode& (0+255),c
  2991  001A52  040B               	decf	??_processOpcode,w,c
  2992  001A54  A4D8               	btfss	status,2,c
  2993  001A56  D02D               	goto	l1546
  2994  001A58  ECAC  F013         	call	_immData_toPointer	;wreg free
  2995  001A5C  D7E0               	goto	L28
  2996  001A5E                     l1518:
  2997                           
  2998                           ;emulator.c: 504: if (getFbits(2) == 1) regPC = regMX;
  2999  001A5E  0E02               	movlw	2
  3000  001A60  EC8B  F013         	call	_getFbits
  3001  001A64  D7CE               	goto	L22
  3002  001A66                     l1522:
  3003                           
  3004                           ;emulator.c: 508: if (getFbits(2) == 1) regPC = immData_toPointer();
  3005  001A66  0E02               	movlw	2
  3006  001A68  EC8B  F013         	call	_getFbits
  3007  001A6C  6E0B               	movwf	??_processOpcode& (0+255),c
  3008  001A6E  040B               	decf	??_processOpcode,w,c
  3009  001A70  A4D8               	btfss	status,2,c
  3010  001A72  D01F               	goto	l1546
  3011  001A74  ECAC  F013         	call	_immData_toPointer	;wreg free
  3012  001A78  D7D2               	goto	L28
  3013  001A7A                     l1528:
  3014                           
  3015                           ;emulator.c: 513: if (getFbits(0) == 1) regPC = regMX;
  3016  001A7A  0E00               	movlw	0
  3017  001A7C  EC8B  F013         	call	_getFbits
  3018  001A80  D7C0               	goto	L22
  3019  001A82                     l1532:
  3020                           
  3021                           ;emulator.c: 517: if (getFbits(0) == 1) regPC = immData_toPointer();
  3022  001A82  0E00               	movlw	0
  3023  001A84  EC8B  F013         	call	_getFbits
  3024  001A88  6E0B               	movwf	??_processOpcode& (0+255),c
  3025  001A8A  040B               	decf	??_processOpcode,w,c
  3026  001A8C  A4D8               	btfss	status,2,c
  3027  001A8E  D011               	goto	l1546
  3028  001A90  ECAC  F013         	call	_immData_toPointer	;wreg free
  3029  001A94  D7C4               	goto	L28
  3030  001A96                     l1538:
  3031                           
  3032                           ;emulator.c: 522: if (getFbits(0) == 0) regPC = regMX;
  3033  001A96  0E00               	movlw	0
  3034  001A98  EC8B  F013         	call	_getFbits
  3035  001A9C                     L24:
  3036  001A9C  0900               	iorlw	0
  3037  001A9E  D7B3               	goto	L21
  3038  001AA0                     l1542:
  3039                           
  3040                           ;emulator.c: 526: if (getFbits(0) == 0) regPC = immData_toPointer();
  3041  001AA0  0E00               	movlw	0
  3042  001AA2  EC8B  F013         	call	_getFbits
  3043  001AA6  0900               	iorlw	0
  3044  001AA8  A4D8               	btfss	status,2,c
  3045  001AAA  D003               	goto	l1546
  3046  001AAC  ECAC  F013         	call	_immData_toPointer	;wreg free
  3047  001AB0  D7B6               	goto	L28
  3048  001AB2                     l1546:
  3049                           
  3050                           ;emulator.c: 527: regPC += 2;
  3051  001AB2  0E02               	movlw	2
  3052  001AB4  261B               	addwf	_regPC,f,c
  3053  001AB6  0E00               	movlw	0
  3054  001AB8  221C               	addwfc	_regPC+1,f,c
  3055                           
  3056                           ;emulator.c: 528: break;
  3057  001ABA  D284               	goto	l1674
  3058  001ABC                     l1548:
  3059                           
  3060                           ;emulator.c: 532: stack[regSP] = regPC;
  3061  001ABC  5023               	movf	_regSP,w,c
  3062  001ABE  0D01               	mullw	1
  3063  001AC0  0101               	movlb	1	; () banked
  3064  001AC2  0E00               	movlw	low _stack
  3065  001AC4  24F3               	addwf	prodl,w,c
  3066  001AC6  6ED9               	movwf	fsr2l,c
  3067  001AC8  0101               	movlb	1	; () banked
  3068  001ACA  0E01               	movlw	high _stack
  3069  001ACC  20F4               	addwfc	prodh,w,c
  3070  001ACE  6EDA               	movwf	fsr2h,c
  3071  001AD0  C01B  FFDF         	movff	_regPC,indf2
  3072                           
  3073                           ; BSR set to: 1
  3074                           ;emulator.c: 533: regSP += 2;
  3075  001AD4  0E02               	movlw	2
  3076  001AD6  2623               	addwf	_regSP,f,c
  3077  001AD8                     L13:
  3078                           
  3079                           ; BSR set to: 1
  3080                           ;emulator.c: 534: regPC = regMX;
  3081  001AD8  C019  F01B         	movff	_regMX,_regPC
  3082  001ADC  C01A  F01C         	movff	_regMX+1,_regPC+1
  3083                           
  3084                           ;emulator.c: 535: break;
  3085  001AE0  D271               	goto	l1674
  3086  001AE2                     l1554:
  3087                           
  3088                           ;emulator.c: 539: stack[regSP] = regPC;
  3089  001AE2  5023               	movf	_regSP,w,c
  3090  001AE4  0D01               	mullw	1
  3091  001AE6  0101               	movlb	1	; () banked
  3092  001AE8  0E00               	movlw	low _stack
  3093  001AEA  24F3               	addwf	prodl,w,c
  3094  001AEC  6ED9               	movwf	fsr2l,c
  3095  001AEE  0101               	movlb	1	; () banked
  3096  001AF0  0E01               	movlw	high _stack
  3097  001AF2  20F4               	addwfc	prodh,w,c
  3098  001AF4  6EDA               	movwf	fsr2h,c
  3099  001AF6  C01B  FFDF         	movff	_regPC,indf2
  3100                           
  3101                           ; BSR set to: 1
  3102                           ;emulator.c: 540: regSP += 2;
  3103  001AFA  0E02               	movlw	2
  3104  001AFC  2623               	addwf	_regSP,f,c
  3105                           
  3106                           ; BSR set to: 1
  3107                           ;emulator.c: 541: regPC = immData_toPointer();
  3108  001AFE  ECAC  F013         	call	_immData_toPointer	;wreg free
  3109  001B02  D78D               	goto	L28
  3110  001B04                     l1562:
  3111                           
  3112                           ;emulator.c: 547: regSP -= 2;
  3113  001B04  0E02               	movlw	2
  3114  001B06  5E23               	subwf	_regSP,f,c
  3115                           
  3116                           ;emulator.c: 549: regPC_temp = (uint16_t) stack[regSP];
  3117  001B08  5023               	movf	_regSP,w,c
  3118  001B0A  0D01               	mullw	1
  3119  001B0C  0101               	movlb	1	; () banked
  3120  001B0E  0E00               	movlw	low _stack
  3121  001B10  24F3               	addwf	prodl,w,c
  3122  001B12  6ED9               	movwf	fsr2l,c
  3123  001B14  0101               	movlb	1	; () banked
  3124  001B16  0E01               	movlw	high _stack
  3125  001B18  20F4               	addwfc	prodh,w,c
  3126  001B1A  6EDA               	movwf	fsr2h,c
  3127  001B1C  50DF               	movf	indf2,w,c
  3128  001B1E  6E0B               	movwf	??_processOpcode& (0+255),c
  3129  001B20  500B               	movf	??_processOpcode,w,c
  3130  001B22  6E0E               	movwf	processOpcode@regPC_temp,c
  3131  001B24  6A0F               	clrf	processOpcode@regPC_temp+1,c
  3132                           
  3133                           ; BSR set to: 1
  3134                           ;emulator.c: 551: regPC += regPC_temp + (uint16_t) stack[regSP];
  3135  001B26  5023               	movf	_regSP,w,c
  3136  001B28  0D01               	mullw	1
  3137  001B2A  0101               	movlb	1	; () banked
  3138  001B2C  0E00               	movlw	low _stack
  3139  001B2E  24F3               	addwf	prodl,w,c
  3140  001B30  6ED9               	movwf	fsr2l,c
  3141  001B32  0101               	movlb	1	; () banked
  3142  001B34  0E01               	movlw	high _stack
  3143  001B36  20F4               	addwfc	prodh,w,c
  3144  001B38  6EDA               	movwf	fsr2h,c
  3145  001B3A  50DF               	movf	indf2,w,c
  3146  001B3C  6E0B               	movwf	??_processOpcode& (0+255),c
  3147  001B3E  500B               	movf	??_processOpcode,w,c
  3148  001B40  240E               	addwf	processOpcode@regPC_temp,w,c
  3149  001B42  6E0C               	movwf	(??_processOpcode+1)& (0+255),c
  3150  001B44  0E00               	movlw	0
  3151  001B46  200F               	addwfc	processOpcode@regPC_temp+1,w,c
  3152  001B48  6E0D               	movwf	(??_processOpcode+2)& (0+255),c
  3153  001B4A  500C               	movf	??_processOpcode+1,w,c
  3154  001B4C  261B               	addwf	_regPC,f,c
  3155  001B4E  500D               	movf	??_processOpcode+2,w,c
  3156  001B50  D7B3               	goto	L15
  3157  001B52                     l1568:
  3158                           
  3159                           ;emulator.c: 559: stack[regSP] = regA;
  3160  001B52  5023               	movf	_regSP,w,c
  3161  001B54  0D01               	mullw	1
  3162  001B56  0101               	movlb	1	; () banked
  3163  001B58  0E00               	movlw	low _stack
  3164  001B5A  24F3               	addwf	prodl,w,c
  3165  001B5C  6ED9               	movwf	fsr2l,c
  3166  001B5E  0101               	movlb	1	; () banked
  3167  001B60  0E01               	movlw	high _stack
  3168  001B62  20F4               	addwfc	prodh,w,c
  3169  001B64  6EDA               	movwf	fsr2h,c
  3170  001B66  C020  FFDF         	movff	_regA,indf2
  3171  001B6A  D02A               	goto	L17
  3172  001B6C                     l1572:
  3173                           
  3174                           ;emulator.c: 565: stack[regSP] = regB;
  3175  001B6C  5023               	movf	_regSP,w,c
  3176  001B6E  0D01               	mullw	1
  3177  001B70  0101               	movlb	1	; () banked
  3178  001B72  0E00               	movlw	low _stack
  3179  001B74  24F3               	addwf	prodl,w,c
  3180  001B76  6ED9               	movwf	fsr2l,c
  3181  001B78  0101               	movlb	1	; () banked
  3182  001B7A  0E01               	movlw	high _stack
  3183  001B7C  20F4               	addwfc	prodh,w,c
  3184  001B7E  6EDA               	movwf	fsr2h,c
  3185  001B80  C021  FFDF         	movff	_regB,indf2
  3186  001B84  D01D               	goto	L17
  3187  001B86                     l1576:
  3188                           
  3189                           ;emulator.c: 571: stack[regSP] = regMX;
  3190  001B86  5023               	movf	_regSP,w,c
  3191  001B88  0D01               	mullw	1
  3192  001B8A  0101               	movlb	1	; () banked
  3193  001B8C  0E00               	movlw	low _stack
  3194  001B8E  24F3               	addwf	prodl,w,c
  3195  001B90  6ED9               	movwf	fsr2l,c
  3196  001B92  0101               	movlb	1	; () banked
  3197  001B94  0E01               	movlw	high _stack
  3198  001B96  20F4               	addwfc	prodh,w,c
  3199  001B98  6EDA               	movwf	fsr2h,c
  3200  001B9A  C019  FFDF         	movff	_regMX,indf2
  3201                           
  3202                           ; BSR set to: 1
  3203                           ;emulator.c: 572: regSP += 2;
  3204  001B9E  0E02               	movlw	2
  3205  001BA0  2623               	addwf	_regSP,f,c
  3206                           
  3207                           ;emulator.c: 573: break;
  3208  001BA2  D210               	goto	l1674
  3209  001BA4                     l1580:
  3210                           
  3211                           ;emulator.c: 577: stack[regSP] = getMXbits(0);
  3212  001BA4  5023               	movf	_regSP,w,c
  3213  001BA6  0D01               	mullw	1
  3214  001BA8  0101               	movlb	1	; () banked
  3215  001BAA  0E00               	movlw	low _stack
  3216  001BAC  24F3               	addwf	prodl,w,c
  3217  001BAE  6ED9               	movwf	fsr2l,c
  3218  001BB0  0101               	movlb	1	; () banked
  3219  001BB2  0E01               	movlw	high _stack
  3220  001BB4  20F4               	addwfc	prodh,w,c
  3221  001BB6  6EDA               	movwf	fsr2h,c
  3222  001BB8  0E00               	movlw	0
  3223  001BBA  ECC3  F013         	call	_getMXbits
  3224  001BBE  D00F               	goto	L18
  3225  001BC0                     L17:
  3226                           
  3227                           ;emulator.c: 578: regSP++;
  3228  001BC0  2A23               	incf	_regSP,f,c
  3229                           
  3230                           ;emulator.c: 579: break;
  3231  001BC2  D200               	goto	l1674
  3232  001BC4                     l1584:
  3233                           
  3234                           ;emulator.c: 583: stack[regSP] = getMXbits(1);
  3235  001BC4  5023               	movf	_regSP,w,c
  3236  001BC6  0D01               	mullw	1
  3237  001BC8  0101               	movlb	1	; () banked
  3238  001BCA  0E00               	movlw	low _stack
  3239  001BCC  24F3               	addwf	prodl,w,c
  3240  001BCE  6ED9               	movwf	fsr2l,c
  3241  001BD0  0101               	movlb	1	; () banked
  3242  001BD2  0E01               	movlw	high _stack
  3243  001BD4  20F4               	addwfc	prodh,w,c
  3244  001BD6  6EDA               	movwf	fsr2h,c
  3245  001BD8  0E01               	movlw	1
  3246  001BDA  ECC3  F013         	call	_getMXbits
  3247  001BDE                     L18:
  3248  001BDE  6EDF               	movwf	indf2,c
  3249  001BE0  D7EF               	goto	L17
  3250  001BE2                     l1588:
  3251                           
  3252                           ;emulator.c: 589: stack[regSP] = regF;
  3253  001BE2  5023               	movf	_regSP,w,c
  3254  001BE4  0D01               	mullw	1
  3255  001BE6  0101               	movlb	1	; () banked
  3256  001BE8  0E00               	movlw	low _stack
  3257  001BEA  24F3               	addwf	prodl,w,c
  3258  001BEC  6ED9               	movwf	fsr2l,c
  3259  001BEE  0101               	movlb	1	; () banked
  3260  001BF0  0E01               	movlw	high _stack
  3261  001BF2  20F4               	addwfc	prodh,w,c
  3262  001BF4  6EDA               	movwf	fsr2h,c
  3263  001BF6  C022  FFDF         	movff	_regF,indf2
  3264  001BFA  D7E2               	goto	L17
  3265  001BFC                     l1592:
  3266                           
  3267                           ;emulator.c: 595: stack[regSP] = immData_1;
  3268  001BFC  5023               	movf	_regSP,w,c
  3269  001BFE  0D01               	mullw	1
  3270  001C00  0101               	movlb	1	; () banked
  3271  001C02  0E00               	movlw	low _stack
  3272  001C04  24F3               	addwf	prodl,w,c
  3273  001C06  6ED9               	movwf	fsr2l,c
  3274  001C08  0101               	movlb	1	; () banked
  3275  001C0A  0E01               	movlw	high _stack
  3276  001C0C  20F4               	addwfc	prodh,w,c
  3277  001C0E  6EDA               	movwf	fsr2h,c
  3278  001C10  C01E  FFDF         	movff	_immData_1,indf2
  3279                           
  3280                           ; BSR set to: 1
  3281                           ;emulator.c: 596: regSP++;
  3282  001C14  2A23               	incf	_regSP,f,c
  3283  001C16  D0CD               	goto	L20
  3284  001C18                     l1598:
  3285                           
  3286                           ;emulator.c: 601: regSP--;
  3287  001C18  0623               	decf	_regSP,f,c
  3288                           
  3289                           ;emulator.c: 603: regA = stack[regSP];
  3290  001C1A  5023               	movf	_regSP,w,c
  3291  001C1C  0D01               	mullw	1
  3292  001C1E  0101               	movlb	1	; () banked
  3293  001C20  0E00               	movlw	low _stack
  3294  001C22  24F3               	addwf	prodl,w,c
  3295  001C24  6ED9               	movwf	fsr2l,c
  3296  001C26  0101               	movlb	1	; () banked
  3297  001C28  0E01               	movlw	high _stack
  3298  001C2A  20F4               	addwfc	prodh,w,c
  3299  001C2C                     L26:
  3300  001C2C  6EDA               	movwf	fsr2h,c
  3301  001C2E  50DF               	movf	indf2,w,c
  3302  001C30                     L11:
  3303  001C30  6E20               	movwf	_regA,c
  3304                           
  3305                           ;emulator.c: 604: break;
  3306  001C32  D1C8               	goto	l1674
  3307  001C34                     l1602:
  3308                           
  3309                           ;emulator.c: 607: regSP--;
  3310  001C34  0623               	decf	_regSP,f,c
  3311                           
  3312                           ;emulator.c: 609: regB = stack[regSP];
  3313  001C36  5023               	movf	_regSP,w,c
  3314  001C38  0D01               	mullw	1
  3315  001C3A  0101               	movlb	1	; () banked
  3316  001C3C  0E00               	movlw	low _stack
  3317  001C3E  24F3               	addwf	prodl,w,c
  3318  001C40  6ED9               	movwf	fsr2l,c
  3319  001C42  0101               	movlb	1	; () banked
  3320  001C44  0E01               	movlw	high _stack
  3321  001C46  20F4               	addwfc	prodh,w,c
  3322  001C48  6EDA               	movwf	fsr2h,c
  3323  001C4A  50DF               	movf	indf2,w,c
  3324  001C4C  6E21               	movwf	_regB,c
  3325                           
  3326                           ;emulator.c: 610: break;
  3327  001C4E  D1BA               	goto	l1674
  3328  001C50                     l1606:
  3329                           
  3330                           ;emulator.c: 613: regSP -= 2;
  3331  001C50  0E02               	movlw	2
  3332  001C52  5E23               	subwf	_regSP,f,c
  3333                           
  3334                           ;emulator.c: 615: regMX = stack[regSP];
  3335  001C54  5023               	movf	_regSP,w,c
  3336  001C56  0D01               	mullw	1
  3337  001C58  0101               	movlb	1	; () banked
  3338  001C5A  0E00               	movlw	low _stack
  3339  001C5C  24F3               	addwf	prodl,w,c
  3340  001C5E  6ED9               	movwf	fsr2l,c
  3341  001C60  0101               	movlb	1	; () banked
  3342  001C62  0E01               	movlw	high _stack
  3343  001C64  20F4               	addwfc	prodh,w,c
  3344  001C66  6EDA               	movwf	fsr2h,c
  3345  001C68  50DF               	movf	indf2,w,c
  3346  001C6A  6E0B               	movwf	??_processOpcode& (0+255),c
  3347  001C6C  500B               	movf	??_processOpcode,w,c
  3348  001C6E  6E19               	movwf	_regMX,c
  3349  001C70  6A1A               	clrf	_regMX+1,c
  3350                           
  3351                           ;emulator.c: 616: break;
  3352  001C72  D1A8               	goto	l1674
  3353  001C74                     l1610:
  3354                           
  3355                           ;emulator.c: 619: regSP--;
  3356  001C74  0623               	decf	_regSP,f,c
  3357                           
  3358                           ;emulator.c: 621: setMXbits(0, stack[regSP]);
  3359  001C76  5023               	movf	_regSP,w,c
  3360  001C78  0D01               	mullw	1
  3361  001C7A  0101               	movlb	1	; () banked
  3362  001C7C  0E00               	movlw	low _stack
  3363  001C7E  24F3               	addwf	prodl,w,c
  3364  001C80  6ED9               	movwf	fsr2l,c
  3365  001C82  0101               	movlb	1	; () banked
  3366  001C84  0E01               	movlw	high _stack
  3367  001C86  20F4               	addwfc	prodh,w,c
  3368  001C88  6EDA               	movwf	fsr2h,c
  3369  001C8A  50DF               	movf	indf2,w,c
  3370  001C8C  6E01               	movwf	setMXbits@value,c
  3371  001C8E  0E00               	movlw	0
  3372  001C90  EC77  F013         	call	_setMXbits
  3373                           
  3374                           ;emulator.c: 622: break;
  3375  001C94  D197               	goto	l1674
  3376  001C96                     l1614:
  3377                           
  3378                           ;emulator.c: 625: regSP--;
  3379  001C96  0623               	decf	_regSP,f,c
  3380                           
  3381                           ;emulator.c: 627: setMXbits(1, stack[regSP]);
  3382  001C98  5023               	movf	_regSP,w,c
  3383  001C9A  0D01               	mullw	1
  3384  001C9C  0101               	movlb	1	; () banked
  3385  001C9E  0E00               	movlw	low _stack
  3386  001CA0  24F3               	addwf	prodl,w,c
  3387  001CA2  6ED9               	movwf	fsr2l,c
  3388  001CA4  0101               	movlb	1	; () banked
  3389  001CA6  0E01               	movlw	high _stack
  3390  001CA8  20F4               	addwfc	prodh,w,c
  3391  001CAA  6EDA               	movwf	fsr2h,c
  3392  001CAC  50DF               	movf	indf2,w,c
  3393  001CAE  6E01               	movwf	setMXbits@value,c
  3394  001CB0  0E01               	movlw	1
  3395  001CB2  EC77  F013         	call	_setMXbits
  3396                           
  3397                           ;emulator.c: 628: break;
  3398  001CB6  D186               	goto	l1674
  3399  001CB8                     l1618:
  3400                           
  3401                           ;emulator.c: 635: regA_temp16 += (uint16_t) regB;
  3402  001CB8  5021               	movf	_regB,w,c
  3403  001CBA  2612               	addwf	processOpcode@regA_temp16,f,c
  3404  001CBC  0E00               	movlw	0
  3405  001CBE  2213               	addwfc	processOpcode@regA_temp16+1,f,c
  3406                           
  3407                           ;emulator.c: 636: if (regA_temp16 > 255) setFbits(4, 1);
  3408  001CC0  0E00               	movlw	0
  3409  001CC2  5C12               	subwf	processOpcode@regA_temp16,w,c
  3410  001CC4  0E01               	movlw	1
  3411  001CC6  5813               	subwfb	processOpcode@regA_temp16+1,w,c
  3412  001CC8  A0D8               	btfss	status,0,c
  3413  001CCA  D008               	goto	l1622
  3414  001CCC  6E0B               	movwf	??_processOpcode& (0+255),c
  3415  001CCE  0E01               	movlw	1
  3416  001CD0  6E01               	movwf	setFbits@value,c
  3417  001CD2  500B               	movf	??_processOpcode& (0+255),w,c
  3418  001CD4  0E04               	movlw	4
  3419  001CD6  EC28  F013         	call	_setFbits
  3420  001CDA  D007               	goto	l1624
  3421  001CDC                     l1622:
  3422                           
  3423                           ;emulator.c: 637: else setFbits(4, 0);
  3424  001CDC  6E0B               	movwf	??_processOpcode& (0+255),c
  3425  001CDE  0E00               	movlw	0
  3426  001CE0  6E01               	movwf	setFbits@value,c
  3427  001CE2  500B               	movf	??_processOpcode& (0+255),w,c
  3428  001CE4  0E04               	movlw	4
  3429  001CE6  EC28  F013         	call	_setFbits
  3430  001CEA                     l1624:
  3431                           
  3432                           ;emulator.c: 638: regA += regB;
  3433  001CEA  5021               	movf	_regB,w,c
  3434  001CEC                     L12:
  3435  001CEC  2620               	addwf	_regA,f,c
  3436                           
  3437                           ;emulator.c: 639: break;
  3438  001CEE  D16A               	goto	l1674
  3439  001CF0                     l1626:
  3440                           
  3441                           ;emulator.c: 643: regA_temp16 += (uint16_t) immData_1;
  3442  001CF0  501E               	movf	_immData_1,w,c
  3443  001CF2  2612               	addwf	processOpcode@regA_temp16,f,c
  3444  001CF4  0E00               	movlw	0
  3445  001CF6  2213               	addwfc	processOpcode@regA_temp16+1,f,c
  3446                           
  3447                           ;emulator.c: 644: if (regA_temp16 > 255) setFbits(4, 1);
  3448  001CF8  0E00               	movlw	0
  3449  001CFA  5C12               	subwf	processOpcode@regA_temp16,w,c
  3450  001CFC  0E01               	movlw	1
  3451  001CFE  5813               	subwfb	processOpcode@regA_temp16+1,w,c
  3452  001D00  A0D8               	btfss	status,0,c
  3453  001D02  D008               	goto	l1630
  3454  001D04  6E0B               	movwf	??_processOpcode& (0+255),c
  3455  001D06  0E01               	movlw	1
  3456  001D08  6E01               	movwf	setFbits@value,c
  3457  001D0A  500B               	movf	??_processOpcode& (0+255),w,c
  3458  001D0C  0E04               	movlw	4
  3459  001D0E  EC28  F013         	call	_setFbits
  3460  001D12  D007               	goto	l1632
  3461  001D14                     l1630:
  3462                           
  3463                           ;emulator.c: 645: else setFbits(4, 0);
  3464  001D14  6E0B               	movwf	??_processOpcode& (0+255),c
  3465  001D16  0E00               	movlw	0
  3466  001D18  6E01               	movwf	setFbits@value,c
  3467  001D1A  500B               	movf	??_processOpcode& (0+255),w,c
  3468  001D1C  0E04               	movlw	4
  3469  001D1E  EC28  F013         	call	_setFbits
  3470  001D22                     l1632:
  3471                           
  3472                           ;emulator.c: 647: regA += immData_1;
  3473  001D22  501E               	movf	_immData_1,w,c
  3474  001D24  2620               	addwf	_regA,f,c
  3475  001D26  D045               	goto	L20
  3476  001D28                     l353:
  3477                           
  3478                           ;emulator.c: 654: regA_temp16 = regA;
  3479  001D28  C020  F012         	movff	_regA,processOpcode@regA_temp16
  3480  001D2C  6A13               	clrf	processOpcode@regA_temp16+1,c
  3481                           
  3482                           ;emulator.c: 656: regA_temp16 += 255;
  3483  001D2E  0EFF               	movlw	255
  3484  001D30  2612               	addwf	processOpcode@regA_temp16,f,c
  3485  001D32  0E00               	movlw	0
  3486  001D34  2213               	addwfc	processOpcode@regA_temp16+1,f,c
  3487                           
  3488                           ;emulator.c: 657: regA_temp16 -= regB;
  3489  001D36  5021               	movf	_regB,w,c
  3490  001D38  5E12               	subwf	processOpcode@regA_temp16,f,c
  3491  001D3A  0E00               	movlw	0
  3492  001D3C  5A13               	subwfb	processOpcode@regA_temp16+1,f,c
  3493                           
  3494                           ;emulator.c: 658: if (regA_temp16 < 255) setFbits(4, 1);
  3495  001D3E  0EFF               	movlw	255
  3496  001D40  5C12               	subwf	processOpcode@regA_temp16,w,c
  3497  001D42  0E00               	movlw	0
  3498  001D44  5813               	subwfb	processOpcode@regA_temp16+1,w,c
  3499  001D46  B0D8               	btfsc	status,0,c
  3500  001D48  D008               	goto	l1640
  3501  001D4A  6E0B               	movwf	??_processOpcode& (0+255),c
  3502  001D4C  0E01               	movlw	1
  3503  001D4E  6E01               	movwf	setFbits@value,c
  3504  001D50  500B               	movf	??_processOpcode& (0+255),w,c
  3505  001D52  0E04               	movlw	4
  3506  001D54  EC28  F013         	call	_setFbits
  3507  001D58  D007               	goto	l1642
  3508  001D5A                     l1640:
  3509                           
  3510                           ;emulator.c: 659: else setFbits(4, 0);
  3511  001D5A  6E0B               	movwf	??_processOpcode& (0+255),c
  3512  001D5C  0E00               	movlw	0
  3513  001D5E  6E01               	movwf	setFbits@value,c
  3514  001D60  500B               	movf	??_processOpcode& (0+255),w,c
  3515  001D62  0E04               	movlw	4
  3516  001D64  EC28  F013         	call	_setFbits
  3517  001D68                     l1642:
  3518                           
  3519                           ;emulator.c: 660: regA -= regB;
  3520  001D68  5021               	movf	_regB,w,c
  3521  001D6A  5E20               	subwf	_regA,f,c
  3522                           
  3523                           ;emulator.c: 661: break;
  3524  001D6C  D12B               	goto	l1674
  3525  001D6E                     l356:
  3526                           
  3527                           ;emulator.c: 665: regA_temp16 = regA;
  3528  001D6E  C020  F012         	movff	_regA,processOpcode@regA_temp16
  3529  001D72  6A13               	clrf	processOpcode@regA_temp16+1,c
  3530                           
  3531                           ;emulator.c: 667: regA_temp16 += 255;
  3532  001D74  0EFF               	movlw	255
  3533  001D76  2612               	addwf	processOpcode@regA_temp16,f,c
  3534  001D78  0E00               	movlw	0
  3535  001D7A  2213               	addwfc	processOpcode@regA_temp16+1,f,c
  3536                           
  3537                           ;emulator.c: 668: regA_temp16 -= immData_1;
  3538  001D7C  501E               	movf	_immData_1,w,c
  3539  001D7E  5E12               	subwf	processOpcode@regA_temp16,f,c
  3540  001D80  0E00               	movlw	0
  3541  001D82  5A13               	subwfb	processOpcode@regA_temp16+1,f,c
  3542                           
  3543                           ;emulator.c: 669: if (regA_temp16 < 255) setFbits(4, 1);
  3544  001D84  0EFF               	movlw	255
  3545  001D86  5C12               	subwf	processOpcode@regA_temp16,w,c
  3546  001D88  0E00               	movlw	0
  3547  001D8A  5813               	subwfb	processOpcode@regA_temp16+1,w,c
  3548  001D8C  B0D8               	btfsc	status,0,c
  3549  001D8E  D008               	goto	l1648
  3550  001D90  6E0B               	movwf	??_processOpcode& (0+255),c
  3551  001D92  0E01               	movlw	1
  3552  001D94  6E01               	movwf	setFbits@value,c
  3553  001D96  500B               	movf	??_processOpcode& (0+255),w,c
  3554  001D98  0E04               	movlw	4
  3555  001D9A  EC28  F013         	call	_setFbits
  3556  001D9E  D007               	goto	l1650
  3557  001DA0                     l1648:
  3558                           
  3559                           ;emulator.c: 670: else setFbits(4, 0);
  3560  001DA0  6E0B               	movwf	??_processOpcode& (0+255),c
  3561  001DA2  0E00               	movlw	0
  3562  001DA4  6E01               	movwf	setFbits@value,c
  3563  001DA6  500B               	movf	??_processOpcode& (0+255),w,c
  3564  001DA8  0E04               	movlw	4
  3565  001DAA  EC28  F013         	call	_setFbits
  3566  001DAE                     l1650:
  3567                           
  3568                           ;emulator.c: 671: regA -= immData_1;
  3569  001DAE  501E               	movf	_immData_1,w,c
  3570  001DB0  5E20               	subwf	_regA,f,c
  3571  001DB2                     L20:
  3572                           
  3573                           ;emulator.c: 672: regPC++;
  3574  001DB2  4A1B               	infsnz	_regPC,f,c
  3575  001DB4  2A1C               	incf	_regPC+1,f,c
  3576                           
  3577                           ;emulator.c: 673: break;
  3578  001DB6  D106               	goto	l1674
  3579  001DB8                     l1654:
  3580                           
  3581                           ;emulator.c: 677: regA_temp16 = regA + 1;
  3582  001DB8  0E01               	movlw	1
  3583  001DBA  2420               	addwf	_regA,w,c
  3584  001DBC  6E12               	movwf	processOpcode@regA_temp16,c
  3585  001DBE  6A13               	clrf	processOpcode@regA_temp16+1,c
  3586  001DC0  0E00               	movlw	0
  3587  001DC2  2213               	addwfc	processOpcode@regA_temp16+1,f,c
  3588                           
  3589                           ;emulator.c: 678: if (regA_temp16 > 255) setFbits(4, 1);
  3590  001DC4  0E00               	movlw	0
  3591  001DC6  5C12               	subwf	processOpcode@regA_temp16,w,c
  3592  001DC8  0E01               	movlw	1
  3593  001DCA  5813               	subwfb	processOpcode@regA_temp16+1,w,c
  3594  001DCC  A0D8               	btfss	status,0,c
  3595  001DCE  D008               	goto	l1658
  3596  001DD0  6E0B               	movwf	??_processOpcode& (0+255),c
  3597  001DD2  0E01               	movlw	1
  3598  001DD4  6E01               	movwf	setFbits@value,c
  3599  001DD6  500B               	movf	??_processOpcode& (0+255),w,c
  3600  001DD8  0E04               	movlw	4
  3601  001DDA  EC28  F013         	call	_setFbits
  3602  001DDE  D007               	goto	l1660
  3603  001DE0                     l1658:
  3604                           
  3605                           ;emulator.c: 679: else setFbits(4, 0);
  3606  001DE0  6E0B               	movwf	??_processOpcode& (0+255),c
  3607  001DE2  0E00               	movlw	0
  3608  001DE4  6E01               	movwf	setFbits@value,c
  3609  001DE6  500B               	movf	??_processOpcode& (0+255),w,c
  3610  001DE8  0E04               	movlw	4
  3611  001DEA  EC28  F013         	call	_setFbits
  3612  001DEE                     l1660:
  3613                           
  3614                           ;emulator.c: 680: regA++;
  3615  001DEE  2A20               	incf	_regA,f,c
  3616                           
  3617                           ;emulator.c: 681: break;
  3618  001DF0  D0E9               	goto	l1674
  3619  001DF2                     l1662:
  3620                           
  3621                           ;emulator.c: 685: regA_temp8 = regA - 1;
  3622  001DF2  0420               	decf	_regA,w,c
  3623  001DF4  6E11               	movwf	processOpcode@regA_temp8,c
  3624                           
  3625                           ;emulator.c: 686: if (regA_temp8 == 255) setFbits(4, 1);
  3626  001DF6  2811               	incf	processOpcode@regA_temp8,w,c
  3627  001DF8  A4D8               	btfss	status,2,c
  3628  001DFA  D008               	goto	l1666
  3629  001DFC  6E0B               	movwf	??_processOpcode& (0+255),c
  3630  001DFE  0E01               	movlw	1
  3631  001E00  6E01               	movwf	setFbits@value,c
  3632  001E02  500B               	movf	??_processOpcode& (0+255),w,c
  3633  001E04  0E04               	movlw	4
  3634  001E06  EC28  F013         	call	_setFbits
  3635  001E0A  D007               	goto	l1668
  3636  001E0C                     l1666:
  3637                           
  3638                           ;emulator.c: 687: else setFbits(4, 0);
  3639  001E0C  6E0B               	movwf	??_processOpcode& (0+255),c
  3640  001E0E  0E00               	movlw	0
  3641  001E10  6E01               	movwf	setFbits@value,c
  3642  001E12  500B               	movf	??_processOpcode& (0+255),w,c
  3643  001E14  0E04               	movlw	4
  3644  001E16  EC28  F013         	call	_setFbits
  3645  001E1A                     l1668:
  3646                           
  3647                           ;emulator.c: 688: regA--;
  3648  001E1A  0620               	decf	_regA,f,c
  3649                           
  3650                           ;emulator.c: 689: break;
  3651  001E1C  D0D3               	goto	l1674
  3652  001E1E                     l1672:
  3653  001E1E  0E00               	movlw	low _virtualMemory
  3654  001E20  241B               	addwf	_regPC,w,c
  3655  001E22  6ED9               	movwf	fsr2l,c
  3656  001E24  0E02               	movlw	high _virtualMemory
  3657  001E26  201C               	addwfc	_regPC+1,w,c
  3658  001E28  6EDA               	movwf	fsr2h,c
  3659  001E2A  50DF               	movf	indf2,w,c
  3660                           
  3661                           ; Switch size 1, requested type "space"
  3662                           ; Number of cases is 68, Range of values is 1 to 85
  3663                           ; switch strategies available:
  3664                           ; Name         Instructions Cycles
  3665                           ; simple_byte          205   103 (average)
  3666                           ;	Chosen strategy is simple_byte
  3667  001E2C  0A01               	xorlw	1	; case 1
  3668  001E2E  B4D8               	btfsc	status,2,c
  3669  001E30  D4F6               	goto	l1394
  3670  001E32  0A03               	xorlw	3	; case 2
  3671  001E34  B4D8               	btfsc	status,2,c
  3672  001E36  D4FB               	goto	l1396
  3673  001E38  0A01               	xorlw	1	; case 3
  3674  001E3A  B4D8               	btfsc	status,2,c
  3675  001E3C  D505               	goto	l1400
  3676  001E3E  0A07               	xorlw	7	; case 4
  3677  001E40  B4D8               	btfsc	status,2,c
  3678  001E42  D506               	goto	l1402
  3679  001E44  0A01               	xorlw	1	; case 5
  3680  001E46  B4D8               	btfsc	status,2,c
  3681  001E48  D508               	goto	l1406
  3682  001E4A  0A03               	xorlw	3	; case 6
  3683  001E4C  B4D8               	btfsc	status,2,c
  3684  001E4E  D50B               	goto	l1408
  3685  001E50  0A01               	xorlw	1	; case 7
  3686  001E52  B4D8               	btfsc	status,2,c
  3687  001E54  D50E               	goto	l1412
  3688  001E56  0A0F               	xorlw	15	; case 8
  3689  001E58  B4D8               	btfsc	status,2,c
  3690  001E5A  D4F1               	goto	l1398
  3691  001E5C  0A18               	xorlw	24	; case 16
  3692  001E5E  B4D8               	btfsc	status,2,c
  3693  001E60  D50E               	goto	l1416
  3694  001E62  0A01               	xorlw	1	; case 17
  3695  001E64  B4D8               	btfsc	status,2,c
  3696  001E66  D511               	goto	l1418
  3697  001E68  0A03               	xorlw	3	; case 18
  3698  001E6A  B4D8               	btfsc	status,2,c
  3699  001E6C  D512               	goto	l1420
  3700  001E6E  0A01               	xorlw	1	; case 19
  3701  001E70  B4D8               	btfsc	status,2,c
  3702  001E72  D513               	goto	l274
  3703  001E74  0A07               	xorlw	7	; case 20
  3704  001E76  B4D8               	btfsc	status,2,c
  3705  001E78  D513               	goto	l275
  3706  001E7A  0A01               	xorlw	1	; case 21
  3707  001E7C  B4D8               	btfsc	status,2,c
  3708  001E7E  D513               	goto	l276
  3709  001E80  0A03               	xorlw	3	; case 22
  3710  001E82  B4D8               	btfsc	status,2,c
  3711  001E84  D513               	goto	l1422
  3712  001E86  0A01               	xorlw	1	; case 23
  3713  001E88  B4D8               	btfsc	status,2,c
  3714  001E8A  D519               	goto	l1424
  3715  001E8C  0A0F               	xorlw	15	; case 24
  3716  001E8E  B4D8               	btfsc	status,2,c
  3717  001E90  D51C               	goto	l1426
  3718  001E92  0A01               	xorlw	1	; case 25
  3719  001E94  B4D8               	btfsc	status,2,c
  3720  001E96  D51F               	goto	l280
  3721  001E98  0A03               	xorlw	3	; case 26
  3722  001E9A  B4D8               	btfsc	status,2,c
  3723  001E9C  D51F               	goto	l281
  3724  001E9E  0A01               	xorlw	1	; case 27
  3725  001EA0  B4D8               	btfsc	status,2,c
  3726  001EA2  D51F               	goto	l282
  3727  001EA4  0A07               	xorlw	7	; case 28
  3728  001EA6  B4D8               	btfsc	status,2,c
  3729  001EA8  D51F               	goto	l283
  3730  001EAA  0A3C               	xorlw	60	; case 32
  3731  001EAC  B4D8               	btfsc	status,2,c
  3732  001EAE  D523               	goto	l1430
  3733  001EB0  0A01               	xorlw	1	; case 33
  3734  001EB2  B4D8               	btfsc	status,2,c
  3735  001EB4  D523               	goto	l1432
  3736  001EB6  0A03               	xorlw	3	; case 34
  3737  001EB8  B4D8               	btfsc	status,2,c
  3738  001EBA  D523               	goto	l1436
  3739  001EBC  0A01               	xorlw	1	; case 35
  3740  001EBE  B4D8               	btfsc	status,2,c
  3741  001EC0  D523               	goto	l1438
  3742  001EC2  0A07               	xorlw	7	; case 36
  3743  001EC4  B4D8               	btfsc	status,2,c
  3744  001EC6  D526               	goto	l1444
  3745  001EC8  0A01               	xorlw	1	; case 37
  3746  001ECA  B4D8               	btfsc	status,2,c
  3747  001ECC  D526               	goto	l1448
  3748  001ECE  0A03               	xorlw	3	; case 38
  3749  001ED0  B4D8               	btfsc	status,2,c
  3750  001ED2  D525               	goto	l291
  3751  001ED4  0A01               	xorlw	1	; case 39
  3752  001ED6  B4D8               	btfsc	status,2,c
  3753  001ED8  D537               	goto	l294
  3754  001EDA  0A0F               	xorlw	15	; case 40
  3755  001EDC  B4D8               	btfsc	status,2,c
  3756  001EDE  D549               	goto	l297
  3757  001EE0  0A01               	xorlw	1	; case 41
  3758  001EE2  B4D8               	btfsc	status,2,c
  3759  001EE4  D54B               	goto	l298
  3760  001EE6  0A03               	xorlw	3	; case 42
  3761  001EE8  B4D8               	btfsc	status,2,c
  3762  001EEA  D54C               	goto	l1466
  3763  001EEC  0A01               	xorlw	1	; case 43
  3764  001EEE  B4D8               	btfsc	status,2,c
  3765  001EF0  D50E               	goto	l1442
  3766  001EF2  0A1B               	xorlw	27	; case 48
  3767  001EF4  B4D8               	btfsc	status,2,c
  3768  001EF6  D5F0               	goto	L13
  3769  001EF8  0A01               	xorlw	1	; case 49
  3770  001EFA  B4D8               	btfsc	status,2,c
  3771  001EFC  D57C               	goto	l1484
  3772  001EFE  0A03               	xorlw	3	; case 50
  3773  001F00  B4D8               	btfsc	status,2,c
  3774  001F02  D57C               	goto	l1488
  3775  001F04  0A01               	xorlw	1	; case 51
  3776  001F06  B4D8               	btfsc	status,2,c
  3777  001F08  D581               	goto	l1492
  3778  001F0A  0A07               	xorlw	7	; case 52
  3779  001F0C  B4D8               	btfsc	status,2,c
  3780  001F0E  D58C               	goto	l1498
  3781  001F10  0A01               	xorlw	1	; case 53
  3782  001F12  B4D8               	btfsc	status,2,c
  3783  001F14  D58D               	goto	l1502
  3784  001F16  0A03               	xorlw	3	; case 54
  3785  001F18  B4D8               	btfsc	status,2,c
  3786  001F1A  D593               	goto	l1508
  3787  001F1C  0A01               	xorlw	1	; case 55
  3788  001F1E  B4D8               	btfsc	status,2,c
  3789  001F20  D594               	goto	l1512
  3790  001F22  0A0F               	xorlw	15	; case 56
  3791  001F24  B4D8               	btfsc	status,2,c
  3792  001F26  D59B               	goto	l1518
  3793  001F28  0A01               	xorlw	1	; case 57
  3794  001F2A  B4D8               	btfsc	status,2,c
  3795  001F2C  D59C               	goto	l1522
  3796  001F2E  0A03               	xorlw	3	; case 58
  3797  001F30  B4D8               	btfsc	status,2,c
  3798  001F32  D5A3               	goto	l1528
  3799  001F34  0A01               	xorlw	1	; case 59
  3800  001F36  B4D8               	btfsc	status,2,c
  3801  001F38  D5A4               	goto	l1532
  3802  001F3A  0A07               	xorlw	7	; case 60
  3803  001F3C  B4D8               	btfsc	status,2,c
  3804  001F3E  D5AB               	goto	l1538
  3805  001F40  0A01               	xorlw	1	; case 61
  3806  001F42  B4D8               	btfsc	status,2,c
  3807  001F44  D5AD               	goto	l1542
  3808  001F46  0A03               	xorlw	3	; case 62
  3809  001F48  B4D8               	btfsc	status,2,c
  3810  001F4A  D5B8               	goto	l1548
  3811  001F4C  0A01               	xorlw	1	; case 63
  3812  001F4E  B4D8               	btfsc	status,2,c
  3813  001F50  D5C8               	goto	l1554
  3814  001F52  0A7F               	xorlw	127	; case 64
  3815  001F54  B4D8               	btfsc	status,2,c
  3816  001F56  D5D6               	goto	l1562
  3817  001F58  0A01               	xorlw	1	; case 65
  3818  001F5A  B4D8               	btfsc	status,2,c
  3819  001F5C  D5FA               	goto	l1568
  3820  001F5E  0A03               	xorlw	3	; case 66
  3821  001F60  B4D8               	btfsc	status,2,c
  3822  001F62  D604               	goto	l1572
  3823  001F64  0A01               	xorlw	1	; case 67
  3824  001F66  B4D8               	btfsc	status,2,c
  3825  001F68  D60E               	goto	l1576
  3826  001F6A  0A07               	xorlw	7	; case 68
  3827  001F6C  B4D8               	btfsc	status,2,c
  3828  001F6E  D61A               	goto	l1580
  3829  001F70  0A01               	xorlw	1	; case 69
  3830  001F72  B4D8               	btfsc	status,2,c
  3831  001F74  D627               	goto	l1584
  3832  001F76  0A03               	xorlw	3	; case 70
  3833  001F78  B4D8               	btfsc	status,2,c
  3834  001F7A  D633               	goto	l1588
  3835  001F7C  0A01               	xorlw	1	; case 71
  3836  001F7E  B4D8               	btfsc	status,2,c
  3837  001F80  D63D               	goto	l1592
  3838  001F82  0A0F               	xorlw	15	; case 72
  3839  001F84  B4D8               	btfsc	status,2,c
  3840  001F86  D648               	goto	l1598
  3841  001F88  0A01               	xorlw	1	; case 73
  3842  001F8A  B4D8               	btfsc	status,2,c
  3843  001F8C  D653               	goto	l1602
  3844  001F8E  0A03               	xorlw	3	; case 74
  3845  001F90  B4D8               	btfsc	status,2,c
  3846  001F92  D65E               	goto	l1606
  3847  001F94  0A01               	xorlw	1	; case 75
  3848  001F96  B4D8               	btfsc	status,2,c
  3849  001F98  D66D               	goto	l1610
  3850  001F9A  0A07               	xorlw	7	; case 76
  3851  001F9C  B4D8               	btfsc	status,2,c
  3852  001F9E  D67B               	goto	l1614
  3853  001FA0  0A1C               	xorlw	28	; case 80
  3854  001FA2  B4D8               	btfsc	status,2,c
  3855  001FA4  D689               	goto	l1618
  3856  001FA6  0A01               	xorlw	1	; case 81
  3857  001FA8  B4D8               	btfsc	status,2,c
  3858  001FAA  D6A2               	goto	l1626
  3859  001FAC  0A03               	xorlw	3	; case 82
  3860  001FAE  B4D8               	btfsc	status,2,c
  3861  001FB0  D6BB               	goto	l353
  3862  001FB2  0A01               	xorlw	1	; case 83
  3863  001FB4  B4D8               	btfsc	status,2,c
  3864  001FB6  D6DB               	goto	l356
  3865  001FB8  0A07               	xorlw	7	; case 84
  3866  001FBA  B4D8               	btfsc	status,2,c
  3867  001FBC  D6FD               	goto	l1654
  3868  001FBE  0A01               	xorlw	1	; case 85
  3869  001FC0  B4D8               	btfsc	status,2,c
  3870  001FC2  D717               	goto	l1662
  3871  001FC4                     l1674:
  3872                           
  3873                           ;emulator.c: 693: regPC++;
  3874  001FC4  4A1B               	infsnz	_regPC,f,c
  3875  001FC6  2A1C               	incf	_regPC+1,f,c
  3876  001FC8  0012               	return	
  3877  001FCA                     __end_of_processOpcode:
  3878                           	opt stack 0
  3879                           tblptru	equ	0xFF8
  3880                           tblptrh	equ	0xFF7
  3881                           tblptrl	equ	0xFF6
  3882                           tablat	equ	0xFF5
  3883                           prodh	equ	0xFF4
  3884                           prodl	equ	0xFF3
  3885                           postinc0	equ	0xFEE
  3886                           wreg	equ	0xFE8
  3887                           postdec1	equ	0xFE5
  3888                           fsr1h	equ	0xFE2
  3889                           fsr1l	equ	0xFE1
  3890                           indf2	equ	0xFDF
  3891                           fsr2h	equ	0xFDA
  3892                           fsr2l	equ	0xFD9
  3893                           status	equ	0xFD8
  3894                           
  3895 ;; *************** function _update_immData *****************
  3896 ;; Defined at:
  3897 ;;		line 222 in file "source/emulator.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;		None
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;		None
  3902 ;; Return value:  Size  Location     Type
  3903 ;;		None               void
  3904 ;; Registers used:
  3905 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;Total ram usage:        2 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; This function calls:
  3918 ;;		Nothing
  3919 ;; This function is called by:
  3920 ;;		_processOpcode
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           	psect	text2
  3925  002484                     __ptext2:
  3926                           	opt stack 0
  3927  002484                     _update_immData:
  3928                           	opt stack 29
  3929                           
  3930                           ;emulator.c: 225: if (regPC + 1 == 2047 + 1) immData_1 = 0;
  3931                           
  3932                           ;incstack = 0
  3933  002484  0E01               	movlw	1
  3934  002486  241B               	addwf	_regPC,w,c
  3935  002488  6E01               	movwf	??_update_immData& (0+255),c
  3936  00248A  0E00               	movlw	0
  3937  00248C  201C               	addwfc	_regPC+1,w,c
  3938  00248E  6E02               	movwf	(??_update_immData+1)& (0+255),c
  3939  002490  5002               	movf	??_update_immData+1,w,c
  3940  002492  0A08               	xorlw	8
  3941  002494  1001               	iorwf	??_update_immData,w,c
  3942  002496  A4D8               	btfss	status,2,c
  3943  002498  D004               	goto	l1344
  3944  00249A  6E01               	movwf	??_update_immData& (0+255),c
  3945  00249C  0E00               	movlw	0
  3946  00249E  6E1E               	movwf	_immData_1,c
  3947  0024A0  5001               	movf	??_update_immData& (0+255),w,c
  3948  0024A2                     l1344:
  3949                           
  3950                           ;emulator.c: 226: if (regPC + 2 == 2047 + 1) immData_2 = 0;
  3951  0024A2  0E02               	movlw	2
  3952  0024A4  241B               	addwf	_regPC,w,c
  3953  0024A6  6E01               	movwf	??_update_immData& (0+255),c
  3954  0024A8  0E00               	movlw	0
  3955  0024AA  201C               	addwfc	_regPC+1,w,c
  3956  0024AC  6E02               	movwf	(??_update_immData+1)& (0+255),c
  3957  0024AE  5002               	movf	??_update_immData+1,w,c
  3958  0024B0  0A08               	xorlw	8
  3959  0024B2  1001               	iorwf	??_update_immData,w,c
  3960  0024B4  A4D8               	btfss	status,2,c
  3961  0024B6  D004               	goto	l1348
  3962  0024B8  6E01               	movwf	??_update_immData& (0+255),c
  3963  0024BA  0E00               	movlw	0
  3964  0024BC  6E1F               	movwf	_immData_2,c
  3965  0024BE  5001               	movf	??_update_immData& (0+255),w,c
  3966  0024C0                     l1348:
  3967                           
  3968                           ;emulator.c: 227: if (regPC + 2 == 2047 + 2) immData_2 = 1;
  3969  0024C0  0E02               	movlw	2
  3970  0024C2  241B               	addwf	_regPC,w,c
  3971  0024C4  6E01               	movwf	??_update_immData& (0+255),c
  3972  0024C6  0E00               	movlw	0
  3973  0024C8  201C               	addwfc	_regPC+1,w,c
  3974  0024CA  6E02               	movwf	(??_update_immData+1)& (0+255),c
  3975  0024CC  0401               	decf	??_update_immData,w,c
  3976  0024CE  0E08               	movlw	8
  3977  0024D0  B4D8               	btfsc	status,2,c
  3978  0024D2  1802               	xorwf	??_update_immData+1,w,c
  3979  0024D4  A4D8               	btfss	status,2,c
  3980  0024D6  D004               	goto	l1352
  3981  0024D8  6E01               	movwf	??_update_immData& (0+255),c
  3982  0024DA  0E01               	movlw	1
  3983  0024DC  6E1F               	movwf	_immData_2,c
  3984  0024DE  5001               	movf	??_update_immData& (0+255),w,c
  3985  0024E0                     l1352:
  3986                           
  3987                           ;emulator.c: 231: immData_1 = virtualMemory[regPC + 1];
  3988  0024E0  0E01               	movlw	1
  3989  0024E2  241B               	addwf	_regPC,w,c
  3990  0024E4  6E01               	movwf	??_update_immData& (0+255),c
  3991  0024E6  0E00               	movlw	0
  3992  0024E8  201C               	addwfc	_regPC+1,w,c
  3993  0024EA  6E02               	movwf	(??_update_immData+1)& (0+255),c
  3994  0024EC  0E00               	movlw	low _virtualMemory
  3995  0024EE  2401               	addwf	??_update_immData,w,c
  3996  0024F0  6ED9               	movwf	fsr2l,c
  3997  0024F2  0E02               	movlw	high _virtualMemory
  3998  0024F4  2002               	addwfc	??_update_immData+1,w,c
  3999  0024F6  6EDA               	movwf	fsr2h,c
  4000  0024F8  50DF               	movf	indf2,w,c
  4001  0024FA  6E1E               	movwf	_immData_1,c
  4002                           
  4003                           ;emulator.c: 232: immData_2 = virtualMemory[regPC + 2];
  4004  0024FC  0E02               	movlw	2
  4005  0024FE  241B               	addwf	_regPC,w,c
  4006  002500  6E01               	movwf	??_update_immData& (0+255),c
  4007  002502  0E00               	movlw	0
  4008  002504  201C               	addwfc	_regPC+1,w,c
  4009  002506  6E02               	movwf	(??_update_immData+1)& (0+255),c
  4010  002508  0E00               	movlw	low _virtualMemory
  4011  00250A  2401               	addwf	??_update_immData,w,c
  4012  00250C  6ED9               	movwf	fsr2l,c
  4013  00250E  0E02               	movlw	high _virtualMemory
  4014  002510  2002               	addwfc	??_update_immData+1,w,c
  4015  002512  6EDA               	movwf	fsr2h,c
  4016  002514  50DF               	movf	indf2,w,c
  4017  002516  6E1F               	movwf	_immData_2,c
  4018  002518  0012               	return	
  4019  00251A                     __end_of_update_immData:
  4020                           	opt stack 0
  4021                           tblptru	equ	0xFF8
  4022                           tblptrh	equ	0xFF7
  4023                           tblptrl	equ	0xFF6
  4024                           tablat	equ	0xFF5
  4025                           prodh	equ	0xFF4
  4026                           prodl	equ	0xFF3
  4027                           postinc0	equ	0xFEE
  4028                           wreg	equ	0xFE8
  4029                           postdec1	equ	0xFE5
  4030                           fsr1h	equ	0xFE2
  4031                           fsr1l	equ	0xFE1
  4032                           indf2	equ	0xFDF
  4033                           fsr2h	equ	0xFDA
  4034                           fsr2l	equ	0xFD9
  4035                           status	equ	0xFD8
  4036                           
  4037 ;; *************** function _setPortData *****************
  4038 ;; Defined at:
  4039 ;;		line 190 in file "source/emulator.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;  portNumber      1    wreg     unsigned char 
  4042 ;;  outputData      1    4[COMRAM] unsigned char 
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;  portNumber      1    6[COMRAM] unsigned char 
  4045 ;;  outputData_t    2    7[COMRAM] unsigned int 
  4046 ;;  outputData_t    1    9[COMRAM] unsigned char 
  4047 ;; Return value:  Size  Location     Type
  4048 ;;		None               void
  4049 ;; Registers used:
  4050 ;;		wreg, status,2, status,0, cstack
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4056 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4057 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4058 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4059 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;Total ram usage:        6 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:    1
  4063 ;; This function calls:
  4064 ;;		_dispSeg
  4065 ;;		_enableSerial
  4066 ;;		_hexToChar
  4067 ;; This function is called by:
  4068 ;;		_processOpcode
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072                           	psect	text3
  4073  0023CE                     __ptext3:
  4074                           	opt stack 0
  4075  0023CE                     _setPortData:
  4076                           	opt stack 28
  4077                           
  4078                           ;incstack = 0
  4079                           ;setPortData@portNumber stored from wreg
  4080  0023CE  CFE8 F007          	movff	wreg,setPortData@portNumber
  4081                           
  4082                           ;emulator.c: 192: uint16_t outputData_temp16;
  4083                           ;emulator.c: 193: uint8_t outputData_temp8;
  4084                           ;emulator.c: 194: switch (portNumber)
  4085  0023D2  D04A               	goto	l1384
  4086  0023D4                     l241:
  4087                           
  4088                           ;emulator.c: 197: if (outputData == 0) outputData_temp16 = 1200;
  4089  0023D4  6605               	tstfsz	setPortData@outputData,c
  4090  0023D6  D004               	goto	l1360
  4091  0023D8  0E04               	movlw	4
  4092  0023DA  6E09               	movwf	setPortData@outputData_temp16+1,c
  4093  0023DC  0EB0               	movlw	176
  4094  0023DE  6E08               	movwf	setPortData@outputData_temp16,c
  4095  0023E0                     l1360:
  4096                           
  4097                           ;emulator.c: 198: if (outputData == 1) outputData_temp16 = 2400;
  4098  0023E0  0405               	decf	setPortData@outputData,w,c
  4099  0023E2  A4D8               	btfss	status,2,c
  4100  0023E4  D004               	goto	l1364
  4101  0023E6  0E09               	movlw	9
  4102  0023E8  6E09               	movwf	setPortData@outputData_temp16+1,c
  4103  0023EA  0E60               	movlw	96
  4104  0023EC  6E08               	movwf	setPortData@outputData_temp16,c
  4105  0023EE                     l1364:
  4106                           
  4107                           ;emulator.c: 199: if (outputData == 2) outputData_temp16 = 9600;
  4108  0023EE  5005               	movf	setPortData@outputData,w,c
  4109  0023F0  0A02               	xorlw	2
  4110  0023F2  A4D8               	btfss	status,2,c
  4111  0023F4  D004               	goto	l1368
  4112  0023F6  0E25               	movlw	37
  4113  0023F8  6E09               	movwf	setPortData@outputData_temp16+1,c
  4114  0023FA  0E80               	movlw	128
  4115  0023FC  6E08               	movwf	setPortData@outputData_temp16,c
  4116  0023FE                     l1368:
  4117                           
  4118                           ;emulator.c: 200: if (outputData == 3) outputData_temp16 = 10417;
  4119  0023FE  5005               	movf	setPortData@outputData,w,c
  4120  002400  0A03               	xorlw	3
  4121  002402  A4D8               	btfss	status,2,c
  4122  002404  D004               	goto	l1372
  4123  002406  0E28               	movlw	40
  4124  002408  6E09               	movwf	setPortData@outputData_temp16+1,c
  4125  00240A  0EB1               	movlw	177
  4126  00240C  6E08               	movwf	setPortData@outputData_temp16,c
  4127  00240E                     l1372:
  4128                           
  4129                           ;emulator.c: 201: if (outputData == 4) outputData_temp16 = 19200;
  4130  00240E  5005               	movf	setPortData@outputData,w,c
  4131  002410  0A04               	xorlw	4
  4132  002412  A4D8               	btfss	status,2,c
  4133  002414  D004               	goto	l1376
  4134  002416  0E4B               	movlw	75
  4135  002418  6E09               	movwf	setPortData@outputData_temp16+1,c
  4136  00241A  0E00               	movlw	0
  4137  00241C  6E08               	movwf	setPortData@outputData_temp16,c
  4138  00241E                     l1376:
  4139                           
  4140                           ;emulator.c: 202: enableSerial(outputData_temp16);
  4141  00241E  C008  F001         	movff	setPortData@outputData_temp16,enableSerial@baudRate
  4142  002422  C009  F002         	movff	setPortData@outputData_temp16+1,enableSerial@baudRate+1
  4143  002426  EC8D  F012         	call	_enableSerial	;wreg free
  4144                           
  4145                           ;emulator.c: 203: break;
  4146  00242A  0012               	return	
  4147  00242C                     l248:
  4148                           
  4149                           ;emulator.c: 206: TXREG2 = outputData;
  4150  00242C  C005  FF73         	movff	setPortData@outputData,3955	;volatile
  4151                           
  4152                           ;emulator.c: 207: break;
  4153  002430  0012               	return	
  4154  002432                     l1378:
  4155                           
  4156                           ;emulator.c: 210: outputData_temp8 = hexToChar(outputData);
  4157  002432  5005               	movf	setPortData@outputData,w,c
  4158  002434  EC8B  F011         	call	_hexToChar
  4159  002438  6E0A               	movwf	setPortData@outputData_temp8,c
  4160                           
  4161                           ;emulator.c: 211: dispSeg(1, outputData_temp8);
  4162  00243A  C00A  F001         	movff	setPortData@outputData_temp8,dispSeg@letter
  4163  00243E  0E01               	movlw	1
  4164  002440  ECE5  F00F         	call	_dispSeg
  4165                           
  4166                           ;emulator.c: 212: dispSeg(1, 'F');
  4167  002444  6E06               	movwf	??_setPortData& (0+255),c
  4168  002446  0E46               	movlw	70
  4169  002448  6E01               	movwf	dispSeg@letter,c
  4170  00244A  5006               	movf	??_setPortData& (0+255),w,c
  4171  00244C  0E01               	movlw	1
  4172  00244E  ECE5  F00F         	call	_dispSeg
  4173                           
  4174                           ;emulator.c: 213: break;
  4175  002452  0012               	return	
  4176  002454                     l1380:
  4177                           
  4178                           ;emulator.c: 216: outputData_temp8 = hexToChar(outputData);
  4179  002454  5005               	movf	setPortData@outputData,w,c
  4180  002456  EC8B  F011         	call	_hexToChar
  4181  00245A  6E0A               	movwf	setPortData@outputData_temp8,c
  4182                           
  4183                           ;emulator.c: 217: dispSeg(2, outputData_temp8);
  4184  00245C  C00A  F001         	movff	setPortData@outputData_temp8,dispSeg@letter
  4185  002460  0E02               	movlw	2
  4186  002462  ECE5  F00F         	call	_dispSeg
  4187                           
  4188                           ;emulator.c: 218: break;
  4189  002466  0012               	return	
  4190  002468                     l1384:
  4191  002468  5007               	movf	setPortData@portNumber,w,c
  4192                           
  4193                           ; Switch size 1, requested type "space"
  4194                           ; Number of cases is 4, Range of values is 0 to 4
  4195                           ; switch strategies available:
  4196                           ; Name         Instructions Cycles
  4197                           ; simple_byte           13     7 (average)
  4198                           ;	Chosen strategy is simple_byte
  4199  00246A  0A00               	xorlw	0	; case 0
  4200  00246C  B4D8               	btfsc	status,2,c
  4201  00246E  D7B2               	goto	l241
  4202  002470  0A01               	xorlw	1	; case 1
  4203  002472  B4D8               	btfsc	status,2,c
  4204  002474  D7DB               	goto	l248
  4205  002476  0A02               	xorlw	2	; case 3
  4206  002478  B4D8               	btfsc	status,2,c
  4207  00247A  D7DB               	goto	l1378
  4208  00247C  0A07               	xorlw	7	; case 4
  4209  00247E  A4D8               	btfss	status,2,c
  4210  002480  0012               	return	
  4211  002482  D7E8               	goto	l1380
  4212  002484                     __end_of_setPortData:
  4213                           	opt stack 0
  4214                           tblptru	equ	0xFF8
  4215                           tblptrh	equ	0xFF7
  4216                           tblptrl	equ	0xFF6
  4217                           tablat	equ	0xFF5
  4218                           prodh	equ	0xFF4
  4219                           prodl	equ	0xFF3
  4220                           postinc0	equ	0xFEE
  4221                           wreg	equ	0xFE8
  4222                           postdec1	equ	0xFE5
  4223                           fsr1h	equ	0xFE2
  4224                           fsr1l	equ	0xFE1
  4225                           indf2	equ	0xFDF
  4226                           fsr2h	equ	0xFDA
  4227                           fsr2l	equ	0xFD9
  4228                           status	equ	0xFD8
  4229                           
  4230 ;; *************** function _hexToChar *****************
  4231 ;; Defined at:
  4232 ;;		line 63 in file "source/system.c"
  4233 ;; Parameters:    Size  Location     Type
  4234 ;;  number          1    wreg     unsigned char 
  4235 ;; Auto vars:     Size  Location     Type
  4236 ;;  number          1    0[COMRAM] unsigned char 
  4237 ;; Return value:  Size  Location     Type
  4238 ;;                  1    wreg      unsigned char 
  4239 ;; Registers used:
  4240 ;;		wreg, status,2, status,0
  4241 ;; Tracked objects:
  4242 ;;		On entry : 0/0
  4243 ;;		On exit  : 0/0
  4244 ;;		Unchanged: 0/0
  4245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4247 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4248 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4249 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4250 ;;Total ram usage:        1 bytes
  4251 ;; Hardware stack levels used:    1
  4252 ;; This function calls:
  4253 ;;		Nothing
  4254 ;; This function is called by:
  4255 ;;		_setPortData
  4256 ;; This function uses a non-reentrant model
  4257 ;;
  4258                           
  4259                           	psect	text4
  4260  002316                     __ptext4:
  4261                           	opt stack 0
  4262  002316                     _hexToChar:
  4263                           	opt stack 28
  4264                           
  4265                           ;incstack = 0
  4266                           ;hexToChar@number stored from wreg
  4267  002316  CFE8 F001          	movff	wreg,hexToChar@number
  4268                           
  4269                           ;system.c: 65: number = number << 4;
  4270  00231A  3801               	swapf	hexToChar@number,w,c
  4271  00231C  0BF0               	andlw	240
  4272  00231E  6E01               	movwf	hexToChar@number,c
  4273                           
  4274                           ;system.c: 66: number = number >> 4;
  4275  002320  3801               	swapf	hexToChar@number,w,c
  4276  002322  0B0F               	andlw	15
  4277  002324  6E01               	movwf	hexToChar@number,c
  4278                           
  4279                           ;system.c: 67: switch (number)
  4280  002326  D020               	goto	l1232
  4281  002328                     l1166:
  4282                           
  4283                           ;system.c: 70: return '0';
  4284  002328  0E30               	movlw	48
  4285  00232A  0012               	return	
  4286  00232C                     l1170:
  4287                           
  4288                           ;system.c: 72: return '1';
  4289  00232C  0E31               	movlw	49
  4290  00232E  0012               	return	
  4291  002330                     l1174:
  4292                           
  4293                           ;system.c: 74: return '2';
  4294  002330  0E32               	movlw	50
  4295  002332  0012               	return	
  4296  002334                     l1178:
  4297                           
  4298                           ;system.c: 76: return '3';
  4299  002334  0E33               	movlw	51
  4300  002336  0012               	return	
  4301  002338                     l1182:
  4302                           
  4303                           ;system.c: 78: return '4';
  4304  002338  0E34               	movlw	52
  4305  00233A  0012               	return	
  4306  00233C                     l1186:
  4307                           
  4308                           ;system.c: 80: return '5';
  4309  00233C  0E35               	movlw	53
  4310  00233E  0012               	return	
  4311  002340                     l1190:
  4312                           
  4313                           ;system.c: 82: return '6';
  4314  002340  0E36               	movlw	54
  4315  002342  0012               	return	
  4316  002344                     l1194:
  4317                           
  4318                           ;system.c: 84: return '7';
  4319  002344  0E37               	movlw	55
  4320  002346  0012               	return	
  4321  002348                     l1198:
  4322                           
  4323                           ;system.c: 86: return '8';
  4324  002348  0E38               	movlw	56
  4325  00234A  0012               	return	
  4326  00234C                     l1202:
  4327                           
  4328                           ;system.c: 88: return '9';
  4329  00234C  0E39               	movlw	57
  4330  00234E  0012               	return	
  4331  002350                     l1206:
  4332                           
  4333                           ;system.c: 90: return 'A';
  4334  002350  0E41               	movlw	65
  4335  002352  0012               	return	
  4336  002354                     l1210:
  4337                           
  4338                           ;system.c: 92: return 'B';
  4339  002354  0E42               	movlw	66
  4340  002356  0012               	return	
  4341  002358                     l1214:
  4342                           
  4343                           ;system.c: 94: return 'C';
  4344  002358  0E43               	movlw	67
  4345  00235A  0012               	return	
  4346  00235C                     l1218:
  4347                           
  4348                           ;system.c: 96: return 'D';
  4349  00235C  0E44               	movlw	68
  4350  00235E  0012               	return	
  4351  002360                     l1222:
  4352                           
  4353                           ;system.c: 98: return 'E';
  4354  002360  0E45               	movlw	69
  4355  002362  0012               	return	
  4356  002364                     l1226:
  4357                           
  4358                           ;system.c: 100: return 'F';
  4359  002364  0E46               	movlw	70
  4360  002366  0012               	return	
  4361  002368                     l1232:
  4362  002368  5001               	movf	hexToChar@number,w,c
  4363                           
  4364                           ; Switch size 1, requested type "space"
  4365                           ; Number of cases is 16, Range of values is 0 to 15
  4366                           ; switch strategies available:
  4367                           ; Name         Instructions Cycles
  4368                           ; simple_byte           49    25 (average)
  4369                           ;	Chosen strategy is simple_byte
  4370  00236A  0A00               	xorlw	0	; case 0
  4371  00236C  B4D8               	btfsc	status,2,c
  4372  00236E  D7DC               	goto	l1166
  4373  002370  0A01               	xorlw	1	; case 1
  4374  002372  B4D8               	btfsc	status,2,c
  4375  002374  D7DB               	goto	l1170
  4376  002376  0A03               	xorlw	3	; case 2
  4377  002378  B4D8               	btfsc	status,2,c
  4378  00237A  D7DA               	goto	l1174
  4379  00237C  0A01               	xorlw	1	; case 3
  4380  00237E  B4D8               	btfsc	status,2,c
  4381  002380  D7D9               	goto	l1178
  4382  002382  0A07               	xorlw	7	; case 4
  4383  002384  B4D8               	btfsc	status,2,c
  4384  002386  D7D8               	goto	l1182
  4385  002388  0A01               	xorlw	1	; case 5
  4386  00238A  B4D8               	btfsc	status,2,c
  4387  00238C  D7D7               	goto	l1186
  4388  00238E  0A03               	xorlw	3	; case 6
  4389  002390  B4D8               	btfsc	status,2,c
  4390  002392  D7D6               	goto	l1190
  4391  002394  0A01               	xorlw	1	; case 7
  4392  002396  B4D8               	btfsc	status,2,c
  4393  002398  D7D5               	goto	l1194
  4394  00239A  0A0F               	xorlw	15	; case 8
  4395  00239C  B4D8               	btfsc	status,2,c
  4396  00239E  D7D4               	goto	l1198
  4397  0023A0  0A01               	xorlw	1	; case 9
  4398  0023A2  B4D8               	btfsc	status,2,c
  4399  0023A4  D7D3               	goto	l1202
  4400  0023A6  0A03               	xorlw	3	; case 10
  4401  0023A8  B4D8               	btfsc	status,2,c
  4402  0023AA  D7D2               	goto	l1206
  4403  0023AC  0A01               	xorlw	1	; case 11
  4404  0023AE  B4D8               	btfsc	status,2,c
  4405  0023B0  D7D1               	goto	l1210
  4406  0023B2  0A07               	xorlw	7	; case 12
  4407  0023B4  B4D8               	btfsc	status,2,c
  4408  0023B6  D7D0               	goto	l1214
  4409  0023B8  0A01               	xorlw	1	; case 13
  4410  0023BA  B4D8               	btfsc	status,2,c
  4411  0023BC  D7CF               	goto	l1218
  4412  0023BE  0A03               	xorlw	3	; case 14
  4413  0023C0  B4D8               	btfsc	status,2,c
  4414  0023C2  D7CE               	goto	l1222
  4415  0023C4  0A01               	xorlw	1	; case 15
  4416  0023C6  B4D8               	btfsc	status,2,c
  4417  0023C8  D7CD               	goto	l1226
  4418                           
  4419                           ;system.c: 102: return 0;
  4420  0023CA  0E00               	movlw	0
  4421  0023CC  0012               	return	
  4422  0023CE                     __end_of_hexToChar:
  4423                           	opt stack 0
  4424                           tblptru	equ	0xFF8
  4425                           tblptrh	equ	0xFF7
  4426                           tblptrl	equ	0xFF6
  4427                           tablat	equ	0xFF5
  4428                           prodh	equ	0xFF4
  4429                           prodl	equ	0xFF3
  4430                           postinc0	equ	0xFEE
  4431                           wreg	equ	0xFE8
  4432                           postdec1	equ	0xFE5
  4433                           fsr1h	equ	0xFE2
  4434                           fsr1l	equ	0xFE1
  4435                           indf2	equ	0xFDF
  4436                           fsr2h	equ	0xFDA
  4437                           fsr2l	equ	0xFD9
  4438                           status	equ	0xFD8
  4439                           
  4440 ;; *************** function _enableSerial *****************
  4441 ;; Defined at:
  4442 ;;		line 21 in file "source/serial.c"
  4443 ;; Parameters:    Size  Location     Type
  4444 ;;  baudRate        2    0[COMRAM] unsigned int 
  4445 ;; Auto vars:     Size  Location     Type
  4446 ;;		None
  4447 ;; Return value:  Size  Location     Type
  4448 ;;		None               void
  4449 ;; Registers used:
  4450 ;;		wreg, status,2, status,0
  4451 ;; Tracked objects:
  4452 ;;		On entry : 0/0
  4453 ;;		On exit  : 0/0
  4454 ;;		Unchanged: 0/0
  4455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4456 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4458 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4459 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4460 ;;Total ram usage:        4 bytes
  4461 ;; Hardware stack levels used:    1
  4462 ;; This function calls:
  4463 ;;		Nothing
  4464 ;; This function is called by:
  4465 ;;		_setPortData
  4466 ;; This function uses a non-reentrant model
  4467 ;;
  4468                           
  4469                           	psect	text5
  4470  00251A                     __ptext5:
  4471                           	opt stack 0
  4472  00251A                     _enableSerial:
  4473                           	opt stack 28
  4474                           
  4475                           ;serial.c: 23: LATDbits.LD3 = 1;
  4476                           
  4477                           ;incstack = 0
  4478  00251A  868C               	bsf	3980,3,c	;volatile
  4479                           
  4480                           ;serial.c: 26: switch (baudRate) {
  4481  00251C  D00B               	goto	l1298
  4482  00251E                     l1288:
  4483                           
  4484                           ;serial.c: 31: SPBRG2 = 103;
  4485  00251E  0E67               	movlw	103
  4486  002520  D007               	goto	L33
  4487  002522                     l1290:
  4488                           
  4489                           ;serial.c: 34: SPBRG2 = 25;
  4490  002522  0E19               	movlw	25
  4491  002524  D005               	goto	L33
  4492  002526                     l1292:
  4493                           
  4494                           ;serial.c: 37: SPBRG2 = 23;
  4495  002526  0E17               	movlw	23
  4496  002528  D003               	goto	L33
  4497  00252A                     l1294:
  4498                           
  4499                           ;serial.c: 40: SPBRG2 = 12;
  4500  00252A  0E0C               	movlw	12
  4501  00252C  D001               	goto	L33
  4502  00252E                     l1296:
  4503                           
  4504                           ;serial.c: 43: SPBRG2 = 207;
  4505  00252E  0ECF               	movlw	207
  4506  002530                     L33:
  4507  002530  6E75               	movwf	3957,c	;volatile
  4508                           
  4509                           ;serial.c: 44: }
  4510  002532  D02C               	goto	l1300
  4511  002534                     l1298:
  4512  002534  C001  F003         	movff	enableSerial@baudRate,??_enableSerial
  4513  002538  C002  F004         	movff	enableSerial@baudRate+1,??_enableSerial+1
  4514                           
  4515                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 5 sub-sw
      +                          itches
  4516                           ; Switch size 1, requested type "space"
  4517                           ; Number of cases is 5, Range of values is 4 to 75
  4518                           ; switch strategies available:
  4519                           ; Name         Instructions Cycles
  4520                           ; simple_byte           16     9 (average)
  4521                           ;	Chosen strategy is simple_byte
  4522  00253C  5004               	movf	??_enableSerial+1,w,c
  4523  00253E  0A04               	xorlw	4	; case 4
  4524  002540  B4D8               	btfsc	status,2,c
  4525  002542  D00D               	goto	l1794
  4526  002544  0A0D               	xorlw	13	; case 9
  4527  002546  B4D8               	btfsc	status,2,c
  4528  002548  D00D               	goto	l1796
  4529  00254A  0A2C               	xorlw	44	; case 37
  4530  00254C  B4D8               	btfsc	status,2,c
  4531  00254E  D00F               	goto	l1798
  4532  002550  0A0D               	xorlw	13	; case 40
  4533  002552  B4D8               	btfsc	status,2,c
  4534  002554  D011               	goto	l1800
  4535  002556  0A63               	xorlw	99	; case 75
  4536  002558  B4D8               	btfsc	status,2,c
  4537  00255A  D013               	goto	l1802
  4538  00255C  D7E8               	goto	l1296
  4539  00255E                     l1794:
  4540                           
  4541                           ; Switch size 1, requested type "space"
  4542                           ; Number of cases is 1, Range of values is 176 to 176
  4543                           ; switch strategies available:
  4544                           ; Name         Instructions Cycles
  4545                           ; simple_byte            4     3 (average)
  4546                           ;	Chosen strategy is simple_byte
  4547  00255E  5003               	movf	??_enableSerial,w,c
  4548  002560  0AB0               	xorlw	176	; case 176
  4549  002562  D7E5               	goto	l1296
  4550  002564                     l1796:
  4551                           
  4552                           ; Switch size 1, requested type "space"
  4553                           ; Number of cases is 1, Range of values is 96 to 96
  4554                           ; switch strategies available:
  4555                           ; Name         Instructions Cycles
  4556                           ; simple_byte            4     3 (average)
  4557                           ;	Chosen strategy is simple_byte
  4558  002564  5003               	movf	??_enableSerial,w,c
  4559  002566  0A60               	xorlw	96	; case 96
  4560  002568  B4D8               	btfsc	status,2,c
  4561  00256A  D7D9               	goto	l1288
  4562  00256C  D7E0               	goto	l1296
  4563  00256E                     l1798:
  4564                           
  4565                           ; Switch size 1, requested type "space"
  4566                           ; Number of cases is 1, Range of values is 128 to 128
  4567                           ; switch strategies available:
  4568                           ; Name         Instructions Cycles
  4569                           ; simple_byte            4     3 (average)
  4570                           ;	Chosen strategy is simple_byte
  4571  00256E  5003               	movf	??_enableSerial,w,c
  4572  002570  0A80               	xorlw	128	; case 128
  4573  002572  B4D8               	btfsc	status,2,c
  4574  002574  D7D6               	goto	l1290
  4575  002576  D7DB               	goto	l1296
  4576  002578                     l1800:
  4577                           
  4578                           ; Switch size 1, requested type "space"
  4579                           ; Number of cases is 1, Range of values is 177 to 177
  4580                           ; switch strategies available:
  4581                           ; Name         Instructions Cycles
  4582                           ; simple_byte            4     3 (average)
  4583                           ;	Chosen strategy is simple_byte
  4584  002578  5003               	movf	??_enableSerial,w,c
  4585  00257A  0AB1               	xorlw	177	; case 177
  4586  00257C  B4D8               	btfsc	status,2,c
  4587  00257E  D7D3               	goto	l1292
  4588  002580  D7D6               	goto	l1296
  4589  002582                     l1802:
  4590                           
  4591                           ; Switch size 1, requested type "space"
  4592                           ; Number of cases is 1, Range of values is 0 to 0
  4593                           ; switch strategies available:
  4594                           ; Name         Instructions Cycles
  4595                           ; simple_byte            4     3 (average)
  4596                           ;	Chosen strategy is simple_byte
  4597  002582  5003               	movf	??_enableSerial,w,c
  4598  002584  0A00               	xorlw	0	; case 0
  4599  002586  B4D8               	btfsc	status,2,c
  4600  002588  D7D0               	goto	l1294
  4601  00258A  D7D1               	goto	l1296
  4602  00258C                     l1300:
  4603                           
  4604                           ;serial.c: 46: SPBRGH2 = 0;
  4605  00258C  0E00               	movlw	0
  4606  00258E  6E76               	movwf	3958,c	;volatile
  4607                           
  4608                           ;serial.c: 47: TXSTA2bits.BRGH = 0;
  4609  002590  9472               	bcf	3954,2,c	;volatile
  4610                           
  4611                           ;serial.c: 48: BAUDCON2bits.BRG16 = 0;
  4612  002592  9670               	bcf	3952,3,c	;volatile
  4613                           
  4614                           ;serial.c: 50: TXSTA2bits.TX9 = 0;
  4615  002594  9C72               	bcf	3954,6,c	;volatile
  4616                           
  4617                           ;serial.c: 51: RCSTA2bits.RX9 = 0;
  4618  002596  9C71               	bcf	3953,6,c	;volatile
  4619                           
  4620                           ;serial.c: 53: TXSTA2bits.SYNC = 0;
  4621  002598  9872               	bcf	3954,4,c	;volatile
  4622                           
  4623                           ;serial.c: 54: BAUDCON2bits.DTRXP = 0;
  4624  00259A  9A70               	bcf	3952,5,c	;volatile
  4625                           
  4626                           ;serial.c: 56: TXSTA2bits.TXEN = 1;
  4627  00259C  8A72               	bsf	3954,5,c	;volatile
  4628                           
  4629                           ;serial.c: 57: RCSTA2bits.CREN = 1;
  4630  00259E  8871               	bsf	3953,4,c	;volatile
  4631                           
  4632                           ;serial.c: 59: RCSTA2bits.SPEN = 1;
  4633  0025A0  8E71               	bsf	3953,7,c	;volatile
  4634  0025A2  0012               	return	
  4635  0025A4                     __end_of_enableSerial:
  4636                           	opt stack 0
  4637                           tblptru	equ	0xFF8
  4638                           tblptrh	equ	0xFF7
  4639                           tblptrl	equ	0xFF6
  4640                           tablat	equ	0xFF5
  4641                           prodh	equ	0xFF4
  4642                           prodl	equ	0xFF3
  4643                           postinc0	equ	0xFEE
  4644                           wreg	equ	0xFE8
  4645                           postdec1	equ	0xFE5
  4646                           fsr1h	equ	0xFE2
  4647                           fsr1l	equ	0xFE1
  4648                           indf2	equ	0xFDF
  4649                           fsr2h	equ	0xFDA
  4650                           fsr2l	equ	0xFD9
  4651                           status	equ	0xFD8
  4652                           
  4653 ;; *************** function _dispSeg *****************
  4654 ;; Defined at:
  4655 ;;		line 13 in file "source/segment.c"
  4656 ;; Parameters:    Size  Location     Type
  4657 ;;  segment         1    wreg     unsigned char 
  4658 ;;  letter          1    0[COMRAM] unsigned char 
  4659 ;; Auto vars:     Size  Location     Type
  4660 ;;  segment         1    1[COMRAM] unsigned char 
  4661 ;; Return value:  Size  Location     Type
  4662 ;;		None               void
  4663 ;; Registers used:
  4664 ;;		wreg, status,2, status,0
  4665 ;; Tracked objects:
  4666 ;;		On entry : 0/0
  4667 ;;		On exit  : 0/0
  4668 ;;		Unchanged: 0/0
  4669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4670 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4671 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4673 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4674 ;;Total ram usage:        2 bytes
  4675 ;; Hardware stack levels used:    1
  4676 ;; This function calls:
  4677 ;;		Nothing
  4678 ;; This function is called by:
  4679 ;;		_main
  4680 ;;		_setPortData
  4681 ;;		_cycleSegDisplays
  4682 ;; This function uses a non-reentrant model
  4683 ;;
  4684                           
  4685                           	psect	text6
  4686  001FCA                     __ptext6:
  4687                           	opt stack 0
  4688  001FCA                     _dispSeg:
  4689                           	opt stack 28
  4690                           
  4691                           ;incstack = 0
  4692                           ;dispSeg@segment stored from wreg
  4693  001FCA  CFE8 F002          	movff	wreg,dispSeg@segment
  4694                           
  4695                           ;segment.c: 15: switch (letter) {
  4696  001FCE  D156               	goto	l1076
  4697  001FD0                     l1002:
  4698                           
  4699                           ;segment.c: 17: case 'X':
  4700                           ;segment.c: 18: if (segment == 1) {
  4701  001FD0  0402               	decf	dispSeg@segment,w,c
  4702  001FD2  A4D8               	btfss	status,2,c
  4703  001FD4  D008               	goto	l55
  4704                           
  4705                           ;segment.c: 19: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = LATAbits.LA1 = 0;
  4706  001FD6  9289               	bcf	3977,1,c	;volatile
  4707  001FD8  9089               	bcf	3977,0,c	;volatile
  4708  001FDA  908D               	bcf	3981,0,c	;volatile
  4709  001FDC  9A89               	bcf	3977,5,c	;volatile
  4710  001FDE  9889               	bcf	3977,4,c	;volatile
  4711  001FE0  9689               	bcf	3977,3,c	;volatile
  4712  001FE2  9489               	bcf	3977,2,c	;volatile
  4713                           
  4714                           ;segment.c: 20: return;
  4715  001FE4  0012               	return	
  4716  001FE6                     l55:
  4717                           
  4718                           ;segment.c: 21: }
  4719                           ;segment.c: 22: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = LATEbits.LE2 = 0;
  4720  001FE6  948D               	bcf	3981,2,c	;volatile
  4721  001FE8  928D               	bcf	3981,1,c	;volatile
  4722  001FEA  928B               	bcf	3979,1,c	;volatile
  4723  001FEC  908B               	bcf	3979,0,c	;volatile
  4724  001FEE  948B               	bcf	3979,2,c	;volatile
  4725  001FF0  9C89               	bcf	3977,6,c	;volatile
  4726  001FF2  9E89               	bcf	3977,7,c	;volatile
  4727                           
  4728                           ;segment.c: 23: break;
  4729  001FF4  0012               	return	
  4730  001FF6                     l1006:
  4731                           
  4732                           ;segment.c: 25: if (segment == 1) {
  4733  001FF6  0402               	decf	dispSeg@segment,w,c
  4734  001FF8  A4D8               	btfss	status,2,c
  4735  001FFA  D008               	goto	l59
  4736                           
  4737                           ;segment.c: 26: LATAbits.LA1 = 1;
  4738  001FFC  8289               	bsf	3977,1,c	;volatile
  4739                           
  4740                           ;segment.c: 27: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = 0;
  4741  001FFE  9089               	bcf	3977,0,c	;volatile
  4742  002000  908D               	bcf	3981,0,c	;volatile
  4743  002002  9A89               	bcf	3977,5,c	;volatile
  4744  002004  9889               	bcf	3977,4,c	;volatile
  4745  002006  9689               	bcf	3977,3,c	;volatile
  4746  002008  9489               	bcf	3977,2,c	;volatile
  4747                           
  4748                           ;segment.c: 28: return;
  4749  00200A  0012               	return	
  4750  00200C                     l59:
  4751                           
  4752                           ;segment.c: 29: }
  4753                           ;segment.c: 30: LATEbits.LE2 = 1;
  4754  00200C  848D               	bsf	3981,2,c	;volatile
  4755                           
  4756                           ;segment.c: 31: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = 0;
  4757  00200E  928D               	bcf	3981,1,c	;volatile
  4758  002010  928B               	bcf	3979,1,c	;volatile
  4759  002012  908B               	bcf	3979,0,c	;volatile
  4760  002014  948B               	bcf	3979,2,c	;volatile
  4761  002016  9C89               	bcf	3977,6,c	;volatile
  4762  002018  9E89               	bcf	3977,7,c	;volatile
  4763                           
  4764                           ;segment.c: 32: break;
  4765  00201A  0012               	return	
  4766  00201C                     l1010:
  4767                           
  4768                           ;segment.c: 34: if (segment == 1) {
  4769  00201C  0402               	decf	dispSeg@segment,w,c
  4770  00201E  A4D8               	btfss	status,2,c
  4771  002020  D008               	goto	l61
  4772                           
  4773                           ;segment.c: 35: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = 1;
  4774  002022  8089               	bsf	3977,0,c	;volatile
  4775  002024  808D               	bsf	3981,0,c	;volatile
  4776  002026  8A89               	bsf	3977,5,c	;volatile
  4777  002028  8889               	bsf	3977,4,c	;volatile
  4778  00202A  8689               	bsf	3977,3,c	;volatile
  4779  00202C  8489               	bsf	3977,2,c	;volatile
  4780                           
  4781                           ;segment.c: 36: LATAbits.LA1 = 0;
  4782  00202E  9289               	bcf	3977,1,c	;volatile
  4783                           
  4784                           ;segment.c: 37: return;
  4785  002030  0012               	return	
  4786  002032                     l61:
  4787                           
  4788                           ;segment.c: 38: }
  4789                           ;segment.c: 39: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = 1;
  4790  002032  828D               	bsf	3981,1,c	;volatile
  4791  002034  828B               	bsf	3979,1,c	;volatile
  4792  002036  808B               	bsf	3979,0,c	;volatile
  4793  002038  848B               	bsf	3979,2,c	;volatile
  4794  00203A  8C89               	bsf	3977,6,c	;volatile
  4795  00203C  8E89               	bsf	3977,7,c	;volatile
  4796                           
  4797                           ;segment.c: 40: LATEbits.LE2 = 0;
  4798  00203E  948D               	bcf	3981,2,c	;volatile
  4799                           
  4800                           ;segment.c: 41: break;
  4801  002040  0012               	return	
  4802  002042                     l1014:
  4803                           
  4804                           ;segment.c: 43: if (segment == 1) {
  4805  002042  0402               	decf	dispSeg@segment,w,c
  4806  002044  A4D8               	btfss	status,2,c
  4807  002046  D008               	goto	l63
  4808                           
  4809                           ;segment.c: 44: LATAbits.LA3 = LATAbits.LA4 = 1;
  4810  002048  8889               	bsf	3977,4,c	;volatile
  4811  00204A  8689               	bsf	3977,3,c	;volatile
  4812                           
  4813                           ;segment.c: 45: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1
      +                           = 0;
  4814  00204C  9289               	bcf	3977,1,c	;volatile
  4815  00204E  9089               	bcf	3977,0,c	;volatile
  4816  002050  908D               	bcf	3981,0,c	;volatile
  4817  002052  9A89               	bcf	3977,5,c	;volatile
  4818  002054  9489               	bcf	3977,2,c	;volatile
  4819                           
  4820                           ;segment.c: 46: return;
  4821  002056  0012               	return	
  4822  002058                     l63:
  4823                           
  4824                           ;segment.c: 47: }
  4825                           ;segment.c: 48: LATAbits.LA6 = LATCbits.LC2 = 1;
  4826  002058  848B               	bsf	3979,2,c	;volatile
  4827  00205A  8C89               	bsf	3977,6,c	;volatile
  4828                           
  4829                           ;segment.c: 49: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2
      +                           = 0;
  4830  00205C  948D               	bcf	3981,2,c	;volatile
  4831  00205E  928D               	bcf	3981,1,c	;volatile
  4832  002060  928B               	bcf	3979,1,c	;volatile
  4833  002062  908B               	bcf	3979,0,c	;volatile
  4834  002064  9E89               	bcf	3977,7,c	;volatile
  4835                           
  4836                           ;segment.c: 50: break;
  4837  002066  0012               	return	
  4838  002068                     l1018:
  4839                           
  4840                           ;segment.c: 52: if (segment == 1) {
  4841  002068  0402               	decf	dispSeg@segment,w,c
  4842  00206A  A4D8               	btfss	status,2,c
  4843  00206C  D008               	goto	l65
  4844                           
  4845                           ;segment.c: 53: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA1 = LATEbits.LE0 = LATAbits.LA5
      +                           = 1;
  4846  00206E  8A89               	bsf	3977,5,c	;volatile
  4847  002070  808D               	bsf	3981,0,c	;volatile
  4848  002072  8289               	bsf	3977,1,c	;volatile
  4849  002074  8689               	bsf	3977,3,c	;volatile
  4850  002076  8489               	bsf	3977,2,c	;volatile
  4851                           
  4852                           ;segment.c: 54: LATAbits.LA4 = LATAbits.LA0 = 0;
  4853  002078  9089               	bcf	3977,0,c	;volatile
  4854  00207A  9889               	bcf	3977,4,c	;volatile
  4855                           
  4856                           ;segment.c: 55: return;
  4857  00207C  0012               	return	
  4858  00207E                     l65:
  4859                           
  4860                           ;segment.c: 56: }
  4861                           ;segment.c: 57: LATAbits.LA7 = LATAbits.LA6 = LATEbits.LE2 = LATCbits.LC1 = LATCbits.LC0
      +                           = 1;
  4862  00207E  808B               	bsf	3979,0,c	;volatile
  4863  002080  828B               	bsf	3979,1,c	;volatile
  4864  002082  848D               	bsf	3981,2,c	;volatile
  4865  002084  8C89               	bsf	3977,6,c	;volatile
  4866  002086  8E89               	bsf	3977,7,c	;volatile
  4867                           
  4868                           ;segment.c: 58: LATCbits.LC2 = LATEbits.LE1 = 0;
  4869  002088  928D               	bcf	3981,1,c	;volatile
  4870  00208A  948B               	bcf	3979,2,c	;volatile
  4871                           
  4872                           ;segment.c: 59: break;
  4873  00208C  0012               	return	
  4874  00208E                     l1022:
  4875                           
  4876                           ;segment.c: 61: if (segment == 1) {
  4877  00208E  0402               	decf	dispSeg@segment,w,c
  4878  002090  A4D8               	btfss	status,2,c
  4879  002092  D008               	goto	l67
  4880                           
  4881                           ;segment.c: 62: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = 1;
  4882  002094  8A89               	bsf	3977,5,c	;volatile
  4883  002096  8889               	bsf	3977,4,c	;volatile
  4884  002098  8289               	bsf	3977,1,c	;volatile
  4885  00209A  8689               	bsf	3977,3,c	;volatile
  4886  00209C  8489               	bsf	3977,2,c	;volatile
  4887                           
  4888                           ;segment.c: 63: LATEbits.LE0 = LATAbits.LA0 = 0;
  4889  00209E  9089               	bcf	3977,0,c	;volatile
  4890  0020A0  908D               	bcf	3981,0,c	;volatile
  4891                           
  4892                           ;segment.c: 64: return;
  4893  0020A2  0012               	return	
  4894  0020A4                     l67:
  4895                           
  4896                           ;segment.c: 65: }
  4897                           ;segment.c: 66: LATAbits.LA7 = LATAbits.LA6 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = 1;
  4898  0020A4  808B               	bsf	3979,0,c	;volatile
  4899  0020A6  848B               	bsf	3979,2,c	;volatile
  4900  0020A8  848D               	bsf	3981,2,c	;volatile
  4901  0020AA  8C89               	bsf	3977,6,c	;volatile
  4902  0020AC  8E89               	bsf	3977,7,c	;volatile
  4903                           
  4904                           ;segment.c: 67: LATCbits.LC1 = LATEbits.LE1 = 0;
  4905  0020AE  928D               	bcf	3981,1,c	;volatile
  4906  0020B0  928B               	bcf	3979,1,c	;volatile
  4907                           
  4908                           ;segment.c: 68: break;
  4909  0020B2  0012               	return	
  4910  0020B4                     l1026:
  4911                           
  4912                           ;segment.c: 70: if (segment == 1) {
  4913  0020B4  0402               	decf	dispSeg@segment,w,c
  4914  0020B6  A4D8               	btfss	status,2,c
  4915  0020B8  D008               	goto	l69
  4916                           
  4917                           ;segment.c: 71: LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA3 = LATAbits.LA4 = 1;
  4918  0020BA  8889               	bsf	3977,4,c	;volatile
  4919  0020BC  8689               	bsf	3977,3,c	;volatile
  4920  0020BE  8289               	bsf	3977,1,c	;volatile
  4921  0020C0  8089               	bsf	3977,0,c	;volatile
  4922                           
  4923                           ;segment.c: 72: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = 0;
  4924  0020C2  908D               	bcf	3981,0,c	;volatile
  4925  0020C4  9A89               	bcf	3977,5,c	;volatile
  4926  0020C6  9489               	bcf	3977,2,c	;volatile
  4927                           
  4928                           ;segment.c: 73: return;
  4929  0020C8  0012               	return	
  4930  0020CA                     l69:
  4931                           
  4932                           ;segment.c: 74: }
  4933                           ;segment.c: 75: LATEbits.LE1 = LATEbits.LE2 = LATAbits.LA6 = LATCbits.LC2 = 1;
  4934  0020CA  848B               	bsf	3979,2,c	;volatile
  4935  0020CC  8C89               	bsf	3977,6,c	;volatile
  4936  0020CE  848D               	bsf	3981,2,c	;volatile
  4937  0020D0  828D               	bsf	3981,1,c	;volatile
  4938                           
  4939                           ;segment.c: 76: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = 0;
  4940  0020D2  928B               	bcf	3979,1,c	;volatile
  4941  0020D4  908B               	bcf	3979,0,c	;volatile
  4942  0020D6  9E89               	bcf	3977,7,c	;volatile
  4943                           
  4944                           ;segment.c: 77: break;
  4945  0020D8  0012               	return	
  4946  0020DA                     l1030:
  4947                           
  4948                           ;segment.c: 79: if (segment == 1) {
  4949  0020DA  0402               	decf	dispSeg@segment,w,c
  4950  0020DC  A4D8               	btfss	status,2,c
  4951  0020DE  D008               	goto	l71
  4952                           
  4953                           ;segment.c: 80: LATAbits.LA2 = LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = 1;
  4954  0020E0  8A89               	bsf	3977,5,c	;volatile
  4955  0020E2  8889               	bsf	3977,4,c	;volatile
  4956  0020E4  8289               	bsf	3977,1,c	;volatile
  4957  0020E6  8089               	bsf	3977,0,c	;volatile
  4958  0020E8  8489               	bsf	3977,2,c	;volatile
  4959                           
  4960                           ;segment.c: 81: LATAbits.LA3 = LATEbits.LE0 = 0;
  4961  0020EA  908D               	bcf	3981,0,c	;volatile
  4962  0020EC  9689               	bcf	3977,3,c	;volatile
  4963                           
  4964                           ;segment.c: 82: return;
  4965  0020EE  0012               	return	
  4966  0020F0                     l71:
  4967                           
  4968                           ;segment.c: 83: }
  4969                           ;segment.c: 84: LATAbits.LA7 = LATEbits.LE1 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = 1;
  4970  0020F0  808B               	bsf	3979,0,c	;volatile
  4971  0020F2  848B               	bsf	3979,2,c	;volatile
  4972  0020F4  848D               	bsf	3981,2,c	;volatile
  4973  0020F6  828D               	bsf	3981,1,c	;volatile
  4974  0020F8  8E89               	bsf	3977,7,c	;volatile
  4975                           
  4976                           ;segment.c: 85: LATAbits.LA6 = LATCbits.LC1 = 0;
  4977  0020FA  928B               	bcf	3979,1,c	;volatile
  4978  0020FC  9C89               	bcf	3977,6,c	;volatile
  4979                           
  4980                           ;segment.c: 86: break;
  4981  0020FE  0012               	return	
  4982  002100                     l1034:
  4983                           
  4984                           ;segment.c: 88: if (segment == 1) {
  4985  002100  0402               	decf	dispSeg@segment,w,c
  4986  002102  A4D8               	btfss	status,2,c
  4987  002104  D008               	goto	l73
  4988                           
  4989                           ;segment.c: 89: LATAbits.LA2 = LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = LATEbits.LE0 = 1;
  4990  002106  808D               	bsf	3981,0,c	;volatile
  4991  002108  8A89               	bsf	3977,5,c	;volatile
  4992  00210A  8889               	bsf	3977,4,c	;volatile
  4993  00210C  8289               	bsf	3977,1,c	;volatile
  4994  00210E  8089               	bsf	3977,0,c	;volatile
  4995  002110  8489               	bsf	3977,2,c	;volatile
  4996                           
  4997                           ;segment.c: 90: LATAbits.LA3 = 0;
  4998  002112  9689               	bcf	3977,3,c	;volatile
  4999                           
  5000                           ;segment.c: 91: return;
  5001  002114  0012               	return	
  5002  002116                     l73:
  5003                           
  5004                           ;segment.c: 92: }
  5005                           ;segment.c: 93: LATAbits.LA7 = LATEbits.LE1 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = LATCbits.LC1 = 1;
  5006  002116  828B               	bsf	3979,1,c	;volatile
  5007  002118  808B               	bsf	3979,0,c	;volatile
  5008  00211A  848B               	bsf	3979,2,c	;volatile
  5009  00211C  848D               	bsf	3981,2,c	;volatile
  5010  00211E  828D               	bsf	3981,1,c	;volatile
  5011  002120  8E89               	bsf	3977,7,c	;volatile
  5012                           
  5013                           ;segment.c: 94: LATAbits.LA6 = 0;
  5014  002122  9C89               	bcf	3977,6,c	;volatile
  5015                           
  5016                           ;segment.c: 95: break;
  5017  002124  0012               	return	
  5018  002126                     l1038:
  5019                           
  5020                           ;segment.c: 97: if (segment == 1) {
  5021  002126  0402               	decf	dispSeg@segment,w,c
  5022  002128  A4D8               	btfss	status,2,c
  5023  00212A  D008               	goto	l75
  5024                           
  5025                           ;segment.c: 98: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = 1;
  5026  00212C  8889               	bsf	3977,4,c	;volatile
  5027  00212E  8689               	bsf	3977,3,c	;volatile
  5028  002130  8489               	bsf	3977,2,c	;volatile
  5029                           
  5030                           ;segment.c: 99: LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1 = 0;
  5031  002132  9289               	bcf	3977,1,c	;volatile
  5032  002134  9089               	bcf	3977,0,c	;volatile
  5033  002136  908D               	bcf	3981,0,c	;volatile
  5034  002138  9A89               	bcf	3977,5,c	;volatile
  5035                           
  5036                           ;segment.c: 100: return;
  5037  00213A  0012               	return	
  5038  00213C                     l75:
  5039                           
  5040                           ;segment.c: 101: }
  5041                           ;segment.c: 102: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = 1;
  5042  00213C  848B               	bsf	3979,2,c	;volatile
  5043  00213E  8C89               	bsf	3977,6,c	;volatile
  5044  002140  8E89               	bsf	3977,7,c	;volatile
  5045                           
  5046                           ;segment.c: 103: LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2 = 0;
  5047  002142  948D               	bcf	3981,2,c	;volatile
  5048  002144  928D               	bcf	3981,1,c	;volatile
  5049  002146  928B               	bcf	3979,1,c	;volatile
  5050  002148  908B               	bcf	3979,0,c	;volatile
  5051                           
  5052                           ;segment.c: 104: break;
  5053  00214A  0012               	return	
  5054  00214C                     l1042:
  5055                           
  5056                           ;segment.c: 106: if (segment == 1) {
  5057  00214C  0402               	decf	dispSeg@segment,w,c
  5058  00214E  A4D8               	btfss	status,2,c
  5059  002150  D008               	goto	l77
  5060                           
  5061                           ;segment.c: 107: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE
      +                          0 = LATAbits.LA0 = LATAbits.LA1 = 1;
  5062  002152  8289               	bsf	3977,1,c	;volatile
  5063  002154  8089               	bsf	3977,0,c	;volatile
  5064  002156  808D               	bsf	3981,0,c	;volatile
  5065  002158  8A89               	bsf	3977,5,c	;volatile
  5066  00215A  8889               	bsf	3977,4,c	;volatile
  5067  00215C  8689               	bsf	3977,3,c	;volatile
  5068  00215E  8489               	bsf	3977,2,c	;volatile
  5069                           
  5070                           ;segment.c: 108: return;
  5071  002160  0012               	return	
  5072  002162                     l77:
  5073                           
  5074                           ;segment.c: 109: }
  5075                           ;segment.c: 110: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC
      +                          1 = LATEbits.LE1 = LATEbits.LE2 = 1;
  5076  002162  848D               	bsf	3981,2,c	;volatile
  5077  002164  828D               	bsf	3981,1,c	;volatile
  5078  002166  828B               	bsf	3979,1,c	;volatile
  5079  002168  808B               	bsf	3979,0,c	;volatile
  5080  00216A  848B               	bsf	3979,2,c	;volatile
  5081  00216C  8C89               	bsf	3977,6,c	;volatile
  5082  00216E  8E89               	bsf	3977,7,c	;volatile
  5083                           
  5084                           ;segment.c: 111: break;
  5085  002170  0012               	return	
  5086  002172                     l1046:
  5087                           
  5088                           ;segment.c: 113: if (segment == 1) {
  5089  002172  0402               	decf	dispSeg@segment,w,c
  5090  002174  A4D8               	btfss	status,2,c
  5091  002176  D008               	goto	l79
  5092                           
  5093                           ;segment.c: 114: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATAbits.LA
      +                          0 = LATAbits.LA1 = 1;
  5094  002178  8289               	bsf	3977,1,c	;volatile
  5095  00217A  8089               	bsf	3977,0,c	;volatile
  5096  00217C  8A89               	bsf	3977,5,c	;volatile
  5097  00217E  8889               	bsf	3977,4,c	;volatile
  5098  002180  8689               	bsf	3977,3,c	;volatile
  5099  002182  8489               	bsf	3977,2,c	;volatile
  5100                           
  5101                           ;segment.c: 115: LATEbits.LE0 = 0;
  5102  002184  908D               	bcf	3981,0,c	;volatile
  5103                           
  5104                           ;segment.c: 116: return;
  5105  002186  0012               	return	
  5106  002188                     l79:
  5107                           
  5108                           ;segment.c: 117: }
  5109                           ;segment.c: 118: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATEbits.LE
      +                          1 = LATEbits.LE2 = 1;
  5110  002188  848D               	bsf	3981,2,c	;volatile
  5111  00218A  828D               	bsf	3981,1,c	;volatile
  5112  00218C  808B               	bsf	3979,0,c	;volatile
  5113  00218E  848B               	bsf	3979,2,c	;volatile
  5114  002190  8C89               	bsf	3977,6,c	;volatile
  5115  002192  8E89               	bsf	3977,7,c	;volatile
  5116                           
  5117                           ;segment.c: 119: LATCbits.LC1 = 0;
  5118  002194  928B               	bcf	3979,1,c	;volatile
  5119                           
  5120                           ;segment.c: 120: break;
  5121  002196  0012               	return	
  5122  002198                     l1050:
  5123                           
  5124                           ;segment.c: 122: case 'A':
  5125                           ;segment.c: 123: if (segment == 1) {
  5126  002198  0402               	decf	dispSeg@segment,w,c
  5127  00219A  A4D8               	btfss	status,2,c
  5128  00219C  D008               	goto	l82
  5129                           
  5130                           ;segment.c: 124: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATEbits.LE0 = LATAbits.LA
      +                          0 = LATAbits.LA1 = 1;
  5131  00219E  8289               	bsf	3977,1,c	;volatile
  5132  0021A0  8089               	bsf	3977,0,c	;volatile
  5133  0021A2  808D               	bsf	3981,0,c	;volatile
  5134  0021A4  8889               	bsf	3977,4,c	;volatile
  5135  0021A6  8689               	bsf	3977,3,c	;volatile
  5136  0021A8  8489               	bsf	3977,2,c	;volatile
  5137                           
  5138                           ;segment.c: 125: LATAbits.LA5 = 0;
  5139  0021AA  9A89               	bcf	3977,5,c	;volatile
  5140                           
  5141                           ;segment.c: 126: return;
  5142  0021AC  0012               	return	
  5143  0021AE                     l82:
  5144                           
  5145                           ;segment.c: 127: }
  5146                           ;segment.c: 128: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC1 = LATEbits.LE
      +                          1 = LATEbits.LE2 = 1;
  5147  0021AE  848D               	bsf	3981,2,c	;volatile
  5148  0021B0  828D               	bsf	3981,1,c	;volatile
  5149  0021B2  828B               	bsf	3979,1,c	;volatile
  5150  0021B4  848B               	bsf	3979,2,c	;volatile
  5151  0021B6  8C89               	bsf	3977,6,c	;volatile
  5152  0021B8  8E89               	bsf	3977,7,c	;volatile
  5153                           
  5154                           ;segment.c: 129: LATCbits.LC0 = 0;
  5155  0021BA  908B               	bcf	3979,0,c	;volatile
  5156                           
  5157                           ;segment.c: 130: break;
  5158  0021BC  0012               	return	
  5159  0021BE                     l1054:
  5160                           
  5161                           ;segment.c: 132: case 'B':
  5162                           ;segment.c: 133: if (segment == 1) {
  5163  0021BE  0402               	decf	dispSeg@segment,w,c
  5164  0021C0  A4D8               	btfss	status,2,c
  5165  0021C2  D008               	goto	l85
  5166                           
  5167                           ;segment.c: 134: LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA
      +                          1 = 1;
  5168  0021C4  8289               	bsf	3977,1,c	;volatile
  5169  0021C6  8089               	bsf	3977,0,c	;volatile
  5170  0021C8  808D               	bsf	3981,0,c	;volatile
  5171  0021CA  8A89               	bsf	3977,5,c	;volatile
  5172  0021CC  8889               	bsf	3977,4,c	;volatile
  5173                           
  5174                           ;segment.c: 135: LATAbits.LA2 = LATAbits.LA3 = 0;
  5175  0021CE  9689               	bcf	3977,3,c	;volatile
  5176  0021D0  9489               	bcf	3977,2,c	;volatile
  5177                           
  5178                           ;segment.c: 136: return;
  5179  0021D2  0012               	return	
  5180  0021D4                     l85:
  5181                           
  5182                           ;segment.c: 137: }
  5183                           ;segment.c: 138: LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE
      +                          2 = 1;
  5184  0021D4  848D               	bsf	3981,2,c	;volatile
  5185  0021D6  828D               	bsf	3981,1,c	;volatile
  5186  0021D8  828B               	bsf	3979,1,c	;volatile
  5187  0021DA  808B               	bsf	3979,0,c	;volatile
  5188  0021DC  848B               	bsf	3979,2,c	;volatile
  5189                           
  5190                           ;segment.c: 139: LATAbits.LA7 = LATAbits.LA6 = 0;
  5191  0021DE  9C89               	bcf	3977,6,c	;volatile
  5192  0021E0  9E89               	bcf	3977,7,c	;volatile
  5193                           
  5194                           ;segment.c: 140: break;
  5195  0021E2  0012               	return	
  5196  0021E4                     l1058:
  5197                           
  5198                           ;segment.c: 142: case 'C':
  5199                           ;segment.c: 143: if (segment == 1) {
  5200  0021E4  0402               	decf	dispSeg@segment,w,c
  5201  0021E6  A4D8               	btfss	status,2,c
  5202  0021E8  D008               	goto	l88
  5203                           
  5204                           ;segment.c: 144: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = 1;
  5205  0021EA  8089               	bsf	3977,0,c	;volatile
  5206  0021EC  808D               	bsf	3981,0,c	;volatile
  5207  0021EE  8A89               	bsf	3977,5,c	;volatile
  5208  0021F0  8489               	bsf	3977,2,c	;volatile
  5209                           
  5210                           ;segment.c: 145: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA1 = 0;
  5211  0021F2  9289               	bcf	3977,1,c	;volatile
  5212  0021F4  9889               	bcf	3977,4,c	;volatile
  5213  0021F6  9689               	bcf	3977,3,c	;volatile
  5214                           
  5215                           ;segment.c: 146: return;
  5216  0021F8  0012               	return	
  5217  0021FA                     l88:
  5218                           
  5219                           ;segment.c: 147: }
  5220                           ;segment.c: 148: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = 1;
  5221  0021FA  828D               	bsf	3981,1,c	;volatile
  5222  0021FC  828B               	bsf	3979,1,c	;volatile
  5223  0021FE  808B               	bsf	3979,0,c	;volatile
  5224  002200  8E89               	bsf	3977,7,c	;volatile
  5225                           
  5226                           ;segment.c: 149: LATAbits.LA6 = LATCbits.LC2 = LATEbits.LE2 = 0;
  5227  002202  948D               	bcf	3981,2,c	;volatile
  5228  002204  948B               	bcf	3979,2,c	;volatile
  5229  002206  9C89               	bcf	3977,6,c	;volatile
  5230                           
  5231                           ;segment.c: 150: break;
  5232  002208  0012               	return	
  5233  00220A                     l1062:
  5234                           
  5235                           ;segment.c: 152: case 'D':
  5236                           ;segment.c: 153: if (segment == 1) {
  5237  00220A  0402               	decf	dispSeg@segment,w,c
  5238  00220C  A4D8               	btfss	status,2,c
  5239  00220E  D008               	goto	l91
  5240                           
  5241                           ;segment.c: 154: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA
      +                          1 = 1;
  5242  002210  8289               	bsf	3977,1,c	;volatile
  5243  002212  808D               	bsf	3981,0,c	;volatile
  5244  002214  8A89               	bsf	3977,5,c	;volatile
  5245  002216  8889               	bsf	3977,4,c	;volatile
  5246  002218  8689               	bsf	3977,3,c	;volatile
  5247                           
  5248                           ;segment.c: 155: LATAbits.LA2 = LATAbits.LA0 = 0;
  5249  00221A  9089               	bcf	3977,0,c	;volatile
  5250  00221C  9489               	bcf	3977,2,c	;volatile
  5251                           
  5252                           ;segment.c: 156: return;
  5253  00221E  0012               	return	
  5254  002220                     l91:
  5255                           
  5256                           ;segment.c: 157: }
  5257                           ;segment.c: 158: LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE
      +                          2 = 1;
  5258  002220  848D               	bsf	3981,2,c	;volatile
  5259  002222  828B               	bsf	3979,1,c	;volatile
  5260  002224  808B               	bsf	3979,0,c	;volatile
  5261  002226  848B               	bsf	3979,2,c	;volatile
  5262  002228  8C89               	bsf	3977,6,c	;volatile
  5263                           
  5264                           ;segment.c: 159: LATAbits.LA7 = LATEbits.LE1 = 0;
  5265  00222A  928D               	bcf	3981,1,c	;volatile
  5266  00222C  9E89               	bcf	3977,7,c	;volatile
  5267                           
  5268                           ;segment.c: 160: break;
  5269  00222E  0012               	return	
  5270  002230                     l1066:
  5271                           
  5272                           ;segment.c: 162: case 'E':
  5273                           ;segment.c: 163: if (segment == 1) {
  5274  002230  0402               	decf	dispSeg@segment,w,c
  5275  002232  A4D8               	btfss	status,2,c
  5276  002234  D008               	goto	l94
  5277                           
  5278                           ;segment.c: 164: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA
      +                          1 = 1;
  5279  002236  8289               	bsf	3977,1,c	;volatile
  5280  002238  8089               	bsf	3977,0,c	;volatile
  5281  00223A  808D               	bsf	3981,0,c	;volatile
  5282  00223C  8A89               	bsf	3977,5,c	;volatile
  5283  00223E  8489               	bsf	3977,2,c	;volatile
  5284                           
  5285                           ;segment.c: 165: LATAbits.LA3 = LATAbits.LA4 = 0;
  5286  002240  9889               	bcf	3977,4,c	;volatile
  5287  002242  9689               	bcf	3977,3,c	;volatile
  5288                           
  5289                           ;segment.c: 166: return;
  5290  002244  0012               	return	
  5291  002246                     l94:
  5292                           
  5293                           ;segment.c: 167: }
  5294                           ;segment.c: 168: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE
      +                          2 = 1;
  5295  002246  848D               	bsf	3981,2,c	;volatile
  5296  002248  828D               	bsf	3981,1,c	;volatile
  5297  00224A  828B               	bsf	3979,1,c	;volatile
  5298  00224C  808B               	bsf	3979,0,c	;volatile
  5299  00224E  8E89               	bsf	3977,7,c	;volatile
  5300                           
  5301                           ;segment.c: 169: LATAbits.LA6 = LATCbits.LC2 = 0;
  5302  002250  948B               	bcf	3979,2,c	;volatile
  5303  002252  9C89               	bcf	3977,6,c	;volatile
  5304                           
  5305                           ;segment.c: 170: break;
  5306  002254  0012               	return	
  5307  002256                     l1070:
  5308                           
  5309                           ;segment.c: 172: case 'F':
  5310                           ;segment.c: 173: if (segment == 1) {
  5311  002256  0402               	decf	dispSeg@segment,w,c
  5312  002258  A4D8               	btfss	status,2,c
  5313  00225A  D008               	goto	l97
  5314                           
  5315                           ;segment.c: 174: LATAbits.LA2 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1 = 1;
  5316  00225C  8289               	bsf	3977,1,c	;volatile
  5317  00225E  8089               	bsf	3977,0,c	;volatile
  5318  002260  808D               	bsf	3981,0,c	;volatile
  5319  002262  8489               	bsf	3977,2,c	;volatile
  5320                           
  5321                           ;segment.c: 175: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = 0;
  5322  002264  9A89               	bcf	3977,5,c	;volatile
  5323  002266  9889               	bcf	3977,4,c	;volatile
  5324  002268  9689               	bcf	3977,3,c	;volatile
  5325                           
  5326                           ;segment.c: 176: return;
  5327  00226A  0012               	return	
  5328  00226C                     l97:
  5329                           
  5330                           ;segment.c: 177: }
  5331                           ;segment.c: 178: LATAbits.LA7 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2 = 1;
  5332  00226C  848D               	bsf	3981,2,c	;volatile
  5333  00226E  828D               	bsf	3981,1,c	;volatile
  5334  002270  828B               	bsf	3979,1,c	;volatile
  5335  002272  8E89               	bsf	3977,7,c	;volatile
  5336                           
  5337                           ;segment.c: 179: LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = 0;
  5338  002274  908B               	bcf	3979,0,c	;volatile
  5339  002276  948B               	bcf	3979,2,c	;volatile
  5340  002278  9C89               	bcf	3977,6,c	;volatile
  5341                           
  5342                           ;segment.c: 180: break;
  5343  00227A  0012               	return	
  5344  00227C                     l1076:
  5345  00227C  5001               	movf	dispSeg@letter,w,c
  5346                           
  5347                           ; Switch size 1, requested type "space"
  5348                           ; Number of cases is 25, Range of values is 45 to 120
  5349                           ; switch strategies available:
  5350                           ; Name         Instructions Cycles
  5351                           ; simple_byte           76    39 (average)
  5352                           ;	Chosen strategy is simple_byte
  5353  00227E  0A2D               	xorlw	45	; case 45
  5354  002280  B4D8               	btfsc	status,2,c
  5355  002282  D6B9               	goto	l1006
  5356  002284  0A1D               	xorlw	29	; case 48
  5357  002286  B4D8               	btfsc	status,2,c
  5358  002288  D6C9               	goto	l1010
  5359  00228A  0A01               	xorlw	1	; case 49
  5360  00228C  B4D8               	btfsc	status,2,c
  5361  00228E  D6D9               	goto	l1014
  5362  002290  0A03               	xorlw	3	; case 50
  5363  002292  B4D8               	btfsc	status,2,c
  5364  002294  D6E9               	goto	l1018
  5365  002296  0A01               	xorlw	1	; case 51
  5366  002298  B4D8               	btfsc	status,2,c
  5367  00229A  D6F9               	goto	l1022
  5368  00229C  0A07               	xorlw	7	; case 52
  5369  00229E  B4D8               	btfsc	status,2,c
  5370  0022A0  D709               	goto	l1026
  5371  0022A2  0A01               	xorlw	1	; case 53
  5372  0022A4  B4D8               	btfsc	status,2,c
  5373  0022A6  D719               	goto	l1030
  5374  0022A8  0A03               	xorlw	3	; case 54
  5375  0022AA  B4D8               	btfsc	status,2,c
  5376  0022AC  D729               	goto	l1034
  5377  0022AE  0A01               	xorlw	1	; case 55
  5378  0022B0  B4D8               	btfsc	status,2,c
  5379  0022B2  D739               	goto	l1038
  5380  0022B4  0A0F               	xorlw	15	; case 56
  5381  0022B6  B4D8               	btfsc	status,2,c
  5382  0022B8  D749               	goto	l1042
  5383  0022BA  0A01               	xorlw	1	; case 57
  5384  0022BC  B4D8               	btfsc	status,2,c
  5385  0022BE  D759               	goto	l1046
  5386  0022C0  0A78               	xorlw	120	; case 65
  5387  0022C2  B4D8               	btfsc	status,2,c
  5388  0022C4  D769               	goto	l1050
  5389  0022C6  0A03               	xorlw	3	; case 66
  5390  0022C8  B4D8               	btfsc	status,2,c
  5391  0022CA  D779               	goto	l1054
  5392  0022CC  0A01               	xorlw	1	; case 67
  5393  0022CE  B4D8               	btfsc	status,2,c
  5394  0022D0  D789               	goto	l1058
  5395  0022D2  0A07               	xorlw	7	; case 68
  5396  0022D4  B4D8               	btfsc	status,2,c
  5397  0022D6  D799               	goto	l1062
  5398  0022D8  0A01               	xorlw	1	; case 69
  5399  0022DA  B4D8               	btfsc	status,2,c
  5400  0022DC  D7A9               	goto	l1066
  5401  0022DE  0A03               	xorlw	3	; case 70
  5402  0022E0  B4D8               	btfsc	status,2,c
  5403  0022E2  D7B9               	goto	l1070
  5404  0022E4  0A1E               	xorlw	30	; case 88
  5405  0022E6  B4D8               	btfsc	status,2,c
  5406  0022E8  D673               	goto	l1002
  5407  0022EA  0A39               	xorlw	57	; case 97
  5408  0022EC  B4D8               	btfsc	status,2,c
  5409  0022EE  D754               	goto	l1050
  5410  0022F0  0A03               	xorlw	3	; case 98
  5411  0022F2  B4D8               	btfsc	status,2,c
  5412  0022F4  D764               	goto	l1054
  5413  0022F6  0A01               	xorlw	1	; case 99
  5414  0022F8  B4D8               	btfsc	status,2,c
  5415  0022FA  D774               	goto	l1058
  5416  0022FC  0A07               	xorlw	7	; case 100
  5417  0022FE  B4D8               	btfsc	status,2,c
  5418  002300  D784               	goto	l1062
  5419  002302  0A01               	xorlw	1	; case 101
  5420  002304  B4D8               	btfsc	status,2,c
  5421  002306  D794               	goto	l1066
  5422  002308  0A03               	xorlw	3	; case 102
  5423  00230A  B4D8               	btfsc	status,2,c
  5424  00230C  D7A4               	goto	l1070
  5425  00230E  0A1E               	xorlw	30	; case 120
  5426  002310  A4D8               	btfss	status,2,c
  5427  002312  0012               	return	
  5428  002314  D65D               	goto	l1002
  5429  002316                     __end_of_dispSeg:
  5430                           	opt stack 0
  5431                           tblptru	equ	0xFF8
  5432                           tblptrh	equ	0xFF7
  5433                           tblptrl	equ	0xFF6
  5434                           tablat	equ	0xFF5
  5435                           prodh	equ	0xFF4
  5436                           prodl	equ	0xFF3
  5437                           postinc0	equ	0xFEE
  5438                           wreg	equ	0xFE8
  5439                           postdec1	equ	0xFE5
  5440                           fsr1h	equ	0xFE2
  5441                           fsr1l	equ	0xFE1
  5442                           indf2	equ	0xFDF
  5443                           fsr2h	equ	0xFDA
  5444                           fsr2l	equ	0xFD9
  5445                           status	equ	0xFD8
  5446                           
  5447 ;; *************** function _setMXbits *****************
  5448 ;; Defined at:
  5449 ;;		line 37 in file "source/emulator.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;  subRegister     1    wreg     unsigned char 
  5452 ;;  value           1    0[COMRAM] unsigned char 
  5453 ;; Auto vars:     Size  Location     Type
  5454 ;;  subRegister     1    5[COMRAM] unsigned char 
  5455 ;;  regMX_temp      2    3[COMRAM] unsigned int 
  5456 ;;  value_temp      2    1[COMRAM] unsigned int 
  5457 ;; Return value:  Size  Location     Type
  5458 ;;		None               void
  5459 ;; Registers used:
  5460 ;;		wreg, status,2, status,0
  5461 ;; Tracked objects:
  5462 ;;		On entry : 0/0
  5463 ;;		On exit  : 0/0
  5464 ;;		Unchanged: 0/0
  5465 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5466 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;Total ram usage:        6 bytes
  5471 ;; Hardware stack levels used:    1
  5472 ;; This function calls:
  5473 ;;		Nothing
  5474 ;; This function is called by:
  5475 ;;		_processOpcode
  5476 ;; This function uses a non-reentrant model
  5477 ;;
  5478                           
  5479                           	psect	text7
  5480  0026EE                     __ptext7:
  5481                           	opt stack 0
  5482  0026EE                     _setMXbits:
  5483                           	opt stack 29
  5484                           
  5485                           ;incstack = 0
  5486                           ;setMXbits@subRegister stored from wreg
  5487  0026EE  CFE8 F006          	movff	wreg,setMXbits@subRegister
  5488                           
  5489                           ;emulator.c: 39: uint16_t value_temp = (uint16_t) value;
  5490  0026F2  C001  F002         	movff	setMXbits@value,setMXbits@value_temp
  5491  0026F6  6A03               	clrf	setMXbits@value_temp+1,c
  5492                           
  5493                           ;emulator.c: 40: uint16_t regMX_temp = regMX;
  5494  0026F8  C019  F004         	movff	_regMX,setMXbits@regMX_temp
  5495  0026FC  C01A  F005         	movff	_regMX+1,setMXbits@regMX_temp+1
  5496                           
  5497                           ;emulator.c: 54: }
  5498                           
  5499                           ;emulator.c: 53: break;
  5500                           
  5501                           ;emulator.c: 50: case 1:
  5502                           
  5503                           ;emulator.c: 48: break;
  5504                           
  5505                           ;emulator.c: 43: {
  5506                           ;emulator.c: 44: case 0:
  5507                           
  5508                           ;emulator.c: 42: switch(subRegister)
  5509  002700  5006               	movf	setMXbits@subRegister,w,c
  5510                           
  5511                           ; Switch size 1, requested type "space"
  5512                           ; Number of cases is 2, Range of values is 0 to 1
  5513                           ; switch strategies available:
  5514                           ; Name         Instructions Cycles
  5515                           ; simple_byte            7     4 (average)
  5516                           ;	Chosen strategy is simple_byte
  5517  002702  0A00               	xorlw	0	; case 0
  5518  002704  A4D8               	btfss	status,2,c
  5519  002706  0A01               	xorlw	1	; case 1
  5520                           
  5521                           ;emulator.c: 56: regMX = regMX_temp + value_temp;
  5522  002708  5002               	movf	setMXbits@value_temp,w,c
  5523  00270A  2404               	addwf	setMXbits@regMX_temp,w,c
  5524  00270C  6E19               	movwf	_regMX,c
  5525  00270E  5003               	movf	setMXbits@value_temp+1,w,c
  5526  002710  2005               	addwfc	setMXbits@regMX_temp+1,w,c
  5527  002712  6E1A               	movwf	_regMX+1,c
  5528  002714  0012               	return	
  5529  002716                     __end_of_setMXbits:
  5530                           	opt stack 0
  5531                           tblptru	equ	0xFF8
  5532                           tblptrh	equ	0xFF7
  5533                           tblptrl	equ	0xFF6
  5534                           tablat	equ	0xFF5
  5535                           prodh	equ	0xFF4
  5536                           prodl	equ	0xFF3
  5537                           postinc0	equ	0xFEE
  5538                           wreg	equ	0xFE8
  5539                           postdec1	equ	0xFE5
  5540                           fsr1h	equ	0xFE2
  5541                           fsr1l	equ	0xFE1
  5542                           indf2	equ	0xFDF
  5543                           fsr2h	equ	0xFDA
  5544                           fsr2l	equ	0xFD9
  5545                           status	equ	0xFD8
  5546                           
  5547 ;; *************** function _setFbits *****************
  5548 ;; Defined at:
  5549 ;;		line 105 in file "source/emulator.c"
  5550 ;; Parameters:    Size  Location     Type
  5551 ;;  subRegister     1    wreg     unsigned char 
  5552 ;;  value           1    0[COMRAM] unsigned char 
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;  subRegister     1    2[COMRAM] unsigned char 
  5555 ;;  regF_temp2      1    4[COMRAM] unsigned char 
  5556 ;;  regF_temp1      1    3[COMRAM] unsigned char 
  5557 ;; Return value:  Size  Location     Type
  5558 ;;		None               void
  5559 ;; Registers used:
  5560 ;;		wreg, status,2, status,0
  5561 ;; Tracked objects:
  5562 ;;		On entry : 0/0
  5563 ;;		On exit  : 0/0
  5564 ;;		Unchanged: 0/0
  5565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5566 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5569 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5570 ;;Total ram usage:        5 bytes
  5571 ;; Hardware stack levels used:    1
  5572 ;; This function calls:
  5573 ;;		Nothing
  5574 ;; This function is called by:
  5575 ;;		_processOpcode
  5576 ;; This function uses a non-reentrant model
  5577 ;;
  5578                           
  5579                           	psect	text8
  5580  002650                     __ptext8:
  5581                           	opt stack 0
  5582  002650                     _setFbits:
  5583                           	opt stack 29
  5584                           
  5585                           ;incstack = 0
  5586                           ;setFbits@subRegister stored from wreg
  5587  002650  CFE8 F003          	movff	wreg,setFbits@subRegister
  5588                           
  5589                           ;emulator.c: 107: uint8_t regF_temp1 = regF;
  5590  002654  C022  F004         	movff	_regF,setFbits@regF_temp1
  5591                           
  5592                           ;emulator.c: 108: uint8_t regF_temp2 = regF;
  5593  002658  C022  F005         	movff	_regF,setFbits@regF_temp2
  5594                           
  5595                           ;emulator.c: 110: switch(subRegister)
  5596  00265C  D005               	goto	l1262
  5597  00265E                     l1258:
  5598                           
  5599                           ;emulator.c: 115: regF_temp2 = 0;
  5600  00265E  6E02               	movwf	??_setFbits& (0+255),c
  5601  002660  0E00               	movlw	0
  5602  002662  6E05               	movwf	setFbits@regF_temp2,c
  5603  002664  5002               	movf	??_setFbits& (0+255),w,c
  5604                           
  5605                           ;emulator.c: 116: break;
  5606  002666  D00D               	goto	l1264
  5607  002668                     l1262:
  5608  002668  5003               	movf	setFbits@subRegister,w,c
  5609                           
  5610                           ; Switch size 1, requested type "space"
  5611                           ; Number of cases is 5, Range of values is 0 to 4
  5612                           ; switch strategies available:
  5613                           ; Name         Instructions Cycles
  5614                           ; simple_byte           16     9 (average)
  5615                           ;	Chosen strategy is simple_byte
  5616  00266A  0A00               	xorlw	0	; case 0
  5617  00266C  B4D8               	btfsc	status,2,c
  5618  00266E  D7F7               	goto	l1258
  5619  002670  0A01               	xorlw	1	; case 1
  5620  002672  B4D8               	btfsc	status,2,c
  5621  002674  D006               	goto	l1264
  5622  002676  0A03               	xorlw	3	; case 2
  5623  002678  B4D8               	btfsc	status,2,c
  5624  00267A  D003               	goto	l1264
  5625  00267C  0A01               	xorlw	1	; case 3
  5626  00267E  A4D8               	btfss	status,2,c
  5627  002680  0A07               	xorlw	7	; case 4
  5628  002682                     l1264:
  5629                           
  5630                           ;emulator.c: 147: regF = regF_temp1 + regF_temp2 + value;
  5631  002682  5004               	movf	setFbits@regF_temp1,w,c
  5632  002684  2405               	addwf	setFbits@regF_temp2,w,c
  5633  002686  2401               	addwf	setFbits@value,w,c
  5634  002688  6E22               	movwf	_regF,c
  5635  00268A  0012               	return	
  5636  00268C                     __end_of_setFbits:
  5637                           	opt stack 0
  5638                           tblptru	equ	0xFF8
  5639                           tblptrh	equ	0xFF7
  5640                           tblptrl	equ	0xFF6
  5641                           tablat	equ	0xFF5
  5642                           prodh	equ	0xFF4
  5643                           prodl	equ	0xFF3
  5644                           postinc0	equ	0xFEE
  5645                           wreg	equ	0xFE8
  5646                           postdec1	equ	0xFE5
  5647                           fsr1h	equ	0xFE2
  5648                           fsr1l	equ	0xFE1
  5649                           indf2	equ	0xFDF
  5650                           fsr2h	equ	0xFDA
  5651                           fsr2l	equ	0xFD9
  5652                           status	equ	0xFD8
  5653                           
  5654 ;; *************** function _immData_toPointer *****************
  5655 ;; Defined at:
  5656 ;;		line 150 in file "source/emulator.c"
  5657 ;; Parameters:    Size  Location     Type
  5658 ;;		None
  5659 ;; Auto vars:     Size  Location     Type
  5660 ;;  pointer         2    2[COMRAM] unsigned int 
  5661 ;; Return value:  Size  Location     Type
  5662 ;;                  2    0[COMRAM] unsigned int 
  5663 ;; Registers used:
  5664 ;;		wreg, status,2, status,0
  5665 ;; Tracked objects:
  5666 ;;		On entry : 0/0
  5667 ;;		On exit  : 0/0
  5668 ;;		Unchanged: 0/0
  5669 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5670 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5671 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5673 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5674 ;;Total ram usage:        4 bytes
  5675 ;; Hardware stack levels used:    1
  5676 ;; This function calls:
  5677 ;;		Nothing
  5678 ;; This function is called by:
  5679 ;;		_processOpcode
  5680 ;; This function uses a non-reentrant model
  5681 ;;
  5682                           
  5683                           	psect	text9
  5684  002758                     __ptext9:
  5685                           	opt stack 0
  5686  002758                     _immData_toPointer:
  5687                           	opt stack 29
  5688                           
  5689                           ;emulator.c: 152: uint16_t pointer = (uint16_t) immData_1;
  5690                           
  5691                           ;incstack = 0
  5692  002758  C01E  F003         	movff	_immData_1,immData_toPointer@pointer
  5693  00275C  6A04               	clrf	immData_toPointer@pointer+1,c
  5694                           
  5695                           ;emulator.c: 154: pointer += immData_2;
  5696  00275E  501F               	movf	_immData_2,w,c
  5697  002760  2603               	addwf	immData_toPointer@pointer,f,c
  5698  002762  0E00               	movlw	0
  5699  002764  2204               	addwfc	immData_toPointer@pointer+1,f,c
  5700                           
  5701                           ;emulator.c: 155: return pointer;
  5702  002766  C003  F001         	movff	immData_toPointer@pointer,?_immData_toPointer
  5703  00276A  C004  F002         	movff	immData_toPointer@pointer+1,?_immData_toPointer+1
  5704  00276E  0012               	return	
  5705  002770                     __end_of_immData_toPointer:
  5706                           	opt stack 0
  5707                           tblptru	equ	0xFF8
  5708                           tblptrh	equ	0xFF7
  5709                           tblptrl	equ	0xFF6
  5710                           tablat	equ	0xFF5
  5711                           prodh	equ	0xFF4
  5712                           prodl	equ	0xFF3
  5713                           postinc0	equ	0xFEE
  5714                           wreg	equ	0xFE8
  5715                           postdec1	equ	0xFE5
  5716                           fsr1h	equ	0xFE2
  5717                           fsr1l	equ	0xFE1
  5718                           indf2	equ	0xFDF
  5719                           fsr2h	equ	0xFDA
  5720                           fsr2l	equ	0xFD9
  5721                           status	equ	0xFD8
  5722                           
  5723 ;; *************** function _getPortData *****************
  5724 ;; Defined at:
  5725 ;;		line 174 in file "source/emulator.c"
  5726 ;; Parameters:    Size  Location     Type
  5727 ;;  portNumber      1    wreg     unsigned char 
  5728 ;; Auto vars:     Size  Location     Type
  5729 ;;  portNumber      1    0[COMRAM] unsigned char 
  5730 ;; Return value:  Size  Location     Type
  5731 ;;                  1    wreg      unsigned char 
  5732 ;; Registers used:
  5733 ;;		wreg, status,2, status,0
  5734 ;; Tracked objects:
  5735 ;;		On entry : 0/0
  5736 ;;		On exit  : 0/0
  5737 ;;		Unchanged: 0/0
  5738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5740 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5742 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5743 ;;Total ram usage:        1 bytes
  5744 ;; Hardware stack levels used:    1
  5745 ;; This function calls:
  5746 ;;		Nothing
  5747 ;; This function is called by:
  5748 ;;		_processOpcode
  5749 ;; This function uses a non-reentrant model
  5750 ;;
  5751                           
  5752                           	psect	text10
  5753  002770                     __ptext10:
  5754                           	opt stack 0
  5755  002770                     _getPortData:
  5756                           	opt stack 29
  5757                           
  5758                           ;incstack = 0
  5759                           ;getPortData@portNumber stored from wreg
  5760  002770  CFE8 F001          	movff	wreg,getPortData@portNumber
  5761                           
  5762                           ;emulator.c: 176: switch (portNumber)
  5763  002774  D002               	goto	l1278
  5764  002776                     l235:
  5765                           
  5766                           ;emulator.c: 179: return RCREG2;
  5767  002776  5074               	movf	3956,w,c	;volatile
  5768  002778  0012               	return	
  5769  00277A                     l1278:
  5770  00277A  5001               	movf	getPortData@portNumber,w,c
  5771                           
  5772                           ; Switch size 1, requested type "space"
  5773                           ; Number of cases is 1, Range of values is 2 to 2
  5774                           ; switch strategies available:
  5775                           ; Name         Instructions Cycles
  5776                           ; simple_byte            4     3 (average)
  5777                           ;	Chosen strategy is simple_byte
  5778  00277C  0A02               	xorlw	2	; case 2
  5779  00277E  B4D8               	btfsc	status,2,c
  5780  002780  D7FA               	goto	l235
  5781                           
  5782                           ;emulator.c: 182: return 0;
  5783  002782  0E00               	movlw	0
  5784  002784  0012               	return	
  5785  002786                     __end_of_getPortData:
  5786                           	opt stack 0
  5787                           tblptru	equ	0xFF8
  5788                           tblptrh	equ	0xFF7
  5789                           tblptrl	equ	0xFF6
  5790                           tablat	equ	0xFF5
  5791                           prodh	equ	0xFF4
  5792                           prodl	equ	0xFF3
  5793                           postinc0	equ	0xFEE
  5794                           wreg	equ	0xFE8
  5795                           postdec1	equ	0xFE5
  5796                           fsr1h	equ	0xFE2
  5797                           fsr1l	equ	0xFE1
  5798                           indf2	equ	0xFDF
  5799                           fsr2h	equ	0xFDA
  5800                           fsr2l	equ	0xFD9
  5801                           status	equ	0xFD8
  5802                           
  5803 ;; *************** function _getMXbits *****************
  5804 ;; Defined at:
  5805 ;;		line 20 in file "source/emulator.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;  subRegister     1    wreg     unsigned char 
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;  subRegister     1    2[COMRAM] unsigned char 
  5810 ;;  regMX_temp      2    0[COMRAM] unsigned int 
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  1    wreg      unsigned char 
  5813 ;; Registers used:
  5814 ;;		wreg, status,2
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5821 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5823 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5824 ;;Total ram usage:        3 bytes
  5825 ;; Hardware stack levels used:    1
  5826 ;; This function calls:
  5827 ;;		Nothing
  5828 ;; This function is called by:
  5829 ;;		_processOpcode
  5830 ;; This function uses a non-reentrant model
  5831 ;;
  5832                           
  5833                           	psect	text11
  5834  002786                     __ptext11:
  5835                           	opt stack 0
  5836  002786                     _getMXbits:
  5837                           	opt stack 29
  5838                           
  5839                           ;incstack = 0
  5840                           ;getMXbits@subRegister stored from wreg
  5841  002786  CFE8 F003          	movff	wreg,getMXbits@subRegister
  5842                           
  5843                           ;emulator.c: 22: uint16_t regMX_temp = regMX;
  5844  00278A  C019  F001         	movff	_regMX,getMXbits@regMX_temp
  5845  00278E  C01A  F002         	movff	_regMX+1,getMXbits@regMX_temp+1
  5846                           
  5847                           ;emulator.c: 27: }
  5848                           ;emulator.c: 29: return (uint8_t) regMX_temp;
  5849  002792  5001               	movf	getMXbits@regMX_temp,w,c
  5850  002794  0012               	return	
  5851  002796                     __end_of_getMXbits:
  5852                           	opt stack 0
  5853                           tblptru	equ	0xFF8
  5854                           tblptrh	equ	0xFF7
  5855                           tblptrl	equ	0xFF6
  5856                           tablat	equ	0xFF5
  5857                           prodh	equ	0xFF4
  5858                           prodl	equ	0xFF3
  5859                           postinc0	equ	0xFEE
  5860                           wreg	equ	0xFE8
  5861                           postdec1	equ	0xFE5
  5862                           fsr1h	equ	0xFE2
  5863                           fsr1l	equ	0xFE1
  5864                           indf2	equ	0xFDF
  5865                           fsr2h	equ	0xFDA
  5866                           fsr2l	equ	0xFD9
  5867                           status	equ	0xFD8
  5868                           
  5869 ;; *************** function _getFbits *****************
  5870 ;; Defined at:
  5871 ;;		line 65 in file "source/emulator.c"
  5872 ;; Parameters:    Size  Location     Type
  5873 ;;  subRegister     1    wreg     unsigned char 
  5874 ;; Auto vars:     Size  Location     Type
  5875 ;;  subRegister     1    0[COMRAM] unsigned char 
  5876 ;;  regF_temp       1    1[COMRAM] unsigned char 
  5877 ;; Return value:  Size  Location     Type
  5878 ;;                  1    wreg      unsigned char 
  5879 ;; Registers used:
  5880 ;;		wreg, status,2, status,0
  5881 ;; Tracked objects:
  5882 ;;		On entry : 0/0
  5883 ;;		On exit  : 0/0
  5884 ;;		Unchanged: 0/0
  5885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5887 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5889 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5890 ;;Total ram usage:        2 bytes
  5891 ;; Hardware stack levels used:    1
  5892 ;; This function calls:
  5893 ;;		Nothing
  5894 ;; This function is called by:
  5895 ;;		_processOpcode
  5896 ;; This function uses a non-reentrant model
  5897 ;;
  5898                           
  5899                           	psect	text12
  5900  002716                     __ptext12:
  5901                           	opt stack 0
  5902  002716                     _getFbits:
  5903                           	opt stack 29
  5904                           
  5905                           ;incstack = 0
  5906                           ;getFbits@subRegister stored from wreg
  5907  002716  CFE8 F001          	movff	wreg,getFbits@subRegister
  5908                           
  5909                           ;emulator.c: 67: uint8_t regF_temp = regF;
  5910  00271A  C022  F002         	movff	_regF,getFbits@regF_temp
  5911                           
  5912                           ;emulator.c: 95: }
  5913                           
  5914                           ;emulator.c: 94: break;
  5915                           
  5916                           ;emulator.c: 91: case 4:
  5917                           
  5918                           ;emulator.c: 89: break;
  5919                           
  5920                           ;emulator.c: 86: case 3:
  5921                           
  5922                           ;emulator.c: 84: break;
  5923                           
  5924                           ;emulator.c: 81: case 2:
  5925                           
  5926                           ;emulator.c: 79: break;
  5927                           
  5928                           ;emulator.c: 76: case 1:
  5929                           
  5930                           ;emulator.c: 74: break;
  5931                           
  5932                           ;emulator.c: 70: {
  5933                           ;emulator.c: 71: case 0:
  5934                           
  5935                           ;emulator.c: 69: switch(subRegister)
  5936  00271E  5001               	movf	getFbits@subRegister,w,c
  5937                           
  5938                           ; Switch size 1, requested type "space"
  5939                           ; Number of cases is 5, Range of values is 0 to 4
  5940                           ; switch strategies available:
  5941                           ; Name         Instructions Cycles
  5942                           ; simple_byte           16     9 (average)
  5943                           ;	Chosen strategy is simple_byte
  5944  002720  0A00               	xorlw	0	; case 0
  5945  002722  B4D8               	btfsc	status,2,c
  5946  002724  D009               	goto	l210
  5947  002726  0A01               	xorlw	1	; case 1
  5948  002728  B4D8               	btfsc	status,2,c
  5949  00272A  D006               	goto	l210
  5950  00272C  0A03               	xorlw	3	; case 2
  5951  00272E  B4D8               	btfsc	status,2,c
  5952  002730  D003               	goto	l210
  5953  002732  0A01               	xorlw	1	; case 3
  5954  002734  A4D8               	btfss	status,2,c
  5955  002736  0A07               	xorlw	7	; case 4
  5956  002738                     l210:
  5957                           
  5958                           ;emulator.c: 97: return regF_temp;
  5959  002738  5002               	movf	getFbits@regF_temp,w,c
  5960  00273A  0012               	return	
  5961  00273C                     __end_of_getFbits:
  5962                           	opt stack 0
  5963                           tblptru	equ	0xFF8
  5964                           tblptrh	equ	0xFF7
  5965                           tblptrl	equ	0xFF6
  5966                           tablat	equ	0xFF5
  5967                           prodh	equ	0xFF4
  5968                           prodl	equ	0xFF3
  5969                           postinc0	equ	0xFEE
  5970                           wreg	equ	0xFE8
  5971                           postdec1	equ	0xFE5
  5972                           fsr1h	equ	0xFE2
  5973                           fsr1l	equ	0xFE1
  5974                           indf2	equ	0xFDF
  5975                           fsr2h	equ	0xFDA
  5976                           fsr2l	equ	0xFD9
  5977                           status	equ	0xFD8
  5978                           
  5979 ;; *************** function _initializeRegisters *****************
  5980 ;; Defined at:
  5981 ;;		line 158 in file "source/emulator.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;		None
  5984 ;; Auto vars:     Size  Location     Type
  5985 ;;		None
  5986 ;; Return value:  Size  Location     Type
  5987 ;;		None               void
  5988 ;; Registers used:
  5989 ;;		wreg, status,2
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/0
  5992 ;;		On exit  : 0/0
  5993 ;;		Unchanged: 0/0
  5994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5998 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5999 ;;Total ram usage:        1 bytes
  6000 ;; Hardware stack levels used:    1
  6001 ;; This function calls:
  6002 ;;		Nothing
  6003 ;; This function is called by:
  6004 ;;		_main
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008                           	psect	text13
  6009  00268C                     __ptext13:
  6010                           	opt stack 0
  6011  00268C                     _initializeRegisters:
  6012                           	opt stack 30
  6013                           
  6014                           ;emulator.c: 160: haltFlag = 0;
  6015                           
  6016                           ;incstack = 0
  6017  00268C  6E01               	movwf	??_initializeRegisters& (0+255),c
  6018  00268E  0E00               	movlw	0
  6019  002690  6E1D               	movwf	_haltFlag,c
  6020  002692  5001               	movf	??_initializeRegisters& (0+255),w,c
  6021                           
  6022                           ;emulator.c: 161: regA = 0;
  6023  002694  6E01               	movwf	??_initializeRegisters& (0+255),c
  6024  002696  0E00               	movlw	0
  6025  002698  6E20               	movwf	_regA,c
  6026  00269A  5001               	movf	??_initializeRegisters& (0+255),w,c
  6027                           
  6028                           ;emulator.c: 162: regB = 0;
  6029  00269C  6E01               	movwf	??_initializeRegisters& (0+255),c
  6030  00269E  0E00               	movlw	0
  6031  0026A0  6E21               	movwf	_regB,c
  6032  0026A2  5001               	movf	??_initializeRegisters& (0+255),w,c
  6033                           
  6034                           ;emulator.c: 163: regPC = 0;
  6035  0026A4  0E00               	movlw	0
  6036  0026A6  6E1C               	movwf	_regPC+1,c
  6037  0026A8  0E00               	movlw	0
  6038  0026AA  6E1B               	movwf	_regPC,c
  6039                           
  6040                           ;emulator.c: 164: regSP = 0;
  6041  0026AC  6E01               	movwf	??_initializeRegisters& (0+255),c
  6042  0026AE  0E00               	movlw	0
  6043  0026B0  6E23               	movwf	_regSP,c
  6044  0026B2  5001               	movf	??_initializeRegisters& (0+255),w,c
  6045                           
  6046                           ;emulator.c: 165: regF = 0;
  6047  0026B4  6E01               	movwf	??_initializeRegisters& (0+255),c
  6048  0026B6  0E00               	movlw	0
  6049  0026B8  6E22               	movwf	_regF,c
  6050  0026BA  5001               	movf	??_initializeRegisters& (0+255),w,c
  6051  0026BC  0012               	return	
  6052  0026BE                     __end_of_initializeRegisters:
  6053                           	opt stack 0
  6054                           tblptru	equ	0xFF8
  6055                           tblptrh	equ	0xFF7
  6056                           tblptrl	equ	0xFF6
  6057                           tablat	equ	0xFF5
  6058                           prodh	equ	0xFF4
  6059                           prodl	equ	0xFF3
  6060                           postinc0	equ	0xFEE
  6061                           wreg	equ	0xFE8
  6062                           postdec1	equ	0xFE5
  6063                           fsr1h	equ	0xFE2
  6064                           fsr1l	equ	0xFE1
  6065                           indf2	equ	0xFDF
  6066                           fsr2h	equ	0xFDA
  6067                           fsr2l	equ	0xFD9
  6068                           status	equ	0xFD8
  6069                           
  6070 ;; *************** function _initPorts *****************
  6071 ;; Defined at:
  6072 ;;		line 26 in file "source/system.c"
  6073 ;; Parameters:    Size  Location     Type
  6074 ;;		None
  6075 ;; Auto vars:     Size  Location     Type
  6076 ;;		None
  6077 ;; Return value:  Size  Location     Type
  6078 ;;		None               void
  6079 ;; Registers used:
  6080 ;;		wreg, status,2
  6081 ;; Tracked objects:
  6082 ;;		On entry : 0/0
  6083 ;;		On exit  : 0/0
  6084 ;;		Unchanged: 0/0
  6085 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6088 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6089 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6090 ;;Total ram usage:        0 bytes
  6091 ;; Hardware stack levels used:    1
  6092 ;; This function calls:
  6093 ;;		Nothing
  6094 ;; This function is called by:
  6095 ;;		_main
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           	psect	text14
  6100  0026BE                     __ptext14:
  6101                           	opt stack 0
  6102  0026BE                     _initPorts:
  6103                           	opt stack 30
  6104                           
  6105                           ;system.c: 28: TRISA = 0;
  6106                           
  6107                           ;incstack = 0
  6108  0026BE  0E00               	movlw	0
  6109  0026C0  6E92               	movwf	3986,c	;volatile
  6110                           
  6111                           ;system.c: 29: TRISC = 0;
  6112  0026C2  0E00               	movlw	0
  6113  0026C4  6E94               	movwf	3988,c	;volatile
  6114                           
  6115                           ;system.c: 30: TRISE = 0;
  6116  0026C6  0E00               	movlw	0
  6117  0026C8  6E96               	movwf	3990,c	;volatile
  6118                           
  6119                           ;system.c: 32: ANSELD = 0;
  6120  0026CA  0E00               	movlw	0
  6121  0026CC  010F               	movlb	15	; () banked
  6122  0026CE  010F               	movlb	15	; () banked
  6123  0026D0  6F3B               	movwf	59,b	;volatile
  6124                           
  6125                           ; BSR set to: 15
  6126                           ;system.c: 33: TRISDbits.RD3 = 0;
  6127  0026D2  9695               	bcf	3989,3,c	;volatile
  6128                           
  6129                           ; BSR set to: 15
  6130                           ;system.c: 34: TRISDbits.RD4 = 1;
  6131  0026D4  8895               	bsf	3989,4,c	;volatile
  6132                           
  6133                           ; BSR set to: 15
  6134                           ;system.c: 35: TRISDbits.RD5 = 0;
  6135  0026D6  9A95               	bcf	3989,5,c	;volatile
  6136                           
  6137                           ; BSR set to: 15
  6138                           ;system.c: 36: TRISDbits.RD7 = 1;
  6139  0026D8  8E95               	bsf	3989,7,c	;volatile
  6140                           
  6141                           ; BSR set to: 15
  6142                           ;system.c: 37: TRISDbits.RD6 = 0;
  6143  0026DA  9C95               	bcf	3989,6,c	;volatile
  6144                           
  6145                           ;system.c: 39: LATA = 0;
  6146  0026DC  0E00               	movlw	0
  6147  0026DE  6E89               	movwf	3977,c	;volatile
  6148                           
  6149                           ;system.c: 40: LATC = 0;
  6150  0026E0  0E00               	movlw	0
  6151  0026E2  6E8B               	movwf	3979,c	;volatile
  6152                           
  6153                           ;system.c: 41: LATD = 0;
  6154  0026E4  0E00               	movlw	0
  6155  0026E6  6E8C               	movwf	3980,c	;volatile
  6156                           
  6157                           ;system.c: 42: LATE = 0;
  6158  0026E8  0E00               	movlw	0
  6159  0026EA  6E8D               	movwf	3981,c	;volatile
  6160                           
  6161                           ; BSR set to: 15
  6162  0026EC  0012               	return	
  6163  0026EE                     __end_of_initPorts:
  6164                           	opt stack 0
  6165                           tblptru	equ	0xFF8
  6166                           tblptrh	equ	0xFF7
  6167                           tblptrl	equ	0xFF6
  6168                           tablat	equ	0xFF5
  6169                           prodh	equ	0xFF4
  6170                           prodl	equ	0xFF3
  6171                           postinc0	equ	0xFEE
  6172                           wreg	equ	0xFE8
  6173                           postdec1	equ	0xFE5
  6174                           fsr1h	equ	0xFE2
  6175                           fsr1l	equ	0xFE1
  6176                           indf2	equ	0xFDF
  6177                           fsr2h	equ	0xFDA
  6178                           fsr2l	equ	0xFD9
  6179                           status	equ	0xFD8
  6180                           
  6181 ;; *************** function _initOscillator *****************
  6182 ;; Defined at:
  6183 ;;		line 9 in file "source/system.c"
  6184 ;; Parameters:    Size  Location     Type
  6185 ;;		None
  6186 ;; Auto vars:     Size  Location     Type
  6187 ;;		None
  6188 ;; Return value:  Size  Location     Type
  6189 ;;		None               void
  6190 ;; Registers used:
  6191 ;;		wreg, status,2
  6192 ;; Tracked objects:
  6193 ;;		On entry : 0/0
  6194 ;;		On exit  : 0/0
  6195 ;;		Unchanged: 0/0
  6196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6197 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6198 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6200 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6201 ;;Total ram usage:        0 bytes
  6202 ;; Hardware stack levels used:    1
  6203 ;; This function calls:
  6204 ;;		Nothing
  6205 ;; This function is called by:
  6206 ;;		_main
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           	psect	text15
  6211  00273C                     __ptext15:
  6212                           	opt stack 0
  6213  00273C                     _initOscillator:
  6214                           	opt stack 30
  6215                           
  6216                           ;system.c: 11: OSCCONbits.IDLEN = 0;
  6217                           
  6218                           ; BSR set to: 15
  6219                           ;incstack = 0
  6220  00273C  9ED3               	bcf	4051,7,c	;volatile
  6221                           
  6222                           ;system.c: 12: OSCCONbits.IRCF = 0b111;
  6223  00273E  88D3               	bsf	4051,4,c	;volatile
  6224  002740  8AD3               	bsf	4051,5,c	;volatile
  6225  002742  8CD3               	bsf	4051,6,c	;volatile
  6226                           
  6227                           ;system.c: 13: OSCCONbits.SCS = 0b10;
  6228  002744  50D3               	movf	4051,w,c	;volatile
  6229  002746  0BFC               	andlw	-4
  6230  002748  0902               	iorlw	2
  6231  00274A  6ED3               	movwf	4051,c	;volatile
  6232                           
  6233                           ;system.c: 14: OSCCON2bits.MFIOSEL = 0;
  6234  00274C  98D2               	bcf	4050,4,c	;volatile
  6235                           
  6236                           ;system.c: 15: OSCCON2bits.SOSCGO = 0;
  6237  00274E  96D2               	bcf	4050,3,c	;volatile
  6238                           
  6239                           ;system.c: 16: OSCCON2bits.PRISD = 0;
  6240  002750  94D2               	bcf	4050,2,c	;volatile
  6241  002752                     l125:
  6242  002752  B4D3               	btfsc	4051,2,c	;volatile
  6243  002754  0012               	return	
  6244  002756  D7FD               	goto	l125
  6245  002758                     __end_of_initOscillator:
  6246                           	opt stack 0
  6247                           tblptru	equ	0xFF8
  6248                           tblptrh	equ	0xFF7
  6249                           tblptrl	equ	0xFF6
  6250                           tablat	equ	0xFF5
  6251                           prodh	equ	0xFF4
  6252                           prodl	equ	0xFF3
  6253                           postinc0	equ	0xFEE
  6254                           wreg	equ	0xFE8
  6255                           postdec1	equ	0xFE5
  6256                           fsr1h	equ	0xFE2
  6257                           fsr1l	equ	0xFE1
  6258                           indf2	equ	0xFDF
  6259                           fsr2h	equ	0xFDA
  6260                           fsr2l	equ	0xFD9
  6261                           status	equ	0xFD8
  6262                           tblptru	equ	0xFF8
  6263                           tblptrh	equ	0xFF7
  6264                           tblptrl	equ	0xFF6
  6265                           tablat	equ	0xFF5
  6266                           prodh	equ	0xFF4
  6267                           prodl	equ	0xFF3
  6268                           postinc0	equ	0xFEE
  6269                           wreg	equ	0xFE8
  6270                           postdec1	equ	0xFE5
  6271                           fsr1h	equ	0xFE2
  6272                           fsr1l	equ	0xFE1
  6273                           indf2	equ	0xFDF
  6274                           fsr2h	equ	0xFDA
  6275                           fsr2l	equ	0xFD9
  6276                           status	equ	0xFD8
  6277                           
  6278                           	psect	rparam
  6279  0000                     tblptru	equ	0xFF8
  6280                           tblptrh	equ	0xFF7
  6281                           tblptrl	equ	0xFF6
  6282                           tablat	equ	0xFF5
  6283                           prodh	equ	0xFF4
  6284                           prodl	equ	0xFF3
  6285                           postinc0	equ	0xFEE
  6286                           wreg	equ	0xFE8
  6287                           postdec1	equ	0xFE5
  6288                           fsr1h	equ	0xFE2
  6289                           fsr1l	equ	0xFE1
  6290                           indf2	equ	0xFDF
  6291                           fsr2h	equ	0xFDA
  6292                           fsr2l	equ	0xFD9
  6293                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        2048
    BSS         271
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     20      35
    BANK0           160      0       0
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_processOpcode
    _processOpcode->_setPortData
    _setPortData->_enableSerial

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    5144
                                             19 COMRAM     1     1      0
                            _dispSeg
                     _initOscillator
                          _initPorts
                _initializeRegisters
                      _processOpcode
 ---------------------------------------------------------------------------------
 (1) _processOpcode                                        9     9      0    3431
                                             10 COMRAM     9     9      0
                           _getFbits
                          _getMXbits
                        _getPortData
                  _immData_toPointer
                           _setFbits
                          _setMXbits
                        _setPortData
                     _update_immData
 ---------------------------------------------------------------------------------
 (2) _update_immData                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setPortData                                          6     5      1    2089
                                              4 COMRAM     6     5      1
                            _dispSeg
                       _enableSerial
                          _hexToChar
 ---------------------------------------------------------------------------------
 (3) _hexToChar                                            1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _enableSerial                                         4     2      2      49
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _dispSeg                                              2     1      1    1713
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _setMXbits                                            6     5      1     196
                                              0 COMRAM     6     5      1
 ---------------------------------------------------------------------------------
 (2) _setFbits                                             5     4      1     876
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (2) _immData_toPointer                                    4     2      2      15
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _getPortData                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMXbits                                            3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getFbits                                             2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initializeRegisters                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initOscillator                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dispSeg
   _initOscillator
   _initPorts
   _initializeRegisters
   _processOpcode
     _getFbits
     _getMXbits
     _getPortData
     _immData_toPointer
     _setFbits
     _setMXbits
     _setPortData
       _dispSeg
       _enableSerial
       _hexToChar
     _update_immData

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     800      37       52.6%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     14      23       1       36.8%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     123      12        0.0%
DATA                 0      0     923       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Mon Mar 17 22:12:50 2014

                          l61 2032                            l38 2604                            l71 20F0  
                          l63 2058                            l55 1FE6                            l73 2116  
                          l65 207E                            l82 21AE                            l91 2220  
                          l75 213C                            l67 20A4                            l59 200C  
                          l85 21D4                            l77 2162                            l69 20CA  
                          l94 2246                            l79 2188                            l88 21FA  
                          l97 226C                _update_immData 2484                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
                         l210 2738                           l125 2752                           l241 23D4  
                         l235 2776                           l248 242C                           l280 18D6  
                         l353 1D28                           l281 18DC                           l282 18E2  
                         l274 189A                           l291 191E                           l283 18E8  
                         l275 18A0                           l356 1D6E                           l276 18A6  
                         l294 1948                           l297 1972                           l298 197C  
                __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000                           prod 000FF3  
                         wreg 000FE8         getPortData@portNumber 0001                    _TXSTA2bits 000F72  
                __CFG_LVP$OFF 000000                          l1010 201C                          l1002 1FD0  
                        l1030 20DA                          l1022 208E                          l1014 2042  
                        l1006 1FF6                          l1050 2198                          l1042 214C  
                        l1034 2100                          l1026 20B4                          l1018 2068  
                        l1210 2354                          l1202 234C                          l1300 258C  
                        l1070 2256                          l1062 220A                          l1054 21BE  
                        l1046 2172                          l1038 2126                          l1222 2360  
                        l1214 2358                          l1206 2350                          l1232 2368  
                        l1400 1848                          l1066 2230                          l1058 21E4  
                        l1226 2364                          l1218 235C                          l1170 232C  
                        l1402 1850                          l1076 227C                          l1420 1892  
                        l1412 1872                          l1262 2668                          l1190 2340  
                        l1182 2338                          l1174 2330                          l1166 2328  
                        l1502 1A30                          l1430 18F6                          l1422 18AC  
                        l1406 185A                          l1264 2682                          l1360 23E0  
                        l1352 24E0                          l1344 24A2                          l1512 1A4A  
                        l1432 18FC                          l1424 18BE                          l1416 187E  
                        l1408 1866                          l1258 265E                          l1290 2522  
                        l1194 2344                          l1186 233C                          l1178 2334  
                        l1610 1C74                          l1602 1C34                          l1522 1A66  
                        l1442 190E                          l1426 18CA                          l1418 188A  
                        l1292 2526                          l1380 2454                          l1372 240E  
                        l1364 23EE                          l1348 24C0                          l1532 1A82  
                        l1508 1A42                          l1460 1962                          l1444 1914  
                        l1436 1902                          l1278 277A                          l1294 252A  
                        l1198 2348                          l1630 1D14                          l1622 1CDC  
                        l1614 1C96                          l1606 1C50                          l1542 1AA0  
                        l1518 1A5E                          l1470 199A                          l1454 1938  
                        l1438 1908                          l1800 2578                          l1296 252E  
                        l1288 251E                          l1376 241E                          l1368 23FE  
                        l1384 2468                          l1640 1D5A                          l1632 1D22  
                        l1624 1CEA                          l1528 1A7A                          l1472 19A8  
                        l1448 191A                          l1802 2582                          l1298 2534  
                        l1378 2432                          l1650 1DAE                          l1642 1D68  
                        l1626 1CF0                          l1618 1CB8                          l1562 1B04  
                        l1554 1AE2                          l1546 1AB2                          l1538 1A96  
                        l1482 19E6                          l1466 1984                          l1394 181E  
       setPortData@portNumber 0007                          l1660 1DEE                          l1580 1BA4  
                        l1572 1B6C                          l1548 1ABC                          l1492 1A0C  
                        l1484 19F6                          l1476 19C0                          l1396 182E  
                        l1662 1DF2                          l1654 1DB8                          l1478 19CE  
                        l1398 183E                          l1648 1DA0                          l1592 1BFC  
                        l1584 1BC4                          l1576 1B86                          l1568 1B52  
                        l1488 19FC                          l1672 1E1E                          l1666 1E0C  
                        l1658 1DE0                          l1498 1A28                          l1674 1FC4  
                        l1682 25CE                          l1668 1E1A                          l1588 1BE2  
                        l1598 1C18                          l1686 25E4                          l1688 25E8  
                        l1794 255E                          l1796 2564                          l1798 256E  
                        _LATA 000F89                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          _main 25A4                          _regA 0020  
                        _regB 0021                          _regF 0022                          fsr1h 000FE2  
                        fsr1l 000FE1                          indf2 000FDF                          fsr2l 000FD9  
               __CFG_BORV$190 000000                          prodl 000FF3                          start 0000  
               __CFG_IESO$OFF 000000        __end_of_update_immData 251A         setPortData@outputData 0005  
           getFbits@regF_temp 0002                  _BAUDCON2bits 000F70                         ?_main 0001  
                       _TRISA 000F92                         _TRISC 000F94                         _TRISE 000F96  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
             __end_of_dispSeg 2316                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000               ??_processOpcode 000B  
                       _regPC 001B                         _regMX 0019                         _regSP 0023  
          __CFG_MCLRE$EXTMCLR 000000                         _stack 0100      processOpcode@regA_temp16 0012  
              __CFG_BOREN$OFF 000000                         tablat 000FF5                         status 000FD8  
              __CFG_HFOFST$ON 000000               __initialization 2606                  __end_of_main 2606  
             ?_update_immData 0001    __end_of_virtualMemory_size 1005          __end_of_enableSerial 25A4  
                      ??_main 0014                 __activetblptr 000003          enableSerial@baudRate 0001  
          setFbits@regF_temp1 0004            setFbits@regF_temp2 0005                  ?_setPortData 0005  
                      _ANSELD 000F3B                __CFG_WDTEN$OFF 000000          __size_of_getPortData 0016  
                      _RCREG2 000F74                        _SPBRG2 000F75           getMXbits@regMX_temp 0001  
         setMXbits@regMX_temp 0004                        _TXREG2 000F73              __end_of_getFbits 273C  
              __CFG_XINST$OFF 000000                __CFG_STVREN$ON 000000  __size_of_initializeRegisters 0032  
                      clear_0 260E                        clear_1 2620                     ??_dispSeg 0002  
            __end_of_setFbits 268C                  __pdataBIGRAM 0200                  __mediumconst 0000  
               _virtualMemory 0200                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8             _immData_toPointer 2758               hexToChar@number 0001  
          ?_immData_toPointer 0001                    __accesstop 0060       __end_of__initialization 264A  
             __CFG_PBADEN$OFF 000000  setPortData@outputData_temp16 0008                 setFbits@value 0001  
         ??_immData_toPointer 0003           setMXbits@value_temp 0002                __pcstackCOMRAM 0001  
          __size_of_getMXbits 0010     __end_of_immData_toPointer 2770            __size_of_hexToChar 00B8  
     __size_of_initOscillator 001C                    __pbssBANK1 0100               __CFG_PLLCFG$OFF 000000  
          __size_of_initPorts 0030            __CFG_CCP2MX$PORTC1 000000   setPortData@outputData_temp8 000A  
       __size_of_enableSerial 008A            __size_of_setMXbits 0028            __CFG_CCP3MX$PORTB5 000000  
                   ?_getFbits 0001             __CFG_PRICLKEN$OFF 000000                       _SPBRGH2 000F76  
        __size_of_setPortData 00B6                  _enableSerial 251A             __end_of_getMXbits 2796  
                   ?_setFbits 0001              ??_update_immData 0001               __CFG_PWRTEN$OFF 000000  
                     __Hparam 0000                       __Lparam 0000             __end_of_hexToChar 23CE  
                __psmallconst 1000                       __pcinit 2606                       __ramtop 1000  
                     __ptext0 25A4                       __ptext1 1806                       __ptext2 2484  
                     __ptext3 23CE                       __ptext4 2316                       __ptext5 251A  
                     __ptext6 1FCA                       __ptext7 26EE                       __ptext8 2650  
                     __ptext9 2758                       _dispSeg 1FCA             __end_of_initPorts 26EE  
  __size_of_immData_toPointer 0018                    ??_getFbits 0001            _virtualMemory_size 1001  
           __end_of_setMXbits 2716          end_of_initialization 264A         __end_of_processOpcode 1FCA  
         _initializeRegisters 268C                    ??_setFbits 0002                       postdec1 000FE5  
                     postinc0 000FEE           getFbits@subRegister 0001          ?_initializeRegisters 0001  
         setFbits@subRegister 0003       processOpcode@carriedBit 0010                     _TRISDbits 000F95  
               ??_getPortData 0001                _initOscillator 273C                setMXbits@value 0001  
        getMXbits@subRegister 0003          setMXbits@subRegister 0006         ??_initializeRegisters 0001  
               __pidataBIGRAM 1006       processOpcode@regPC_temp 000E       processOpcode@regA_temp8 0011  
         start_initialization 2606        __end_of_initOscillator 2758           __end_of_getPortData 2786  
                 __pbssCOMRAM 0015               ?_initOscillator 0001             __size_of_getFbits 0026  
                   _getMXbits 2786             __size_of_setFbits 003C                     _hexToChar 2316  
                   _immData_1 001E                     _immData_2 001F                      ?_dispSeg 0001  
                 __smallconst 1000                     _initPorts 26BE                   _getPortData 2770  
               ??_setPortData 0006                     _setMXbits 26EE                      _LATAbits 000F89  
                    _LATCbits 000F8B                      _LATDbits 000F8C                      _LATEbits 000F8D  
                  ?_getMXbits 0001              __CFG_WDTPS$32768 000000                    ?_hexToChar 0001  
                  ?_initPorts 0001                     copy_data0 263A                    ?_setMXbits 0001  
         __end_of_setPortData 2484                      __Hrparam 0000                      __Lrparam 0000  
           __CFG_P2BMX$PORTD2 000000        __size_of_processOpcode 07C4       __size_of_update_immData 0096  
            __size_of_dispSeg 034C                      _getFbits 2716                      _haltFlag 001D  
                    __ptext10 2770                      __ptext11 2786                      __ptext12 2716  
                    __ptext13 268C                      __ptext14 26BE                      __ptext15 273C  
                 _OSCCON2bits 000FD2      immData_toPointer@pointer 0003                 __size_of_main 0062  
                    _setFbits 2650   __end_of_initializeRegisters 26BE                   ??_getMXbits 0001  
                 ??_hexToChar 0001              ??_initOscillator 0001                   ??_initPorts 0001  
                 _setPortData 23CE                 ?_enableSerial 0001                 _processOpcode 1806  
                 ??_setMXbits 0002                    _RCSTA2bits 000F71                    _OSCCONbits 000FD3  
              dispSeg@segment 0002                  wait_ms@timel 0015             __CFG_T3CMX$PORTC0 000000  
               dispSeg@letter 0001                  ?_getPortData 0001                ??_enableSerial 0003  
              ?_processOpcode 0001             __CFG_FOSC$INTIO67 000000  
