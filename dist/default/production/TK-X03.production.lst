

Microchip Technology PIC18 LITE Macro Assembler V1.21 build 54009 
                                                                                               Thu Feb 27 22:52:30 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 54009
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    23                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    24  0000                     _ANSELD	set	3899
    25  0000                     _BAUDCON2bits	set	3952
    26  0000                     _LATA	set	3977
    27  0000                     _LATAbits	set	3977
    28  0000                     _LATC	set	3979
    29  0000                     _LATCbits	set	3979
    30  0000                     _LATD	set	3980
    31  0000                     _LATDbits	set	3980
    32  0000                     _LATE	set	3981
    33  0000                     _LATEbits	set	3981
    34  0000                     _OSCCON2bits	set	4050
    35  0000                     _OSCCONbits	set	4051
    36  0000                     _RCREG2	set	3956
    37  0000                     _RCSTA2bits	set	3953
    38  0000                     _SPBRG2	set	3957
    39  0000                     _SPBRGH2	set	3958
    40  0000                     _TRISA	set	3986
    41  0000                     _TRISC	set	3988
    42  0000                     _TRISDbits	set	3989
    43  0000                     _TRISE	set	3990
    44  0000                     _TXREG2	set	3955
    45  0000                     _TXSTA2bits	set	3954
    46                           
    47 ;;
    48 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
    49 ;;
    50 ;; *************** function _main *****************
    51 ;; Defined at:
    52 ;;		line 18 in file "source/main.c"
    53 ;; Parameters:    Size  Location     Type
    54 ;;		None
    55 ;; Auto vars:     Size  Location     Type
    56 ;;		None
    57 ;; Return value:  Size  Location     Type
    58 ;;		None               void
    59 ;; Registers used:
    60 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
    61 ;; Tracked objects:
    62 ;;		On entry : 0/0
    63 ;;		On exit  : 0/0
    64 ;;		Unchanged: 0/0
    65 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
    66 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
    67 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
    68 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
    69 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
    70 ;;Total ram usage:        2 bytes
    71 ;; Hardware stack levels required when called:    3
    72 ;; This function calls:
    73 ;;		_initOscillator
    74 ;;		_initPorts
    75 ;;		_dispSeg
    76 ;;		_initializeRegisters
    77 ;;		_decode_immData
    78 ;;		_processOpcode
    79 ;; This function is called by:
    80 ;;		Startup code after reset
    81 ;; This function uses a non-reentrant model
    82 ;;
    83                           
    84                           	psect	text0
    85  00F47E                     __ptext0:
    86                           	opt stack 0
    87                           
    88                           ; #config settings
    89  00F47E                     _main:
    90                           	opt stack 28
    91                           
    92                           ;main.c: 19: initOscillator();
    93                           
    94                           ;incstack = 0
    95                           ;incstack = 0
    96  00F47E  EC53  F079         	call	_initOscillator	;wreg free
    97                           
    98                           ;main.c: 20: initPorts();
    99  00F482  EC76  F079         	call	_initPorts	;wreg free
   100                           
   101                           ;main.c: 22: dispSeg(1, '-'); dispSeg(2, '-');
   102  00F486  6E13               	movwf	??_main& (0+255),c
   103  00F488  0E01               	movlw	1
   104  00F48A  6E01               	movwf	?_dispSeg,c
   105  00F48C  5013               	movf	??_main& (0+255),w,c
   106  00F48E  6E14               	movwf	(??_main+1)& (0+255),c
   107  00F490  0E2D               	movlw	45
   108  00F492  6E02               	movwf	?_dispSeg+1,c
   109  00F494  5014               	movf	(??_main+1)& (0+255),w,c
   110  00F496  EC4E  F07B         	call	_dispSeg	;wreg free
   111  00F49A  6E13               	movwf	??_main& (0+255),c
   112  00F49C  0E02               	movlw	2
   113  00F49E  6E01               	movwf	?_dispSeg,c
   114  00F4A0  5013               	movf	??_main& (0+255),w,c
   115  00F4A2  6E14               	movwf	(??_main+1)& (0+255),c
   116  00F4A4  0E2D               	movlw	45
   117  00F4A6  6E02               	movwf	?_dispSeg+1,c
   118  00F4A8  5014               	movf	(??_main+1)& (0+255),w,c
   119  00F4AA  EC4E  F07B         	call	_dispSeg	;wreg free
   120                           
   121                           ;main.c: 24: initializeRegisters();
   122  00F4AE  EC8E  F079         	call	_initializeRegisters	;wreg free
   123  00F4B2                     l1584:
   124                           
   125                           ;main.c: 27: {
   126                           ;main.c: 28: decode_immData(immData);
   127  00F4B2  C019  F001         	movff	_immData,?_decode_immData
   128  00F4B6  C01A  F002         	movff	_immData+1,?_decode_immData+1
   129  00F4BA  EC99  F07A         	call	_decode_immData	;wreg free
   130                           
   131                           ;main.c: 30: if (regPC < 256)
   132  00F4BE  0E00               	movlw	0
   133  00F4C0  5C21               	subwf	_regPC,w,c
   134  00F4C2  0E01               	movlw	1
   135  00F4C4  5822               	subwfb	_regPC+1,w,c
   136  00F4C6  B0D8               	btfsc	status,0,c
   137  00F4C8  D005               	goto	l1590
   138                           
   139                           ;main.c: 31: {
   140                           ;main.c: 32: regPC = 256;
   141  00F4CA  0E01               	movlw	1
   142  00F4CC  6E22               	movwf	_regPC+1,c
   143  00F4CE  0E00               	movlw	0
   144  00F4D0  6E21               	movwf	_regPC,c
   145                           
   146                           ;main.c: 33: continue;
   147  00F4D2  D7EF               	goto	l1584
   148  00F4D4                     l1590:
   149                           
   150                           ;main.c: 34: }
   151                           ;main.c: 36: if (regPC > 255 && regPC < 512) processOpcode(memoryMap.readOnly[regPC], im
      +                          mData);
   152  00F4D4  0E00               	movlw	0
   153  00F4D6  5C21               	subwf	_regPC,w,c
   154  00F4D8  0E01               	movlw	1
   155  00F4DA  5822               	subwfb	_regPC+1,w,c
   156  00F4DC  A0D8               	btfss	status,0,c
   157  00F4DE  D014               	goto	l1596
   158  00F4E0  0E00               	movlw	0
   159  00F4E2  5C21               	subwf	_regPC,w,c
   160  00F4E4  0E02               	movlw	2
   161  00F4E6  5822               	subwfb	_regPC+1,w,c
   162  00F4E8  B0D8               	btfsc	status,0,c
   163  00F4EA  D00E               	goto	l1596
   164  00F4EC  0E38               	movlw	low (_memoryMap+256)
   165  00F4EE  2421               	addwf	_regPC,w,c
   166  00F4F0  6ED9               	movwf	fsr2l,c
   167  00F4F2  0E08               	movlw	high (_memoryMap+256)
   168  00F4F4  2022               	addwfc	_regPC+1,w,c
   169  00F4F6  6EDA               	movwf	fsr2h,c
   170  00F4F8  50DF               	movf	indf2,w,c
   171  00F4FA  6E0A               	movwf	?_processOpcode,c
   172  00F4FC  C019  F00B         	movff	_immData,?_processOpcode+1
   173  00F500  C01A  F00C         	movff	_immData+1,?_processOpcode+2
   174  00F504  ECDB  F07C         	call	_processOpcode	;wreg free
   175  00F508                     l1596:
   176                           
   177                           ;main.c: 37: if (regPC > 511) processOpcode(memoryMap.scratchPad[regPC], immData);
   178  00F508  0E00               	movlw	0
   179  00F50A  5C21               	subwf	_regPC,w,c
   180  00F50C  0E02               	movlw	2
   181  00F50E  5822               	subwfb	_regPC+1,w,c
   182  00F510  A0D8               	btfss	status,0,c
   183  00F512  D7CF               	goto	l1584
   184  00F514  0E38               	movlw	low (_memoryMap+512)
   185  00F516  2421               	addwf	_regPC,w,c
   186  00F518  6ED9               	movwf	fsr2l,c
   187  00F51A  0E09               	movlw	high (_memoryMap+512)
   188  00F51C  2022               	addwfc	_regPC+1,w,c
   189  00F51E  6EDA               	movwf	fsr2h,c
   190  00F520  50DF               	movf	indf2,w,c
   191  00F522  6E0A               	movwf	?_processOpcode,c
   192  00F524  C019  F00B         	movff	_immData,?_processOpcode+1
   193  00F528  C01A  F00C         	movff	_immData+1,?_processOpcode+2
   194  00F52C  ECDB  F07C         	call	_processOpcode	;wreg free
   195  00F530  D7C0               	goto	l1584
   196  00F532                     __end_of_main:
   197                           	opt stack 0
   198                           indf2	equ	0xFDF
   199                           fsr2h	equ	0xFDA
   200                           fsr2l	equ	0xFD9
   201                           status	equ	0xFD8
   202                           
   203                           	psect	cinit
   204  00F2C2                     __pcinit:
   205                           	opt stack 0
   206  00F2C2                     start_initialization:
   207                           	opt stack 0
   208  00F2C2                     __initialization:
   209                           	opt stack 0
   210                           
   211                           ; Clear objects allocated to BIGRAM (2048 bytes)
   212  00F2C2  EE07  F038         	lfsr	0,__pbssBIGRAM
   213  00F2C6  EE18 F000          	lfsr	1,2048
   214  00F2CA                     clear_0:
   215  00F2CA  6AEE               	clrf	postinc0,c
   216  00F2CC  50E5               	movf	postdec1,w,c
   217  00F2CE  50E1               	movf	fsr1l,w,c
   218  00F2D0  E1FC               	bnz	clear_0
   219  00F2D2  50E2               	movf	fsr1h,w,c
   220  00F2D4  E1FA               	bnz	clear_0
   221                           
   222                           ; Clear objects allocated to COMRAM (19 bytes)
   223  00F2D6  EE00  F015         	lfsr	0,__pbssCOMRAM
   224  00F2DA  0E13               	movlw	19
   225  00F2DC                     clear_1:
   226  00F2DC  6AEE               	clrf	postinc0,c
   227  00F2DE  06E8               	decf	wreg,f,c
   228  00F2E0  E1FD               	bnz	clear_1
   229  00F2E2                     end_of_initialization:
   230                           	opt stack 0
   231  00F2E2                     __end_of__initialization:
   232                           	opt stack 0
   233  00F2E2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   234  00F2E4  6EF8               	movwf	tblptru,c
   235  00F2E6  0100               	movlb	0
   236  00F2E8  EF3F  F07A         	goto	_main	;jump to C main() function
   237                           tblptru	equ	0xFF8
   238                           postinc0	equ	0xFEE
   239                           wreg	equ	0xFE8
   240                           postdec1	equ	0xFE5
   241                           fsr1h	equ	0xFE2
   242                           fsr1l	equ	0xFE1
   243                           indf2	equ	0xFDF
   244                           fsr2h	equ	0xFDA
   245                           fsr2l	equ	0xFD9
   246                           status	equ	0xFD8
   247                           
   248                           	psect	bssCOMRAM
   249  000015                     __pbssCOMRAM:
   250                           	opt stack 0
   251  000015                     wait_ms@timel:
   252                           	opt stack 0
   253  000015                     	ds	4
   254  000019                     _immData:
   255                           	opt stack 0
   256  000019                     	ds	2
   257  00001B                     _immData_16:
   258                           	opt stack 0
   259  00001B                     	ds	2
   260  00001D                     _regMX:
   261                           	opt stack 0
   262  00001D                     	ds	2
   263  00001F                     _regMXbits:
   264                           	opt stack 0
   265  00001F                     	ds	2
   266  000021                     _regPC:
   267                           	opt stack 0
   268  000021                     	ds	2
   269  000023                     _regA:
   270                           	opt stack 0
   271  000023                     	ds	1
   272  000024                     _regB:
   273                           	opt stack 0
   274  000024                     	ds	1
   275  000025                     _regF:
   276                           	opt stack 0
   277  000025                     	ds	1
   278  000026                     _regFbits:
   279                           	opt stack 0
   280  000026                     	ds	1
   281  000027                     _regSP:
   282                           	opt stack 0
   283  000027                     	ds	1
   284                           tblptru	equ	0xFF8
   285                           postinc0	equ	0xFEE
   286                           wreg	equ	0xFE8
   287                           postdec1	equ	0xFE5
   288                           fsr1h	equ	0xFE2
   289                           fsr1l	equ	0xFE1
   290                           indf2	equ	0xFDF
   291                           fsr2h	equ	0xFDA
   292                           fsr2l	equ	0xFD9
   293                           status	equ	0xFD8
   294                           
   295                           	psect	bssBIGRAM
   296  000738                     __pbssBIGRAM:
   297                           	opt stack 0
   298  000738                     _memoryMap:
   299                           	opt stack 0
   300  000738                     	ds	2048
   301                           tblptru	equ	0xFF8
   302                           postinc0	equ	0xFEE
   303                           wreg	equ	0xFE8
   304                           postdec1	equ	0xFE5
   305                           fsr1h	equ	0xFE2
   306                           fsr1l	equ	0xFE1
   307                           indf2	equ	0xFDF
   308                           fsr2h	equ	0xFDA
   309                           fsr2l	equ	0xFD9
   310                           status	equ	0xFD8
   311                           
   312                           	psect	cstackCOMRAM
   313  000001                     __pcstackCOMRAM:
   314                           	opt stack 0
   315  000001                     ?_dispSeg:
   316                           	opt stack 0
   317  000001                     ?_decode_immData:
   318                           	opt stack 0
   319  000001                     ?_enableSerial:
   320                           	opt stack 0
   321  000001                     ?_pointerTo_regMX:
   322                           	opt stack 0
   323  000001                     ?_getPortData:
   324                           	opt stack 0
   325  000001                     ?_immData_toPointer:
   326                           	opt stack 0
   327  000001                     dispSeg@segment:
   328                           	opt stack 0
   329  000001                     getPortData@portNumber:
   330                           	opt stack 0
   331  000001                     regMX_toPointer@pointer:
   332                           	opt stack 0
   333  000001                     pointerTo_regMX@pointer:
   334                           	opt stack 0
   335  000001                     immData_toPointer@immData:
   336                           	opt stack 0
   337  000001                     decode_immData@immData:
   338                           	opt stack 0
   339  000001                     enableSerial@baudRate:
   340                           	opt stack 0
   341                           
   342                           ; 2 bytes @ 0x0
   343  000001                     	ds	1
   344  000002                     dispSeg@letter:
   345                           	opt stack 0
   346                           
   347                           ; 1 bytes @ 0x1
   348  000002                     	ds	1
   349  000003                     ??_decode_immData:
   350  000003                     ??_enableSerial:
   351  000003                     pointerTo_regMX@pointer_lowByte:
   352                           	opt stack 0
   353  000003                     immData_toPointer@pointer:
   354                           	opt stack 0
   355                           
   356                           ; 2 bytes @ 0x2
   357  000003                     	ds	2
   358  000005                     ??_initializeRegisters:
   359  000005                     ?_setPortData:
   360                           	opt stack 0
   361  000005                     setPortData@portNumber:
   362                           	opt stack 0
   363                           
   364                           ; 1 bytes @ 0x4
   365  000005                     	ds	1
   366  000006                     setPortData@outputData:
   367                           	opt stack 0
   368                           
   369                           ; 1 bytes @ 0x5
   370  000006                     	ds	1
   371  000007                     ??_setPortData:
   372                           
   373                           ; 0 bytes @ 0x6
   374  000007                     	ds	1
   375  000008                     setPortData@outputData_temp16:
   376                           	opt stack 0
   377                           
   378                           ; 2 bytes @ 0x7
   379  000008                     	ds	2
   380  00000A                     ?_processOpcode:
   381                           	opt stack 0
   382  00000A                     processOpcode@opcode:
   383                           	opt stack 0
   384                           
   385                           ; 1 bytes @ 0x9
   386  00000A                     	ds	1
   387  00000B                     processOpcode@immData:
   388                           	opt stack 0
   389                           
   390                           ; 2 bytes @ 0xA
   391  00000B                     	ds	2
   392  00000D                     ??_processOpcode:
   393                           
   394                           ; 0 bytes @ 0xC
   395  00000D                     	ds	2
   396  00000F                     processOpcode@carriedBit:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0xE
   400  00000F                     	ds	1
   401  000010                     processOpcode@regA_temp8:
   402                           	opt stack 0
   403                           
   404                           ; 1 bytes @ 0xF
   405  000010                     	ds	1
   406  000011                     processOpcode@regA_temp16:
   407                           	opt stack 0
   408                           
   409                           ; 2 bytes @ 0x10
   410  000011                     	ds	2
   411  000013                     ??_main:
   412                           
   413                           ; 0 bytes @ 0x12
   414  000013                     	ds	2
   415                           tblptru	equ	0xFF8
   416                           postinc0	equ	0xFEE
   417                           wreg	equ	0xFE8
   418                           postdec1	equ	0xFE5
   419                           fsr1h	equ	0xFE2
   420                           fsr1l	equ	0xFE1
   421                           indf2	equ	0xFDF
   422                           fsr2h	equ	0xFDA
   423                           fsr2l	equ	0xFD9
   424                           status	equ	0xFD8
   425                           
   426 ;; *************** function _processOpcode *****************
   427 ;; Defined at:
   428 ;;		line 119 in file "source/emulator.c"
   429 ;; Parameters:    Size  Location     Type
   430 ;;  opcode          1    9[COMRAM] unsigned char 
   431 ;;  immData         2   10[COMRAM] struct immData_t
   432 ;; Auto vars:     Size  Location     Type
   433 ;;  regA_temp16     2   16[COMRAM] unsigned int 
   434 ;;  regA_temp8      1   15[COMRAM] unsigned char 
   435 ;;  carriedBit      1   14[COMRAM] unsigned char 
   436 ;; Return value:  Size  Location     Type
   437 ;;		None               void
   438 ;; Registers used:
   439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   440 ;; Tracked objects:
   441 ;;		On entry : 0/0
   442 ;;		On exit  : 0/0
   443 ;;		Unchanged: 0/0
   444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   445 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   446 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   447 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   448 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   449 ;;Total ram usage:        9 bytes
   450 ;; Hardware stack levels used:    1
   451 ;; Hardware stack levels required when called:    2
   452 ;; This function calls:
   453 ;;		_regMX_toPointer
   454 ;;		_immData_toPointer
   455 ;;		_getPortData
   456 ;;		_setPortData
   457 ;; This function is called by:
   458 ;;		_main
   459 ;; This function uses a non-reentrant model
   460 ;;
   461                           
   462                           	psect	text1
   463  00F9B6                     __ptext1:
   464                           	opt stack 0
   465  00F9B6                     _processOpcode:
   466                           	opt stack 28
   467                           
   468                           ;emulator.c: 121: uint8_t regA_temp8;
   469                           ;emulator.c: 122: uint16_t regA_temp16;
   470                           ;emulator.c: 123: uint8_t carriedBit;
   471                           ;emulator.c: 126: regMX_toPointer();
   472                           
   473                           ;incstack = 0
   474                           ;incstack = 0
   475  00F9B6  EC3B  F079         	call	_regMX_toPointer	;wreg free
   476                           
   477                           ;emulator.c: 127: immData_toPointer(immData);
   478  00F9BA  C00B  F001         	movff	processOpcode@immData,?_immData_toPointer
   479  00F9BE  C00C  F002         	movff	processOpcode@immData+1,?_immData_toPointer+1
   480  00F9C2  EC47  F079         	call	_immData_toPointer	;wreg free
   481                           
   482                           ;emulator.c: 129: switch (opcode)
   483  00F9C6  D24F               	goto	l1574
   484  00F9C8                     l1332:
   485                           
   486                           ;emulator.c: 148: regA = getPortData(regB);
   487  00F9C8  C024  F001         	movff	_regB,?_getPortData
   488  00F9CC  EC32  F079         	call	_getPortData	;wreg free
   489  00F9D0  D1A9               	goto	L9
   490  00F9D2                     l1334:
   491                           
   492                           ;emulator.c: 152: regA = getPortData(immData.arg1);
   493  00F9D2  C00B  F001         	movff	processOpcode@immData,?_getPortData
   494  00F9D6  EC32  F079         	call	_getPortData	;wreg free
   495  00F9DA  6E23               	movwf	_regA,c
   496  00F9DC  D226               	goto	L18
   497  00F9DE                     l1338:
   498                           
   499                           ;emulator.c: 158: setPortData(regB, regA);
   500  00F9DE  C024  F005         	movff	_regB,?_setPortData
   501  00F9E2  C023  F006         	movff	_regA,?_setPortData+1
   502  00F9E6  ECEF  F079         	call	_setPortData	;wreg free
   503                           
   504                           ;emulator.c: 159: break;
   505  00F9EA  D307               	goto	l1576
   506  00F9EC                     l1340:
   507                           
   508                           ;emulator.c: 162: setPortData(immData.arg1, regA);
   509  00F9EC  C00B  F005         	movff	processOpcode@immData,?_setPortData
   510  00F9F0  C023  F006         	movff	_regA,?_setPortData+1
   511  00F9F4  ECEF  F079         	call	_setPortData	;wreg free
   512  00F9F8  D218               	goto	L18
   513  00F9FA                     l1344:
   514                           
   515                           ;emulator.c: 168: setPortData(immData.arg1, immData.arg2);
   516  00F9FA  C00B  F005         	movff	processOpcode@immData,?_setPortData
   517  00F9FE  C00C  F006         	movff	processOpcode@immData+1,?_setPortData+1
   518  00FA02  ECEF  F079         	call	_setPortData	;wreg free
   519  00FA06  D100               	goto	l1462
   520  00FA08                     l1348:
   521                           
   522                           ;emulator.c: 177: regMX_toPointer();
   523  00FA08  EC3B  F079         	call	_regMX_toPointer	;wreg free
   524                           
   525                           ;emulator.c: 180: if (regMX < 256) regA = memoryMap.stack[regMX];
   526  00FA0C  0E00               	movlw	0
   527  00FA0E  5C1D               	subwf	_regMX,w,c
   528  00FA10  0E01               	movlw	1
   529  00FA12  581E               	subwfb	_regMX+1,w,c
   530  00FA14  B0D8               	btfsc	status,0,c
   531  00FA16  D008               	goto	l1354
   532  00FA18  0E38               	movlw	low _memoryMap
   533  00FA1A  241D               	addwf	_regMX,w,c
   534  00FA1C  6ED9               	movwf	fsr2l,c
   535  00FA1E  0E07               	movlw	high _memoryMap
   536  00FA20  201E               	addwfc	_regMX+1,w,c
   537  00FA22  6EDA               	movwf	fsr2h,c
   538  00FA24  50DF               	movf	indf2,w,c
   539  00FA26  6E23               	movwf	_regA,c
   540  00FA28                     l1354:
   541                           
   542                           ;emulator.c: 183: if (regMX > 255 && regMX < 512) regA = memoryMap.readOnly[regMX - 256];
   543  00FA28  0E00               	movlw	0
   544  00FA2A  5C1D               	subwf	_regMX,w,c
   545  00FA2C  0E01               	movlw	1
   546  00FA2E  581E               	subwfb	_regMX+1,w,c
   547  00FA30  A0D8               	btfss	status,0,c
   548  00FA32  D014               	goto	l1360
   549  00FA34  0E00               	movlw	0
   550  00FA36  5C1D               	subwf	_regMX,w,c
   551  00FA38  0E02               	movlw	2
   552  00FA3A  581E               	subwfb	_regMX+1,w,c
   553  00FA3C  B0D8               	btfsc	status,0,c
   554  00FA3E  D00E               	goto	l1360
   555  00FA40  0E00               	movlw	0
   556  00FA42  241D               	addwf	_regMX,w,c
   557  00FA44  6E0D               	movwf	??_processOpcode& (0+255),c
   558  00FA46  0EFF               	movlw	255
   559  00FA48  201E               	addwfc	_regMX+1,w,c
   560  00FA4A  6E0E               	movwf	(??_processOpcode+1)& (0+255),c
   561  00FA4C  0E38               	movlw	low (_memoryMap+256)
   562  00FA4E  240D               	addwf	??_processOpcode,w,c
   563  00FA50  6ED9               	movwf	fsr2l,c
   564  00FA52  0E08               	movlw	high (_memoryMap+256)
   565  00FA54  200E               	addwfc	??_processOpcode+1,w,c
   566  00FA56  6EDA               	movwf	fsr2h,c
   567  00FA58  50DF               	movf	indf2,w,c
   568  00FA5A  6E23               	movwf	_regA,c
   569  00FA5C                     l1360:
   570                           
   571                           ;emulator.c: 186: if (regMX > 511) regA = memoryMap.scratchPad[regMX - 512];
   572  00FA5C  0E00               	movlw	0
   573  00FA5E  5C1D               	subwf	_regMX,w,c
   574  00FA60  0E02               	movlw	2
   575  00FA62  581E               	subwfb	_regMX+1,w,c
   576  00FA64  A0D8               	btfss	status,0,c
   577  00FA66  D2C9               	goto	l1576
   578  00FA68  0E00               	movlw	0
   579  00FA6A  241D               	addwf	_regMX,w,c
   580  00FA6C  6E0D               	movwf	??_processOpcode& (0+255),c
   581  00FA6E  0EFE               	movlw	254
   582  00FA70  201E               	addwfc	_regMX+1,w,c
   583  00FA72  6E0E               	movwf	(??_processOpcode+1)& (0+255),c
   584  00FA74  0E38               	movlw	low (_memoryMap+512)
   585  00FA76  240D               	addwf	??_processOpcode,w,c
   586  00FA78  6ED9               	movwf	fsr2l,c
   587  00FA7A  0E09               	movlw	high (_memoryMap+512)
   588  00FA7C  200E               	addwfc	??_processOpcode+1,w,c
   589  00FA7E  D150               	goto	L20
   590  00FA80                     l261:
   591                           
   592                           ;emulator.c: 191: regA = regMXbits.MH;
   593  00FA80  C01F  F023         	movff	_regMXbits,_regA
   594                           
   595                           ;emulator.c: 192: break;
   596  00FA84  D2BA               	goto	l1576
   597  00FA86                     l262:
   598                           
   599                           ;emulator.c: 195: regA = regMXbits.ML;
   600  00FA86  C020  F023         	movff	_regMXbits+1,_regA
   601                           
   602                           ;emulator.c: 196: break;
   603  00FA8A  D2B7               	goto	l1576
   604  00FA8C                     l263:
   605                           
   606                           ;emulator.c: 199: regA = regSP;
   607  00FA8C  C027  F023         	movff	_regSP,_regA
   608                           
   609                           ;emulator.c: 200: break;
   610  00FA90  D2B4               	goto	l1576
   611  00FA92                     l264:
   612                           
   613                           ;emulator.c: 203: regA = regF;
   614  00FA92  C025  F023         	movff	_regF,_regA
   615                           
   616                           ;emulator.c: 204: break;
   617  00FA96  D2B1               	goto	l1576
   618  00FA98                     l265:
   619                           
   620                           ;emulator.c: 207: regA = regB;
   621  00FA98  C024  F023         	movff	_regB,_regA
   622                           
   623                           ;emulator.c: 208: break;
   624  00FA9C  D2AE               	goto	l1576
   625  00FA9E                     l1364:
   626                           
   627                           ;emulator.c: 211: regMX_toPointer();
   628  00FA9E  EC3B  F079         	call	_regMX_toPointer	;wreg free
   629                           
   630                           ;emulator.c: 214: if (regMX < 256) memoryMap.stack[regMX] = regA;
   631  00FAA2  0E00               	movlw	0
   632  00FAA4  5C1D               	subwf	_regMX,w,c
   633  00FAA6  0E01               	movlw	1
   634  00FAA8  581E               	subwfb	_regMX+1,w,c
   635  00FAAA  B0D8               	btfsc	status,0,c
   636  00FAAC  D008               	goto	l1370
   637  00FAAE  0E38               	movlw	low _memoryMap
   638  00FAB0  241D               	addwf	_regMX,w,c
   639  00FAB2  6ED9               	movwf	fsr2l,c
   640  00FAB4  0E07               	movlw	high _memoryMap
   641  00FAB6  201E               	addwfc	_regMX+1,w,c
   642  00FAB8  6EDA               	movwf	fsr2h,c
   643  00FABA  C023  FFDF         	movff	_regA,indf2
   644  00FABE                     l1370:
   645                           
   646                           ;emulator.c: 217: if (regMX > 255 && regMX < 512) memoryMap.readOnly[regMX - 256] = regA;
   647  00FABE  0E00               	movlw	0
   648  00FAC0  5C1D               	subwf	_regMX,w,c
   649  00FAC2  0E01               	movlw	1
   650  00FAC4  581E               	subwfb	_regMX+1,w,c
   651  00FAC6  A0D8               	btfss	status,0,c
   652  00FAC8  D014               	goto	l1376
   653  00FACA  0E00               	movlw	0
   654  00FACC  5C1D               	subwf	_regMX,w,c
   655  00FACE  0E02               	movlw	2
   656  00FAD0  581E               	subwfb	_regMX+1,w,c
   657  00FAD2  B0D8               	btfsc	status,0,c
   658  00FAD4  D00E               	goto	l1376
   659  00FAD6  0E00               	movlw	0
   660  00FAD8  241D               	addwf	_regMX,w,c
   661  00FADA  6E0D               	movwf	??_processOpcode& (0+255),c
   662  00FADC  0EFF               	movlw	255
   663  00FADE  201E               	addwfc	_regMX+1,w,c
   664  00FAE0  6E0E               	movwf	(??_processOpcode+1)& (0+255),c
   665  00FAE2  0E38               	movlw	low (_memoryMap+256)
   666  00FAE4  240D               	addwf	??_processOpcode,w,c
   667  00FAE6  6ED9               	movwf	fsr2l,c
   668  00FAE8  0E08               	movlw	high (_memoryMap+256)
   669  00FAEA  200E               	addwfc	??_processOpcode+1,w,c
   670  00FAEC  6EDA               	movwf	fsr2h,c
   671  00FAEE  C023  FFDF         	movff	_regA,indf2
   672  00FAF2                     l1376:
   673                           
   674                           ;emulator.c: 220: if (regMX > 511) memoryMap.scratchPad[regMX - 512] = regA;
   675  00FAF2  0E00               	movlw	0
   676  00FAF4  5C1D               	subwf	_regMX,w,c
   677  00FAF6  0E02               	movlw	2
   678  00FAF8  581E               	subwfb	_regMX+1,w,c
   679  00FAFA  A0D8               	btfss	status,0,c
   680  00FAFC  D27E               	goto	l1576
   681  00FAFE  0E00               	movlw	0
   682  00FB00  241D               	addwf	_regMX,w,c
   683  00FB02  6E0D               	movwf	??_processOpcode& (0+255),c
   684  00FB04  0EFE               	movlw	254
   685  00FB06  201E               	addwfc	_regMX+1,w,c
   686  00FB08  6E0E               	movwf	(??_processOpcode+1)& (0+255),c
   687  00FB0A  0E38               	movlw	low (_memoryMap+512)
   688  00FB0C  240D               	addwf	??_processOpcode,w,c
   689  00FB0E  6ED9               	movwf	fsr2l,c
   690  00FB10  0E09               	movlw	high (_memoryMap+512)
   691  00FB12  200E               	addwfc	??_processOpcode+1,w,c
   692  00FB14  6EDA               	movwf	fsr2h,c
   693  00FB16  C023  FFDF         	movff	_regA,indf2
   694  00FB1A  D26F               	goto	l1576
   695  00FB1C                     l270:
   696                           
   697                           ;emulator.c: 225: regMXbits.MH = regA;
   698  00FB1C  C023  F01F         	movff	_regA,_regMXbits
   699                           
   700                           ;emulator.c: 226: break;
   701  00FB20  D26C               	goto	l1576
   702  00FB22                     l271:
   703                           
   704                           ;emulator.c: 229: regMXbits.ML = regA;
   705  00FB22  C023  F020         	movff	_regA,_regMXbits+1
   706                           
   707                           ;emulator.c: 230: break;
   708  00FB26  D269               	goto	l1576
   709  00FB28                     l272:
   710                           
   711                           ;emulator.c: 233: regSP = regA;
   712  00FB28  C023  F027         	movff	_regA,_regSP
   713                           
   714                           ;emulator.c: 234: break;
   715  00FB2C  D266               	goto	l1576
   716  00FB2E                     l273:
   717                           
   718                           ;emulator.c: 237: regB = regA;
   719  00FB2E  C023  F024         	movff	_regA,_regB
   720                           
   721                           ;emulator.c: 238: break;
   722  00FB32  D263               	goto	l1576
   723  00FB34                     l274:
   724                           
   725                           ;emulator.c: 241: regA = immData.arg1;
   726  00FB34  C00B  F023         	movff	processOpcode@immData,_regA
   727  00FB38  D178               	goto	L18
   728  00FB3A                     l275:
   729                           
   730                           ;emulator.c: 247: regA_temp8 = regA;
   731  00FB3A  C023  F010         	movff	_regA,processOpcode@regA_temp8
   732                           
   733                           ;emulator.c: 248: regA = regB;
   734  00FB3E  C024  F023         	movff	_regB,_regA
   735                           
   736                           ;emulator.c: 249: regB = regA_temp8;
   737  00FB42  C010  F024         	movff	processOpcode@regA_temp8,_regB
   738                           
   739                           ;emulator.c: 250: break;
   740  00FB46  D259               	goto	l1576
   741  00FB48                     l1382:
   742                           
   743                           ;emulator.c: 256: regA &= regB;
   744  00FB48  5024               	movf	_regB,w,c
   745  00FB4A  1623               	andwf	_regA,f,c
   746                           
   747                           ;emulator.c: 257: break;
   748  00FB4C  D256               	goto	l1576
   749  00FB4E                     l1384:
   750                           
   751                           ;emulator.c: 261: regA = regA & regB;
   752  00FB4E  5023               	movf	_regA,w,c
   753  00FB50  1424               	andwf	_regB,w,c
   754  00FB52  D00B               	goto	L8
   755  00FB54                     l1388:
   756                           
   757                           ;emulator.c: 266: regA |= regB;
   758  00FB54  5024               	movf	_regB,w,c
   759  00FB56  1223               	iorwf	_regA,f,c
   760                           
   761                           ;emulator.c: 267: break;
   762  00FB58  D250               	goto	l1576
   763  00FB5A                     l1390:
   764                           
   765                           ;emulator.c: 271: regA = regA | regB;
   766  00FB5A  5023               	movf	_regA,w,c
   767  00FB5C  1024               	iorwf	_regB,w,c
   768  00FB5E  D005               	goto	L8
   769  00FB60                     l1394:
   770                           
   771                           ;emulator.c: 276: regA ^= regB;
   772  00FB60  5024               	movf	_regB,w,c
   773  00FB62  1A23               	xorwf	_regA,f,c
   774                           
   775                           ;emulator.c: 277: break;
   776  00FB64  D24A               	goto	l1576
   777  00FB66                     l1396:
   778                           
   779                           ;emulator.c: 281: regA = regA ^ regB;
   780  00FB66  5023               	movf	_regA,w,c
   781  00FB68  1824               	xorwf	_regB,w,c
   782  00FB6A                     L8:
   783  00FB6A  6E23               	movwf	_regA,c
   784  00FB6C                     l1400:
   785                           
   786                           ;emulator.c: 286: regA =~ regA;
   787  00FB6C  1E23               	comf	_regA,f,c
   788                           
   789                           ;emulator.c: 287: break;
   790  00FB6E  D245               	goto	l1576
   791  00FB70                     l286:
   792                           
   793                           ;emulator.c: 302: regA_temp8 = regA;
   794  00FB70  C023  F010         	movff	_regA,processOpcode@regA_temp8
   795                           
   796                           ;emulator.c: 305: if (regA_temp8 == 1) regFbits.CF = 1;
   797  00FB74  0410               	decf	processOpcode@regA_temp8,w,c
   798  00FB76  A4D8               	btfss	status,2,c
   799  00FB78  D002               	goto	l287
   800  00FB7A                     u430:
   801  00FB7A  8026               	bsf	_regFbits,0,c
   802  00FB7C  D23E               	goto	l1576
   803  00FB7E                     l287:
   804                           
   805                           ;emulator.c: 306: else regFbits.CF = 0;
   806  00FB7E  9026               	bcf	_regFbits,0,c
   807  00FB80  D23C               	goto	l1576
   808  00FB82                     l289:
   809                           
   810                           ;emulator.c: 314: carriedBit = regA;
   811  00FB82  C023  F00F         	movff	_regA,processOpcode@carriedBit
   812                           
   813                           ;emulator.c: 321: regA = regA + carriedBit;
   814  00FB86  5023               	movf	_regA,w,c
   815  00FB88  240F               	addwf	processOpcode@carriedBit,w,c
   816  00FB8A  D0CC               	goto	L9
   817  00FB8C                     l290:
   818                           
   819                           ;emulator.c: 326: carriedBit = regA;
   820  00FB8C  C023  F00F         	movff	_regA,processOpcode@carriedBit
   821                           
   822                           ;emulator.c: 333: regA += carriedBit;
   823  00FB90  500F               	movf	processOpcode@carriedBit,w,c
   824  00FB92  D10C               	goto	L10
   825  00FB94                     l1414:
   826                           
   827                           ;emulator.c: 338: if (regA == regB) regFbits.ZF = 1;
   828  00FB94  5024               	movf	_regB,w,c
   829  00FB96  6223               	cpfseq	_regA,c
   830  00FB98  D002               	goto	l292
   831  00FB9A  8626               	bsf	_regFbits,3,c
   832  00FB9C  D001               	goto	l1418
   833  00FB9E                     l292:
   834                           
   835                           ;emulator.c: 339: else regFbits.ZF = 0;
   836  00FB9E  9626               	bcf	_regFbits,3,c
   837  00FBA0                     l1418:
   838                           
   839                           ;emulator.c: 342: if (regA < regB) regFbits.LF = 1;
   840  00FBA0  5024               	movf	_regB,w,c
   841  00FBA2  6023               	cpfslt	_regA,c
   842  00FBA4  D002               	goto	l294
   843  00FBA6  8426               	bsf	_regFbits,2,c
   844  00FBA8  D001               	goto	l1422
   845  00FBAA                     l294:
   846                           
   847                           ;emulator.c: 343: else regFbits.LF = 0;
   848  00FBAA  9426               	bcf	_regFbits,2,c
   849  00FBAC                     l1422:
   850                           
   851                           ;emulator.c: 346: if (regA > regB) regFbits.GF = 1;
   852  00FBAC  5023               	movf	_regA,w,c
   853  00FBAE  6024               	cpfslt	_regB,c
   854  00FBB0  D002               	goto	l296
   855  00FBB2  8226               	bsf	_regFbits,1,c
   856  00FBB4  D222               	goto	l1576
   857  00FBB6                     l296:
   858                           
   859                           ;emulator.c: 347: else regFbits.GF = 0;
   860  00FBB6  9226               	bcf	_regFbits,1,c
   861  00FBB8  D220               	goto	l1576
   862  00FBBA                     l300:
   863                           
   864                           ;emulator.c: 365: if (regFbits.ZF == 1) regPC = regMX;
   865  00FBBA  A626               	btfss	_regFbits,3,c
   866  00FBBC  D21E               	goto	l1576
   867  00FBBE  D035               	goto	L11
   868  00FBC0                     l302:
   869                           
   870                           ;emulator.c: 369: if (regFbits.ZF == 1) regPC = immData_16;
   871  00FBC0  A626               	btfss	_regFbits,3,c
   872  00FBC2  D022               	goto	l1462
   873  00FBC4  C01B  F021         	movff	_immData_16,_regPC
   874  00FBC8  C01C  F022         	movff	_immData_16+1,_regPC+1
   875  00FBCC  D01D               	goto	l1462
   876  00FBCE                     l304:
   877                           
   878                           ;emulator.c: 375: if (regFbits.ZF == 0) regPC = regMX;
   879  00FBCE  B626               	btfsc	_regFbits,3,c
   880  00FBD0  D214               	goto	l1576
   881  00FBD2  D02B               	goto	L11
   882  00FBD4                     l306:
   883                           
   884                           ;emulator.c: 379: if (regFbits.ZF == 0) regPC = immData_16;
   885  00FBD4  B626               	btfsc	_regFbits,3,c
   886  00FBD6  D018               	goto	l1462
   887  00FBD8  D7F5               	goto	L22
   888  00FBDA                     l308:
   889                           
   890                           ;emulator.c: 385: if (regFbits.GF == 1) regPC = regMX;
   891  00FBDA  A226               	btfss	_regFbits,1,c
   892  00FBDC  D20E               	goto	l1576
   893  00FBDE  D025               	goto	L11
   894  00FBE0                     l310:
   895                           
   896                           ;emulator.c: 389: if (regFbits.GF == 1) regPC = immData_16;
   897  00FBE0  A226               	btfss	_regFbits,1,c
   898  00FBE2  D012               	goto	l1462
   899  00FBE4  D7EF               	goto	L22
   900  00FBE6                     l312:
   901                           
   902                           ;emulator.c: 395: if (regFbits.LF == 1) regPC = regMX;
   903  00FBE6  A426               	btfss	_regFbits,2,c
   904  00FBE8  D208               	goto	l1576
   905  00FBEA  D01F               	goto	L11
   906  00FBEC                     l314:
   907                           
   908                           ;emulator.c: 399: if (regFbits.LF == 1) regPC = immData_16;
   909  00FBEC  A426               	btfss	_regFbits,2,c
   910  00FBEE  D00C               	goto	l1462
   911  00FBF0  D7E9               	goto	L22
   912  00FBF2                     l316:
   913                           
   914                           ;emulator.c: 405: if (regFbits.CF == 1) regPC = regMX;
   915  00FBF2  A026               	btfss	_regFbits,0,c
   916  00FBF4  D202               	goto	l1576
   917  00FBF6  D019               	goto	L11
   918  00FBF8                     l318:
   919                           
   920                           ;emulator.c: 409: if (regFbits.CF == 1) regPC = immData_16;
   921  00FBF8  A026               	btfss	_regFbits,0,c
   922  00FBFA  D006               	goto	l1462
   923  00FBFC  D7E3               	goto	L22
   924  00FBFE                     l320:
   925                           
   926                           ;emulator.c: 415: if (regFbits.CF == 0) regPC = regMX;
   927  00FBFE  B026               	btfsc	_regFbits,0,c
   928  00FC00  D1FC               	goto	l1576
   929  00FC02  D013               	goto	L11
   930  00FC04                     l322:
   931                           
   932                           ;emulator.c: 419: if (regFbits.CF == 0) regPC = immData_16;
   933  00FC04  A026               	btfss	_regFbits,0,c
   934  00FC06  D7DE               	goto	L22
   935  00FC08                     l1462:
   936                           
   937                           ;emulator.c: 421: regPC += 2;
   938  00FC08  0E02               	movlw	2
   939  00FC0A  2621               	addwf	_regPC,f,c
   940  00FC0C  0E00               	movlw	0
   941  00FC0E  2222               	addwfc	_regPC+1,f,c
   942                           
   943                           ;emulator.c: 422: break;
   944  00FC10  D1F4               	goto	l1576
   945  00FC12                     l1464:
   946                           
   947                           ;emulator.c: 425: memoryMap.stack[regSP] = regPC;
   948  00FC12  5027               	movf	_regSP,w,c
   949  00FC14  0D01               	mullw	1
   950  00FC16  0E38               	movlw	low _memoryMap
   951  00FC18  24F3               	addwf	prodl,w,c
   952  00FC1A  6ED9               	movwf	fsr2l,c
   953  00FC1C  0E07               	movlw	high _memoryMap
   954  00FC1E  20F4               	addwfc	prodh,w,c
   955  00FC20  6EDA               	movwf	fsr2h,c
   956  00FC22  C021  FFDF         	movff	_regPC,indf2
   957                           
   958                           ;emulator.c: 426: regSP += 2;
   959  00FC26  0E02               	movlw	2
   960  00FC28  2627               	addwf	_regSP,f,c
   961  00FC2A                     L11:
   962                           
   963                           ;emulator.c: 427: regPC = regMX;
   964  00FC2A  C01D  F021         	movff	_regMX,_regPC
   965  00FC2E  C01E  F022         	movff	_regMX+1,_regPC+1
   966                           
   967                           ;emulator.c: 428: break;
   968  00FC32  D1E3               	goto	l1576
   969  00FC34                     l1470:
   970                           
   971                           ;emulator.c: 431: memoryMap.stack[regSP] = regPC;
   972  00FC34  5027               	movf	_regSP,w,c
   973  00FC36  0D01               	mullw	1
   974  00FC38  0E38               	movlw	low _memoryMap
   975  00FC3A  24F3               	addwf	prodl,w,c
   976  00FC3C  6ED9               	movwf	fsr2l,c
   977  00FC3E  0E07               	movlw	high _memoryMap
   978  00FC40  20F4               	addwfc	prodh,w,c
   979  00FC42  6EDA               	movwf	fsr2h,c
   980  00FC44  C021  FFDF         	movff	_regPC,indf2
   981                           
   982                           ;emulator.c: 432: regSP += 2;
   983  00FC48  0E02               	movlw	2
   984  00FC4A  2627               	addwf	_regSP,f,c
   985  00FC4C  D7BB               	goto	L22
   986  00FC4E                     l1478:
   987                           
   988                           ;emulator.c: 439: regSP -= 2;
   989  00FC4E  0E02               	movlw	2
   990  00FC50  5E27               	subwf	_regSP,f,c
   991                           
   992                           ;emulator.c: 440: regPC = memoryMap.stack[regSP];
   993  00FC52  5027               	movf	_regSP,w,c
   994  00FC54  0D01               	mullw	1
   995  00FC56  0E38               	movlw	low _memoryMap
   996  00FC58  24F3               	addwf	prodl,w,c
   997  00FC5A  6ED9               	movwf	fsr2l,c
   998  00FC5C  0E07               	movlw	high _memoryMap
   999  00FC5E  20F4               	addwfc	prodh,w,c
  1000  00FC60  6EDA               	movwf	fsr2h,c
  1001  00FC62  50DF               	movf	indf2,w,c
  1002  00FC64  6E0D               	movwf	??_processOpcode& (0+255),c
  1003  00FC66  500D               	movf	??_processOpcode,w,c
  1004  00FC68  6E21               	movwf	_regPC,c
  1005  00FC6A  6A22               	clrf	_regPC+1,c
  1006                           
  1007                           ;emulator.c: 441: break;
  1008  00FC6C  D1C6               	goto	l1576
  1009  00FC6E                     l1482:
  1010                           
  1011                           ;emulator.c: 447: memoryMap.stack[regSP] = regA;
  1012  00FC6E  5027               	movf	_regSP,w,c
  1013  00FC70  0D01               	mullw	1
  1014  00FC72  0E38               	movlw	low _memoryMap
  1015  00FC74  24F3               	addwf	prodl,w,c
  1016  00FC76  6ED9               	movwf	fsr2l,c
  1017  00FC78  0E07               	movlw	high _memoryMap
  1018  00FC7A  20F4               	addwfc	prodh,w,c
  1019  00FC7C  6EDA               	movwf	fsr2h,c
  1020  00FC7E  C023  FFDF         	movff	_regA,indf2
  1021  00FC82  D038               	goto	L16
  1022  00FC84                     l1486:
  1023                           
  1024                           ;emulator.c: 452: memoryMap.stack[regSP] = regB;
  1025  00FC84  5027               	movf	_regSP,w,c
  1026  00FC86  0D01               	mullw	1
  1027  00FC88  0E38               	movlw	low _memoryMap
  1028  00FC8A  24F3               	addwf	prodl,w,c
  1029  00FC8C  6ED9               	movwf	fsr2l,c
  1030  00FC8E  0E07               	movlw	high _memoryMap
  1031  00FC90  20F4               	addwfc	prodh,w,c
  1032  00FC92  6EDA               	movwf	fsr2h,c
  1033  00FC94  C024  FFDF         	movff	_regB,indf2
  1034  00FC98  D02D               	goto	L16
  1035  00FC9A                     l1490:
  1036                           
  1037                           ;emulator.c: 457: memoryMap.stack[regSP] = regMX;
  1038  00FC9A  5027               	movf	_regSP,w,c
  1039  00FC9C  0D01               	mullw	1
  1040  00FC9E  0E38               	movlw	low _memoryMap
  1041  00FCA0  24F3               	addwf	prodl,w,c
  1042  00FCA2  6ED9               	movwf	fsr2l,c
  1043  00FCA4  0E07               	movlw	high _memoryMap
  1044  00FCA6  20F4               	addwfc	prodh,w,c
  1045  00FCA8  6EDA               	movwf	fsr2h,c
  1046  00FCAA  C01D  FFDF         	movff	_regMX,indf2
  1047                           
  1048                           ;emulator.c: 458: regSP += 2;
  1049  00FCAE  0E02               	movlw	2
  1050  00FCB0  2627               	addwf	_regSP,f,c
  1051                           
  1052                           ;emulator.c: 459: break;
  1053  00FCB2  D1A3               	goto	l1576
  1054  00FCB4                     l1494:
  1055                           
  1056                           ;emulator.c: 462: memoryMap.stack[regSP] = regMXbits.MH;
  1057  00FCB4  5027               	movf	_regSP,w,c
  1058  00FCB6  0D01               	mullw	1
  1059  00FCB8  0E38               	movlw	low _memoryMap
  1060  00FCBA  24F3               	addwf	prodl,w,c
  1061  00FCBC  6ED9               	movwf	fsr2l,c
  1062  00FCBE  0E07               	movlw	high _memoryMap
  1063  00FCC0  20F4               	addwfc	prodh,w,c
  1064  00FCC2  6EDA               	movwf	fsr2h,c
  1065  00FCC4  C01F  FFDF         	movff	_regMXbits,indf2
  1066  00FCC8  D015               	goto	L16
  1067  00FCCA                     l1498:
  1068                           
  1069                           ;emulator.c: 467: memoryMap.stack[regSP] = regMXbits.ML;
  1070  00FCCA  5027               	movf	_regSP,w,c
  1071  00FCCC  0D01               	mullw	1
  1072  00FCCE  0E38               	movlw	low _memoryMap
  1073  00FCD0  24F3               	addwf	prodl,w,c
  1074  00FCD2  6ED9               	movwf	fsr2l,c
  1075  00FCD4  0E07               	movlw	high _memoryMap
  1076  00FCD6  20F4               	addwfc	prodh,w,c
  1077  00FCD8  6EDA               	movwf	fsr2h,c
  1078  00FCDA  C020  FFDF         	movff	_regMXbits+1,indf2
  1079  00FCDE  D00A               	goto	L16
  1080  00FCE0                     l1502:
  1081                           
  1082                           ;emulator.c: 472: memoryMap.stack[regSP] = regF;
  1083  00FCE0  5027               	movf	_regSP,w,c
  1084  00FCE2  0D01               	mullw	1
  1085  00FCE4  0E38               	movlw	low _memoryMap
  1086  00FCE6  24F3               	addwf	prodl,w,c
  1087  00FCE8  6ED9               	movwf	fsr2l,c
  1088  00FCEA  0E07               	movlw	high _memoryMap
  1089  00FCEC  20F4               	addwfc	prodh,w,c
  1090  00FCEE  6EDA               	movwf	fsr2h,c
  1091  00FCF0  C025  FFDF         	movff	_regF,indf2
  1092  00FCF4                     L16:
  1093                           
  1094                           ;emulator.c: 473: regSP++;
  1095  00FCF4  2A27               	incf	_regSP,f,c
  1096                           
  1097                           ;emulator.c: 474: break;
  1098  00FCF6  D181               	goto	l1576
  1099  00FCF8                     l1506:
  1100                           
  1101                           ;emulator.c: 477: memoryMap.stack[regSP] = immData.arg1;
  1102  00FCF8  5027               	movf	_regSP,w,c
  1103  00FCFA  0D01               	mullw	1
  1104  00FCFC  0E38               	movlw	low _memoryMap
  1105  00FCFE  24F3               	addwf	prodl,w,c
  1106  00FD00  6ED9               	movwf	fsr2l,c
  1107  00FD02  0E07               	movlw	high _memoryMap
  1108  00FD04  20F4               	addwfc	prodh,w,c
  1109  00FD06  6EDA               	movwf	fsr2h,c
  1110  00FD08  C00B  FFDF         	movff	processOpcode@immData,indf2
  1111                           
  1112                           ;emulator.c: 478: regSP++;
  1113  00FD0C  2A27               	incf	_regSP,f,c
  1114  00FD0E  D08D               	goto	L18
  1115  00FD10                     l1512:
  1116                           
  1117                           ;emulator.c: 484: regSP--;
  1118  00FD10  0627               	decf	_regSP,f,c
  1119                           
  1120                           ;emulator.c: 485: regA = memoryMap.stack[regSP];
  1121  00FD12  5027               	movf	_regSP,w,c
  1122  00FD14  0D01               	mullw	1
  1123  00FD16  0E38               	movlw	low _memoryMap
  1124  00FD18  24F3               	addwf	prodl,w,c
  1125  00FD1A  6ED9               	movwf	fsr2l,c
  1126  00FD1C  0E07               	movlw	high _memoryMap
  1127  00FD1E  20F4               	addwfc	prodh,w,c
  1128  00FD20                     L20:
  1129  00FD20  6EDA               	movwf	fsr2h,c
  1130  00FD22  50DF               	movf	indf2,w,c
  1131  00FD24                     L9:
  1132  00FD24  6E23               	movwf	_regA,c
  1133                           
  1134                           ;emulator.c: 486: break;
  1135  00FD26  D169               	goto	l1576
  1136  00FD28                     l1516:
  1137                           
  1138                           ;emulator.c: 489: regSP--;
  1139  00FD28  0627               	decf	_regSP,f,c
  1140                           
  1141                           ;emulator.c: 490: regB = memoryMap.stack[regSP];
  1142  00FD2A  5027               	movf	_regSP,w,c
  1143  00FD2C  0D01               	mullw	1
  1144  00FD2E  0E38               	movlw	low _memoryMap
  1145  00FD30  24F3               	addwf	prodl,w,c
  1146  00FD32  6ED9               	movwf	fsr2l,c
  1147  00FD34  0E07               	movlw	high _memoryMap
  1148  00FD36  20F4               	addwfc	prodh,w,c
  1149  00FD38  6EDA               	movwf	fsr2h,c
  1150  00FD3A  50DF               	movf	indf2,w,c
  1151  00FD3C  6E24               	movwf	_regB,c
  1152                           
  1153                           ;emulator.c: 491: break;
  1154  00FD3E  D15D               	goto	l1576
  1155  00FD40                     l1520:
  1156                           
  1157                           ;emulator.c: 494: regSP -= 2;
  1158  00FD40  0E02               	movlw	2
  1159  00FD42  5E27               	subwf	_regSP,f,c
  1160                           
  1161                           ;emulator.c: 495: regMX = memoryMap.stack[regSP];
  1162  00FD44  5027               	movf	_regSP,w,c
  1163  00FD46  0D01               	mullw	1
  1164  00FD48  0E38               	movlw	low _memoryMap
  1165  00FD4A  24F3               	addwf	prodl,w,c
  1166  00FD4C  6ED9               	movwf	fsr2l,c
  1167  00FD4E  0E07               	movlw	high _memoryMap
  1168  00FD50  20F4               	addwfc	prodh,w,c
  1169  00FD52  6EDA               	movwf	fsr2h,c
  1170  00FD54  50DF               	movf	indf2,w,c
  1171  00FD56  6E0D               	movwf	??_processOpcode& (0+255),c
  1172  00FD58  500D               	movf	??_processOpcode,w,c
  1173  00FD5A  6E1D               	movwf	_regMX,c
  1174  00FD5C  6A1E               	clrf	_regMX+1,c
  1175                           
  1176                           ;emulator.c: 496: break;
  1177  00FD5E  D14D               	goto	l1576
  1178  00FD60                     l1524:
  1179                           
  1180                           ;emulator.c: 499: regSP--;
  1181  00FD60  0627               	decf	_regSP,f,c
  1182                           
  1183                           ;emulator.c: 500: regMXbits.MH = memoryMap.stack[regSP];
  1184  00FD62  5027               	movf	_regSP,w,c
  1185  00FD64  0D01               	mullw	1
  1186  00FD66  0E38               	movlw	low _memoryMap
  1187  00FD68  24F3               	addwf	prodl,w,c
  1188  00FD6A  6ED9               	movwf	fsr2l,c
  1189  00FD6C  0E07               	movlw	high _memoryMap
  1190  00FD6E  20F4               	addwfc	prodh,w,c
  1191  00FD70  6EDA               	movwf	fsr2h,c
  1192  00FD72  50DF               	movf	indf2,w,c
  1193  00FD74  6E1F               	movwf	_regMXbits,c
  1194                           
  1195                           ;emulator.c: 501: break;
  1196  00FD76  D141               	goto	l1576
  1197  00FD78                     l1528:
  1198                           
  1199                           ;emulator.c: 504: regSP--;
  1200  00FD78  0627               	decf	_regSP,f,c
  1201                           
  1202                           ;emulator.c: 505: regMXbits.ML = memoryMap.stack[regSP];
  1203  00FD7A  5027               	movf	_regSP,w,c
  1204  00FD7C  0D01               	mullw	1
  1205  00FD7E  0E38               	movlw	low _memoryMap
  1206  00FD80  24F3               	addwf	prodl,w,c
  1207  00FD82  6ED9               	movwf	fsr2l,c
  1208  00FD84  0E07               	movlw	high _memoryMap
  1209  00FD86  20F4               	addwfc	prodh,w,c
  1210  00FD88  6EDA               	movwf	fsr2h,c
  1211  00FD8A  50DF               	movf	indf2,w,c
  1212  00FD8C  6E20               	movwf	_regMXbits+1,c
  1213                           
  1214                           ;emulator.c: 506: break;
  1215  00FD8E  D135               	goto	l1576
  1216  00FD90                     l1532:
  1217                           
  1218                           ;emulator.c: 513: regA_temp16 += regB;
  1219  00FD90  5024               	movf	_regB,w,c
  1220  00FD92  2611               	addwf	processOpcode@regA_temp16,f,c
  1221  00FD94  0E00               	movlw	0
  1222  00FD96  2212               	addwfc	processOpcode@regA_temp16+1,f,c
  1223                           
  1224                           ;emulator.c: 514: if (regA_temp16 > 255) regFbits.OF = 1;
  1225  00FD98  0E00               	movlw	0
  1226  00FD9A  5C11               	subwf	processOpcode@regA_temp16,w,c
  1227  00FD9C  0E01               	movlw	1
  1228  00FD9E  5812               	subwfb	processOpcode@regA_temp16+1,w,c
  1229  00FDA0  A0D8               	btfss	status,0,c
  1230  00FDA2  D002               	goto	l340
  1231  00FDA4  8826               	bsf	_regFbits,4,c
  1232  00FDA6  D001               	goto	l1536
  1233  00FDA8                     l340:
  1234                           
  1235                           ;emulator.c: 515: else regFbits.OF = 0;
  1236  00FDA8  9826               	bcf	_regFbits,4,c
  1237  00FDAA                     l1536:
  1238                           
  1239                           ;emulator.c: 517: regA += regB;
  1240  00FDAA  5024               	movf	_regB,w,c
  1241  00FDAC                     L10:
  1242  00FDAC  2623               	addwf	_regA,f,c
  1243                           
  1244                           ;emulator.c: 518: break;
  1245  00FDAE  D125               	goto	l1576
  1246  00FDB0                     l1538:
  1247                           
  1248                           ;emulator.c: 522: regA_temp16 += immData.arg1;
  1249  00FDB0  500B               	movf	processOpcode@immData,w,c
  1250  00FDB2  2611               	addwf	processOpcode@regA_temp16,f,c
  1251  00FDB4  0E00               	movlw	0
  1252  00FDB6  2212               	addwfc	processOpcode@regA_temp16+1,f,c
  1253                           
  1254                           ;emulator.c: 523: if (regA_temp16 > 255) regFbits.OF = 1;
  1255  00FDB8  0E00               	movlw	0
  1256  00FDBA  5C11               	subwf	processOpcode@regA_temp16,w,c
  1257  00FDBC  0E01               	movlw	1
  1258  00FDBE  5812               	subwfb	processOpcode@regA_temp16+1,w,c
  1259  00FDC0  A0D8               	btfss	status,0,c
  1260  00FDC2  D002               	goto	l343
  1261  00FDC4  8826               	bsf	_regFbits,4,c
  1262  00FDC6  D001               	goto	l1542
  1263  00FDC8                     l343:
  1264                           
  1265                           ;emulator.c: 524: else regFbits.OF = 0;
  1266  00FDC8  9826               	bcf	_regFbits,4,c
  1267  00FDCA                     l1542:
  1268                           
  1269                           ;emulator.c: 526: regA += immData.arg1;
  1270  00FDCA  500B               	movf	processOpcode@immData,w,c
  1271  00FDCC  2623               	addwf	_regA,f,c
  1272  00FDCE  D02D               	goto	L18
  1273  00FDD0                     l345:
  1274                           
  1275                           ;emulator.c: 533: regA_temp16 = regA;
  1276  00FDD0  C023  F011         	movff	_regA,processOpcode@regA_temp16
  1277  00FDD4  6A12               	clrf	processOpcode@regA_temp16+1,c
  1278                           
  1279                           ;emulator.c: 535: regA_temp16 += 255;
  1280  00FDD6  0EFF               	movlw	255
  1281  00FDD8  2611               	addwf	processOpcode@regA_temp16,f,c
  1282  00FDDA  0E00               	movlw	0
  1283  00FDDC  2212               	addwfc	processOpcode@regA_temp16+1,f,c
  1284                           
  1285                           ;emulator.c: 536: regA_temp16 -= regB;
  1286  00FDDE  5024               	movf	_regB,w,c
  1287  00FDE0  5E11               	subwf	processOpcode@regA_temp16,f,c
  1288  00FDE2  0E00               	movlw	0
  1289  00FDE4  5A12               	subwfb	processOpcode@regA_temp16+1,f,c
  1290                           
  1291                           ;emulator.c: 537: if (regA_temp16 < 255) regFbits.OF = 1;
  1292  00FDE6  0EFF               	movlw	255
  1293  00FDE8  5C11               	subwf	processOpcode@regA_temp16,w,c
  1294  00FDEA  0E00               	movlw	0
  1295  00FDEC  5812               	subwfb	processOpcode@regA_temp16+1,w,c
  1296  00FDEE  B0D8               	btfsc	status,0,c
  1297  00FDF0  D002               	goto	l346
  1298  00FDF2  8826               	bsf	_regFbits,4,c
  1299  00FDF4  D001               	goto	l1550
  1300  00FDF6                     l346:
  1301                           
  1302                           ;emulator.c: 538: else regFbits.OF = 0;
  1303  00FDF6  9826               	bcf	_regFbits,4,c
  1304  00FDF8                     l1550:
  1305                           
  1306                           ;emulator.c: 540: regA -= regB;
  1307  00FDF8  5024               	movf	_regB,w,c
  1308  00FDFA  5E23               	subwf	_regA,f,c
  1309                           
  1310                           ;emulator.c: 541: break;
  1311  00FDFC  D0FE               	goto	l1576
  1312  00FDFE                     l348:
  1313                           
  1314                           ;emulator.c: 545: regA_temp16 = regA;
  1315  00FDFE  C023  F011         	movff	_regA,processOpcode@regA_temp16
  1316  00FE02  6A12               	clrf	processOpcode@regA_temp16+1,c
  1317                           
  1318                           ;emulator.c: 547: regA_temp16 += 255;
  1319  00FE04  0EFF               	movlw	255
  1320  00FE06  2611               	addwf	processOpcode@regA_temp16,f,c
  1321  00FE08  0E00               	movlw	0
  1322  00FE0A  2212               	addwfc	processOpcode@regA_temp16+1,f,c
  1323                           
  1324                           ;emulator.c: 548: regA_temp16 -= immData.arg1;
  1325  00FE0C  500B               	movf	processOpcode@immData,w,c
  1326  00FE0E  5E11               	subwf	processOpcode@regA_temp16,f,c
  1327  00FE10  0E00               	movlw	0
  1328  00FE12  5A12               	subwfb	processOpcode@regA_temp16+1,f,c
  1329                           
  1330                           ;emulator.c: 549: if (regA_temp16 < 255) regFbits.OF = 1;
  1331  00FE14  0EFF               	movlw	255
  1332  00FE16  5C11               	subwf	processOpcode@regA_temp16,w,c
  1333  00FE18  0E00               	movlw	0
  1334  00FE1A  5812               	subwfb	processOpcode@regA_temp16+1,w,c
  1335  00FE1C  B0D8               	btfsc	status,0,c
  1336  00FE1E  D002               	goto	l349
  1337  00FE20  8826               	bsf	_regFbits,4,c
  1338  00FE22  D001               	goto	l1556
  1339  00FE24                     l349:
  1340                           
  1341                           ;emulator.c: 550: else regFbits.OF = 0;
  1342  00FE24  9826               	bcf	_regFbits,4,c
  1343  00FE26                     l1556:
  1344                           
  1345                           ;emulator.c: 552: regA -= immData.arg1;
  1346  00FE26  500B               	movf	processOpcode@immData,w,c
  1347  00FE28  5E23               	subwf	_regA,f,c
  1348  00FE2A                     L18:
  1349                           
  1350                           ;emulator.c: 554: regPC++;
  1351  00FE2A  4A21               	infsnz	_regPC,f,c
  1352  00FE2C  2A22               	incf	_regPC+1,f,c
  1353                           
  1354                           ;emulator.c: 555: break;
  1355  00FE2E  D0E5               	goto	l1576
  1356  00FE30                     l1560:
  1357                           
  1358                           ;emulator.c: 559: regA_temp16 = regA + 1;
  1359  00FE30  0E01               	movlw	1
  1360  00FE32  2423               	addwf	_regA,w,c
  1361  00FE34  6E11               	movwf	processOpcode@regA_temp16,c
  1362  00FE36  6A12               	clrf	processOpcode@regA_temp16+1,c
  1363  00FE38  0E00               	movlw	0
  1364  00FE3A  2212               	addwfc	processOpcode@regA_temp16+1,f,c
  1365                           
  1366                           ;emulator.c: 560: if (regA_temp16 > 255) regFbits.OF = 1;
  1367  00FE3C  0E00               	movlw	0
  1368  00FE3E  5C11               	subwf	processOpcode@regA_temp16,w,c
  1369  00FE40  0E01               	movlw	1
  1370  00FE42  5812               	subwfb	processOpcode@regA_temp16+1,w,c
  1371  00FE44  A0D8               	btfss	status,0,c
  1372  00FE46  D002               	goto	l352
  1373  00FE48  8826               	bsf	_regFbits,4,c
  1374  00FE4A  D001               	goto	l1564
  1375  00FE4C                     l352:
  1376                           
  1377                           ;emulator.c: 561: else regFbits.OF = 0;
  1378  00FE4C  9826               	bcf	_regFbits,4,c
  1379  00FE4E                     l1564:
  1380                           
  1381                           ;emulator.c: 563: regA++;
  1382  00FE4E  2A23               	incf	_regA,f,c
  1383                           
  1384                           ;emulator.c: 564: break;
  1385  00FE50  D0D4               	goto	l1576
  1386  00FE52                     l1566:
  1387                           
  1388                           ;emulator.c: 568: regA_temp8 = regA - 1;
  1389  00FE52  0423               	decf	_regA,w,c
  1390  00FE54  6E10               	movwf	processOpcode@regA_temp8,c
  1391                           
  1392                           ;emulator.c: 569: if (regA_temp8 == 255) regFbits.OF = 1;
  1393  00FE56  2810               	incf	processOpcode@regA_temp8,w,c
  1394  00FE58  A4D8               	btfss	status,2,c
  1395  00FE5A  D002               	goto	l355
  1396  00FE5C  8826               	bsf	_regFbits,4,c
  1397  00FE5E  D001               	goto	l1570
  1398  00FE60                     l355:
  1399                           
  1400                           ;emulator.c: 570: else regFbits.OF = 0;
  1401  00FE60  9826               	bcf	_regFbits,4,c
  1402  00FE62                     l1570:
  1403                           
  1404                           ;emulator.c: 572: regA--;
  1405  00FE62  0623               	decf	_regA,f,c
  1406                           
  1407                           ;emulator.c: 573: break;
  1408  00FE64  D0CA               	goto	l1576
  1409  00FE66                     l1574:
  1410  00FE66  500A               	movf	processOpcode@opcode,w,c
  1411                           
  1412                           ; Switch size 1, requested type "space"
  1413                           ; Number of cases is 67, Range of values is 1 to 108
  1414                           ; switch strategies available:
  1415                           ; Name         Instructions Cycles
  1416                           ; simple_byte          202   102 (average)
  1417                           ;	Chosen strategy is simple_byte
  1418  00FE68  0A01               	xorlw	1	; case 1
  1419  00FE6A  B4D8               	btfsc	status,2,c
  1420  00FE6C  D686               	goto	u430
  1421  00FE6E  0A03               	xorlw	3	; case 2
  1422  00FE70  B4D8               	btfsc	status,2,c
  1423  00FE72  D685               	goto	l287
  1424  00FE74  0A01               	xorlw	1	; case 3
  1425  00FE76  B4D8               	btfsc	status,2,c
  1426  00FE78  D5A7               	goto	l1332
  1427  00FE7A  0A07               	xorlw	7	; case 4
  1428  00FE7C  B4D8               	btfsc	status,2,c
  1429  00FE7E  D5A9               	goto	l1334
  1430  00FE80  0A01               	xorlw	1	; case 5
  1431  00FE82  B4D8               	btfsc	status,2,c
  1432  00FE84  D5AC               	goto	l1338
  1433  00FE86  0A03               	xorlw	3	; case 6
  1434  00FE88  B4D8               	btfsc	status,2,c
  1435  00FE8A  D5B0               	goto	l1340
  1436  00FE8C  0A01               	xorlw	1	; case 7
  1437  00FE8E  B4D8               	btfsc	status,2,c
  1438  00FE90  D5B4               	goto	l1344
  1439  00FE92  0A17               	xorlw	23	; case 16
  1440  00FE94  B4D8               	btfsc	status,2,c
  1441  00FE96  D5B8               	goto	l1348
  1442  00FE98  0A01               	xorlw	1	; case 17
  1443  00FE9A  B4D8               	btfsc	status,2,c
  1444  00FE9C  D5F1               	goto	l261
  1445  00FE9E  0A03               	xorlw	3	; case 18
  1446  00FEA0  B4D8               	btfsc	status,2,c
  1447  00FEA2  D5F1               	goto	l262
  1448  00FEA4  0A01               	xorlw	1	; case 19
  1449  00FEA6  B4D8               	btfsc	status,2,c
  1450  00FEA8  D5F1               	goto	l263
  1451  00FEAA  0A07               	xorlw	7	; case 20
  1452  00FEAC  B4D8               	btfsc	status,2,c
  1453  00FEAE  D5F1               	goto	l264
  1454  00FEB0  0A01               	xorlw	1	; case 21
  1455  00FEB2  B4D8               	btfsc	status,2,c
  1456  00FEB4  D5F1               	goto	l265
  1457  00FEB6  0A03               	xorlw	3	; case 22
  1458  00FEB8  B4D8               	btfsc	status,2,c
  1459  00FEBA  D5F1               	goto	l1364
  1460  00FEBC  0A01               	xorlw	1	; case 23
  1461  00FEBE  B4D8               	btfsc	status,2,c
  1462  00FEC0  D62D               	goto	l270
  1463  00FEC2  0A0F               	xorlw	15	; case 24
  1464  00FEC4  B4D8               	btfsc	status,2,c
  1465  00FEC6  D62D               	goto	l271
  1466  00FEC8  0A01               	xorlw	1	; case 25
  1467  00FECA  B4D8               	btfsc	status,2,c
  1468  00FECC  D62D               	goto	l272
  1469  00FECE  0A03               	xorlw	3	; case 26
  1470  00FED0  B4D8               	btfsc	status,2,c
  1471  00FED2  D62D               	goto	l273
  1472  00FED4  0A01               	xorlw	1	; case 27
  1473  00FED6  B4D8               	btfsc	status,2,c
  1474  00FED8  D62D               	goto	l274
  1475  00FEDA  0A07               	xorlw	7	; case 28
  1476  00FEDC  B4D8               	btfsc	status,2,c
  1477  00FEDE  D62D               	goto	l275
  1478  00FEE0  0A3C               	xorlw	60	; case 32
  1479  00FEE2  B4D8               	btfsc	status,2,c
  1480  00FEE4  D631               	goto	l1382
  1481  00FEE6  0A01               	xorlw	1	; case 33
  1482  00FEE8  B4D8               	btfsc	status,2,c
  1483  00FEEA  D631               	goto	l1384
  1484  00FEEC  0A03               	xorlw	3	; case 34
  1485  00FEEE  B4D8               	btfsc	status,2,c
  1486  00FEF0  D631               	goto	l1388
  1487  00FEF2  0A01               	xorlw	1	; case 35
  1488  00FEF4  B4D8               	btfsc	status,2,c
  1489  00FEF6  D631               	goto	l1390
  1490  00FEF8  0A07               	xorlw	7	; case 36
  1491  00FEFA  B4D8               	btfsc	status,2,c
  1492  00FEFC  D634               	goto	l1396
  1493  00FEFE  0A01               	xorlw	1	; case 37
  1494  00FF00  B4D8               	btfsc	status,2,c
  1495  00FF02  D634               	goto	l1400
  1496  00FF04  0A03               	xorlw	3	; case 38
  1497  00FF06  B4D8               	btfsc	status,2,c
  1498  00FF08  D633               	goto	l286
  1499  00FF0A  0A01               	xorlw	1	; case 39
  1500  00FF0C  B4D8               	btfsc	status,2,c
  1501  00FF0E  D630               	goto	l286
  1502  00FF10  0A0F               	xorlw	15	; case 40
  1503  00FF12  B4D8               	btfsc	status,2,c
  1504  00FF14  D636               	goto	l289
  1505  00FF16  0A01               	xorlw	1	; case 41
  1506  00FF18  B4D8               	btfsc	status,2,c
  1507  00FF1A  D638               	goto	l290
  1508  00FF1C  0A03               	xorlw	3	; case 42
  1509  00FF1E  B4D8               	btfsc	status,2,c
  1510  00FF20  D639               	goto	l1414
  1511  00FF22  0A01               	xorlw	1	; case 43
  1512  00FF24  B4D8               	btfsc	status,2,c
  1513  00FF26  D61C               	goto	l1394
  1514  00FF28  0A1B               	xorlw	27	; case 48
  1515  00FF2A  B4D8               	btfsc	status,2,c
  1516  00FF2C  D67E               	goto	L11
  1517  00FF2E  0A01               	xorlw	1	; case 49
  1518  00FF30  B4D8               	btfsc	status,2,c
  1519  00FF32  D648               	goto	L22
  1520  00FF34  0A03               	xorlw	3	; case 50
  1521  00FF36  B4D8               	btfsc	status,2,c
  1522  00FF38  D640               	goto	l300
  1523  00FF3A  0A01               	xorlw	1	; case 51
  1524  00FF3C  B4D8               	btfsc	status,2,c
  1525  00FF3E  D640               	goto	l302
  1526  00FF40  0A07               	xorlw	7	; case 52
  1527  00FF42  B4D8               	btfsc	status,2,c
  1528  00FF44  D644               	goto	l304
  1529  00FF46  0A01               	xorlw	1	; case 53
  1530  00FF48  B4D8               	btfsc	status,2,c
  1531  00FF4A  D644               	goto	l306
  1532  00FF4C  0A03               	xorlw	3	; case 54
  1533  00FF4E  B4D8               	btfsc	status,2,c
  1534  00FF50  D644               	goto	l308
  1535  00FF52  0A01               	xorlw	1	; case 55
  1536  00FF54  B4D8               	btfsc	status,2,c
  1537  00FF56  D644               	goto	l310
  1538  00FF58  0A0F               	xorlw	15	; case 56
  1539  00FF5A  B4D8               	btfsc	status,2,c
  1540  00FF5C  D644               	goto	l312
  1541  00FF5E  0A01               	xorlw	1	; case 57
  1542  00FF60  B4D8               	btfsc	status,2,c
  1543  00FF62  D644               	goto	l314
  1544  00FF64  0A03               	xorlw	3	; case 58
  1545  00FF66  B4D8               	btfsc	status,2,c
  1546  00FF68  D644               	goto	l316
  1547  00FF6A  0A01               	xorlw	1	; case 59
  1548  00FF6C  B4D8               	btfsc	status,2,c
  1549  00FF6E  D644               	goto	l318
  1550  00FF70  0A07               	xorlw	7	; case 60
  1551  00FF72  B4D8               	btfsc	status,2,c
  1552  00FF74  D644               	goto	l320
  1553  00FF76  0A01               	xorlw	1	; case 61
  1554  00FF78  B4D8               	btfsc	status,2,c
  1555  00FF7A  D644               	goto	l322
  1556  00FF7C  0A03               	xorlw	3	; case 62
  1557  00FF7E  B4D8               	btfsc	status,2,c
  1558  00FF80  D648               	goto	l1464
  1559  00FF82  0A01               	xorlw	1	; case 63
  1560  00FF84  B4D8               	btfsc	status,2,c
  1561  00FF86  D656               	goto	l1470
  1562  00FF88  0A7F               	xorlw	127	; case 64
  1563  00FF8A  B4D8               	btfsc	status,2,c
  1564  00FF8C  D660               	goto	l1478
  1565  00FF8E  0A01               	xorlw	1	; case 65
  1566  00FF90  B4D8               	btfsc	status,2,c
  1567  00FF92  D66D               	goto	l1482
  1568  00FF94  0A03               	xorlw	3	; case 66
  1569  00FF96  B4D8               	btfsc	status,2,c
  1570  00FF98  D675               	goto	l1486
  1571  00FF9A  0A01               	xorlw	1	; case 67
  1572  00FF9C  B4D8               	btfsc	status,2,c
  1573  00FF9E  D67D               	goto	l1490
  1574  00FFA0  0A07               	xorlw	7	; case 68
  1575  00FFA2  B4D8               	btfsc	status,2,c
  1576  00FFA4  D687               	goto	l1494
  1577  00FFA6  0A01               	xorlw	1	; case 69
  1578  00FFA8  B4D8               	btfsc	status,2,c
  1579  00FFAA  D68F               	goto	l1498
  1580  00FFAC  0A03               	xorlw	3	; case 70
  1581  00FFAE  B4D8               	btfsc	status,2,c
  1582  00FFB0  D697               	goto	l1502
  1583  00FFB2  0A01               	xorlw	1	; case 71
  1584  00FFB4  B4D8               	btfsc	status,2,c
  1585  00FFB6  D6A0               	goto	l1506
  1586  00FFB8  0A17               	xorlw	23	; case 80
  1587  00FFBA  B4D8               	btfsc	status,2,c
  1588  00FFBC  D6E9               	goto	l1532
  1589  00FFBE  0A01               	xorlw	1	; case 81
  1590  00FFC0  B4D8               	btfsc	status,2,c
  1591  00FFC2  D6F6               	goto	l1538
  1592  00FFC4  0A03               	xorlw	3	; case 82
  1593  00FFC6  B4D8               	btfsc	status,2,c
  1594  00FFC8  D703               	goto	l345
  1595  00FFCA  0A01               	xorlw	1	; case 83
  1596  00FFCC  B4D8               	btfsc	status,2,c
  1597  00FFCE  D717               	goto	l348
  1598  00FFD0  0A07               	xorlw	7	; case 84
  1599  00FFD2  B4D8               	btfsc	status,2,c
  1600  00FFD4  D72D               	goto	l1560
  1601  00FFD6  0A01               	xorlw	1	; case 85
  1602  00FFD8  B4D8               	btfsc	status,2,c
  1603  00FFDA  D73B               	goto	l1566
  1604  00FFDC  0A3D               	xorlw	61	; case 104
  1605  00FFDE  B4D8               	btfsc	status,2,c
  1606  00FFE0  D697               	goto	l1512
  1607  00FFE2  0A01               	xorlw	1	; case 105
  1608  00FFE4  B4D8               	btfsc	status,2,c
  1609  00FFE6  D6A0               	goto	l1516
  1610  00FFE8  0A03               	xorlw	3	; case 106
  1611  00FFEA  B4D8               	btfsc	status,2,c
  1612  00FFEC  D6A9               	goto	l1520
  1613  00FFEE  0A01               	xorlw	1	; case 107
  1614  00FFF0  B4D8               	btfsc	status,2,c
  1615  00FFF2  D6B6               	goto	l1524
  1616  00FFF4  0A07               	xorlw	7	; case 108
  1617  00FFF6  B4D8               	btfsc	status,2,c
  1618  00FFF8  D6BF               	goto	l1528
  1619  00FFFA                     l1576:
  1620                           
  1621                           ;emulator.c: 576: regPC++;
  1622  00FFFA  4A21               	infsnz	_regPC,f,c
  1623  00FFFC  2A22               	incf	_regPC+1,f,c
  1624  00FFFE  0012               	return	
  1625  010000                     __end_of_processOpcode:
  1626                           	opt stack 0
  1627                           tblptru	equ	0xFF8
  1628                           prodh	equ	0xFF4
  1629                           prodl	equ	0xFF3
  1630                           postinc0	equ	0xFEE
  1631                           wreg	equ	0xFE8
  1632                           postdec1	equ	0xFE5
  1633                           fsr1h	equ	0xFE2
  1634                           fsr1l	equ	0xFE1
  1635                           indf2	equ	0xFDF
  1636                           fsr2h	equ	0xFDA
  1637                           fsr2l	equ	0xFD9
  1638                           status	equ	0xFD8
  1639                           
  1640 ;; *************** function _setPortData *****************
  1641 ;; Defined at:
  1642 ;;		line 71 in file "source/emulator.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  portNumber      1    4[COMRAM] unsigned char 
  1645 ;;  outputData      1    5[COMRAM] unsigned char 
  1646 ;; Auto vars:     Size  Location     Type
  1647 ;;  outputData_t    2    7[COMRAM] unsigned int 
  1648 ;; Return value:  Size  Location     Type
  1649 ;;		None               void
  1650 ;; Registers used:
  1651 ;;		wreg, status,2, status,0, cstack
  1652 ;; Tracked objects:
  1653 ;;		On entry : 0/0
  1654 ;;		On exit  : 0/0
  1655 ;;		Unchanged: 0/0
  1656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1657 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1658 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1659 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1660 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1661 ;;Total ram usage:        5 bytes
  1662 ;; Hardware stack levels used:    1
  1663 ;; Hardware stack levels required when called:    1
  1664 ;; This function calls:
  1665 ;;		_dispSeg
  1666 ;;		_enableSerial
  1667 ;; This function is called by:
  1668 ;;		_processOpcode
  1669 ;; This function uses a non-reentrant model
  1670 ;;
  1671                           
  1672                           	psect	text2
  1673  00F3DE                     __ptext2:
  1674                           	opt stack 0
  1675  00F3DE                     _setPortData:
  1676                           	opt stack 28
  1677                           
  1678                           ;emulator.c: 72: uint16_t outputData_temp16;
  1679                           ;emulator.c: 73: switch (portNumber)
  1680                           
  1681                           ;incstack = 0
  1682                           ;incstack = 0
  1683  00F3DE  D041               	goto	l1328
  1684  00F3E0                     l225:
  1685                           
  1686                           ;emulator.c: 76: if (outputData == 0) outputData_temp16 = 1200;
  1687  00F3E0  6606               	tstfsz	setPortData@outputData,c
  1688  00F3E2  D004               	goto	l1304
  1689  00F3E4  0E04               	movlw	4
  1690  00F3E6  6E09               	movwf	setPortData@outputData_temp16+1,c
  1691  00F3E8  0EB0               	movlw	176
  1692  00F3EA  6E08               	movwf	setPortData@outputData_temp16,c
  1693  00F3EC                     l1304:
  1694                           
  1695                           ;emulator.c: 77: if (outputData == 1) outputData_temp16 = 2400;
  1696  00F3EC  0406               	decf	setPortData@outputData,w,c
  1697  00F3EE  A4D8               	btfss	status,2,c
  1698  00F3F0  D004               	goto	l1308
  1699  00F3F2  0E09               	movlw	9
  1700  00F3F4  6E09               	movwf	setPortData@outputData_temp16+1,c
  1701  00F3F6  0E60               	movlw	96
  1702  00F3F8  6E08               	movwf	setPortData@outputData_temp16,c
  1703  00F3FA                     l1308:
  1704                           
  1705                           ;emulator.c: 78: if (outputData == 2) outputData_temp16 = 9600;
  1706  00F3FA  5006               	movf	setPortData@outputData,w,c
  1707  00F3FC  0A02               	xorlw	2
  1708  00F3FE  A4D8               	btfss	status,2,c
  1709  00F400  D004               	goto	l1312
  1710  00F402  0E25               	movlw	37
  1711  00F404  6E09               	movwf	setPortData@outputData_temp16+1,c
  1712  00F406  0E80               	movlw	128
  1713  00F408  6E08               	movwf	setPortData@outputData_temp16,c
  1714  00F40A                     l1312:
  1715                           
  1716                           ;emulator.c: 79: if (outputData == 3) outputData_temp16 = 10417;
  1717  00F40A  5006               	movf	setPortData@outputData,w,c
  1718  00F40C  0A03               	xorlw	3
  1719  00F40E  A4D8               	btfss	status,2,c
  1720  00F410  D004               	goto	l1316
  1721  00F412  0E28               	movlw	40
  1722  00F414  6E09               	movwf	setPortData@outputData_temp16+1,c
  1723  00F416  0EB1               	movlw	177
  1724  00F418  6E08               	movwf	setPortData@outputData_temp16,c
  1725  00F41A                     l1316:
  1726                           
  1727                           ;emulator.c: 80: if (outputData == 4) outputData_temp16 = 19200;
  1728  00F41A  5006               	movf	setPortData@outputData,w,c
  1729  00F41C  0A04               	xorlw	4
  1730  00F41E  A4D8               	btfss	status,2,c
  1731  00F420  D004               	goto	l1320
  1732  00F422  0E4B               	movlw	75
  1733  00F424  6E09               	movwf	setPortData@outputData_temp16+1,c
  1734  00F426  0E00               	movlw	0
  1735  00F428  6E08               	movwf	setPortData@outputData_temp16,c
  1736  00F42A                     l1320:
  1737                           
  1738                           ;emulator.c: 81: enableSerial(outputData_temp16);
  1739  00F42A  C008  F001         	movff	setPortData@outputData_temp16,?_enableSerial
  1740  00F42E  C009  F002         	movff	setPortData@outputData_temp16+1,?_enableSerial+1
  1741  00F432  ECAA  F079         	call	_enableSerial	;wreg free
  1742                           
  1743                           ;emulator.c: 82: break;
  1744  00F436  0012               	return	
  1745  00F438                     l232:
  1746                           
  1747                           ;emulator.c: 85: TXREG2 = outputData;
  1748  00F438  C006  FF73         	movff	setPortData@outputData,3955	;volatile
  1749                           
  1750                           ;emulator.c: 86: break;
  1751  00F43C  0012               	return	
  1752  00F43E                     l1322:
  1753                           
  1754                           ;emulator.c: 89: dispSeg(1, outputData);
  1755  00F43E  6E07               	movwf	??_setPortData& (0+255),c
  1756  00F440  0E01               	movlw	1
  1757  00F442  6E01               	movwf	?_dispSeg,c
  1758  00F444  5007               	movf	??_setPortData& (0+255),w,c
  1759  00F446  C006  F002         	movff	setPortData@outputData,?_dispSeg+1
  1760  00F44A  EC4E  F07B         	call	_dispSeg	;wreg free
  1761                           
  1762                           ;emulator.c: 90: break;
  1763  00F44E  0012               	return	
  1764  00F450                     l1324:
  1765                           
  1766                           ;emulator.c: 93: dispSeg(2, outputData);
  1767  00F450  6E07               	movwf	??_setPortData& (0+255),c
  1768  00F452  0E02               	movlw	2
  1769  00F454  6E01               	movwf	?_dispSeg,c
  1770  00F456  5007               	movf	??_setPortData& (0+255),w,c
  1771  00F458  C006  F002         	movff	setPortData@outputData,?_dispSeg+1
  1772  00F45C  EC4E  F07B         	call	_dispSeg	;wreg free
  1773                           
  1774                           ;emulator.c: 94: break;
  1775  00F460  0012               	return	
  1776  00F462                     l1328:
  1777  00F462  5005               	movf	setPortData@portNumber,w,c
  1778                           
  1779                           ; Switch size 1, requested type "space"
  1780                           ; Number of cases is 4, Range of values is 0 to 4
  1781                           ; switch strategies available:
  1782                           ; Name         Instructions Cycles
  1783                           ; simple_byte           13     7 (average)
  1784                           ;	Chosen strategy is simple_byte
  1785  00F464  0A00               	xorlw	0	; case 0
  1786  00F466  B4D8               	btfsc	status,2,c
  1787  00F468  D7BB               	goto	l225
  1788  00F46A  0A01               	xorlw	1	; case 1
  1789  00F46C  B4D8               	btfsc	status,2,c
  1790  00F46E  D7E4               	goto	l232
  1791  00F470  0A02               	xorlw	2	; case 3
  1792  00F472  B4D8               	btfsc	status,2,c
  1793  00F474  D7E4               	goto	l1322
  1794  00F476  0A07               	xorlw	7	; case 4
  1795  00F478  A4D8               	btfss	status,2,c
  1796  00F47A  0012               	return	
  1797  00F47C  D7E9               	goto	l1324
  1798  00F47E                     __end_of_setPortData:
  1799                           	opt stack 0
  1800                           tblptru	equ	0xFF8
  1801                           prodh	equ	0xFF4
  1802                           prodl	equ	0xFF3
  1803                           postinc0	equ	0xFEE
  1804                           wreg	equ	0xFE8
  1805                           postdec1	equ	0xFE5
  1806                           fsr1h	equ	0xFE2
  1807                           fsr1l	equ	0xFE1
  1808                           indf2	equ	0xFDF
  1809                           fsr2h	equ	0xFDA
  1810                           fsr2l	equ	0xFD9
  1811                           status	equ	0xFD8
  1812                           
  1813 ;; *************** function _enableSerial *****************
  1814 ;; Defined at:
  1815 ;;		line 22 in file "source/serial.c"
  1816 ;; Parameters:    Size  Location     Type
  1817 ;;  baudRate        2    0[COMRAM] unsigned int 
  1818 ;; Auto vars:     Size  Location     Type
  1819 ;;		None
  1820 ;; Return value:  Size  Location     Type
  1821 ;;		None               void
  1822 ;; Registers used:
  1823 ;;		wreg, status,2, status,0
  1824 ;; Tracked objects:
  1825 ;;		On entry : 0/0
  1826 ;;		On exit  : 0/0
  1827 ;;		Unchanged: 0/0
  1828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1829 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1832 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1833 ;;Total ram usage:        4 bytes
  1834 ;; Hardware stack levels used:    1
  1835 ;; This function calls:
  1836 ;;		Nothing
  1837 ;; This function is called by:
  1838 ;;		_setPortData
  1839 ;; This function uses a non-reentrant model
  1840 ;;
  1841                           
  1842                           	psect	text3
  1843  00F354                     __ptext3:
  1844                           	opt stack 0
  1845  00F354                     _enableSerial:
  1846                           	opt stack 28
  1847                           
  1848                           ;serial.c: 23: LATDbits.LD3 = 1;
  1849                           
  1850                           ;incstack = 0
  1851                           ;incstack = 0
  1852  00F354  868C               	bsf	3980,3,c	;volatile
  1853                           
  1854                           ;serial.c: 26: switch (baudRate) {
  1855  00F356  D00B               	goto	l1248
  1856  00F358                     l1238:
  1857                           
  1858                           ;serial.c: 31: SPBRG2 = 103;
  1859  00F358  0E67               	movlw	103
  1860  00F35A  D007               	goto	L27
  1861  00F35C                     l1240:
  1862                           
  1863                           ;serial.c: 34: SPBRG2 = 25;
  1864  00F35C  0E19               	movlw	25
  1865  00F35E  D005               	goto	L27
  1866  00F360                     l1242:
  1867                           
  1868                           ;serial.c: 37: SPBRG2 = 23;
  1869  00F360  0E17               	movlw	23
  1870  00F362  D003               	goto	L27
  1871  00F364                     l1244:
  1872                           
  1873                           ;serial.c: 40: SPBRG2 = 12;
  1874  00F364  0E0C               	movlw	12
  1875  00F366  D001               	goto	L27
  1876  00F368                     l1246:
  1877                           
  1878                           ;serial.c: 43: SPBRG2 = 207;
  1879  00F368  0ECF               	movlw	207
  1880  00F36A                     L27:
  1881  00F36A  6E75               	movwf	3957,c	;volatile
  1882                           
  1883                           ;serial.c: 44: }
  1884  00F36C  D02C               	goto	l1250
  1885  00F36E                     l1248:
  1886  00F36E  C001  F003         	movff	enableSerial@baudRate,??_enableSerial
  1887  00F372  C002  F004         	movff	enableSerial@baudRate+1,??_enableSerial+1
  1888                           
  1889                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 5 sub-sw
      +                          itches
  1890                           ; Switch size 1, requested type "space"
  1891                           ; Number of cases is 5, Range of values is 4 to 75
  1892                           ; switch strategies available:
  1893                           ; Name         Instructions Cycles
  1894                           ; simple_byte           16     9 (average)
  1895                           ;	Chosen strategy is simple_byte
  1896  00F376  5004               	movf	??_enableSerial+1,w,c
  1897  00F378  0A04               	xorlw	4	; case 4
  1898  00F37A  B4D8               	btfsc	status,2,c
  1899  00F37C  D00D               	goto	l1700
  1900  00F37E  0A0D               	xorlw	13	; case 9
  1901  00F380  B4D8               	btfsc	status,2,c
  1902  00F382  D00D               	goto	l1702
  1903  00F384  0A2C               	xorlw	44	; case 37
  1904  00F386  B4D8               	btfsc	status,2,c
  1905  00F388  D00F               	goto	l1704
  1906  00F38A  0A0D               	xorlw	13	; case 40
  1907  00F38C  B4D8               	btfsc	status,2,c
  1908  00F38E  D011               	goto	l1706
  1909  00F390  0A63               	xorlw	99	; case 75
  1910  00F392  B4D8               	btfsc	status,2,c
  1911  00F394  D013               	goto	l1708
  1912  00F396  D7E8               	goto	l1246
  1913  00F398                     l1700:
  1914                           
  1915                           ; Switch size 1, requested type "space"
  1916                           ; Number of cases is 1, Range of values is 176 to 176
  1917                           ; switch strategies available:
  1918                           ; Name         Instructions Cycles
  1919                           ; simple_byte            4     3 (average)
  1920                           ;	Chosen strategy is simple_byte
  1921  00F398  5003               	movf	??_enableSerial,w,c
  1922  00F39A  0AB0               	xorlw	176	; case 176
  1923  00F39C  D7E5               	goto	l1246
  1924  00F39E                     l1702:
  1925                           
  1926                           ; Switch size 1, requested type "space"
  1927                           ; Number of cases is 1, Range of values is 96 to 96
  1928                           ; switch strategies available:
  1929                           ; Name         Instructions Cycles
  1930                           ; simple_byte            4     3 (average)
  1931                           ;	Chosen strategy is simple_byte
  1932  00F39E  5003               	movf	??_enableSerial,w,c
  1933  00F3A0  0A60               	xorlw	96	; case 96
  1934  00F3A2  B4D8               	btfsc	status,2,c
  1935  00F3A4  D7D9               	goto	l1238
  1936  00F3A6  D7E0               	goto	l1246
  1937  00F3A8                     l1704:
  1938                           
  1939                           ; Switch size 1, requested type "space"
  1940                           ; Number of cases is 1, Range of values is 128 to 128
  1941                           ; switch strategies available:
  1942                           ; Name         Instructions Cycles
  1943                           ; simple_byte            4     3 (average)
  1944                           ;	Chosen strategy is simple_byte
  1945  00F3A8  5003               	movf	??_enableSerial,w,c
  1946  00F3AA  0A80               	xorlw	128	; case 128
  1947  00F3AC  B4D8               	btfsc	status,2,c
  1948  00F3AE  D7D6               	goto	l1240
  1949  00F3B0  D7DB               	goto	l1246
  1950  00F3B2                     l1706:
  1951                           
  1952                           ; Switch size 1, requested type "space"
  1953                           ; Number of cases is 1, Range of values is 177 to 177
  1954                           ; switch strategies available:
  1955                           ; Name         Instructions Cycles
  1956                           ; simple_byte            4     3 (average)
  1957                           ;	Chosen strategy is simple_byte
  1958  00F3B2  5003               	movf	??_enableSerial,w,c
  1959  00F3B4  0AB1               	xorlw	177	; case 177
  1960  00F3B6  B4D8               	btfsc	status,2,c
  1961  00F3B8  D7D3               	goto	l1242
  1962  00F3BA  D7D6               	goto	l1246
  1963  00F3BC                     l1708:
  1964                           
  1965                           ; Switch size 1, requested type "space"
  1966                           ; Number of cases is 1, Range of values is 0 to 0
  1967                           ; switch strategies available:
  1968                           ; Name         Instructions Cycles
  1969                           ; simple_byte            4     3 (average)
  1970                           ;	Chosen strategy is simple_byte
  1971  00F3BC  5003               	movf	??_enableSerial,w,c
  1972  00F3BE  0A00               	xorlw	0	; case 0
  1973  00F3C0  B4D8               	btfsc	status,2,c
  1974  00F3C2  D7D0               	goto	l1244
  1975  00F3C4  D7D1               	goto	l1246
  1976  00F3C6                     l1250:
  1977                           
  1978                           ;serial.c: 46: SPBRGH2 = 0;
  1979  00F3C6  0E00               	movlw	0
  1980  00F3C8  6E76               	movwf	3958,c	;volatile
  1981                           
  1982                           ;serial.c: 47: TXSTA2bits.BRGH = 0;
  1983  00F3CA  9472               	bcf	3954,2,c	;volatile
  1984                           
  1985                           ;serial.c: 48: BAUDCON2bits.BRG16 = 0;
  1986  00F3CC  9670               	bcf	3952,3,c	;volatile
  1987                           
  1988                           ;serial.c: 50: TXSTA2bits.TX9 = 0;
  1989  00F3CE  9C72               	bcf	3954,6,c	;volatile
  1990                           
  1991                           ;serial.c: 51: RCSTA2bits.RX9 = 0;
  1992  00F3D0  9C71               	bcf	3953,6,c	;volatile
  1993                           
  1994                           ;serial.c: 53: TXSTA2bits.SYNC = 0;
  1995  00F3D2  9872               	bcf	3954,4,c	;volatile
  1996                           
  1997                           ;serial.c: 54: BAUDCON2bits.DTRXP = 0;
  1998  00F3D4  9A70               	bcf	3952,5,c	;volatile
  1999                           
  2000                           ;serial.c: 56: TXSTA2bits.TXEN = 1;
  2001  00F3D6  8A72               	bsf	3954,5,c	;volatile
  2002                           
  2003                           ;serial.c: 57: RCSTA2bits.CREN = 1;
  2004  00F3D8  8871               	bsf	3953,4,c	;volatile
  2005                           
  2006                           ;serial.c: 59: RCSTA2bits.SPEN = 1;
  2007  00F3DA  8E71               	bsf	3953,7,c	;volatile
  2008  00F3DC  0012               	return	
  2009  00F3DE                     __end_of_enableSerial:
  2010                           	opt stack 0
  2011                           tblptru	equ	0xFF8
  2012                           prodh	equ	0xFF4
  2013                           prodl	equ	0xFF3
  2014                           postinc0	equ	0xFEE
  2015                           wreg	equ	0xFE8
  2016                           postdec1	equ	0xFE5
  2017                           fsr1h	equ	0xFE2
  2018                           fsr1l	equ	0xFE1
  2019                           indf2	equ	0xFDF
  2020                           fsr2h	equ	0xFDA
  2021                           fsr2l	equ	0xFD9
  2022                           status	equ	0xFD8
  2023                           
  2024 ;; *************** function _dispSeg *****************
  2025 ;; Defined at:
  2026 ;;		line 14 in file "source/segment.c"
  2027 ;; Parameters:    Size  Location     Type
  2028 ;;  segment         1    0[COMRAM] unsigned char 
  2029 ;;  letter          1    1[COMRAM] unsigned char 
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;		None
  2032 ;; Return value:  Size  Location     Type
  2033 ;;		None               void
  2034 ;; Registers used:
  2035 ;;		wreg, status,2, status,0
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2041 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;Total ram usage:        2 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; This function calls:
  2048 ;;		Nothing
  2049 ;; This function is called by:
  2050 ;;		_main
  2051 ;;		_setPortData
  2052 ;;		_cycleSegDisplays
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           	psect	text4
  2057  00F69C                     __ptext4:
  2058                           	opt stack 0
  2059  00F69C                     _dispSeg:
  2060                           	opt stack 28
  2061                           
  2062                           ;segment.c: 15: switch (letter) {
  2063                           
  2064                           ;incstack = 0
  2065                           ;incstack = 0
  2066  00F69C  D154               	goto	l1088
  2067  00F69E                     l1014:
  2068                           
  2069                           ;segment.c: 17: if (segment == 1) {
  2070  00F69E  0401               	decf	dispSeg@segment,w,c
  2071  00F6A0  A4D8               	btfss	status,2,c
  2072  00F6A2  D007               	goto	l76
  2073                           
  2074                           ;segment.c: 18: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = LATAbits.LA1 = 0;
  2075  00F6A4  9289               	bcf	3977,1,c	;volatile
  2076  00F6A6  9089               	bcf	3977,0,c	;volatile
  2077  00F6A8  908D               	bcf	3981,0,c	;volatile
  2078  00F6AA  9A89               	bcf	3977,5,c	;volatile
  2079  00F6AC  9889               	bcf	3977,4,c	;volatile
  2080  00F6AE  9689               	bcf	3977,3,c	;volatile
  2081  00F6B0  9489               	bcf	3977,2,c	;volatile
  2082  00F6B2                     l76:
  2083                           
  2084                           ;segment.c: 19: }
  2085                           ;segment.c: 20: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = LATEbits.LE2 = 0;
  2086  00F6B2  948D               	bcf	3981,2,c	;volatile
  2087  00F6B4  928D               	bcf	3981,1,c	;volatile
  2088  00F6B6  928B               	bcf	3979,1,c	;volatile
  2089  00F6B8  908B               	bcf	3979,0,c	;volatile
  2090  00F6BA  948B               	bcf	3979,2,c	;volatile
  2091  00F6BC  9C89               	bcf	3977,6,c	;volatile
  2092  00F6BE  9E89               	bcf	3977,7,c	;volatile
  2093                           
  2094                           ;segment.c: 21: break;
  2095  00F6C0  0012               	return	
  2096  00F6C2                     l1018:
  2097                           
  2098                           ;segment.c: 23: if (segment == 1) {
  2099  00F6C2  0401               	decf	dispSeg@segment,w,c
  2100  00F6C4  A4D8               	btfss	status,2,c
  2101  00F6C6  D007               	goto	l79
  2102                           
  2103                           ;segment.c: 24: LATAbits.LA1 = 1;
  2104  00F6C8  8289               	bsf	3977,1,c	;volatile
  2105                           
  2106                           ;segment.c: 25: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = 0;
  2107  00F6CA  9089               	bcf	3977,0,c	;volatile
  2108  00F6CC  908D               	bcf	3981,0,c	;volatile
  2109  00F6CE  9A89               	bcf	3977,5,c	;volatile
  2110  00F6D0  9889               	bcf	3977,4,c	;volatile
  2111  00F6D2  9689               	bcf	3977,3,c	;volatile
  2112  00F6D4  9489               	bcf	3977,2,c	;volatile
  2113  00F6D6                     l79:
  2114                           
  2115                           ;segment.c: 26: }
  2116                           ;segment.c: 27: LATEbits.LE2 = 1;
  2117  00F6D6  848D               	bsf	3981,2,c	;volatile
  2118                           
  2119                           ;segment.c: 28: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = 0;
  2120  00F6D8  928D               	bcf	3981,1,c	;volatile
  2121  00F6DA  928B               	bcf	3979,1,c	;volatile
  2122  00F6DC  908B               	bcf	3979,0,c	;volatile
  2123  00F6DE  948B               	bcf	3979,2,c	;volatile
  2124  00F6E0  9C89               	bcf	3977,6,c	;volatile
  2125  00F6E2  9E89               	bcf	3977,7,c	;volatile
  2126                           
  2127                           ;segment.c: 29: break;
  2128  00F6E4  0012               	return	
  2129  00F6E6                     l1022:
  2130                           
  2131                           ;segment.c: 31: if (segment == 1) {
  2132  00F6E6  0401               	decf	dispSeg@segment,w,c
  2133  00F6E8  A4D8               	btfss	status,2,c
  2134  00F6EA  D008               	goto	l81
  2135                           
  2136                           ;segment.c: 32: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = 1;
  2137  00F6EC  8089               	bsf	3977,0,c	;volatile
  2138  00F6EE  808D               	bsf	3981,0,c	;volatile
  2139  00F6F0  8A89               	bsf	3977,5,c	;volatile
  2140  00F6F2  8889               	bsf	3977,4,c	;volatile
  2141  00F6F4  8689               	bsf	3977,3,c	;volatile
  2142  00F6F6  8489               	bsf	3977,2,c	;volatile
  2143                           
  2144                           ;segment.c: 33: LATAbits.LA1 = 0;
  2145  00F6F8  9289               	bcf	3977,1,c	;volatile
  2146                           
  2147                           ;segment.c: 34: return;
  2148  00F6FA  0012               	return	
  2149  00F6FC                     l81:
  2150                           
  2151                           ;segment.c: 35: }
  2152                           ;segment.c: 36: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = 1;
  2153  00F6FC  828D               	bsf	3981,1,c	;volatile
  2154  00F6FE  828B               	bsf	3979,1,c	;volatile
  2155  00F700  808B               	bsf	3979,0,c	;volatile
  2156  00F702  848B               	bsf	3979,2,c	;volatile
  2157  00F704  8C89               	bsf	3977,6,c	;volatile
  2158  00F706  8E89               	bsf	3977,7,c	;volatile
  2159                           
  2160                           ;segment.c: 37: LATEbits.LE2 = 0;
  2161  00F708  948D               	bcf	3981,2,c	;volatile
  2162                           
  2163                           ;segment.c: 38: break;
  2164  00F70A  0012               	return	
  2165  00F70C                     l1026:
  2166                           
  2167                           ;segment.c: 40: if (segment == 1) {
  2168  00F70C  0401               	decf	dispSeg@segment,w,c
  2169  00F70E  A4D8               	btfss	status,2,c
  2170  00F710  D008               	goto	l84
  2171                           
  2172                           ;segment.c: 41: LATAbits.LA3 = LATAbits.LA4 = 1;
  2173  00F712  8889               	bsf	3977,4,c	;volatile
  2174  00F714  8689               	bsf	3977,3,c	;volatile
  2175                           
  2176                           ;segment.c: 42: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1
      +                           = 0;
  2177  00F716  9289               	bcf	3977,1,c	;volatile
  2178  00F718  9089               	bcf	3977,0,c	;volatile
  2179  00F71A  908D               	bcf	3981,0,c	;volatile
  2180  00F71C  9A89               	bcf	3977,5,c	;volatile
  2181  00F71E  9489               	bcf	3977,2,c	;volatile
  2182                           
  2183                           ;segment.c: 43: return;
  2184  00F720  0012               	return	
  2185  00F722                     l84:
  2186                           
  2187                           ;segment.c: 44: }
  2188                           ;segment.c: 45: LATAbits.LA6 = LATCbits.LC2 = 1;
  2189  00F722  848B               	bsf	3979,2,c	;volatile
  2190  00F724  8C89               	bsf	3977,6,c	;volatile
  2191                           
  2192                           ;segment.c: 46: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2
      +                           = 0;
  2193  00F726  948D               	bcf	3981,2,c	;volatile
  2194  00F728  928D               	bcf	3981,1,c	;volatile
  2195  00F72A  928B               	bcf	3979,1,c	;volatile
  2196  00F72C  908B               	bcf	3979,0,c	;volatile
  2197  00F72E  9E89               	bcf	3977,7,c	;volatile
  2198                           
  2199                           ;segment.c: 47: break;
  2200  00F730  0012               	return	
  2201  00F732                     l1030:
  2202                           
  2203                           ;segment.c: 49: if (segment == 1) {
  2204  00F732  0401               	decf	dispSeg@segment,w,c
  2205  00F734  A4D8               	btfss	status,2,c
  2206  00F736  D008               	goto	l86
  2207                           
  2208                           ;segment.c: 50: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA1 = LATEbits.LE0 = LATAbits.LA5
      +                           = 1;
  2209  00F738  8A89               	bsf	3977,5,c	;volatile
  2210  00F73A  808D               	bsf	3981,0,c	;volatile
  2211  00F73C  8289               	bsf	3977,1,c	;volatile
  2212  00F73E  8689               	bsf	3977,3,c	;volatile
  2213  00F740  8489               	bsf	3977,2,c	;volatile
  2214                           
  2215                           ;segment.c: 51: LATAbits.LA4 = LATAbits.LA0 = 0;
  2216  00F742  9089               	bcf	3977,0,c	;volatile
  2217  00F744  9889               	bcf	3977,4,c	;volatile
  2218                           
  2219                           ;segment.c: 52: return;
  2220  00F746  0012               	return	
  2221  00F748                     l86:
  2222                           
  2223                           ;segment.c: 53: }
  2224                           ;segment.c: 54: LATAbits.LA7 = LATAbits.LA6 = LATEbits.LE2 = LATCbits.LC1 = LATCbits.LC0
      +                           = 1;
  2225  00F748  808B               	bsf	3979,0,c	;volatile
  2226  00F74A  828B               	bsf	3979,1,c	;volatile
  2227  00F74C  848D               	bsf	3981,2,c	;volatile
  2228  00F74E  8C89               	bsf	3977,6,c	;volatile
  2229  00F750  8E89               	bsf	3977,7,c	;volatile
  2230                           
  2231                           ;segment.c: 55: LATCbits.LC2 = LATEbits.LE1 = 0;
  2232  00F752  928D               	bcf	3981,1,c	;volatile
  2233  00F754  948B               	bcf	3979,2,c	;volatile
  2234                           
  2235                           ;segment.c: 56: break;
  2236  00F756  0012               	return	
  2237  00F758                     l1034:
  2238                           
  2239                           ;segment.c: 58: if (segment == 1) {
  2240  00F758  0401               	decf	dispSeg@segment,w,c
  2241  00F75A  A4D8               	btfss	status,2,c
  2242  00F75C  D008               	goto	l88
  2243                           
  2244                           ;segment.c: 59: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = 1;
  2245  00F75E  8A89               	bsf	3977,5,c	;volatile
  2246  00F760  8889               	bsf	3977,4,c	;volatile
  2247  00F762  8289               	bsf	3977,1,c	;volatile
  2248  00F764  8689               	bsf	3977,3,c	;volatile
  2249  00F766  8489               	bsf	3977,2,c	;volatile
  2250                           
  2251                           ;segment.c: 60: LATEbits.LE0 = LATAbits.LA0 = 0;
  2252  00F768  9089               	bcf	3977,0,c	;volatile
  2253  00F76A  908D               	bcf	3981,0,c	;volatile
  2254                           
  2255                           ;segment.c: 61: return;
  2256  00F76C  0012               	return	
  2257  00F76E                     l88:
  2258                           
  2259                           ;segment.c: 62: }
  2260                           ;segment.c: 63: LATAbits.LA7 = LATAbits.LA6 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = 1;
  2261  00F76E  808B               	bsf	3979,0,c	;volatile
  2262  00F770  848B               	bsf	3979,2,c	;volatile
  2263  00F772  848D               	bsf	3981,2,c	;volatile
  2264  00F774  8C89               	bsf	3977,6,c	;volatile
  2265  00F776  8E89               	bsf	3977,7,c	;volatile
  2266                           
  2267                           ;segment.c: 64: LATCbits.LC1 = LATEbits.LE1 = 0;
  2268  00F778  928D               	bcf	3981,1,c	;volatile
  2269  00F77A  928B               	bcf	3979,1,c	;volatile
  2270                           
  2271                           ;segment.c: 65: break;
  2272  00F77C  0012               	return	
  2273  00F77E                     l1038:
  2274                           
  2275                           ;segment.c: 67: if (segment == 1) {
  2276  00F77E  0401               	decf	dispSeg@segment,w,c
  2277  00F780  A4D8               	btfss	status,2,c
  2278  00F782  D008               	goto	l90
  2279                           
  2280                           ;segment.c: 68: LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA3 = LATAbits.LA4 = 1;
  2281  00F784  8889               	bsf	3977,4,c	;volatile
  2282  00F786  8689               	bsf	3977,3,c	;volatile
  2283  00F788  8289               	bsf	3977,1,c	;volatile
  2284  00F78A  8089               	bsf	3977,0,c	;volatile
  2285                           
  2286                           ;segment.c: 69: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = 0;
  2287  00F78C  908D               	bcf	3981,0,c	;volatile
  2288  00F78E  9A89               	bcf	3977,5,c	;volatile
  2289  00F790  9489               	bcf	3977,2,c	;volatile
  2290                           
  2291                           ;segment.c: 70: return;
  2292  00F792  0012               	return	
  2293  00F794                     l90:
  2294                           
  2295                           ;segment.c: 71: }
  2296                           ;segment.c: 72: LATEbits.LE1 = LATEbits.LE2 = LATAbits.LA6 = LATCbits.LC2 = 1;
  2297  00F794  848B               	bsf	3979,2,c	;volatile
  2298  00F796  8C89               	bsf	3977,6,c	;volatile
  2299  00F798  848D               	bsf	3981,2,c	;volatile
  2300  00F79A  828D               	bsf	3981,1,c	;volatile
  2301                           
  2302                           ;segment.c: 73: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = 0;
  2303  00F79C  928B               	bcf	3979,1,c	;volatile
  2304  00F79E  908B               	bcf	3979,0,c	;volatile
  2305  00F7A0  9E89               	bcf	3977,7,c	;volatile
  2306                           
  2307                           ;segment.c: 74: break;
  2308  00F7A2  0012               	return	
  2309  00F7A4                     l1042:
  2310                           
  2311                           ;segment.c: 76: if (segment == 1) {
  2312  00F7A4  0401               	decf	dispSeg@segment,w,c
  2313  00F7A6  A4D8               	btfss	status,2,c
  2314  00F7A8  D008               	goto	l92
  2315                           
  2316                           ;segment.c: 77: LATAbits.LA2 = LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = 1;
  2317  00F7AA  8A89               	bsf	3977,5,c	;volatile
  2318  00F7AC  8889               	bsf	3977,4,c	;volatile
  2319  00F7AE  8289               	bsf	3977,1,c	;volatile
  2320  00F7B0  8089               	bsf	3977,0,c	;volatile
  2321  00F7B2  8489               	bsf	3977,2,c	;volatile
  2322                           
  2323                           ;segment.c: 78: LATAbits.LA3 = LATEbits.LE0 = 0;
  2324  00F7B4  908D               	bcf	3981,0,c	;volatile
  2325  00F7B6  9689               	bcf	3977,3,c	;volatile
  2326                           
  2327                           ;segment.c: 79: return;
  2328  00F7B8  0012               	return	
  2329  00F7BA                     l92:
  2330                           
  2331                           ;segment.c: 80: }
  2332                           ;segment.c: 81: LATAbits.LA7 = LATEbits.LE1 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = 1;
  2333  00F7BA  808B               	bsf	3979,0,c	;volatile
  2334  00F7BC  848B               	bsf	3979,2,c	;volatile
  2335  00F7BE  848D               	bsf	3981,2,c	;volatile
  2336  00F7C0  828D               	bsf	3981,1,c	;volatile
  2337  00F7C2  8E89               	bsf	3977,7,c	;volatile
  2338                           
  2339                           ;segment.c: 82: LATAbits.LA6 = LATCbits.LC1 = 0;
  2340  00F7C4  928B               	bcf	3979,1,c	;volatile
  2341  00F7C6  9C89               	bcf	3977,6,c	;volatile
  2342                           
  2343                           ;segment.c: 83: break;
  2344  00F7C8  0012               	return	
  2345  00F7CA                     l1046:
  2346                           
  2347                           ;segment.c: 85: if (segment == 1) {
  2348  00F7CA  0401               	decf	dispSeg@segment,w,c
  2349  00F7CC  A4D8               	btfss	status,2,c
  2350  00F7CE  D008               	goto	l94
  2351                           
  2352                           ;segment.c: 86: LATAbits.LA2 = LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = LATEbits.LE0 = 1;
  2353  00F7D0  808D               	bsf	3981,0,c	;volatile
  2354  00F7D2  8A89               	bsf	3977,5,c	;volatile
  2355  00F7D4  8889               	bsf	3977,4,c	;volatile
  2356  00F7D6  8289               	bsf	3977,1,c	;volatile
  2357  00F7D8  8089               	bsf	3977,0,c	;volatile
  2358  00F7DA  8489               	bsf	3977,2,c	;volatile
  2359                           
  2360                           ;segment.c: 87: LATAbits.LA3 = 0;
  2361  00F7DC  9689               	bcf	3977,3,c	;volatile
  2362                           
  2363                           ;segment.c: 88: return;
  2364  00F7DE  0012               	return	
  2365  00F7E0                     l94:
  2366                           
  2367                           ;segment.c: 89: }
  2368                           ;segment.c: 90: LATAbits.LA7 = LATEbits.LE1 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = LATCbits.LC1 = 1;
  2369  00F7E0  828B               	bsf	3979,1,c	;volatile
  2370  00F7E2  808B               	bsf	3979,0,c	;volatile
  2371  00F7E4  848B               	bsf	3979,2,c	;volatile
  2372  00F7E6  848D               	bsf	3981,2,c	;volatile
  2373  00F7E8  828D               	bsf	3981,1,c	;volatile
  2374  00F7EA  8E89               	bsf	3977,7,c	;volatile
  2375                           
  2376                           ;segment.c: 91: LATAbits.LA6 = 0;
  2377  00F7EC  9C89               	bcf	3977,6,c	;volatile
  2378                           
  2379                           ;segment.c: 92: break;
  2380  00F7EE  0012               	return	
  2381  00F7F0                     l1050:
  2382                           
  2383                           ;segment.c: 94: if (segment == 1) {
  2384  00F7F0  0401               	decf	dispSeg@segment,w,c
  2385  00F7F2  A4D8               	btfss	status,2,c
  2386  00F7F4  D008               	goto	l96
  2387                           
  2388                           ;segment.c: 95: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = 1;
  2389  00F7F6  8889               	bsf	3977,4,c	;volatile
  2390  00F7F8  8689               	bsf	3977,3,c	;volatile
  2391  00F7FA  8489               	bsf	3977,2,c	;volatile
  2392                           
  2393                           ;segment.c: 96: LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1 = 0;
  2394  00F7FC  9289               	bcf	3977,1,c	;volatile
  2395  00F7FE  9089               	bcf	3977,0,c	;volatile
  2396  00F800  908D               	bcf	3981,0,c	;volatile
  2397  00F802  9A89               	bcf	3977,5,c	;volatile
  2398                           
  2399                           ;segment.c: 97: return;
  2400  00F804  0012               	return	
  2401  00F806                     l96:
  2402                           
  2403                           ;segment.c: 98: }
  2404                           ;segment.c: 99: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = 1;
  2405  00F806  848B               	bsf	3979,2,c	;volatile
  2406  00F808  8C89               	bsf	3977,6,c	;volatile
  2407  00F80A  8E89               	bsf	3977,7,c	;volatile
  2408                           
  2409                           ;segment.c: 100: LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2 = 0;
  2410  00F80C  948D               	bcf	3981,2,c	;volatile
  2411  00F80E  928D               	bcf	3981,1,c	;volatile
  2412  00F810  928B               	bcf	3979,1,c	;volatile
  2413  00F812  908B               	bcf	3979,0,c	;volatile
  2414                           
  2415                           ;segment.c: 101: break;
  2416  00F814  0012               	return	
  2417  00F816                     l1054:
  2418                           
  2419                           ;segment.c: 103: if (segment == 1) {
  2420  00F816  0401               	decf	dispSeg@segment,w,c
  2421  00F818  A4D8               	btfss	status,2,c
  2422  00F81A  D008               	goto	l98
  2423                           
  2424                           ;segment.c: 104: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE
      +                          0 = LATAbits.LA0 = LATAbits.LA1 = 1;
  2425  00F81C  8289               	bsf	3977,1,c	;volatile
  2426  00F81E  8089               	bsf	3977,0,c	;volatile
  2427  00F820  808D               	bsf	3981,0,c	;volatile
  2428  00F822  8A89               	bsf	3977,5,c	;volatile
  2429  00F824  8889               	bsf	3977,4,c	;volatile
  2430  00F826  8689               	bsf	3977,3,c	;volatile
  2431  00F828  8489               	bsf	3977,2,c	;volatile
  2432                           
  2433                           ;segment.c: 105: return;
  2434  00F82A  0012               	return	
  2435  00F82C                     l98:
  2436                           
  2437                           ;segment.c: 106: }
  2438                           ;segment.c: 107: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC
      +                          1 = LATEbits.LE1 = LATEbits.LE2 = 1;
  2439  00F82C  848D               	bsf	3981,2,c	;volatile
  2440  00F82E  828D               	bsf	3981,1,c	;volatile
  2441  00F830  828B               	bsf	3979,1,c	;volatile
  2442  00F832  808B               	bsf	3979,0,c	;volatile
  2443  00F834  848B               	bsf	3979,2,c	;volatile
  2444  00F836  8C89               	bsf	3977,6,c	;volatile
  2445  00F838  8E89               	bsf	3977,7,c	;volatile
  2446                           
  2447                           ;segment.c: 108: break;
  2448  00F83A  0012               	return	
  2449  00F83C                     l1058:
  2450                           
  2451                           ;segment.c: 110: if (segment == 1) {
  2452  00F83C  0401               	decf	dispSeg@segment,w,c
  2453  00F83E  A4D8               	btfss	status,2,c
  2454  00F840  D008               	goto	l100
  2455                           
  2456                           ;segment.c: 111: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATAbits.LA
      +                          0 = LATAbits.LA1 = 1;
  2457  00F842  8289               	bsf	3977,1,c	;volatile
  2458  00F844  8089               	bsf	3977,0,c	;volatile
  2459  00F846  8A89               	bsf	3977,5,c	;volatile
  2460  00F848  8889               	bsf	3977,4,c	;volatile
  2461  00F84A  8689               	bsf	3977,3,c	;volatile
  2462  00F84C  8489               	bsf	3977,2,c	;volatile
  2463                           
  2464                           ;segment.c: 112: LATEbits.LE0 = 0;
  2465  00F84E  908D               	bcf	3981,0,c	;volatile
  2466                           
  2467                           ;segment.c: 113: return;
  2468  00F850  0012               	return	
  2469  00F852                     l100:
  2470                           
  2471                           ;segment.c: 114: }
  2472                           ;segment.c: 115: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATEbits.LE
      +                          1 = LATEbits.LE2 = 1;
  2473  00F852  848D               	bsf	3981,2,c	;volatile
  2474  00F854  828D               	bsf	3981,1,c	;volatile
  2475  00F856  808B               	bsf	3979,0,c	;volatile
  2476  00F858  848B               	bsf	3979,2,c	;volatile
  2477  00F85A  8C89               	bsf	3977,6,c	;volatile
  2478  00F85C  8E89               	bsf	3977,7,c	;volatile
  2479                           
  2480                           ;segment.c: 116: LATCbits.LC1 = 0;
  2481  00F85E  928B               	bcf	3979,1,c	;volatile
  2482                           
  2483                           ;segment.c: 117: break;
  2484  00F860  0012               	return	
  2485  00F862                     l1062:
  2486                           
  2487                           ;segment.c: 119: if (segment == 1) {
  2488  00F862  0401               	decf	dispSeg@segment,w,c
  2489  00F864  A4D8               	btfss	status,2,c
  2490  00F866  D008               	goto	l102
  2491                           
  2492                           ;segment.c: 120: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATEbits.LE0 = LATAbits.LA
      +                          0 = LATAbits.LA1 = 1;
  2493  00F868  8289               	bsf	3977,1,c	;volatile
  2494  00F86A  8089               	bsf	3977,0,c	;volatile
  2495  00F86C  808D               	bsf	3981,0,c	;volatile
  2496  00F86E  8889               	bsf	3977,4,c	;volatile
  2497  00F870  8689               	bsf	3977,3,c	;volatile
  2498  00F872  8489               	bsf	3977,2,c	;volatile
  2499                           
  2500                           ;segment.c: 121: LATAbits.LA5 = 0;
  2501  00F874  9A89               	bcf	3977,5,c	;volatile
  2502                           
  2503                           ;segment.c: 122: return;
  2504  00F876  0012               	return	
  2505  00F878                     l102:
  2506                           
  2507                           ;segment.c: 123: }
  2508                           ;segment.c: 124: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC1 = LATEbits.LE
      +                          1 = LATEbits.LE2 = 1;
  2509  00F878  848D               	bsf	3981,2,c	;volatile
  2510  00F87A  828D               	bsf	3981,1,c	;volatile
  2511  00F87C  828B               	bsf	3979,1,c	;volatile
  2512  00F87E  848B               	bsf	3979,2,c	;volatile
  2513  00F880  8C89               	bsf	3977,6,c	;volatile
  2514  00F882  8E89               	bsf	3977,7,c	;volatile
  2515                           
  2516                           ;segment.c: 125: LATCbits.LC0 = 0;
  2517  00F884  908B               	bcf	3979,0,c	;volatile
  2518                           
  2519                           ;segment.c: 126: break;
  2520  00F886  0012               	return	
  2521  00F888                     l1066:
  2522                           
  2523                           ;segment.c: 128: if (segment == 1) {
  2524  00F888  0401               	decf	dispSeg@segment,w,c
  2525  00F88A  A4D8               	btfss	status,2,c
  2526  00F88C  D008               	goto	l104
  2527                           
  2528                           ;segment.c: 129: LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA
      +                          1 = 1;
  2529  00F88E  8289               	bsf	3977,1,c	;volatile
  2530  00F890  8089               	bsf	3977,0,c	;volatile
  2531  00F892  808D               	bsf	3981,0,c	;volatile
  2532  00F894  8A89               	bsf	3977,5,c	;volatile
  2533  00F896  8889               	bsf	3977,4,c	;volatile
  2534                           
  2535                           ;segment.c: 130: LATAbits.LA2 = LATAbits.LA3 = 0;
  2536  00F898  9689               	bcf	3977,3,c	;volatile
  2537  00F89A  9489               	bcf	3977,2,c	;volatile
  2538                           
  2539                           ;segment.c: 131: return;
  2540  00F89C  0012               	return	
  2541  00F89E                     l104:
  2542                           
  2543                           ;segment.c: 132: }
  2544                           ;segment.c: 133: LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE
      +                          2 = 1;
  2545  00F89E  848D               	bsf	3981,2,c	;volatile
  2546  00F8A0  828D               	bsf	3981,1,c	;volatile
  2547  00F8A2  828B               	bsf	3979,1,c	;volatile
  2548  00F8A4  808B               	bsf	3979,0,c	;volatile
  2549  00F8A6  848B               	bsf	3979,2,c	;volatile
  2550                           
  2551                           ;segment.c: 134: LATAbits.LA7 = LATAbits.LA6 = 0;
  2552  00F8A8  9C89               	bcf	3977,6,c	;volatile
  2553  00F8AA  9E89               	bcf	3977,7,c	;volatile
  2554                           
  2555                           ;segment.c: 135: break;
  2556  00F8AC  0012               	return	
  2557  00F8AE                     l1070:
  2558                           
  2559                           ;segment.c: 137: if (segment == 1) {
  2560  00F8AE  0401               	decf	dispSeg@segment,w,c
  2561  00F8B0  A4D8               	btfss	status,2,c
  2562  00F8B2  D008               	goto	l106
  2563                           
  2564                           ;segment.c: 138: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = 1;
  2565  00F8B4  8089               	bsf	3977,0,c	;volatile
  2566  00F8B6  808D               	bsf	3981,0,c	;volatile
  2567  00F8B8  8A89               	bsf	3977,5,c	;volatile
  2568  00F8BA  8489               	bsf	3977,2,c	;volatile
  2569                           
  2570                           ;segment.c: 139: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA1 = 0;
  2571  00F8BC  9289               	bcf	3977,1,c	;volatile
  2572  00F8BE  9889               	bcf	3977,4,c	;volatile
  2573  00F8C0  9689               	bcf	3977,3,c	;volatile
  2574                           
  2575                           ;segment.c: 140: return;
  2576  00F8C2  0012               	return	
  2577  00F8C4                     l106:
  2578                           
  2579                           ;segment.c: 141: }
  2580                           ;segment.c: 142: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = 1;
  2581  00F8C4  828D               	bsf	3981,1,c	;volatile
  2582  00F8C6  828B               	bsf	3979,1,c	;volatile
  2583  00F8C8  808B               	bsf	3979,0,c	;volatile
  2584  00F8CA  8E89               	bsf	3977,7,c	;volatile
  2585                           
  2586                           ;segment.c: 143: LATAbits.LA6 = LATCbits.LC2 = LATEbits.LE2 = 0;
  2587  00F8CC  948D               	bcf	3981,2,c	;volatile
  2588  00F8CE  948B               	bcf	3979,2,c	;volatile
  2589  00F8D0  9C89               	bcf	3977,6,c	;volatile
  2590                           
  2591                           ;segment.c: 144: break;
  2592  00F8D2  0012               	return	
  2593  00F8D4                     l1074:
  2594                           
  2595                           ;segment.c: 146: if (segment == 1) {
  2596  00F8D4  0401               	decf	dispSeg@segment,w,c
  2597  00F8D6  A4D8               	btfss	status,2,c
  2598  00F8D8  D008               	goto	l108
  2599                           
  2600                           ;segment.c: 147: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA
      +                          1 = 1;
  2601  00F8DA  8289               	bsf	3977,1,c	;volatile
  2602  00F8DC  808D               	bsf	3981,0,c	;volatile
  2603  00F8DE  8A89               	bsf	3977,5,c	;volatile
  2604  00F8E0  8889               	bsf	3977,4,c	;volatile
  2605  00F8E2  8689               	bsf	3977,3,c	;volatile
  2606                           
  2607                           ;segment.c: 148: LATAbits.LA2 = LATAbits.LA0 = 0;
  2608  00F8E4  9089               	bcf	3977,0,c	;volatile
  2609  00F8E6  9489               	bcf	3977,2,c	;volatile
  2610                           
  2611                           ;segment.c: 149: return;
  2612  00F8E8  0012               	return	
  2613  00F8EA                     l108:
  2614                           
  2615                           ;segment.c: 150: }
  2616                           ;segment.c: 151: LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE
      +                          2 = 1;
  2617  00F8EA  848D               	bsf	3981,2,c	;volatile
  2618  00F8EC  828B               	bsf	3979,1,c	;volatile
  2619  00F8EE  808B               	bsf	3979,0,c	;volatile
  2620  00F8F0  848B               	bsf	3979,2,c	;volatile
  2621  00F8F2  8C89               	bsf	3977,6,c	;volatile
  2622                           
  2623                           ;segment.c: 152: LATAbits.LA7 = LATEbits.LE1 = 0;
  2624  00F8F4  928D               	bcf	3981,1,c	;volatile
  2625  00F8F6  9E89               	bcf	3977,7,c	;volatile
  2626                           
  2627                           ;segment.c: 153: break;
  2628  00F8F8  0012               	return	
  2629  00F8FA                     l1078:
  2630                           
  2631                           ;segment.c: 155: if (segment == 1) {
  2632  00F8FA  0401               	decf	dispSeg@segment,w,c
  2633  00F8FC  A4D8               	btfss	status,2,c
  2634  00F8FE  D008               	goto	l110
  2635                           
  2636                           ;segment.c: 156: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA
      +                          1 = 1;
  2637  00F900  8289               	bsf	3977,1,c	;volatile
  2638  00F902  8089               	bsf	3977,0,c	;volatile
  2639  00F904  808D               	bsf	3981,0,c	;volatile
  2640  00F906  8A89               	bsf	3977,5,c	;volatile
  2641  00F908  8489               	bsf	3977,2,c	;volatile
  2642                           
  2643                           ;segment.c: 157: LATAbits.LA3 = LATAbits.LA4 = 0;
  2644  00F90A  9889               	bcf	3977,4,c	;volatile
  2645  00F90C  9689               	bcf	3977,3,c	;volatile
  2646                           
  2647                           ;segment.c: 158: return;
  2648  00F90E  0012               	return	
  2649  00F910                     l110:
  2650                           
  2651                           ;segment.c: 159: }
  2652                           ;segment.c: 160: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE
      +                          2 = 1;
  2653  00F910  848D               	bsf	3981,2,c	;volatile
  2654  00F912  828D               	bsf	3981,1,c	;volatile
  2655  00F914  828B               	bsf	3979,1,c	;volatile
  2656  00F916  808B               	bsf	3979,0,c	;volatile
  2657  00F918  8E89               	bsf	3977,7,c	;volatile
  2658                           
  2659                           ;segment.c: 161: LATAbits.LA6 = LATCbits.LC2 = 0;
  2660  00F91A  948B               	bcf	3979,2,c	;volatile
  2661  00F91C  9C89               	bcf	3977,6,c	;volatile
  2662                           
  2663                           ;segment.c: 162: break;
  2664  00F91E  0012               	return	
  2665  00F920                     l1082:
  2666                           
  2667                           ;segment.c: 164: if (segment == 1) {
  2668  00F920  0401               	decf	dispSeg@segment,w,c
  2669  00F922  A4D8               	btfss	status,2,c
  2670  00F924  D008               	goto	l112
  2671                           
  2672                           ;segment.c: 165: LATAbits.LA2 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1 = 1;
  2673  00F926  8289               	bsf	3977,1,c	;volatile
  2674  00F928  8089               	bsf	3977,0,c	;volatile
  2675  00F92A  808D               	bsf	3981,0,c	;volatile
  2676  00F92C  8489               	bsf	3977,2,c	;volatile
  2677                           
  2678                           ;segment.c: 166: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = 0;
  2679  00F92E  9A89               	bcf	3977,5,c	;volatile
  2680  00F930  9889               	bcf	3977,4,c	;volatile
  2681  00F932  9689               	bcf	3977,3,c	;volatile
  2682                           
  2683                           ;segment.c: 167: return;
  2684  00F934  0012               	return	
  2685  00F936                     l112:
  2686                           
  2687                           ;segment.c: 168: }
  2688                           ;segment.c: 169: LATAbits.LA7 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2 = 1;
  2689  00F936  848D               	bsf	3981,2,c	;volatile
  2690  00F938  828D               	bsf	3981,1,c	;volatile
  2691  00F93A  828B               	bsf	3979,1,c	;volatile
  2692  00F93C  8E89               	bsf	3977,7,c	;volatile
  2693                           
  2694                           ;segment.c: 170: LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = 0;
  2695  00F93E  908B               	bcf	3979,0,c	;volatile
  2696  00F940  948B               	bcf	3979,2,c	;volatile
  2697  00F942  9C89               	bcf	3977,6,c	;volatile
  2698                           
  2699                           ;segment.c: 171: break;
  2700  00F944  0012               	return	
  2701  00F946                     l1088:
  2702  00F946  5002               	movf	dispSeg@letter,w,c
  2703                           
  2704                           ; Switch size 1, requested type "space"
  2705                           ; Number of cases is 18, Range of values is 45 to 120
  2706                           ; switch strategies available:
  2707                           ; Name         Instructions Cycles
  2708                           ; simple_byte           55    28 (average)
  2709                           ;	Chosen strategy is simple_byte
  2710  00F948  0A2D               	xorlw	45	; case 45
  2711  00F94A  B4D8               	btfsc	status,2,c
  2712  00F94C  D6BA               	goto	l1018
  2713  00F94E  0A1D               	xorlw	29	; case 48
  2714  00F950  B4D8               	btfsc	status,2,c
  2715  00F952  D6C9               	goto	l1022
  2716  00F954  0A01               	xorlw	1	; case 49
  2717  00F956  B4D8               	btfsc	status,2,c
  2718  00F958  D6D9               	goto	l1026
  2719  00F95A  0A03               	xorlw	3	; case 50
  2720  00F95C  B4D8               	btfsc	status,2,c
  2721  00F95E  D6E9               	goto	l1030
  2722  00F960  0A01               	xorlw	1	; case 51
  2723  00F962  B4D8               	btfsc	status,2,c
  2724  00F964  D6F9               	goto	l1034
  2725  00F966  0A07               	xorlw	7	; case 52
  2726  00F968  B4D8               	btfsc	status,2,c
  2727  00F96A  D709               	goto	l1038
  2728  00F96C  0A01               	xorlw	1	; case 53
  2729  00F96E  B4D8               	btfsc	status,2,c
  2730  00F970  D719               	goto	l1042
  2731  00F972  0A03               	xorlw	3	; case 54
  2732  00F974  B4D8               	btfsc	status,2,c
  2733  00F976  D729               	goto	l1046
  2734  00F978  0A01               	xorlw	1	; case 55
  2735  00F97A  B4D8               	btfsc	status,2,c
  2736  00F97C  D739               	goto	l1050
  2737  00F97E  0A0F               	xorlw	15	; case 56
  2738  00F980  B4D8               	btfsc	status,2,c
  2739  00F982  D749               	goto	l1054
  2740  00F984  0A01               	xorlw	1	; case 57
  2741  00F986  B4D8               	btfsc	status,2,c
  2742  00F988  D759               	goto	l1058
  2743  00F98A  0A58               	xorlw	88	; case 97
  2744  00F98C  B4D8               	btfsc	status,2,c
  2745  00F98E  D769               	goto	l1062
  2746  00F990  0A03               	xorlw	3	; case 98
  2747  00F992  B4D8               	btfsc	status,2,c
  2748  00F994  D779               	goto	l1066
  2749  00F996  0A01               	xorlw	1	; case 99
  2750  00F998  B4D8               	btfsc	status,2,c
  2751  00F99A  D789               	goto	l1070
  2752  00F99C  0A07               	xorlw	7	; case 100
  2753  00F99E  B4D8               	btfsc	status,2,c
  2754  00F9A0  D799               	goto	l1074
  2755  00F9A2  0A01               	xorlw	1	; case 101
  2756  00F9A4  B4D8               	btfsc	status,2,c
  2757  00F9A6  D7A9               	goto	l1078
  2758  00F9A8  0A03               	xorlw	3	; case 102
  2759  00F9AA  B4D8               	btfsc	status,2,c
  2760  00F9AC  D7B9               	goto	l1082
  2761  00F9AE  0A1E               	xorlw	30	; case 120
  2762  00F9B0  A4D8               	btfss	status,2,c
  2763  00F9B2  0012               	return	
  2764  00F9B4  D674               	goto	l1014
  2765  00F9B6                     __end_of_dispSeg:
  2766                           	opt stack 0
  2767                           tblptru	equ	0xFF8
  2768                           prodh	equ	0xFF4
  2769                           prodl	equ	0xFF3
  2770                           postinc0	equ	0xFEE
  2771                           wreg	equ	0xFE8
  2772                           postdec1	equ	0xFE5
  2773                           fsr1h	equ	0xFE2
  2774                           fsr1l	equ	0xFE1
  2775                           indf2	equ	0xFDF
  2776                           fsr2h	equ	0xFDA
  2777                           fsr2l	equ	0xFD9
  2778                           status	equ	0xFD8
  2779                           
  2780 ;; *************** function _getPortData *****************
  2781 ;; Defined at:
  2782 ;;		line 55 in file "source/emulator.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;  portNumber      1    0[COMRAM] unsigned char 
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;		None
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  1    wreg      unsigned char 
  2789 ;; Registers used:
  2790 ;;		wreg, status,2, status,0
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2796 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;Total ram usage:        1 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; This function calls:
  2803 ;;		Nothing
  2804 ;; This function is called by:
  2805 ;;		_processOpcode
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           	psect	text5
  2810  00F264                     __ptext5:
  2811                           	opt stack 0
  2812  00F264                     _getPortData:
  2813                           	opt stack 29
  2814                           
  2815                           ;emulator.c: 56: switch (portNumber)
  2816                           
  2817                           ;incstack = 0
  2818                           ;incstack = 0
  2819  00F264  D002               	goto	l1228
  2820  00F266                     l1222:
  2821                           
  2822                           ;emulator.c: 59: return RCREG2;
  2823  00F266  5074               	movf	3956,w,c	;volatile
  2824  00F268  0012               	return	
  2825  00F26A                     l1228:
  2826  00F26A  5001               	movf	getPortData@portNumber,w,c
  2827                           
  2828                           ; Switch size 1, requested type "space"
  2829                           ; Number of cases is 1, Range of values is 2 to 2
  2830                           ; switch strategies available:
  2831                           ; Name         Instructions Cycles
  2832                           ; simple_byte            4     3 (average)
  2833                           ;	Chosen strategy is simple_byte
  2834  00F26C  0A02               	xorlw	2	; case 2
  2835  00F26E  B4D8               	btfsc	status,2,c
  2836  00F270  D7FA               	goto	l1222
  2837                           
  2838                           ;emulator.c: 62: return 0;
  2839  00F272  0E00               	movlw	0
  2840  00F274  0012               	return	
  2841  00F276                     __end_of_getPortData:
  2842                           	opt stack 0
  2843                           tblptru	equ	0xFF8
  2844                           prodh	equ	0xFF4
  2845                           prodl	equ	0xFF3
  2846                           postinc0	equ	0xFEE
  2847                           wreg	equ	0xFE8
  2848                           postdec1	equ	0xFE5
  2849                           fsr1h	equ	0xFE2
  2850                           fsr1l	equ	0xFE1
  2851                           indf2	equ	0xFDF
  2852                           fsr2h	equ	0xFDA
  2853                           fsr2l	equ	0xFD9
  2854                           status	equ	0xFD8
  2855                           
  2856 ;; *************** function _immData_toPointer *****************
  2857 ;; Defined at:
  2858 ;;		line 30 in file "source/emulator.c"
  2859 ;; Parameters:    Size  Location     Type
  2860 ;;  immData         2    0[COMRAM] struct immData_t
  2861 ;; Auto vars:     Size  Location     Type
  2862 ;;  pointer         2    2[COMRAM] unsigned int 
  2863 ;; Return value:  Size  Location     Type
  2864 ;;                  2    0[COMRAM] unsigned int 
  2865 ;; Registers used:
  2866 ;;		wreg, status,2, status,0
  2867 ;; Tracked objects:
  2868 ;;		On entry : 0/0
  2869 ;;		On exit  : 0/0
  2870 ;;		Unchanged: 0/0
  2871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2872 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2873 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;Total ram usage:        4 bytes
  2877 ;; Hardware stack levels used:    1
  2878 ;; This function calls:
  2879 ;;		Nothing
  2880 ;; This function is called by:
  2881 ;;		_processOpcode
  2882 ;; This function uses a non-reentrant model
  2883 ;;
  2884                           
  2885                           	psect	text6
  2886  00F28E                     __ptext6:
  2887                           	opt stack 0
  2888  00F28E                     _immData_toPointer:
  2889                           	opt stack 29
  2890                           
  2891                           ;emulator.c: 31: uint16_t pointer = (uint16_t) immData.arg1;
  2892                           
  2893                           ;incstack = 0
  2894                           ;incstack = 0
  2895  00F28E  C001  F003         	movff	immData_toPointer@immData,immData_toPointer@pointer
  2896  00F292  6A04               	clrf	immData_toPointer@pointer+1,c
  2897                           
  2898                           ;emulator.c: 33: pointer += immData.arg2;
  2899  00F294  5002               	movf	immData_toPointer@immData+1,w,c
  2900  00F296  2603               	addwf	immData_toPointer@pointer,f,c
  2901  00F298  0E00               	movlw	0
  2902  00F29A  2204               	addwfc	immData_toPointer@pointer+1,f,c
  2903                           
  2904                           ;emulator.c: 34: immData_16 = pointer;
  2905  00F29C  C003  F01B         	movff	immData_toPointer@pointer,_immData_16
  2906  00F2A0  C004  F01C         	movff	immData_toPointer@pointer+1,_immData_16+1
  2907  00F2A4  0012               	return	
  2908  00F2A6                     __end_of_immData_toPointer:
  2909                           	opt stack 0
  2910                           tblptru	equ	0xFF8
  2911                           prodh	equ	0xFF4
  2912                           prodl	equ	0xFF3
  2913                           postinc0	equ	0xFEE
  2914                           wreg	equ	0xFE8
  2915                           postdec1	equ	0xFE5
  2916                           fsr1h	equ	0xFE2
  2917                           fsr1l	equ	0xFE1
  2918                           indf2	equ	0xFDF
  2919                           fsr2h	equ	0xFDA
  2920                           fsr2l	equ	0xFD9
  2921                           status	equ	0xFD8
  2922                           
  2923 ;; *************** function _regMX_toPointer *****************
  2924 ;; Defined at:
  2925 ;;		line 11 in file "source/emulator.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;		None
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;  pointer         2    0[COMRAM] unsigned int 
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  2  205[COMRAM] unsigned int 
  2932 ;; Registers used:
  2933 ;;		wreg, status,2, status,0
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2939 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2940 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;Total ram usage:        2 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; This function calls:
  2946 ;;		Nothing
  2947 ;; This function is called by:
  2948 ;;		_processOpcode
  2949 ;; This function uses a non-reentrant model
  2950 ;;
  2951                           
  2952                           	psect	text7
  2953  00F276                     __ptext7:
  2954                           	opt stack 0
  2955  00F276                     _regMX_toPointer:
  2956                           	opt stack 29
  2957                           
  2958                           ;emulator.c: 12: uint16_t pointer = (uint16_t) regMXbits.MH;
  2959                           
  2960                           ;incstack = 0
  2961                           ;incstack = 0
  2962  00F276  C01F  F001         	movff	_regMXbits,regMX_toPointer@pointer
  2963  00F27A  6A02               	clrf	regMX_toPointer@pointer+1,c
  2964                           
  2965                           ;emulator.c: 14: pointer += regMXbits.ML;
  2966  00F27C  5020               	movf	_regMXbits+1,w,c
  2967  00F27E  2601               	addwf	regMX_toPointer@pointer,f,c
  2968  00F280  0E00               	movlw	0
  2969  00F282  2202               	addwfc	regMX_toPointer@pointer+1,f,c
  2970                           
  2971                           ;emulator.c: 15: regMX = pointer;
  2972  00F284  C001  F01D         	movff	regMX_toPointer@pointer,_regMX
  2973  00F288  C002  F01E         	movff	regMX_toPointer@pointer+1,_regMX+1
  2974  00F28C  0012               	return	
  2975  00F28E                     __end_of_regMX_toPointer:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           prodh	equ	0xFF4
  2979                           prodl	equ	0xFF3
  2980                           postinc0	equ	0xFEE
  2981                           wreg	equ	0xFE8
  2982                           postdec1	equ	0xFE5
  2983                           fsr1h	equ	0xFE2
  2984                           fsr1l	equ	0xFE1
  2985                           indf2	equ	0xFDF
  2986                           fsr2h	equ	0xFDA
  2987                           fsr2l	equ	0xFD9
  2988                           status	equ	0xFD8
  2989                           
  2990 ;; *************** function _decode_immData *****************
  2991 ;; Defined at:
  2992 ;;		line 99 in file "source/emulator.c"
  2993 ;; Parameters:    Size  Location     Type
  2994 ;;  immData         2    0[COMRAM] struct immData_t
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;		None
  2997 ;; Return value:  Size  Location     Type
  2998 ;;		None               void
  2999 ;; Registers used:
  3000 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 0/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3006 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3008 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3009 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3010 ;;Total ram usage:        4 bytes
  3011 ;; Hardware stack levels used:    1
  3012 ;; This function calls:
  3013 ;;		Nothing
  3014 ;; This function is called by:
  3015 ;;		_main
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           	psect	text8
  3020  00F532                     __ptext8:
  3021                           	opt stack 0
  3022  00F532                     _decode_immData:
  3023                           	opt stack 30
  3024                           
  3025                           ;emulator.c: 101: if (regPC + 1 < 256) immData.arg1 = memoryMap.stack[regPC + 1];
  3026                           
  3027                           ;incstack = 0
  3028                           ;incstack = 0
  3029  00F532  0E01               	movlw	1
  3030  00F534  2421               	addwf	_regPC,w,c
  3031  00F536  6E03               	movwf	??_decode_immData& (0+255),c
  3032  00F538  0E00               	movlw	0
  3033  00F53A  2022               	addwfc	_regPC+1,w,c
  3034  00F53C  6E04               	movwf	(??_decode_immData+1)& (0+255),c
  3035  00F53E  0E00               	movlw	0
  3036  00F540  5C03               	subwf	??_decode_immData,w,c
  3037  00F542  0E01               	movlw	1
  3038  00F544  5804               	subwfb	??_decode_immData+1,w,c
  3039  00F546  B0D8               	btfsc	status,0,c
  3040  00F548  D00E               	goto	l1094
  3041  00F54A  0E01               	movlw	1
  3042  00F54C  2421               	addwf	_regPC,w,c
  3043  00F54E  6E03               	movwf	??_decode_immData& (0+255),c
  3044  00F550  0E00               	movlw	0
  3045  00F552  2022               	addwfc	_regPC+1,w,c
  3046  00F554  6E04               	movwf	(??_decode_immData+1)& (0+255),c
  3047  00F556  0E38               	movlw	low _memoryMap
  3048  00F558  2403               	addwf	??_decode_immData,w,c
  3049  00F55A  6ED9               	movwf	fsr2l,c
  3050  00F55C  0E07               	movlw	high _memoryMap
  3051  00F55E  2004               	addwfc	??_decode_immData+1,w,c
  3052  00F560  6EDA               	movwf	fsr2h,c
  3053  00F562  50DF               	movf	indf2,w,c
  3054  00F564  6E01               	movwf	decode_immData@immData,c
  3055  00F566                     l1094:
  3056                           
  3057                           ;emulator.c: 102: if (regPC + 2 < 256) immData.arg2 = memoryMap.stack[regPC + 2];
  3058  00F566  0E02               	movlw	2
  3059  00F568  2421               	addwf	_regPC,w,c
  3060  00F56A  6E03               	movwf	??_decode_immData& (0+255),c
  3061  00F56C  0E00               	movlw	0
  3062  00F56E  2022               	addwfc	_regPC+1,w,c
  3063  00F570  6E04               	movwf	(??_decode_immData+1)& (0+255),c
  3064  00F572  0E00               	movlw	0
  3065  00F574  5C03               	subwf	??_decode_immData,w,c
  3066  00F576  0E01               	movlw	1
  3067  00F578  5804               	subwfb	??_decode_immData+1,w,c
  3068  00F57A  B0D8               	btfsc	status,0,c
  3069  00F57C  D00E               	goto	l1098
  3070  00F57E  0E02               	movlw	2
  3071  00F580  2421               	addwf	_regPC,w,c
  3072  00F582  6E03               	movwf	??_decode_immData& (0+255),c
  3073  00F584  0E00               	movlw	0
  3074  00F586  2022               	addwfc	_regPC+1,w,c
  3075  00F588  6E04               	movwf	(??_decode_immData+1)& (0+255),c
  3076  00F58A  0E38               	movlw	low _memoryMap
  3077  00F58C  2403               	addwf	??_decode_immData,w,c
  3078  00F58E  6ED9               	movwf	fsr2l,c
  3079  00F590  0E07               	movlw	high _memoryMap
  3080  00F592  2004               	addwfc	??_decode_immData+1,w,c
  3081  00F594  6EDA               	movwf	fsr2h,c
  3082  00F596  50DF               	movf	indf2,w,c
  3083  00F598  6E02               	movwf	decode_immData@immData+1,c
  3084  00F59A                     l1098:
  3085                           
  3086                           ;emulator.c: 105: if (regPC + 1 > 255 && regPC + 1 < 512) immData.arg1 = memoryMap.readO
      +                          nly[regPC + 1];
  3087  00F59A  0E01               	movlw	1
  3088  00F59C  2421               	addwf	_regPC,w,c
  3089  00F59E  6E03               	movwf	??_decode_immData& (0+255),c
  3090  00F5A0  0E00               	movlw	0
  3091  00F5A2  2022               	addwfc	_regPC+1,w,c
  3092  00F5A4  6E04               	movwf	(??_decode_immData+1)& (0+255),c
  3093  00F5A6  0E00               	movlw	0
  3094  00F5A8  5C03               	subwf	??_decode_immData,w,c
  3095  00F5AA  0E01               	movlw	1
  3096  00F5AC  5804               	subwfb	??_decode_immData+1,w,c
  3097  00F5AE  A0D8               	btfss	status,0,c
  3098  00F5B0  D01A               	goto	l1104
  3099  00F5B2  0E01               	movlw	1
  3100  00F5B4  2421               	addwf	_regPC,w,c
  3101  00F5B6  6E03               	movwf	??_decode_immData& (0+255),c
  3102  00F5B8  0E00               	movlw	0
  3103  00F5BA  2022               	addwfc	_regPC+1,w,c
  3104  00F5BC  6E04               	movwf	(??_decode_immData+1)& (0+255),c
  3105  00F5BE  0E00               	movlw	0
  3106  00F5C0  5C03               	subwf	??_decode_immData,w,c
  3107  00F5C2  0E02               	movlw	2
  3108  00F5C4  5804               	subwfb	??_decode_immData+1,w,c
  3109  00F5C6  B0D8               	btfsc	status,0,c
  3110  00F5C8  D00E               	goto	l1104
  3111  00F5CA  0E01               	movlw	1
  3112  00F5CC  2421               	addwf	_regPC,w,c
  3113  00F5CE  6E03               	movwf	??_decode_immData& (0+255),c
  3114  00F5D0  0E00               	movlw	0
  3115  00F5D2  2022               	addwfc	_regPC+1,w,c
  3116  00F5D4  6E04               	movwf	(??_decode_immData+1)& (0+255),c
  3117  00F5D6  0E38               	movlw	low (_memoryMap+256)
  3118  00F5D8  2403               	addwf	??_decode_immData,w,c
  3119  00F5DA  6ED9               	movwf	fsr2l,c
  3120  00F5DC  0E08               	movlw	high (_memoryMap+256)
  3121  00F5DE  2004               	addwfc	??_decode_immData+1,w,c
  3122  00F5E0  6EDA               	movwf	fsr2h,c
  3123  00F5E2  50DF               	movf	indf2,w,c
  3124  00F5E4  6E01               	movwf	decode_immData@immData,c
  3125  00F5E6                     l1104:
  3126                           
  3127                           ;emulator.c: 106: if (regPC + 2 > 255 && regPC + 2 < 512) immData.arg2 = memoryMap.readO
      +                          nly[regPC + 2];
  3128  00F5E6  0E02               	movlw	2
  3129  00F5E8  2421               	addwf	_regPC,w,c
  3130  00F5EA  6E03               	movwf	??_decode_immData& (0+255),c
  3131  00F5EC  0E00               	movlw	0
  3132  00F5EE  2022               	addwfc	_regPC+1,w,c
  3133  00F5F0  6E04               	movwf	(??_decode_immData+1)& (0+255),c
  3134  00F5F2  0E00               	movlw	0
  3135  00F5F4  5C03               	subwf	??_decode_immData,w,c
  3136  00F5F6  0E01               	movlw	1
  3137  00F5F8  5804               	subwfb	??_decode_immData+1,w,c
  3138  00F5FA  A0D8               	btfss	status,0,c
  3139  00F5FC  D01A               	goto	l1110
  3140  00F5FE  0E02               	movlw	2
  3141  00F600  2421               	addwf	_regPC,w,c
  3142  00F602  6E03               	movwf	??_decode_immData& (0+255),c
  3143  00F604  0E00               	movlw	0
  3144  00F606  2022               	addwfc	_regPC+1,w,c
  3145  00F608  6E04               	movwf	(??_decode_immData+1)& (0+255),c
  3146  00F60A  0E00               	movlw	0
  3147  00F60C  5C03               	subwf	??_decode_immData,w,c
  3148  00F60E  0E02               	movlw	2
  3149  00F610  5804               	subwfb	??_decode_immData+1,w,c
  3150  00F612  B0D8               	btfsc	status,0,c
  3151  00F614  D00E               	goto	l1110
  3152  00F616  0E02               	movlw	2
  3153  00F618  2421               	addwf	_regPC,w,c
  3154  00F61A  6E03               	movwf	??_decode_immData& (0+255),c
  3155  00F61C  0E00               	movlw	0
  3156  00F61E  2022               	addwfc	_regPC+1,w,c
  3157  00F620  6E04               	movwf	(??_decode_immData+1)& (0+255),c
  3158  00F622  0E38               	movlw	low (_memoryMap+256)
  3159  00F624  2403               	addwf	??_decode_immData,w,c
  3160  00F626  6ED9               	movwf	fsr2l,c
  3161  00F628  0E08               	movlw	high (_memoryMap+256)
  3162  00F62A  2004               	addwfc	??_decode_immData+1,w,c
  3163  00F62C  6EDA               	movwf	fsr2h,c
  3164  00F62E  50DF               	movf	indf2,w,c
  3165  00F630  6E02               	movwf	decode_immData@immData+1,c
  3166  00F632                     l1110:
  3167                           
  3168                           ;emulator.c: 109: if (regPC + 1 > 511) immData.arg1 = memoryMap.scratchPad[regPC + 1];
  3169  00F632  0E01               	movlw	1
  3170  00F634  2421               	addwf	_regPC,w,c
  3171  00F636  6E03               	movwf	??_decode_immData& (0+255),c
  3172  00F638  0E00               	movlw	0
  3173  00F63A  2022               	addwfc	_regPC+1,w,c
  3174  00F63C  6E04               	movwf	(??_decode_immData+1)& (0+255),c
  3175  00F63E  0E00               	movlw	0
  3176  00F640  5C03               	subwf	??_decode_immData,w,c
  3177  00F642  0E02               	movlw	2
  3178  00F644  5804               	subwfb	??_decode_immData+1,w,c
  3179  00F646  A0D8               	btfss	status,0,c
  3180  00F648  D00E               	goto	l1114
  3181  00F64A  0E01               	movlw	1
  3182  00F64C  2421               	addwf	_regPC,w,c
  3183  00F64E  6E03               	movwf	??_decode_immData& (0+255),c
  3184  00F650  0E00               	movlw	0
  3185  00F652  2022               	addwfc	_regPC+1,w,c
  3186  00F654  6E04               	movwf	(??_decode_immData+1)& (0+255),c
  3187  00F656  0E38               	movlw	low (_memoryMap+512)
  3188  00F658  2403               	addwf	??_decode_immData,w,c
  3189  00F65A  6ED9               	movwf	fsr2l,c
  3190  00F65C  0E09               	movlw	high (_memoryMap+512)
  3191  00F65E  2004               	addwfc	??_decode_immData+1,w,c
  3192  00F660  6EDA               	movwf	fsr2h,c
  3193  00F662  50DF               	movf	indf2,w,c
  3194  00F664  6E01               	movwf	decode_immData@immData,c
  3195  00F666                     l1114:
  3196                           
  3197                           ;emulator.c: 110: if (regPC + 2 > 511) immData.arg2 = memoryMap.scratchPad[regPC + 2];
  3198  00F666  0E02               	movlw	2
  3199  00F668  2421               	addwf	_regPC,w,c
  3200  00F66A  6E03               	movwf	??_decode_immData& (0+255),c
  3201  00F66C  0E00               	movlw	0
  3202  00F66E  2022               	addwfc	_regPC+1,w,c
  3203  00F670  6E04               	movwf	(??_decode_immData+1)& (0+255),c
  3204  00F672  0E00               	movlw	0
  3205  00F674  5C03               	subwf	??_decode_immData,w,c
  3206  00F676  0E02               	movlw	2
  3207  00F678  5804               	subwfb	??_decode_immData+1,w,c
  3208  00F67A  A0D8               	btfss	status,0,c
  3209  00F67C  0012               	return	
  3210  00F67E  0E02               	movlw	2
  3211  00F680  2421               	addwf	_regPC,w,c
  3212  00F682  6E03               	movwf	??_decode_immData& (0+255),c
  3213  00F684  0E00               	movlw	0
  3214  00F686  2022               	addwfc	_regPC+1,w,c
  3215  00F688  6E04               	movwf	(??_decode_immData+1)& (0+255),c
  3216  00F68A  0E38               	movlw	low (_memoryMap+512)
  3217  00F68C  2403               	addwf	??_decode_immData,w,c
  3218  00F68E  6ED9               	movwf	fsr2l,c
  3219  00F690  0E09               	movlw	high (_memoryMap+512)
  3220  00F692  2004               	addwfc	??_decode_immData+1,w,c
  3221  00F694  6EDA               	movwf	fsr2h,c
  3222  00F696  50DF               	movf	indf2,w,c
  3223  00F698  6E02               	movwf	decode_immData@immData+1,c
  3224  00F69A  0012               	return	
  3225  00F69C                     __end_of_decode_immData:
  3226                           	opt stack 0
  3227                           tblptru	equ	0xFF8
  3228                           prodh	equ	0xFF4
  3229                           prodl	equ	0xFF3
  3230                           postinc0	equ	0xFEE
  3231                           wreg	equ	0xFE8
  3232                           postdec1	equ	0xFE5
  3233                           fsr1h	equ	0xFE2
  3234                           fsr1l	equ	0xFE1
  3235                           indf2	equ	0xFDF
  3236                           fsr2h	equ	0xFDA
  3237                           fsr2l	equ	0xFD9
  3238                           status	equ	0xFD8
  3239                           
  3240 ;; *************** function _initializeRegisters *****************
  3241 ;; Defined at:
  3242 ;;		line 39 in file "source/emulator.c"
  3243 ;; Parameters:    Size  Location     Type
  3244 ;;		None
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;		None
  3247 ;; Return value:  Size  Location     Type
  3248 ;;		None               void
  3249 ;; Registers used:
  3250 ;;		wreg, status,2, cstack
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3260 ;;Total ram usage:        1 bytes
  3261 ;; Hardware stack levels used:    1
  3262 ;; Hardware stack levels required when called:    1
  3263 ;; This function calls:
  3264 ;;		_pointerTo_regMX
  3265 ;; This function is called by:
  3266 ;;		_main
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           	psect	text9
  3271  00F31C                     __ptext9:
  3272                           	opt stack 0
  3273  00F31C                     _initializeRegisters:
  3274                           	opt stack 29
  3275                           
  3276                           ;emulator.c: 40: regA = 0;
  3277                           
  3278                           ;incstack = 0
  3279                           ;incstack = 0
  3280  00F31C  6E05               	movwf	??_initializeRegisters& (0+255),c
  3281  00F31E  0E00               	movlw	0
  3282  00F320  6E23               	movwf	_regA,c
  3283  00F322  5005               	movf	??_initializeRegisters& (0+255),w,c
  3284                           
  3285                           ;emulator.c: 41: regB = 0;
  3286  00F324  6E05               	movwf	??_initializeRegisters& (0+255),c
  3287  00F326  0E00               	movlw	0
  3288  00F328  6E24               	movwf	_regB,c
  3289  00F32A  5005               	movf	??_initializeRegisters& (0+255),w,c
  3290                           
  3291                           ;emulator.c: 42: pointerTo_regMX(0);
  3292  00F32C  0E00               	movlw	0
  3293  00F32E  6E02               	movwf	?_pointerTo_regMX+1,c
  3294  00F330  0E00               	movlw	0
  3295  00F332  6E01               	movwf	?_pointerTo_regMX,c
  3296  00F334  EC29  F079         	call	_pointerTo_regMX	;wreg free
  3297                           
  3298                           ;emulator.c: 43: regPC = 256;
  3299  00F338  0E01               	movlw	1
  3300  00F33A  6E22               	movwf	_regPC+1,c
  3301  00F33C  0E00               	movlw	0
  3302  00F33E  6E21               	movwf	_regPC,c
  3303                           
  3304                           ;emulator.c: 44: regSP = 0;
  3305  00F340  6E05               	movwf	??_initializeRegisters& (0+255),c
  3306  00F342  0E00               	movlw	0
  3307  00F344  6E27               	movwf	_regSP,c
  3308  00F346  5005               	movf	??_initializeRegisters& (0+255),w,c
  3309                           
  3310                           ;emulator.c: 45: regFbits.CF = regFbits.GF = regFbits.LF = regFbits.OF = regFbits.ZF = 0;
  3311  00F348  9626               	bcf	_regFbits,3,c
  3312  00F34A  9826               	bcf	_regFbits,4,c
  3313  00F34C  9426               	bcf	_regFbits,2,c
  3314  00F34E  9226               	bcf	_regFbits,1,c
  3315  00F350  9026               	bcf	_regFbits,0,c
  3316  00F352  0012               	return	
  3317  00F354                     __end_of_initializeRegisters:
  3318                           	opt stack 0
  3319                           tblptru	equ	0xFF8
  3320                           prodh	equ	0xFF4
  3321                           prodl	equ	0xFF3
  3322                           postinc0	equ	0xFEE
  3323                           wreg	equ	0xFE8
  3324                           postdec1	equ	0xFE5
  3325                           fsr1h	equ	0xFE2
  3326                           fsr1l	equ	0xFE1
  3327                           indf2	equ	0xFDF
  3328                           fsr2h	equ	0xFDA
  3329                           fsr2l	equ	0xFD9
  3330                           status	equ	0xFD8
  3331                           
  3332 ;; *************** function _pointerTo_regMX *****************
  3333 ;; Defined at:
  3334 ;;		line 21 in file "source/emulator.c"
  3335 ;; Parameters:    Size  Location     Type
  3336 ;;  pointer         2    0[COMRAM] unsigned int 
  3337 ;; Auto vars:     Size  Location     Type
  3338 ;;  pointer_lowB    2    2[COMRAM] unsigned int 
  3339 ;; Return value:  Size  Location     Type
  3340 ;;		None               void
  3341 ;; Registers used:
  3342 ;;		None
  3343 ;; Tracked objects:
  3344 ;;		On entry : 0/0
  3345 ;;		On exit  : 0/0
  3346 ;;		Unchanged: 0/0
  3347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3348 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3349 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;Total ram usage:        4 bytes
  3353 ;; Hardware stack levels used:    1
  3354 ;; This function calls:
  3355 ;;		Nothing
  3356 ;; This function is called by:
  3357 ;;		_initializeRegisters
  3358 ;; This function uses a non-reentrant model
  3359 ;;
  3360                           
  3361                           	psect	text10
  3362  00F252                     __ptext10:
  3363                           	opt stack 0
  3364  00F252                     _pointerTo_regMX:
  3365                           	opt stack 29
  3366                           
  3367                           ;emulator.c: 22: uint16_t pointer_lowByte = pointer;
  3368                           
  3369                           ;incstack = 0
  3370                           ;incstack = 0
  3371  00F252  C001  F003         	movff	pointerTo_regMX@pointer,pointerTo_regMX@pointer_lowByte
  3372  00F256  C002  F004         	movff	pointerTo_regMX@pointer+1,pointerTo_regMX@pointer_lowByte+1
  3373                           
  3374                           ;emulator.c: 24: regMXbits.ML = (uint8_t) pointer_lowByte;
  3375  00F25A  C003  F020         	movff	pointerTo_regMX@pointer_lowByte,_regMXbits+1
  3376                           
  3377                           ;emulator.c: 26: regMXbits.MH = (uint8_t) pointer;
  3378  00F25E  C001  F01F         	movff	pointerTo_regMX@pointer,_regMXbits
  3379  00F262  0012               	return	
  3380  00F264                     __end_of_pointerTo_regMX:
  3381                           	opt stack 0
  3382                           tblptru	equ	0xFF8
  3383                           prodh	equ	0xFF4
  3384                           prodl	equ	0xFF3
  3385                           postinc0	equ	0xFEE
  3386                           wreg	equ	0xFE8
  3387                           postdec1	equ	0xFE5
  3388                           fsr1h	equ	0xFE2
  3389                           fsr1l	equ	0xFE1
  3390                           indf2	equ	0xFDF
  3391                           fsr2h	equ	0xFDA
  3392                           fsr2l	equ	0xFD9
  3393                           status	equ	0xFD8
  3394                           
  3395 ;; *************** function _initPorts *****************
  3396 ;; Defined at:
  3397 ;;		line 27 in file "source/system.c"
  3398 ;; Parameters:    Size  Location     Type
  3399 ;;		None
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;		None
  3402 ;; Return value:  Size  Location     Type
  3403 ;;		None               void
  3404 ;; Registers used:
  3405 ;;		wreg, status,2
  3406 ;; Tracked objects:
  3407 ;;		On entry : 0/0
  3408 ;;		On exit  : 0/0
  3409 ;;		Unchanged: 0/0
  3410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;Total ram usage:        0 bytes
  3416 ;; Hardware stack levels used:    1
  3417 ;; This function calls:
  3418 ;;		Nothing
  3419 ;; This function is called by:
  3420 ;;		_main
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           	psect	text11
  3425  00F2EC                     __ptext11:
  3426                           	opt stack 0
  3427  00F2EC                     _initPorts:
  3428                           	opt stack 30
  3429                           
  3430                           ;system.c: 28: TRISA = 0;
  3431                           
  3432                           ;incstack = 0
  3433                           ;incstack = 0
  3434  00F2EC  0E00               	movlw	0
  3435  00F2EE  6E92               	movwf	3986,c	;volatile
  3436                           
  3437                           ;system.c: 29: TRISC = 0;
  3438  00F2F0  0E00               	movlw	0
  3439  00F2F2  6E94               	movwf	3988,c	;volatile
  3440                           
  3441                           ;system.c: 30: TRISE = 0;
  3442  00F2F4  0E00               	movlw	0
  3443  00F2F6  6E96               	movwf	3990,c	;volatile
  3444                           
  3445                           ;system.c: 32: ANSELD = 0;
  3446  00F2F8  0E00               	movlw	0
  3447  00F2FA  010F               	movlb	15	; () banked
  3448  00F2FC  010F               	movlb	15	; () banked
  3449  00F2FE  6F3B               	movwf	59,b	;volatile
  3450                           
  3451                           ; BSR set to: 15
  3452                           ;system.c: 33: TRISDbits.RD3 = 0;
  3453  00F300  9695               	bcf	3989,3,c	;volatile
  3454                           
  3455                           ; BSR set to: 15
  3456                           ;system.c: 34: TRISDbits.RD4 = 1;
  3457  00F302  8895               	bsf	3989,4,c	;volatile
  3458                           
  3459                           ; BSR set to: 15
  3460                           ;system.c: 35: TRISDbits.RD5 = 0;
  3461  00F304  9A95               	bcf	3989,5,c	;volatile
  3462                           
  3463                           ; BSR set to: 15
  3464                           ;system.c: 36: TRISDbits.RD7 = 1;
  3465  00F306  8E95               	bsf	3989,7,c	;volatile
  3466                           
  3467                           ; BSR set to: 15
  3468                           ;system.c: 37: TRISDbits.RD6 = 0;
  3469  00F308  9C95               	bcf	3989,6,c	;volatile
  3470                           
  3471                           ;system.c: 39: LATA = 0;
  3472  00F30A  0E00               	movlw	0
  3473  00F30C  6E89               	movwf	3977,c	;volatile
  3474                           
  3475                           ;system.c: 40: LATC = 0;
  3476  00F30E  0E00               	movlw	0
  3477  00F310  6E8B               	movwf	3979,c	;volatile
  3478                           
  3479                           ;system.c: 41: LATD = 0;
  3480  00F312  0E00               	movlw	0
  3481  00F314  6E8C               	movwf	3980,c	;volatile
  3482                           
  3483                           ;system.c: 42: LATE = 0;
  3484  00F316  0E00               	movlw	0
  3485  00F318  6E8D               	movwf	3981,c	;volatile
  3486                           
  3487                           ; BSR set to: 15
  3488  00F31A  0012               	return	
  3489  00F31C                     __end_of_initPorts:
  3490                           	opt stack 0
  3491                           tblptru	equ	0xFF8
  3492                           prodh	equ	0xFF4
  3493                           prodl	equ	0xFF3
  3494                           postinc0	equ	0xFEE
  3495                           wreg	equ	0xFE8
  3496                           postdec1	equ	0xFE5
  3497                           fsr1h	equ	0xFE2
  3498                           fsr1l	equ	0xFE1
  3499                           indf2	equ	0xFDF
  3500                           fsr2h	equ	0xFDA
  3501                           fsr2l	equ	0xFD9
  3502                           status	equ	0xFD8
  3503                           
  3504 ;; *************** function _initOscillator *****************
  3505 ;; Defined at:
  3506 ;;		line 10 in file "source/system.c"
  3507 ;; Parameters:    Size  Location     Type
  3508 ;;		None
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;		None
  3511 ;; Return value:  Size  Location     Type
  3512 ;;		None               void
  3513 ;; Registers used:
  3514 ;;		wreg, status,2
  3515 ;; Tracked objects:
  3516 ;;		On entry : 0/0
  3517 ;;		On exit  : 0/0
  3518 ;;		Unchanged: 0/0
  3519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;Total ram usage:        0 bytes
  3525 ;; Hardware stack levels used:    1
  3526 ;; This function calls:
  3527 ;;		Nothing
  3528 ;; This function is called by:
  3529 ;;		_main
  3530 ;; This function uses a non-reentrant model
  3531 ;;
  3532                           
  3533                           	psect	text12
  3534  00F2A6                     __ptext12:
  3535                           	opt stack 0
  3536  00F2A6                     _initOscillator:
  3537                           	opt stack 30
  3538                           
  3539                           ;system.c: 11: OSCCONbits.IDLEN = 0;
  3540                           
  3541                           ; BSR set to: 15
  3542                           ;incstack = 0
  3543                           ;incstack = 0
  3544  00F2A6  9ED3               	bcf	4051,7,c	;volatile
  3545                           
  3546                           ;system.c: 12: OSCCONbits.IRCF = 0b111;
  3547  00F2A8  88D3               	bsf	4051,4,c	;volatile
  3548  00F2AA  8AD3               	bsf	4051,5,c	;volatile
  3549  00F2AC  8CD3               	bsf	4051,6,c	;volatile
  3550                           
  3551                           ;system.c: 13: OSCCONbits.SCS = 0b10;
  3552  00F2AE  50D3               	movf	4051,w,c	;volatile
  3553  00F2B0  0BFC               	andlw	-4
  3554  00F2B2  0902               	iorlw	2
  3555  00F2B4  6ED3               	movwf	4051,c	;volatile
  3556                           
  3557                           ;system.c: 14: OSCCON2bits.MFIOSEL = 0;
  3558  00F2B6  98D2               	bcf	4050,4,c	;volatile
  3559                           
  3560                           ;system.c: 15: OSCCON2bits.SOSCGO = 0;
  3561  00F2B8  96D2               	bcf	4050,3,c	;volatile
  3562                           
  3563                           ;system.c: 16: OSCCON2bits.PRISD = 0;
  3564  00F2BA  94D2               	bcf	4050,2,c	;volatile
  3565  00F2BC                     l140:
  3566  00F2BC  B4D3               	btfsc	4051,2,c	;volatile
  3567  00F2BE  0012               	return	
  3568  00F2C0  D7FD               	goto	l140
  3569  00F2C2                     __end_of_initOscillator:
  3570                           	opt stack 0
  3571  0000                     tblptru	equ	0xFF8
  3572                           prodh	equ	0xFF4
  3573                           prodl	equ	0xFF3
  3574                           postinc0	equ	0xFEE
  3575                           wreg	equ	0xFE8
  3576                           postdec1	equ	0xFE5
  3577                           fsr1h	equ	0xFE2
  3578                           fsr1l	equ	0xFE1
  3579                           indf2	equ	0xFDF
  3580                           fsr2h	equ	0xFDA
  3581                           fsr2l	equ	0xFD9
  3582                           status	equ	0xFD8
  3583                           tblptru	equ	0xFF8
  3584                           prodh	equ	0xFF4
  3585                           prodl	equ	0xFF3
  3586                           postinc0	equ	0xFEE
  3587                           wreg	equ	0xFE8
  3588                           postdec1	equ	0xFE5
  3589                           fsr1h	equ	0xFE2
  3590                           fsr1l	equ	0xFE1
  3591                           indf2	equ	0xFDF
  3592                           fsr2h	equ	0xFDA
  3593                           fsr2l	equ	0xFD9
  3594                           status	equ	0xFD8
  3595                           
  3596                           	psect	rparam
  3597  0000                     tblptru	equ	0xFF8
  3598                           prodh	equ	0xFF4
  3599                           prodl	equ	0xFF3
  3600                           postinc0	equ	0xFEE
  3601                           wreg	equ	0xFE8
  3602                           postdec1	equ	0xFE5
  3603                           fsr1h	equ	0xFE2
  3604                           fsr1l	equ	0xFE1
  3605                           indf2	equ	0xFDF
  3606                           fsr2h	equ	0xFDA
  3607                           fsr2l	equ	0xFD9
  3608                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2067
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     20      39
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    ?_immData_toPointer	unsigned int  size(2) Largest target is 0

    ?_regMX_toPointer	unsigned int  size(2) Largest target is 0


Critical Paths under _main in COMRAM

    _main->_processOpcode
    _processOpcode->_setPortData
    _setPortData->_enableSerial
    _initializeRegisters->_pointerTo_regMX

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1255
                                             18 COMRAM     2     2      0
                     _initOscillator
                          _initPorts
                            _dispSeg
                _initializeRegisters
                     _decode_immData
                      _processOpcode
 ---------------------------------------------------------------------------------
 (1) _processOpcode                                        9     6      3     880
                                              9 COMRAM     9     6      3
                    _regMX_toPointer
                  _immData_toPointer
                        _getPortData
                        _setPortData
 ---------------------------------------------------------------------------------
 (2) _setPortData                                          5     3      2     450
                                              4 COMRAM     5     3      2
                            _dispSeg
                       _enableSerial
 ---------------------------------------------------------------------------------
 (3) _enableSerial                                         4     2      2      15
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _dispSeg                                              2     0      2     285
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _getPortData                                          1     0      1      15
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (2) _immData_toPointer                                    4     2      2      50
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _regMX_toPointer                                      2     2      0      20
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _decode_immData                                       4     2      2      45
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initializeRegisters                                  1     1      0      45
                                              4 COMRAM     1     1      0
                    _pointerTo_regMX
 ---------------------------------------------------------------------------------
 (2) _pointerTo_regMX                                      4     2      2      45
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initOscillator                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initOscillator
   _initPorts
   _dispSeg
   _initializeRegisters
     _pointerTo_regMX
   _decode_immData
   _processOpcode
     _regMX_toPointer
     _immData_toPointer
     _getPortData
     _setPortData
       _dispSeg
       _enableSerial

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     800      37       52.6%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     14      27       1       41.1%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       3       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      27      12        0.0%
DATA                 0      0     82A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.21 build 54009 
Symbol Table                                                                                   Thu Feb 27 22:52:30 2014

                            l81 F6FC                              l90 F794                              l92 F7BA  
                            l84 F722                              l76 F6B2                              l94 F7E0  
                            l86 F748                              l79 F6D6                              l96 F806  
                            l88 F76E                              l98 F82C                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                           l100 F852                             l110 F910                             l102 F878  
                           l112 F936                             l104 F89E                             l106 F8C4  
                           l140 F2BC                             l108 F8EA                             l300 FBBA  
                           l310 FBE0                             l302 FBC0                             l232 F438  
                           l320 FBFE                             l312 FBE6                             l304 FBCE  
                           l225 F3E0                             l322 FC04                             l314 FBEC  
                           l306 FBD4                             l340 FDA8                             l316 FBF2  
                           l308 FBDA                             l261 FA80                             l318 FBF8  
                           l270 FB1C                             l262 FA86                             l343 FDC8  
                           l271 FB22                             l263 FA8C                             l352 FE4C  
                           l272 FB28                             l264 FA92                             l345 FDD0  
                           l273 FB2E                             l265 FA98                             l346 FDF6  
                           l290 FB8C                             l274 FB34                             l355 FE60  
                           l275 FB3A                             l348 FDFE                             l292 FB9E  
                           l349 FE24                             l294 FBAA                             l286 FB70  
                           l287 FB7E                             l296 FBB6                             l289 FB82  
                  __CFG_CPB$OFF 000000                             u430 FB7A                    __CFG_CPD$OFF 000000  
                           prod 000FF3                             wreg 000FE8           getPortData@portNumber 0001  
                    _TXSTA2bits 000F72                  _decode_immData F532                    __CFG_LVP$OFF 000000  
                          l1110 F632                            l1030 F732                            l1022 F6E6  
                          l1014 F69E                            l1104 F5E6                            l1114 F666  
                          l1050 F7F0                            l1042 F7A4                            l1034 F758  
                          l1026 F70C                            l1018 F6C2                            l1222 F266  
                          l1070 F8AE                            l1062 F862                            l1054 F816  
                          l1046 F7CA                            l1038 F77E                            l1240 F35C  
                          l1320 F42A                            l1312 F40A                            l1304 F3EC  
                          l1400 FB6C                            l1082 F920                            l1074 F8D4  
                          l1066 F888                            l1058 F83C                            l1242 F360  
                          l1250 F3C6                            l1322 F43E                            l1228 F26A  
                          l1244 F364                            l1324 F450                            l1316 F41A  
                          l1308 F3FA                            l1340 F9EC                            l1332 F9C8  
                          l1094 F566                            l1078 F8FA                            l1246 F368  
                          l1238 F358                            l1502 FCE0                            l1422 FBAC  
                          l1414 FB94                            l1334 F9D2                            l1088 F946  
                          l1248 F36E                            l1328 F462                            l1520 FD40  
                          l1512 FD10                            l1360 FA5C                            l1344 F9FA  
                          l1098 F59A                            l1506 FCF8                            l1418 FBA0  
                          l1370 FABE                            l1354 FA28                            l1338 F9DE  
                          l1700 F398                            l1532 FD90                            l1524 FD60  
                          l1516 FD28                            l1364 FA9E                            l1348 FA08  
                          l1702 F39E                            l1550 FDF8                            l1542 FDCA  
                          l1470 FC34                            l1462 FC08                            l1390 FB5A  
                          l1382 FB48                            l1704 F3A8                            l1560 FE30  
                          l1536 FDAA                            l1528 FD78                            l1464 FC12  
                          l1384 FB4E                            l1376 FAF2                            l1706 F3B2  
                          l1570 FE62                            l1538 FDB0                            l1490 FC9A  
                          l1482 FC6E                            l1394 FB60           setPortData@portNumber 0005  
                          l1708 F3BC                            l1564 FE4E                            l1556 FE26  
                          l1396 FB66                            l1388 FB54                            l1566 FE52  
                          l1494 FCB4                            l1486 FC84                            l1478 FC4E  
                          l1574 FE66                            l1590 F4D4                            l1576 FFFA  
                          l1584 F4B2                            l1498 FCCA                            l1596 F508  
                          _LATA 000F89                            _LATC 000F8B                            _LATD 000F8C  
                          _LATE 000F8D                            _main F47E                            _regA 0023  
                          _regB 0024                            _regF 0025                            fsr1h 000FE2  
                          fsr1l 000FE1                            indf2 000FDF                            fsr2l 000FD9  
                 __CFG_BORV$190 000000                            prodl 000FF3                            start 0000  
                 __CFG_IESO$OFF 000000                ?_regMX_toPointer 0001           setPortData@outputData 0006  
                  _BAUDCON2bits 000F70                           ?_main 0001                           _TRISA 000F92  
                         _TRISC 000F94                           _TRISE 000F96          __end_of_decode_immData F69C  
                 __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000                   __CFG_WRT2$OFF 000000  
                 __CFG_WRT3$OFF 000000                  __CFG_EBTR0$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBTR1$OFF 000000                  __CFG_EBTR2$OFF 000000                  __CFG_EBTR3$OFF 000000  
               __end_of_dispSeg F9B6                   __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000  
                 __CFG_WRTD$OFF 000000                  __CFG_EBTRB$OFF 000000                 ??_processOpcode 000D  
                         _regPC 0021                           _regMX 001D                           _regSP 0027  
            __CFG_MCLRE$EXTMCLR 000000        processOpcode@regA_temp16 0011                  __CFG_BOREN$OFF 000000  
             ??_pointerTo_regMX 0003                           status 000FD8                  __CFG_HFOFST$ON 000000  
               __initialization F2C2                    __end_of_main F532            __end_of_enableSerial F3DE  
                        ??_main 0013                   __activetblptr 000002            enableSerial@baudRate 0001  
               ?_decode_immData 0001                    ?_setPortData 0005                          _ANSELD 000F3B  
                __CFG_WDTEN$OFF 000000            __size_of_getPortData 0012                          _RCREG2 000F74  
                        _SPBRG2 000F75                          _TXREG2 000F73                  __CFG_XINST$OFF 000000  
                __CFG_STVREN$ON 000000    __size_of_initializeRegisters 0038                          clear_0 F2CA  
                        clear_1 F2DC                       ??_dispSeg 0003                          tblptru 000FF8  
             _immData_toPointer F28E              ?_immData_toPointer 0001                      __accesstop 0060  
       __end_of__initialization F2E2                 __CFG_PBADEN$OFF 000000    setPortData@outputData_temp16 0008  
           ??_immData_toPointer 0003                  __pcstackCOMRAM 0001       __end_of_immData_toPointer F2A6  
       __size_of_initOscillator 001C                 __CFG_PLLCFG$OFF 000000              __size_of_initPorts 0030  
            __CFG_CCP2MX$PORTC1 000000           __size_of_enableSerial 008A              __CFG_CCP3MX$PORTB5 000000  
         decode_immData@immData 0001                 _pointerTo_regMX F252                      _immData_16 001B  
             __CFG_PRICLKEN$OFF 000000                         _SPBRGH2 000F76            __size_of_setPortData 00A0  
                  _enableSerial F354                 __CFG_PWRTEN$OFF 000000                         __Hparam 0000  
                       __Lparam 0000                ??_decode_immData 0003                         __pcinit F2C2  
                       __ramtop 1000                         __ptext0 F47E                         __ptext1 F9B6  
                       __ptext2 F3DE                         __ptext3 F354                         __ptext4 F69C  
                       __ptext5 F264                         __ptext6 F28E                         __ptext7 F276  
                       __ptext8 F532        __size_of_regMX_toPointer 0018                         __ptext9 F31C  
                       _dispSeg F69C                         _immData 0019               __end_of_initPorts F31C  
    __size_of_immData_toPointer 0018            end_of_initialization F2E2           __end_of_processOpcode 0000  
           _initializeRegisters F31C                   __Lmediumconst 0000                         postdec1 000FE5  
                       postinc0 000FEE             processOpcode@opcode 000A            ?_initializeRegisters 0001  
       __end_of_pointerTo_regMX F264         processOpcode@carriedBit 000F                       _TRISDbits 000F95  
                 ??_getPortData 0002                  _initOscillator F2A6           ??_initializeRegisters 0005  
       processOpcode@regA_temp8 0010             start_initialization F2C2          __end_of_initOscillator F2C2  
             ??_regMX_toPointer 0001             __end_of_getPortData F276          regMX_toPointer@pointer 0001  
              ?_pointerTo_regMX 0001                     __pbssBIGRAM 0738                     __pbssCOMRAM 0015  
               ?_initOscillator 0001                        ?_dispSeg 0001                       _regMXbits 001F  
pointerTo_regMX@pointer_lowByte 0003                       _initPorts F2EC                     _getPortData F264  
                 ??_setPortData 0007                       _memoryMap 0738                        _LATAbits 000F89  
                      _LATCbits 000F8B                        _LATDbits 000F8C                        _LATEbits 000F8D  
              __CFG_WDTPS$32768 000000                      ?_initPorts 0001             __end_of_setPortData F47E  
                      __Hrparam 0000                        __Lrparam 0000               __CFG_P2BMX$PORTD2 000000  
               _regMX_toPointer F276          __size_of_processOpcode 064A          pointerTo_regMX@pointer 0001  
              __size_of_dispSeg 031A        immData_toPointer@immData 0001                        __ptext10 F252  
                      __ptext11 F2EC                        __ptext12 F2A6         __size_of_decode_immData 016A  
                   _OSCCON2bits 000FD2        immData_toPointer@pointer 0003                        _regFbits 0026  
                 __size_of_main 00B4     __end_of_initializeRegisters F354                ??_initOscillator 0001  
                   ??_initPorts 0001                     _setPortData F3DE                   ?_enableSerial 0001  
                 _processOpcode F9B6                      _RCSTA2bits 000F71                      _OSCCONbits 000FD3  
       __end_of_regMX_toPointer F28E            processOpcode@immData 000B                  dispSeg@segment 0001  
                  wait_ms@timel 0015               __CFG_T3CMX$PORTC0 000000        __size_of_pointerTo_regMX 0012  
                 dispSeg@letter 0002                    ?_getPortData 0001                  ??_enableSerial 0003  
                ?_processOpcode 000A               __CFG_FOSC$INTIO67 000000  
