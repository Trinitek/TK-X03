

Microchip Technology PIC18 LITE Macro Assembler V1.30 build 55553 
                                                                                               Fri Mar 21 13:25:55 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 55553
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBIGRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    32  0000                     
    33                           	psect	idataBIGRAM
    34  002194                     __pidataBIGRAM:
    35                           	opt stack 0
    36                           
    37                           ;initializer for _virtualMemory
    38  002194  07                 	db	7
    39  002195  03                 	db	3
    40  002196  00                 	db	0
    41  002197  29                 	db	41
    42  002198  29                 	db	41
    43  002199  29                 	db	41
    44  00219A  29                 	db	41
    45  00219B  06                 	db	6
    46  00219C  03                 	db	3
    47  00219D  28                 	db	40
    48  00219E  28                 	db	40
    49  00219F  28                 	db	40
    50  0021A0  28                 	db	40
    51  0021A1  06                 	db	6
    52  0021A2  04                 	db	4
    53  0021A3  54                 	db	84
    54  0021A4  31                 	db	49
    55  0021A5  00                 	db	0
    56  0021A6  03                 	db	3
    57  0021A7                     	ds	2029
    58                           
    59                           	psect	smallconst
    60  001000                     __psmallconst:
    61                           	opt stack 0
    62  001000  00                 	db	0
    63  001001                     _virtualMemory_size:
    64                           	opt stack 0
    65  001001  0800               	dw	2048
    66  001003  0000               	dw	0
    67  001005                     __end_of_virtualMemory_size:
    68                           	opt stack 0
    69  0000                     _ANSELD	set	3899
    70  0000                     _BAUDCON2bits	set	3952
    71  0000                     _LATA	set	3977
    72  0000                     _LATAbits	set	3977
    73  0000                     _LATC	set	3979
    74  0000                     _LATCbits	set	3979
    75  0000                     _LATD	set	3980
    76  0000                     _LATDbits	set	3980
    77  0000                     _LATE	set	3981
    78  0000                     _LATEbits	set	3981
    79  0000                     _OSCCON2bits	set	4050
    80  0000                     _OSCCONbits	set	4051
    81  0000                     _RCREG2	set	3956
    82  0000                     _RCSTA2bits	set	3953
    83  0000                     _SPBRG2	set	3957
    84  0000                     _SPBRGH2	set	3958
    85  0000                     _TRISA	set	3986
    86  0000                     _TRISC	set	3988
    87  0000                     _TRISDbits	set	3989
    88  0000                     _TRISE	set	3990
    89  0000                     _TXREG2	set	3955
    90  0000                     _TXSTA2bits	set	3954
    91                           
    92                           ; #config settings
    93  001005  00                 	db	0	; dummy byte at the end
    94  0000                     
    95                           	psect	cinit
    96  002004                     __pcinit:
    97                           	opt stack 0
    98  002004                     start_initialization:
    99                           	opt stack 0
   100  002004                     __initialization:
   101                           	opt stack 0
   102                           
   103                           ; Clear objects allocated to BANK1 (256 bytes)
   104  002004  EE01  F000         	lfsr	0,__pbssBANK1
   105  002008  EE11 F000          	lfsr	1,256
   106  00200C                     clear_0:
   107  00200C  6AEE               	clrf	postinc0,c
   108  00200E  50E5               	movf	postdec1,w,c
   109  002010  50E1               	movf	fsr1l,w,c
   110  002012  E1FC               	bnz	clear_0
   111  002014  50E2               	movf	fsr1h,w,c
   112  002016  E1FA               	bnz	clear_0
   113                           
   114                           ; Clear objects allocated to COMRAM (15 bytes)
   115  002018  EE00  F012         	lfsr	0,__pbssCOMRAM
   116  00201C  0E0F               	movlw	15
   117  00201E                     clear_1:
   118  00201E  6AEE               	clrf	postinc0,c
   119  002020  06E8               	decf	wreg,f,c
   120  002022  E1FD               	bnz	clear_1
   121                           
   122                           ; Initialize objects allocated to BIGRAM (2048 bytes)
   123                           ; load TBLPTR registers with __pidataBIGRAM
   124  002024  0E94               	movlw	low __pidataBIGRAM
   125  002026  6EF6               	movwf	tblptrl,c
   126  002028  0E21               	movlw	high __pidataBIGRAM
   127  00202A  6EF7               	movwf	tblptrh,c
   128  00202C  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
   129  00202E  6EF8               	movwf	tblptru,c
   130  002030  EE02  F000         	lfsr	0,__pdataBIGRAM
   131  002034  EE18 F000          	lfsr	1,2048
   132  002038                     copy_data0:
   133  002038  0009               	tblrd		*+
   134  00203A  CFF5 FFEE          	movff	tablat,postinc0
   135  00203E  50E5               	movf	postdec1,w,c
   136  002040  50E1               	movf	fsr1l,w,c
   137  002042  E1FA               	bnz	copy_data0
   138  002044  50E2               	movf	fsr1h,w,c
   139  002046  E1F8               	bnz	copy_data0
   140  002048                     end_of_initialization:
   141                           	opt stack 0
   142  002048                     __end_of__initialization:
   143                           	opt stack 0
   144  002048  0100               	movlb	0
   145  00204A  EF76  F00F         	goto	_main	;jump to C main() function
   146                           tblptru	equ	0xFF8
   147                           tblptrh	equ	0xFF7
   148                           tblptrl	equ	0xFF6
   149                           tablat	equ	0xFF5
   150                           postinc0	equ	0xFEE
   151                           wreg	equ	0xFE8
   152                           postdec1	equ	0xFE5
   153                           fsr1h	equ	0xFE2
   154                           fsr1l	equ	0xFE1
   155                           
   156                           	psect	bssCOMRAM
   157  000012                     __pbssCOMRAM:
   158                           	opt stack 0
   159  000012                     wait_ms@timel:
   160                           	opt stack 0
   161  000012                     	ds	4
   162  000016                     _regMX:
   163                           	opt stack 0
   164  000016                     	ds	2
   165  000018                     _regPC:
   166                           	opt stack 0
   167  000018                     	ds	2
   168  00001A                     _haltFlag:
   169                           	opt stack 0
   170  00001A                     	ds	1
   171  00001B                     _immData_1:
   172                           	opt stack 0
   173  00001B                     	ds	1
   174  00001C                     _immData_2:
   175                           	opt stack 0
   176  00001C                     	ds	1
   177  00001D                     _regA:
   178                           	opt stack 0
   179  00001D                     	ds	1
   180  00001E                     _regB:
   181                           	opt stack 0
   182  00001E                     	ds	1
   183  00001F                     _regF:
   184                           	opt stack 0
   185  00001F                     	ds	1
   186  000020                     _regSP:
   187                           	opt stack 0
   188  000020                     	ds	1
   189                           tblptru	equ	0xFF8
   190                           tblptrh	equ	0xFF7
   191                           tblptrl	equ	0xFF6
   192                           tablat	equ	0xFF5
   193                           postinc0	equ	0xFEE
   194                           wreg	equ	0xFE8
   195                           postdec1	equ	0xFE5
   196                           fsr1h	equ	0xFE2
   197                           fsr1l	equ	0xFE1
   198                           
   199                           	psect	bssBANK1
   200  000100                     __pbssBANK1:
   201                           	opt stack 0
   202  000100                     _stack:
   203                           	opt stack 0
   204  000100                     	ds	256
   205                           tblptru	equ	0xFF8
   206                           tblptrh	equ	0xFF7
   207                           tblptrl	equ	0xFF6
   208                           tablat	equ	0xFF5
   209                           postinc0	equ	0xFEE
   210                           wreg	equ	0xFE8
   211                           postdec1	equ	0xFE5
   212                           fsr1h	equ	0xFE2
   213                           fsr1l	equ	0xFE1
   214                           
   215                           	psect	dataBIGRAM
   216  000200                     __pdataBIGRAM:
   217                           	opt stack 0
   218  000200                     _virtualMemory:
   219                           	opt stack 0
   220  000200                     	ds	2048
   221                           tblptru	equ	0xFF8
   222                           tblptrh	equ	0xFF7
   223                           tblptrl	equ	0xFF6
   224                           tablat	equ	0xFF5
   225                           postinc0	equ	0xFEE
   226                           wreg	equ	0xFE8
   227                           postdec1	equ	0xFE5
   228                           fsr1h	equ	0xFE2
   229                           fsr1l	equ	0xFE1
   230                           
   231                           	psect	cstackCOMRAM
   232  000001                     __pcstackCOMRAM:
   233                           	opt stack 0
   234  000001                     ??_initializeRegisters:
   235  000001                     ??_update_immData:
   236  000001                     ?_immData_toPointer:
   237                           	opt stack 0
   238  000001                     ?___wmul:
   239                           	opt stack 0
   240  000001                     dispSeg@letter:
   241                           	opt stack 0
   242  000001                     hexToChar@number:
   243                           	opt stack 0
   244  000001                     setMXbits@value:
   245                           	opt stack 0
   246  000001                     getFbits@subRegister:
   247                           	opt stack 0
   248  000001                     setFbits@value:
   249                           	opt stack 0
   250  000001                     getPortData@portNumber:
   251                           	opt stack 0
   252  000001                     getMXbits@regMX_temp:
   253                           	opt stack 0
   254  000001                     enableSerial@baudRate:
   255                           	opt stack 0
   256  000001                     ___wmul@multiplier:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x0
   260  000001                     	ds	1
   261  000002                     ??_setFbits:
   262  000002                     dispSeg@segment:
   263                           	opt stack 0
   264  000002                     getFbits@regF_temp:
   265                           	opt stack 0
   266  000002                     setMXbits@value_temp:
   267                           	opt stack 0
   268                           
   269                           ; 2 bytes @ 0x1
   270  000002                     	ds	1
   271  000003                     ??_enableSerial:
   272  000003                     getMXbits@subRegister:
   273                           	opt stack 0
   274  000003                     setFbits@subRegister:
   275                           	opt stack 0
   276  000003                     immData_toPointer@pointer:
   277                           	opt stack 0
   278  000003                     ___wmul@multiplicand:
   279                           	opt stack 0
   280                           
   281                           ; 2 bytes @ 0x2
   282  000003                     	ds	1
   283  000004                     setMXbits@subRegister:
   284                           	opt stack 0
   285  000004                     setFbits@regF_temp2:
   286                           	opt stack 0
   287                           
   288                           ; 1 bytes @ 0x3
   289  000004                     	ds	1
   290  000005                     setFbits@regF_temp1:
   291                           	opt stack 0
   292  000005                     setPortData@outputData:
   293                           	opt stack 0
   294  000005                     setMXbits@regMX_temp:
   295                           	opt stack 0
   296  000005                     ___wmul@product:
   297                           	opt stack 0
   298                           
   299                           ; 2 bytes @ 0x4
   300  000005                     	ds	1
   301  000006                     setPortData@portNumber:
   302                           	opt stack 0
   303                           
   304                           ; 1 bytes @ 0x5
   305  000006                     	ds	1
   306  000007                     wait_ms@time:
   307                           	opt stack 0
   308  000007                     setPortData@outputData_temp16:
   309                           	opt stack 0
   310                           
   311                           ; 2 bytes @ 0x6
   312  000007                     	ds	2
   313  000009                     setPortData@outputData_temp8:
   314                           	opt stack 0
   315                           
   316                           ; 1 bytes @ 0x8
   317  000009                     	ds	1
   318  00000A                     ??_processOpcode:
   319                           
   320                           ; 0 bytes @ 0x9
   321  00000A                     	ds	1
   322  00000B                     processOpcode@carriedBit:
   323                           	opt stack 0
   324                           
   325                           ; 1 bytes @ 0xA
   326  00000B                     	ds	1
   327  00000C                     processOpcode@regPC_temp:
   328                           	opt stack 0
   329                           
   330                           ; 2 bytes @ 0xB
   331  00000C                     	ds	2
   332  00000E                     processOpcode@regA_temp8:
   333                           	opt stack 0
   334                           
   335                           ; 1 bytes @ 0xD
   336  00000E                     	ds	1
   337  00000F                     processOpcode@regA_temp16:
   338                           	opt stack 0
   339                           
   340                           ; 2 bytes @ 0xE
   341  00000F                     	ds	2
   342  000011                     ??_main:
   343                           
   344                           ; 0 bytes @ 0x10
   345  000011                     	ds	1
   346                           tblptru	equ	0xFF8
   347                           tblptrh	equ	0xFF7
   348                           tblptrl	equ	0xFF6
   349                           tablat	equ	0xFF5
   350                           postinc0	equ	0xFEE
   351                           wreg	equ	0xFE8
   352                           postdec1	equ	0xFE5
   353                           fsr1h	equ	0xFE2
   354                           fsr1l	equ	0xFE1
   355                           
   356 ;;
   357 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   358 ;;
   359 ;; *************** function _main *****************
   360 ;; Defined at:
   361 ;;		line 19 in file "source/main.c"
   362 ;; Parameters:    Size  Location     Type
   363 ;;		None
   364 ;; Auto vars:     Size  Location     Type
   365 ;;		None
   366 ;; Return value:  Size  Location     Type
   367 ;;		None               void
   368 ;; Registers used:
   369 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   370 ;; Tracked objects:
   371 ;;		On entry : 0/0
   372 ;;		On exit  : 0/0
   373 ;;		Unchanged: 0/0
   374 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   377 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   378 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   379 ;;Total ram usage:        1 bytes
   380 ;; Hardware stack levels required when called:    3
   381 ;; This function calls:
   382 ;;		_dispSeg
   383 ;;		_initOscillator
   384 ;;		_initPorts
   385 ;;		_initializeRegisters
   386 ;;		_processOpcode
   387 ;;		_wait_ms
   388 ;; This function is called by:
   389 ;;		Startup code after reset
   390 ;; This function uses a non-reentrant model
   391 ;;
   392                           
   393                           	psect	text0
   394  001EEC                     __ptext0:
   395                           	opt stack 0
   396  001EEC                     _main:
   397                           	opt stack 28
   398                           
   399                           ;main.c: 21: initOscillator();
   400                           
   401                           ;incstack = 0
   402  001EEC  ECA4  F010         	call	_initOscillator	;wreg free
   403                           
   404                           ;main.c: 22: initPorts();
   405  001EF0  EC7D  F010         	call	_initPorts	;wreg free
   406                           
   407                           ;main.c: 23: dispSeg(1, '-'); dispSeg(2, '-');
   408  001EF4  6E11               	movwf	??_main& (0+255),c
   409  001EF6  0E2D               	movlw	45
   410  001EF8  6E01               	movwf	dispSeg@letter,c
   411  001EFA  5011               	movf	??_main& (0+255),w,c
   412  001EFC  0E01               	movlw	1
   413  001EFE  EC3B  F00C         	call	_dispSeg
   414  001F02  6E11               	movwf	??_main& (0+255),c
   415  001F04  0E2D               	movlw	45
   416  001F06  6E01               	movwf	dispSeg@letter,c
   417  001F08  5011               	movf	??_main& (0+255),w,c
   418  001F0A  0E02               	movlw	2
   419  001F0C  EC3B  F00C         	call	_dispSeg
   420                           
   421                           ;main.c: 25: initializeRegisters();
   422  001F10  EC64  F010         	call	_initializeRegisters	;wreg free
   423                           
   424                           ;main.c: 27: while (haltFlag == 0)
   425  001F14  D013               	goto	l1783
   426  001F16                     l1775:
   427                           
   428                           ;main.c: 28: {
   429                           ;main.c: 29: if (regPC > 2047)
   430  001F16  0E00               	movlw	0
   431  001F18  5C18               	subwf	_regPC,w,c
   432  001F1A  0E08               	movlw	8
   433  001F1C  5819               	subwfb	_regPC+1,w,c
   434  001F1E  A0D8               	btfss	status,0,c
   435  001F20  D005               	goto	l1779
   436                           
   437                           ;main.c: 30: {
   438                           ;main.c: 31: regPC = 0;
   439  001F22  0E00               	movlw	0
   440  001F24  6E19               	movwf	_regPC+1,c
   441  001F26  0E00               	movlw	0
   442  001F28  6E18               	movwf	_regPC,c
   443                           
   444                           ;main.c: 32: continue;
   445  001F2A  D008               	goto	l1783
   446  001F2C                     l1779:
   447                           
   448                           ;main.c: 33: }
   449                           ;main.c: 35: wait_ms(1000);
   450  001F2C  0E03               	movlw	3
   451  001F2E  6E08               	movwf	wait_ms@time+1,c
   452  001F30  0EE8               	movlw	232
   453  001F32  6E07               	movwf	wait_ms@time,c
   454  001F34  EC27  F010         	call	_wait_ms	;wreg free
   455                           
   456                           ;main.c: 36: processOpcode();
   457  001F38  EC03  F008         	call	_processOpcode	;wreg free
   458  001F3C                     l1783:
   459  001F3C  501A               	movf	_haltFlag,w,c
   460  001F3E  B4D8               	btfsc	status,2,c
   461  001F40  D7EA               	goto	l1775
   462                           
   463                           ;main.c: 37: }
   464                           ;main.c: 40: dispSeg(1, '-'); dispSeg(2, '-');
   465  001F42  6E11               	movwf	??_main& (0+255),c
   466  001F44  0E2D               	movlw	45
   467  001F46  6E01               	movwf	dispSeg@letter,c
   468  001F48  5011               	movf	??_main& (0+255),w,c
   469  001F4A  0E01               	movlw	1
   470  001F4C  EC3B  F00C         	call	_dispSeg
   471  001F50  6E11               	movwf	??_main& (0+255),c
   472  001F52  0E2D               	movlw	45
   473  001F54  6E01               	movwf	dispSeg@letter,c
   474  001F56  5011               	movf	??_main& (0+255),w,c
   475  001F58  0E02               	movlw	2
   476  001F5A  EC3B  F00C         	call	_dispSeg
   477  001F5E                     l39:
   478  001F5E  D7FF               	goto	l39
   479  001F60                     __end_of_main:
   480                           	opt stack 0
   481                           tblptru	equ	0xFF8
   482                           tblptrh	equ	0xFF7
   483                           tblptrl	equ	0xFF6
   484                           tablat	equ	0xFF5
   485                           postinc0	equ	0xFEE
   486                           wreg	equ	0xFE8
   487                           postdec1	equ	0xFE5
   488                           fsr1h	equ	0xFE2
   489                           fsr1l	equ	0xFE1
   490                           status	equ	0xFD8
   491                           
   492 ;; *************** function _wait_ms *****************
   493 ;; Defined at:
   494 ;;		line 50 in file "source/system.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;  time            2    6[COMRAM] unsigned int 
   497 ;; Auto vars:     Size  Location     Type
   498 ;;		None
   499 ;; Return value:  Size  Location     Type
   500 ;;		None               void
   501 ;; Registers used:
   502 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   503 ;; Tracked objects:
   504 ;;		On entry : 0/0
   505 ;;		On exit  : 0/0
   506 ;;		Unchanged: 0/0
   507 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   508 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   510 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   511 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   512 ;;Total ram usage:        2 bytes
   513 ;; Hardware stack levels used:    1
   514 ;; Hardware stack levels required when called:    1
   515 ;; This function calls:
   516 ;;		___wmul
   517 ;; This function is called by:
   518 ;;		_main
   519 ;;		_cycleSegDisplays
   520 ;; This function uses a non-reentrant model
   521 ;;
   522                           
   523                           	psect	text1
   524  00204E                     __ptext1:
   525                           	opt stack 0
   526  00204E                     _wait_ms:
   527                           	opt stack 29
   528                           
   529                           ;system.c: 52: static long timel = 0;
   530                           ;system.c: 53: timel = time * 10;
   531                           
   532                           ;incstack = 0
   533  00204E  C007  F001         	movff	wait_ms@time,___wmul@multiplier
   534  002052  C008  F002         	movff	wait_ms@time+1,___wmul@multiplier+1
   535  002056  0E00               	movlw	0
   536  002058  6E04               	movwf	___wmul@multiplicand+1,c
   537  00205A  0E0A               	movlw	10
   538  00205C  6E03               	movwf	___wmul@multiplicand,c
   539  00205E  EC47  F010         	call	___wmul	;wreg free
   540  002062  C001  F012         	movff	?___wmul,wait_ms@timel
   541  002066  C002  F013         	movff	?___wmul+1,wait_ms@timel+1
   542  00206A  6A14               	clrf	wait_ms@timel+2,c
   543  00206C  6A15               	clrf	wait_ms@timel+3,c
   544                           
   545                           ;system.c: 54: for (; timel; timel--);
   546  00206E  D008               	goto	l137
   547  002070                     l1389:
   548  002070  0EFF               	movlw	255
   549  002072  2612               	addwf	wait_ms@timel,f,c
   550  002074  0EFF               	movlw	255
   551  002076  2213               	addwfc	wait_ms@timel+1,f,c
   552  002078  0EFF               	movlw	255
   553  00207A  2214               	addwfc	wait_ms@timel+2,f,c
   554  00207C  0EFF               	movlw	255
   555  00207E  2215               	addwfc	wait_ms@timel+3,f,c
   556  002080                     l137:
   557  002080  5015               	movf	wait_ms@timel+3,w,c
   558  002082  1012               	iorwf	wait_ms@timel,w,c
   559  002084  1013               	iorwf	wait_ms@timel+1,w,c
   560  002086  1014               	iorwf	wait_ms@timel+2,w,c
   561  002088  B4D8               	btfsc	status,2,c
   562  00208A  0012               	return	
   563  00208C  D7F1               	goto	l1389
   564  00208E                     __end_of_wait_ms:
   565                           	opt stack 0
   566                           tblptru	equ	0xFF8
   567                           tblptrh	equ	0xFF7
   568                           tblptrl	equ	0xFF6
   569                           tablat	equ	0xFF5
   570                           postinc0	equ	0xFEE
   571                           wreg	equ	0xFE8
   572                           postdec1	equ	0xFE5
   573                           fsr1h	equ	0xFE2
   574                           fsr1l	equ	0xFE1
   575                           status	equ	0xFD8
   576                           
   577 ;; *************** function ___wmul *****************
   578 ;; Defined at:
   579 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\wmul.c"
   580 ;; Parameters:    Size  Location     Type
   581 ;;  multiplier      2    0[COMRAM] unsigned int 
   582 ;;  multiplicand    2    2[COMRAM] unsigned int 
   583 ;; Auto vars:     Size  Location     Type
   584 ;;  product         2    4[COMRAM] unsigned int 
   585 ;; Return value:  Size  Location     Type
   586 ;;                  2    0[COMRAM] unsigned int 
   587 ;; Registers used:
   588 ;;		wreg, status,2, status,0, prodl, prodh
   589 ;; Tracked objects:
   590 ;;		On entry : 0/0
   591 ;;		On exit  : 0/0
   592 ;;		Unchanged: 0/0
   593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   594 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   595 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   597 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   598 ;;Total ram usage:        6 bytes
   599 ;; Hardware stack levels used:    1
   600 ;; This function calls:
   601 ;;		Nothing
   602 ;; This function is called by:
   603 ;;		_wait_ms
   604 ;; This function uses a non-reentrant model
   605 ;;
   606                           
   607                           	psect	text2
   608  00208E                     __ptext2:
   609                           	opt stack 0
   610  00208E                     ___wmul:
   611                           	opt stack 29
   612                           
   613                           ;incstack = 0
   614  00208E  5001               	movf	___wmul@multiplier,w,c
   615  002090  0203               	mulwf	___wmul@multiplicand,c
   616  002092  CFF3 F005          	movff	prodl,___wmul@product
   617  002096  CFF4 F006          	movff	prodh,___wmul@product+1
   618  00209A  5001               	movf	___wmul@multiplier,w,c
   619  00209C  0204               	mulwf	___wmul@multiplicand+1,c
   620  00209E  CFF3 FFF4          	movff	prodl,prodh
   621  0020A2  6AF3               	clrf	prodl,c
   622  0020A4  50F3               	movf	prodl,w,c
   623  0020A6  2605               	addwf	___wmul@product,f,c
   624  0020A8  50F4               	movf	prodh,w,c
   625  0020AA  2206               	addwfc	___wmul@product+1,f,c
   626  0020AC  5002               	movf	___wmul@multiplier+1,w,c
   627  0020AE  0203               	mulwf	___wmul@multiplicand,c
   628  0020B0  CFF3 FFF4          	movff	prodl,prodh
   629  0020B4  6AF3               	clrf	prodl,c
   630  0020B6  50F3               	movf	prodl,w,c
   631  0020B8  2605               	addwf	___wmul@product,f,c
   632  0020BA  50F4               	movf	prodh,w,c
   633  0020BC  2206               	addwfc	___wmul@product+1,f,c
   634  0020BE  C005  F001         	movff	___wmul@product,?___wmul
   635  0020C2  C006  F002         	movff	___wmul@product+1,?___wmul+1
   636  0020C6  0012               	return	
   637  0020C8                     __end_of___wmul:
   638                           	opt stack 0
   639                           tblptru	equ	0xFF8
   640                           tblptrh	equ	0xFF7
   641                           tblptrl	equ	0xFF6
   642                           tablat	equ	0xFF5
   643                           prodh	equ	0xFF4
   644                           prodl	equ	0xFF3
   645                           postinc0	equ	0xFEE
   646                           wreg	equ	0xFE8
   647                           postdec1	equ	0xFE5
   648                           fsr1h	equ	0xFE2
   649                           fsr1l	equ	0xFE1
   650                           status	equ	0xFD8
   651                           
   652 ;; *************** function _processOpcode *****************
   653 ;; Defined at:
   654 ;;		line 226 in file "source/emulator.c"
   655 ;; Parameters:    Size  Location     Type
   656 ;;		None
   657 ;; Auto vars:     Size  Location     Type
   658 ;;  regA_temp16     2   14[COMRAM] unsigned int 
   659 ;;  regPC_temp      2   11[COMRAM] unsigned int 
   660 ;;  regA_temp8      1   13[COMRAM] unsigned char 
   661 ;;  carriedBit      1   10[COMRAM] unsigned char 
   662 ;; Return value:  Size  Location     Type
   663 ;;		None               void
   664 ;; Registers used:
   665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   666 ;; Tracked objects:
   667 ;;		On entry : 0/0
   668 ;;		On exit  : 0/0
   669 ;;		Unchanged: 0/0
   670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   672 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   673 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   674 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   675 ;;Total ram usage:        7 bytes
   676 ;; Hardware stack levels used:    1
   677 ;; Hardware stack levels required when called:    2
   678 ;; This function calls:
   679 ;;		_getFbits
   680 ;;		_getMXbits
   681 ;;		_getPortData
   682 ;;		_immData_toPointer
   683 ;;		_setFbits
   684 ;;		_setMXbits
   685 ;;		_setPortData
   686 ;;		_update_immData
   687 ;; This function is called by:
   688 ;;		_main
   689 ;; This function uses a non-reentrant model
   690 ;;
   691                           
   692                           	psect	text3
   693  001006                     __ptext3:
   694                           	opt stack 0
   695  001006                     _processOpcode:
   696                           	opt stack 28
   697                           
   698                           ;emulator.c: 229: update_immData();
   699                           
   700                           ;incstack = 0
   701  001006  ECE6  F00E         	call	_update_immData	;wreg free
   702                           
   703                           ;emulator.c: 232: uint8_t regA_temp8 = regA;
   704  00100A  C01D  F00E         	movff	_regA,processOpcode@regA_temp8
   705                           
   706                           ;emulator.c: 233: uint16_t regA_temp16 = (uint16_t) regA;
   707  00100E  C01D  F00F         	movff	_regA,processOpcode@regA_temp16
   708  001012  6A10               	clrf	processOpcode@regA_temp16+1,c
   709                           
   710                           ;emulator.c: 234: uint16_t regPC_temp = regPC;
   711  001014  C018  F00C         	movff	_regPC,processOpcode@regPC_temp
   712  001018  C019  F00D         	movff	_regPC+1,processOpcode@regPC_temp+1
   713                           
   714                           ;emulator.c: 235: uint8_t carriedBit;
   715                           ;emulator.c: 238: switch (virtualMemory[regPC])
   716  00101C  D356               	goto	l1765
   717  00101E                     l1429:
   718                           
   719                           ;emulator.c: 246: setFbits(0, 1);
   720  00101E  6E0A               	movwf	??_processOpcode& (0+255),c
   721  001020  0E01               	movlw	1
   722  001022  6E01               	movwf	setFbits@value,c
   723  001024  500A               	movf	??_processOpcode& (0+255),w,c
   724  001026  0E00               	movlw	0
   725  001028  EC3D  F00E         	call	_setFbits
   726                           
   727                           ;emulator.c: 247: break;
   728  00102C  EF38  F00C         	goto	l1767
   729  001030                     l1431:
   730                           
   731                           ;emulator.c: 250: setFbits(0, 0);
   732  001030  6E0A               	movwf	??_processOpcode& (0+255),c
   733  001032  0E00               	movlw	0
   734  001034  6E01               	movwf	setFbits@value,c
   735  001036  500A               	movf	??_processOpcode& (0+255),w,c
   736  001038  0E00               	movlw	0
   737  00103A  EC3D  F00E         	call	_setFbits
   738                           
   739                           ;emulator.c: 251: break;
   740  00103E  EF38  F00C         	goto	l1767
   741  001042                     l1433:
   742                           
   743                           ;emulator.c: 254: haltFlag = 1;
   744  001042  6E0A               	movwf	??_processOpcode& (0+255),c
   745  001044  0E01               	movlw	1
   746  001046  6E1A               	movwf	_haltFlag,c
   747  001048  500A               	movf	??_processOpcode& (0+255),w,c
   748                           
   749                           ;emulator.c: 255: break;
   750  00104A  EF38  F00C         	goto	l1767
   751  00104E                     l1435:
   752                           
   753                           ;emulator.c: 261: regA = getPortData(regB);
   754  00104E  501E               	movf	_regB,w,c
   755  001050  ECBF  F010         	call	_getPortData
   756  001054  D23D               	goto	L10
   757  001056                     l1437:
   758                           
   759                           ;emulator.c: 265: regA = getPortData(immData_1);
   760  001056  501B               	movf	_immData_1,w,c
   761  001058  ECBF  F010         	call	_getPortData
   762  00105C  6E1D               	movwf	_regA,c
   763  00105E  D2FF               	goto	L20
   764  001060                     l1441:
   765                           
   766                           ;emulator.c: 270: setPortData(regB, regA);
   767  001060  C01D  F005         	movff	_regA,setPortData@outputData
   768  001064  501E               	movf	_regB,w,c
   769  001066  EC92  F00E         	call	_setPortData
   770                           
   771                           ;emulator.c: 271: break;
   772  00106A  EF38  F00C         	goto	l1767
   773  00106E                     l1443:
   774                           
   775                           ;emulator.c: 274: setPortData(immData_1, regA);
   776  00106E  C01D  F005         	movff	_regA,setPortData@outputData
   777  001072  501B               	movf	_immData_1,w,c
   778  001074  EC92  F00E         	call	_setPortData
   779  001078  D2F2               	goto	L20
   780  00107A                     l1447:
   781                           
   782                           ;emulator.c: 279: setPortData(immData_1, immData_2);
   783  00107A  C01C  F005         	movff	_immData_2,setPortData@outputData
   784  00107E  501B               	movf	_immData_1,w,c
   785  001080  EC92  F00E         	call	_setPortData
   786  001084  D11E               	goto	l1575
   787  001086                     l1451:
   788                           
   789                           ;emulator.c: 287: regA = virtualMemory[regMX];
   790  001086  0E00               	movlw	low _virtualMemory
   791  001088  2416               	addwf	_regMX,w,c
   792  00108A  6ED9               	movwf	fsr2l,c
   793  00108C  0E02               	movlw	high _virtualMemory
   794  00108E  2017               	addwfc	_regMX+1,w,c
   795  001090  D21D               	goto	L23
   796  001092                     l1453:
   797                           
   798                           ;emulator.c: 291: regA = getMXbits(0);
   799  001092  0E00               	movlw	0
   800  001094  ECB2  F010         	call	_getMXbits
   801  001098  D21B               	goto	L10
   802  00109A                     l1455:
   803                           
   804                           ;emulator.c: 295: regA = getMXbits(1);
   805  00109A  0E01               	movlw	1
   806  00109C  ECB2  F010         	call	_getMXbits
   807  0010A0  D217               	goto	L10
   808  0010A2                     l273:
   809                           
   810                           ;emulator.c: 299: regA = regSP;
   811  0010A2  C020  F01D         	movff	_regSP,_regA
   812                           
   813                           ;emulator.c: 300: break;
   814  0010A6  D3E4               	goto	l1767
   815  0010A8                     l274:
   816                           
   817                           ;emulator.c: 303: regA = regF;
   818  0010A8  C01F  F01D         	movff	_regF,_regA
   819                           
   820                           ;emulator.c: 304: break;
   821  0010AC  D3E1               	goto	l1767
   822  0010AE                     l275:
   823                           
   824                           ;emulator.c: 307: regA = regB;
   825  0010AE  C01E  F01D         	movff	_regB,_regA
   826                           
   827                           ;emulator.c: 308: break;
   828  0010B2  D3DE               	goto	l1767
   829  0010B4                     l1457:
   830                           
   831                           ;emulator.c: 320: virtualMemory[regMX] = regA;
   832  0010B4  0E00               	movlw	low _virtualMemory
   833  0010B6  2416               	addwf	_regMX,w,c
   834  0010B8  6ED9               	movwf	fsr2l,c
   835  0010BA  0E02               	movlw	high _virtualMemory
   836  0010BC  2017               	addwfc	_regMX+1,w,c
   837  0010BE  6EDA               	movwf	fsr2h,c
   838  0010C0  C01D  FFDF         	movff	_regA,indf2
   839                           
   840                           ;emulator.c: 322: break;
   841  0010C4  D3D5               	goto	l1767
   842  0010C6                     l1459:
   843                           
   844                           ;emulator.c: 325: setMXbits(0, regA);
   845  0010C6  C01D  F001         	movff	_regA,setMXbits@value
   846  0010CA  0E00               	movlw	0
   847  0010CC  ECB0  F00F         	call	_setMXbits
   848                           
   849                           ;emulator.c: 326: break;
   850  0010D0  D3CF               	goto	l1767
   851  0010D2                     l1461:
   852                           
   853                           ;emulator.c: 329: setMXbits(1, regA);
   854  0010D2  C01D  F001         	movff	_regA,setMXbits@value
   855  0010D6  0E01               	movlw	1
   856  0010D8  ECB0  F00F         	call	_setMXbits
   857                           
   858                           ;emulator.c: 330: break;
   859  0010DC  D3C9               	goto	l1767
   860  0010DE                     l279:
   861                           
   862                           ;emulator.c: 333: regSP = regA;
   863  0010DE  C01D  F020         	movff	_regA,_regSP
   864                           
   865                           ;emulator.c: 334: break;
   866  0010E2  D3C6               	goto	l1767
   867  0010E4                     l280:
   868                           
   869                           ;emulator.c: 337: regB = regA;
   870  0010E4  C01D  F01E         	movff	_regA,_regB
   871                           
   872                           ;emulator.c: 338: break;
   873  0010E8  D3C3               	goto	l1767
   874  0010EA                     l281:
   875                           
   876                           ;emulator.c: 341: regA = immData_1;
   877  0010EA  C01B  F01D         	movff	_immData_1,_regA
   878  0010EE  D2B7               	goto	L20
   879  0010F0                     l282:
   880                           
   881                           ;emulator.c: 347: regA_temp8 = regA;
   882  0010F0  C01D  F00E         	movff	_regA,processOpcode@regA_temp8
   883                           
   884                           ;emulator.c: 348: regA = regB;
   885  0010F4  C01E  F01D         	movff	_regB,_regA
   886                           
   887                           ;emulator.c: 349: regB = regA_temp8;
   888  0010F8  C00E  F01E         	movff	processOpcode@regA_temp8,_regB
   889                           
   890                           ;emulator.c: 350: break;
   891  0010FC  D3B9               	goto	l1767
   892  0010FE                     l1465:
   893                           
   894                           ;emulator.c: 356: regA &= regB;
   895  0010FE  501E               	movf	_regB,w,c
   896  001100  161D               	andwf	_regA,f,c
   897                           
   898                           ;emulator.c: 357: break;
   899  001102  D3B6               	goto	l1767
   900  001104                     l1467:
   901                           
   902                           ;emulator.c: 361: regA = regA & regB;
   903  001104  501D               	movf	_regA,w,c
   904  001106  141E               	andwf	_regB,w,c
   905  001108  D00B               	goto	L9
   906  00110A                     l1471:
   907                           
   908                           ;emulator.c: 366: regA |= regB;
   909  00110A  501E               	movf	_regB,w,c
   910  00110C  121D               	iorwf	_regA,f,c
   911                           
   912                           ;emulator.c: 367: break;
   913  00110E  D3B0               	goto	l1767
   914  001110                     l1473:
   915                           
   916                           ;emulator.c: 371: regA = regA | regB;
   917  001110  501D               	movf	_regA,w,c
   918  001112  101E               	iorwf	_regB,w,c
   919  001114  D005               	goto	L9
   920  001116                     l1477:
   921                           
   922                           ;emulator.c: 376: regA ^= regB;
   923  001116  501E               	movf	_regB,w,c
   924  001118  1A1D               	xorwf	_regA,f,c
   925                           
   926                           ;emulator.c: 377: break;
   927  00111A  D3AA               	goto	l1767
   928  00111C                     l1479:
   929                           
   930                           ;emulator.c: 381: regA = regA ^ regB;
   931  00111C  501D               	movf	_regA,w,c
   932  00111E  181E               	xorwf	_regB,w,c
   933  001120                     L9:
   934  001120  6E1D               	movwf	_regA,c
   935  001122                     l1483:
   936                           
   937                           ;emulator.c: 386: regA =~ regA;
   938  001122  1E1D               	comf	_regA,f,c
   939                           
   940                           ;emulator.c: 387: break;
   941  001124  D3A5               	goto	l1767
   942  001126                     l290:
   943                           
   944                           ;emulator.c: 391: regA_temp8 = regA;
   945  001126  C01D  F00E         	movff	_regA,processOpcode@regA_temp8
   946                           
   947                           ;emulator.c: 392: regA_temp8 >>= 7;
   948  00112A  360E               	rlcf	processOpcode@regA_temp8,f,c
   949  00112C  6A0E               	clrf	processOpcode@regA_temp8,c
   950  00112E  360E               	rlcf	processOpcode@regA_temp8,f,c
   951                           
   952                           ;emulator.c: 393: if (regA_temp8 == 1) setFbits(0, 1);
   953  001130  040E               	decf	processOpcode@regA_temp8,w,c
   954  001132  A4D8               	btfss	status,2,c
   955  001134  D008               	goto	l1489
   956  001136  6E0A               	movwf	??_processOpcode& (0+255),c
   957  001138  0E01               	movlw	1
   958  00113A  6E01               	movwf	setFbits@value,c
   959  00113C  500A               	movf	??_processOpcode& (0+255),w,c
   960  00113E  0E00               	movlw	0
   961  001140  EC3D  F00E         	call	_setFbits
   962  001144  D007               	goto	l1491
   963  001146                     l1489:
   964                           
   965                           ;emulator.c: 394: else setFbits(0, 0);
   966  001146  6E0A               	movwf	??_processOpcode& (0+255),c
   967  001148  0E00               	movlw	0
   968  00114A  6E01               	movwf	setFbits@value,c
   969  00114C  500A               	movf	??_processOpcode& (0+255),w,c
   970  00114E  0E00               	movlw	0
   971  001150  EC3D  F00E         	call	_setFbits
   972  001154                     l1491:
   973                           
   974                           ;emulator.c: 397: regA <<= 1;
   975  001154  90D8               	bcf	status,0,c
   976  001156  361D               	rlcf	_regA,f,c
   977                           
   978                           ;emulator.c: 398: break;
   979  001158  D38B               	goto	l1767
   980  00115A                     l293:
   981                           
   982                           ;emulator.c: 402: regA_temp8 = regA;
   983  00115A  C01D  F00E         	movff	_regA,processOpcode@regA_temp8
   984                           
   985                           ;emulator.c: 403: regA_temp8 <<= 7;
   986  00115E  320E               	rrcf	processOpcode@regA_temp8,f,c
   987  001160  6A0E               	clrf	processOpcode@regA_temp8,c
   988  001162  320E               	rrcf	processOpcode@regA_temp8,f,c
   989                           
   990                           ;emulator.c: 404: regA_temp8 >>= 7;
   991  001164  360E               	rlcf	processOpcode@regA_temp8,f,c
   992  001166  6A0E               	clrf	processOpcode@regA_temp8,c
   993  001168  360E               	rlcf	processOpcode@regA_temp8,f,c
   994                           
   995                           ;emulator.c: 405: if (regA_temp8 == 1) setFbits(0, 1);
   996  00116A  040E               	decf	processOpcode@regA_temp8,w,c
   997  00116C  A4D8               	btfss	status,2,c
   998  00116E  D008               	goto	l1497
   999  001170  6E0A               	movwf	??_processOpcode& (0+255),c
  1000  001172  0E01               	movlw	1
  1001  001174  6E01               	movwf	setFbits@value,c
  1002  001176  500A               	movf	??_processOpcode& (0+255),w,c
  1003  001178  0E00               	movlw	0
  1004  00117A  EC3D  F00E         	call	_setFbits
  1005  00117E  D007               	goto	l1499
  1006  001180                     l1497:
  1007                           
  1008                           ;emulator.c: 406: else setFbits(0, 0);
  1009  001180  6E0A               	movwf	??_processOpcode& (0+255),c
  1010  001182  0E00               	movlw	0
  1011  001184  6E01               	movwf	setFbits@value,c
  1012  001186  500A               	movf	??_processOpcode& (0+255),w,c
  1013  001188  0E00               	movlw	0
  1014  00118A  EC3D  F00E         	call	_setFbits
  1015  00118E                     l1499:
  1016                           
  1017                           ;emulator.c: 409: regA >>= 1;
  1018  00118E  90D8               	bcf	status,0,c
  1019  001190  321D               	rrcf	_regA,f,c
  1020                           
  1021                           ;emulator.c: 410: break;
  1022  001192  D36E               	goto	l1767
  1023  001194                     l296:
  1024                           
  1025                           ;emulator.c: 414: carriedBit = regA;
  1026  001194  C01D  F00B         	movff	_regA,processOpcode@carriedBit
  1027                           
  1028                           ;emulator.c: 415: carriedBit >>= 7;
  1029  001198  360B               	rlcf	processOpcode@carriedBit,f,c
  1030  00119A  6A0B               	clrf	processOpcode@carriedBit,c
  1031  00119C  360B               	rlcf	processOpcode@carriedBit,f,c
  1032                           
  1033                           ;emulator.c: 418: regA <<= 1;
  1034  00119E  90D8               	bcf	status,0,c
  1035  0011A0  361D               	rlcf	_regA,f,c
  1036                           
  1037                           ;emulator.c: 421: regA = regA + carriedBit;
  1038  0011A2  501D               	movf	_regA,w,c
  1039  0011A4  240B               	addwf	processOpcode@carriedBit,w,c
  1040  0011A6  D194               	goto	L10
  1041  0011A8                     l297:
  1042                           
  1043                           ;emulator.c: 426: carriedBit = regA;
  1044  0011A8  C01D  F00B         	movff	_regA,processOpcode@carriedBit
  1045                           
  1046                           ;emulator.c: 427: carriedBit <<= 7;
  1047  0011AC  320B               	rrcf	processOpcode@carriedBit,f,c
  1048  0011AE  6A0B               	clrf	processOpcode@carriedBit,c
  1049  0011B0  320B               	rrcf	processOpcode@carriedBit,f,c
  1050                           
  1051                           ;emulator.c: 430: regA >>= 1;
  1052  0011B2  90D8               	bcf	status,0,c
  1053  0011B4  321D               	rrcf	_regA,f,c
  1054                           
  1055                           ;emulator.c: 433: regA += carriedBit;
  1056  0011B6  500B               	movf	processOpcode@carriedBit,w,c
  1057  0011B8  D1E9               	goto	L11
  1058  0011BA                     l1505:
  1059                           
  1060                           ;emulator.c: 438: if (regA == regB) setFbits(3, 1);
  1061  0011BA  501E               	movf	_regB,w,c
  1062  0011BC  621D               	cpfseq	_regA,c
  1063  0011BE  D008               	goto	l1509
  1064  0011C0  6E0A               	movwf	??_processOpcode& (0+255),c
  1065  0011C2  0E01               	movlw	1
  1066  0011C4  6E01               	movwf	setFbits@value,c
  1067  0011C6  500A               	movf	??_processOpcode& (0+255),w,c
  1068  0011C8  0E03               	movlw	3
  1069  0011CA  EC3D  F00E         	call	_setFbits
  1070  0011CE  D007               	goto	l1511
  1071  0011D0                     l1509:
  1072                           
  1073                           ;emulator.c: 439: else setFbits(3, 0);
  1074  0011D0  6E0A               	movwf	??_processOpcode& (0+255),c
  1075  0011D2  0E00               	movlw	0
  1076  0011D4  6E01               	movwf	setFbits@value,c
  1077  0011D6  500A               	movf	??_processOpcode& (0+255),w,c
  1078  0011D8  0E03               	movlw	3
  1079  0011DA  EC3D  F00E         	call	_setFbits
  1080  0011DE                     l1511:
  1081                           
  1082                           ;emulator.c: 442: if (regA < regB) setFbits(2, 1);
  1083  0011DE  501E               	movf	_regB,w,c
  1084  0011E0  5C1D               	subwf	_regA,w,c
  1085  0011E2  B0D8               	btfsc	status,0,c
  1086  0011E4  D008               	goto	l1515
  1087  0011E6  6E0A               	movwf	??_processOpcode& (0+255),c
  1088  0011E8  0E01               	movlw	1
  1089  0011EA  6E01               	movwf	setFbits@value,c
  1090  0011EC  500A               	movf	??_processOpcode& (0+255),w,c
  1091  0011EE  0E02               	movlw	2
  1092  0011F0  EC3D  F00E         	call	_setFbits
  1093  0011F4  D007               	goto	l1517
  1094  0011F6                     l1515:
  1095                           
  1096                           ;emulator.c: 443: else setFbits(2, 0);
  1097  0011F6  6E0A               	movwf	??_processOpcode& (0+255),c
  1098  0011F8  0E00               	movlw	0
  1099  0011FA  6E01               	movwf	setFbits@value,c
  1100  0011FC  500A               	movf	??_processOpcode& (0+255),w,c
  1101  0011FE  0E02               	movlw	2
  1102  001200  EC3D  F00E         	call	_setFbits
  1103  001204                     l1517:
  1104                           
  1105                           ;emulator.c: 446: if (regA > regB) setFbits(1, 1);
  1106  001204  501D               	movf	_regA,w,c
  1107  001206  5C1E               	subwf	_regB,w,c
  1108  001208  B0D8               	btfsc	status,0,c
  1109  00120A  D008               	goto	l1521
  1110  00120C  6E0A               	movwf	??_processOpcode& (0+255),c
  1111  00120E  0E01               	movlw	1
  1112  001210  6E01               	movwf	setFbits@value,c
  1113  001212  500A               	movf	??_processOpcode& (0+255),w,c
  1114  001214  0E01               	movlw	1
  1115  001216  EC3D  F00E         	call	_setFbits
  1116  00121A  D32A               	goto	l1767
  1117  00121C                     l1521:
  1118                           
  1119                           ;emulator.c: 447: else setFbits(1, 0);
  1120  00121C  6E0A               	movwf	??_processOpcode& (0+255),c
  1121  00121E  0E00               	movlw	0
  1122  001220  6E01               	movwf	setFbits@value,c
  1123  001222  500A               	movf	??_processOpcode& (0+255),w,c
  1124  001224  0E01               	movlw	1
  1125  001226  EC3D  F00E         	call	_setFbits
  1126  00122A  D322               	goto	l1767
  1127  00122C                     l1525:
  1128                           
  1129                           ;emulator.c: 461: regPC = immData_toPointer();
  1130  00122C  EC95  F010         	call	_immData_toPointer	;wreg free
  1131  001230  D021               	goto	L30
  1132  001232                     l1529:
  1133                           
  1134                           ;emulator.c: 467: if (getFbits(3) == 1) regPC = regMX;
  1135  001232  0E03               	movlw	3
  1136  001234  ECD9  F00F         	call	_getFbits
  1137  001238                     L34:
  1138  001238  6E0A               	movwf	??_processOpcode& (0+255),c
  1139  00123A  040A               	decf	??_processOpcode,w,c
  1140  00123C  D024               	goto	L31
  1141  00123E                     L27:
  1142  00123E  C016  F018         	movff	_regMX,_regPC
  1143  001242  C017  F019         	movff	_regMX+1,_regPC+1
  1144  001246  D0D1               	goto	L15
  1145  001248                     l1535:
  1146                           
  1147                           ;emulator.c: 473: if (getFbits(3) == 1) regPC = immData_toPointer();
  1148  001248  0E03               	movlw	3
  1149  00124A  ECD9  F00F         	call	_getFbits
  1150  00124E  6E0A               	movwf	??_processOpcode& (0+255),c
  1151  001250  040A               	decf	??_processOpcode,w,c
  1152  001252  A4D8               	btfss	status,2,c
  1153  001254  D0CA               	goto	L15
  1154  001256  EC95  F010         	call	_immData_toPointer	;wreg free
  1155  00125A  D00C               	goto	L30
  1156  00125C                     l1541:
  1157                           
  1158                           ;emulator.c: 479: if (getFbits(3) == 0) regPC = regMX;
  1159  00125C  0E03               	movlw	3
  1160  00125E  ECD9  F00F         	call	_getFbits
  1161  001262  D045               	goto	L33
  1162  001264                     l1547:
  1163                           
  1164                           ;emulator.c: 485: if (getFbits(3) == 0) regPC = immData_toPointer();
  1165  001264  0E03               	movlw	3
  1166  001266  ECD9  F00F         	call	_getFbits
  1167  00126A  0900               	iorlw	0
  1168  00126C  A4D8               	btfss	status,2,c
  1169  00126E  D0BD               	goto	L15
  1170  001270  EC95  F010         	call	_immData_toPointer	;wreg free
  1171  001274                     L30:
  1172  001274  C001  F018         	movff	?_immData_toPointer,_regPC
  1173  001278  C002  F019         	movff	?_immData_toPointer+1,_regPC+1
  1174  00127C  D0B6               	goto	L15
  1175  00127E                     l1553:
  1176                           
  1177                           ;emulator.c: 491: if (getFbits(1) == 1) regPC = regMX;
  1178  00127E  0E01               	movlw	1
  1179  001280  ECD9  F00F         	call	_getFbits
  1180  001284  D7D9               	goto	L34
  1181  001286                     L31:
  1182  001286  A4D8               	btfss	status,2,c
  1183  001288  D0B0               	goto	L15
  1184  00128A  D7D9               	goto	L27
  1185  00128C                     l1559:
  1186                           
  1187                           ;emulator.c: 497: if (getFbits(1) == 1) regPC = immData_toPointer();
  1188  00128C  0E01               	movlw	1
  1189  00128E  ECD9  F00F         	call	_getFbits
  1190  001292  6E0A               	movwf	??_processOpcode& (0+255),c
  1191  001294  040A               	decf	??_processOpcode,w,c
  1192  001296  A4D8               	btfss	status,2,c
  1193  001298  D0A8               	goto	L15
  1194  00129A  EC95  F010         	call	_immData_toPointer	;wreg free
  1195  00129E  D7EA               	goto	L30
  1196  0012A0                     l1565:
  1197                           
  1198                           ;emulator.c: 503: if (getFbits(2) == 1) regPC = regMX;
  1199  0012A0  0E02               	movlw	2
  1200  0012A2  ECD9  F00F         	call	_getFbits
  1201  0012A6  D7C8               	goto	L34
  1202  0012A8                     l1571:
  1203                           
  1204                           ;emulator.c: 509: if (getFbits(2) == 1) regPC = immData_toPointer();
  1205  0012A8  0E02               	movlw	2
  1206  0012AA  ECD9  F00F         	call	_getFbits
  1207  0012AE  6E0A               	movwf	??_processOpcode& (0+255),c
  1208  0012B0  040A               	decf	??_processOpcode,w,c
  1209  0012B2  A4D8               	btfss	status,2,c
  1210  0012B4  D006               	goto	l1575
  1211  0012B6  EC95  F010         	call	_immData_toPointer	;wreg free
  1212  0012BA  C001  F018         	movff	?_immData_toPointer,_regPC
  1213  0012BE  C002  F019         	movff	?_immData_toPointer+1,_regPC+1
  1214  0012C2                     l1575:
  1215                           
  1216                           ;emulator.c: 510: regPC += 2;
  1217  0012C2  0E02               	movlw	2
  1218  0012C4  2618               	addwf	_regPC,f,c
  1219  0012C6  0E00               	movlw	0
  1220  0012C8  2219               	addwfc	_regPC+1,f,c
  1221                           
  1222                           ;emulator.c: 511: break;
  1223  0012CA  D2D2               	goto	l1767
  1224  0012CC                     l1577:
  1225                           
  1226                           ;emulator.c: 514: if (getFbits(0) == 1) regPC = regMX;
  1227  0012CC  0E00               	movlw	0
  1228  0012CE  ECD9  F00F         	call	_getFbits
  1229  0012D2  D7B2               	goto	L34
  1230  0012D4                     l1583:
  1231                           
  1232                           ;emulator.c: 520: if (getFbits(0) == 1) regPC = immData_toPointer();
  1233  0012D4  0E00               	movlw	0
  1234  0012D6  ECD9  F00F         	call	_getFbits
  1235  0012DA  6E0A               	movwf	??_processOpcode& (0+255),c
  1236  0012DC  040A               	decf	??_processOpcode,w,c
  1237  0012DE  A4D8               	btfss	status,2,c
  1238  0012E0  D084               	goto	L15
  1239  0012E2  EC95  F010         	call	_immData_toPointer	;wreg free
  1240  0012E6  D7C6               	goto	L30
  1241  0012E8                     l1589:
  1242                           
  1243                           ;emulator.c: 526: if (getFbits(0) == 0) regPC = regMX;
  1244  0012E8  0E00               	movlw	0
  1245  0012EA  ECD9  F00F         	call	_getFbits
  1246  0012EE                     L33:
  1247  0012EE  0900               	iorlw	0
  1248  0012F0  D7CA               	goto	L31
  1249  0012F2                     l1595:
  1250                           
  1251                           ;emulator.c: 532: if (getFbits(0) == 0) regPC = immData_toPointer();
  1252  0012F2  0E00               	movlw	0
  1253  0012F4  ECD9  F00F         	call	_getFbits
  1254  0012F8  0900               	iorlw	0
  1255  0012FA  A4D8               	btfss	status,2,c
  1256  0012FC  D076               	goto	L15
  1257  0012FE  EC95  F010         	call	_immData_toPointer	;wreg free
  1258  001302  D7B8               	goto	L30
  1259  001304                     l1601:
  1260                           
  1261                           ;emulator.c: 539: regPC++;
  1262  001304  4A18               	infsnz	_regPC,f,c
  1263  001306  2A19               	incf	_regPC+1,f,c
  1264                           
  1265                           ;emulator.c: 540: regPC_temp = regPC;
  1266  001308  C018  F00C         	movff	_regPC,processOpcode@regPC_temp
  1267  00130C  C019  F00D         	movff	_regPC+1,processOpcode@regPC_temp+1
  1268                           
  1269                           ;emulator.c: 541: regPC_temp >>= 8;
  1270  001310  500D               	movf	processOpcode@regPC_temp+1,w,c
  1271  001312  6E0C               	movwf	processOpcode@regPC_temp,c
  1272  001314  6A0D               	clrf	processOpcode@regPC_temp+1,c
  1273                           
  1274                           ;emulator.c: 542: stack[regSP] = (uint8_t) regPC_temp;
  1275  001316  5020               	movf	_regSP,w,c
  1276  001318  0D01               	mullw	1
  1277  00131A  0101               	movlb	1	; () banked
  1278  00131C  0E00               	movlw	low _stack
  1279  00131E  24F3               	addwf	prodl,w,c
  1280  001320  6ED9               	movwf	fsr2l,c
  1281  001322  0101               	movlb	1	; () banked
  1282  001324  0E01               	movlw	high _stack
  1283  001326  20F4               	addwfc	prodh,w,c
  1284  001328  6EDA               	movwf	fsr2h,c
  1285  00132A  C00C  FFDF         	movff	processOpcode@regPC_temp,indf2
  1286                           
  1287                           ; BSR set to: 1
  1288                           ;emulator.c: 543: regSP++;
  1289  00132E  2A20               	incf	_regSP,f,c
  1290                           
  1291                           ; BSR set to: 1
  1292                           ;emulator.c: 544: stack[regSP] = (uint8_t) regPC;
  1293  001330  5020               	movf	_regSP,w,c
  1294  001332  0D01               	mullw	1
  1295  001334  0101               	movlb	1	; () banked
  1296  001336  0E00               	movlw	low _stack
  1297  001338  24F3               	addwf	prodl,w,c
  1298  00133A  6ED9               	movwf	fsr2l,c
  1299  00133C  0101               	movlb	1	; () banked
  1300  00133E  0E01               	movlw	high _stack
  1301  001340  20F4               	addwfc	prodh,w,c
  1302  001342  6EDA               	movwf	fsr2h,c
  1303  001344  C018  FFDF         	movff	_regPC,indf2
  1304                           
  1305                           ; BSR set to: 1
  1306                           ;emulator.c: 545: regSP++;
  1307  001348  2A20               	incf	_regSP,f,c
  1308  00134A  D779               	goto	L27
  1309  00134C                     l1619:
  1310                           
  1311                           ;emulator.c: 553: regPC += 3;
  1312  00134C  0E03               	movlw	3
  1313  00134E  2618               	addwf	_regPC,f,c
  1314  001350  0E00               	movlw	0
  1315  001352  2219               	addwfc	_regPC+1,f,c
  1316                           
  1317                           ;emulator.c: 554: regPC_temp = regPC;
  1318  001354  C018  F00C         	movff	_regPC,processOpcode@regPC_temp
  1319  001358  C019  F00D         	movff	_regPC+1,processOpcode@regPC_temp+1
  1320                           
  1321                           ;emulator.c: 555: regPC_temp >>= 8;
  1322  00135C  500D               	movf	processOpcode@regPC_temp+1,w,c
  1323  00135E  6E0C               	movwf	processOpcode@regPC_temp,c
  1324  001360  6A0D               	clrf	processOpcode@regPC_temp+1,c
  1325                           
  1326                           ;emulator.c: 556: stack[regSP] = (uint8_t) regPC_temp;
  1327  001362  5020               	movf	_regSP,w,c
  1328  001364  0D01               	mullw	1
  1329  001366  0101               	movlb	1	; () banked
  1330  001368  0E00               	movlw	low _stack
  1331  00136A  24F3               	addwf	prodl,w,c
  1332  00136C  6ED9               	movwf	fsr2l,c
  1333  00136E  0101               	movlb	1	; () banked
  1334  001370  0E01               	movlw	high _stack
  1335  001372  20F4               	addwfc	prodh,w,c
  1336  001374  6EDA               	movwf	fsr2h,c
  1337  001376  C00C  FFDF         	movff	processOpcode@regPC_temp,indf2
  1338                           
  1339                           ; BSR set to: 1
  1340                           ;emulator.c: 557: regSP++;
  1341  00137A  2A20               	incf	_regSP,f,c
  1342                           
  1343                           ; BSR set to: 1
  1344                           ;emulator.c: 558: stack[regSP] = (uint8_t) regPC;
  1345  00137C  5020               	movf	_regSP,w,c
  1346  00137E  0D01               	mullw	1
  1347  001380  0101               	movlb	1	; () banked
  1348  001382  0E00               	movlw	low _stack
  1349  001384  24F3               	addwf	prodl,w,c
  1350  001386  6ED9               	movwf	fsr2l,c
  1351  001388  0101               	movlb	1	; () banked
  1352  00138A  0E01               	movlw	high _stack
  1353  00138C  20F4               	addwfc	prodh,w,c
  1354  00138E  6EDA               	movwf	fsr2h,c
  1355  001390  C018  FFDF         	movff	_regPC,indf2
  1356                           
  1357                           ; BSR set to: 1
  1358                           ;emulator.c: 559: regSP++;
  1359  001394  2A20               	incf	_regSP,f,c
  1360                           
  1361                           ; BSR set to: 1
  1362                           ;emulator.c: 560: regPC = immData_toPointer();
  1363  001396  EC95  F010         	call	_immData_toPointer	;wreg free
  1364  00139A  D76C               	goto	L30
  1365  00139C                     l1637:
  1366                           
  1367                           ;emulator.c: 566: regSP--;
  1368  00139C  0620               	decf	_regSP,f,c
  1369                           
  1370                           ;emulator.c: 567: regPC = (uint16_t) stack[regSP];
  1371  00139E  5020               	movf	_regSP,w,c
  1372  0013A0  0D01               	mullw	1
  1373  0013A2  0101               	movlb	1	; () banked
  1374  0013A4  0E00               	movlw	low _stack
  1375  0013A6  24F3               	addwf	prodl,w,c
  1376  0013A8  6ED9               	movwf	fsr2l,c
  1377  0013AA  0101               	movlb	1	; () banked
  1378  0013AC  0E01               	movlw	high _stack
  1379  0013AE  20F4               	addwfc	prodh,w,c
  1380  0013B0  6EDA               	movwf	fsr2h,c
  1381  0013B2  50DF               	movf	indf2,w,c
  1382  0013B4  6E0A               	movwf	??_processOpcode& (0+255),c
  1383  0013B6  500A               	movf	??_processOpcode,w,c
  1384  0013B8  6E18               	movwf	_regPC,c
  1385  0013BA  6A19               	clrf	_regPC+1,c
  1386                           
  1387                           ; BSR set to: 1
  1388                           ;emulator.c: 568: regSP--;
  1389  0013BC  0620               	decf	_regSP,f,c
  1390                           
  1391                           ;emulator.c: 569: regPC_temp = (uint16_t) stack[regSP];
  1392  0013BE  5020               	movf	_regSP,w,c
  1393  0013C0  0D01               	mullw	1
  1394  0013C2  0101               	movlb	1	; () banked
  1395  0013C4  0E00               	movlw	low _stack
  1396  0013C6  24F3               	addwf	prodl,w,c
  1397  0013C8  6ED9               	movwf	fsr2l,c
  1398  0013CA  0101               	movlb	1	; () banked
  1399  0013CC  0E01               	movlw	high _stack
  1400  0013CE  20F4               	addwfc	prodh,w,c
  1401  0013D0  6EDA               	movwf	fsr2h,c
  1402  0013D2  50DF               	movf	indf2,w,c
  1403  0013D4  6E0A               	movwf	??_processOpcode& (0+255),c
  1404  0013D6  500A               	movf	??_processOpcode,w,c
  1405  0013D8  6E0C               	movwf	processOpcode@regPC_temp,c
  1406  0013DA  6A0D               	clrf	processOpcode@regPC_temp+1,c
  1407                           
  1408                           ; BSR set to: 1
  1409                           ;emulator.c: 570: regPC_temp <<= 8;
  1410  0013DC  500C               	movf	processOpcode@regPC_temp,w,c
  1411  0013DE  6E0D               	movwf	processOpcode@regPC_temp+1,c
  1412  0013E0  6A0C               	clrf	processOpcode@regPC_temp,c
  1413                           
  1414                           ; BSR set to: 1
  1415                           ;emulator.c: 571: regPC += regPC_temp;
  1416  0013E2  500C               	movf	processOpcode@regPC_temp,w,c
  1417  0013E4  2618               	addwf	_regPC,f,c
  1418  0013E6  500D               	movf	processOpcode@regPC_temp+1,w,c
  1419  0013E8  2219               	addwfc	_regPC+1,f,c
  1420  0013EA                     L15:
  1421                           
  1422                           ; BSR set to: 1
  1423                           ;emulator.c: 573: regPC--;
  1424  0013EA  0618               	decf	_regPC,f,c
  1425  0013EC  A0D8               	btfss	status,0,c
  1426  0013EE  0619               	decf	_regPC+1,f,c
  1427                           
  1428                           ;emulator.c: 574: break;
  1429  0013F0  D23F               	goto	l1767
  1430  0013F2                     l1649:
  1431                           
  1432                           ;emulator.c: 580: stack[regSP] = regA;
  1433  0013F2  5020               	movf	_regSP,w,c
  1434  0013F4  0D01               	mullw	1
  1435  0013F6  0101               	movlb	1	; () banked
  1436  0013F8  0E00               	movlw	low _stack
  1437  0013FA  24F3               	addwf	prodl,w,c
  1438  0013FC  6ED9               	movwf	fsr2l,c
  1439  0013FE  0101               	movlb	1	; () banked
  1440  001400  0E01               	movlw	high _stack
  1441  001402  20F4               	addwfc	prodh,w,c
  1442  001404  6EDA               	movwf	fsr2h,c
  1443  001406  C01D  FFDF         	movff	_regA,indf2
  1444  00140A  D02A               	goto	L17
  1445  00140C                     l1653:
  1446                           
  1447                           ;emulator.c: 585: stack[regSP] = regB;
  1448  00140C  5020               	movf	_regSP,w,c
  1449  00140E  0D01               	mullw	1
  1450  001410  0101               	movlb	1	; () banked
  1451  001412  0E00               	movlw	low _stack
  1452  001414  24F3               	addwf	prodl,w,c
  1453  001416  6ED9               	movwf	fsr2l,c
  1454  001418  0101               	movlb	1	; () banked
  1455  00141A  0E01               	movlw	high _stack
  1456  00141C  20F4               	addwfc	prodh,w,c
  1457  00141E  6EDA               	movwf	fsr2h,c
  1458  001420  C01E  FFDF         	movff	_regB,indf2
  1459  001424  D01D               	goto	L17
  1460  001426                     l1657:
  1461                           
  1462                           ;emulator.c: 590: stack[regSP] = regMX;
  1463  001426  5020               	movf	_regSP,w,c
  1464  001428  0D01               	mullw	1
  1465  00142A  0101               	movlb	1	; () banked
  1466  00142C  0E00               	movlw	low _stack
  1467  00142E  24F3               	addwf	prodl,w,c
  1468  001430  6ED9               	movwf	fsr2l,c
  1469  001432  0101               	movlb	1	; () banked
  1470  001434  0E01               	movlw	high _stack
  1471  001436  20F4               	addwfc	prodh,w,c
  1472  001438  6EDA               	movwf	fsr2h,c
  1473  00143A  C016  FFDF         	movff	_regMX,indf2
  1474                           
  1475                           ; BSR set to: 1
  1476                           ;emulator.c: 591: regSP += 2;
  1477  00143E  0E02               	movlw	2
  1478  001440  2620               	addwf	_regSP,f,c
  1479                           
  1480                           ;emulator.c: 592: break;
  1481  001442  D216               	goto	l1767
  1482  001444                     l1661:
  1483                           
  1484                           ;emulator.c: 595: stack[regSP] = getMXbits(0);
  1485  001444  5020               	movf	_regSP,w,c
  1486  001446  0D01               	mullw	1
  1487  001448  0101               	movlb	1	; () banked
  1488  00144A  0E00               	movlw	low _stack
  1489  00144C  24F3               	addwf	prodl,w,c
  1490  00144E  6ED9               	movwf	fsr2l,c
  1491  001450  0101               	movlb	1	; () banked
  1492  001452  0E01               	movlw	high _stack
  1493  001454  20F4               	addwfc	prodh,w,c
  1494  001456  6EDA               	movwf	fsr2h,c
  1495  001458  0E00               	movlw	0
  1496  00145A  ECB2  F010         	call	_getMXbits
  1497  00145E  D00F               	goto	L18
  1498  001460                     L17:
  1499                           
  1500                           ;emulator.c: 596: regSP++;
  1501  001460  2A20               	incf	_regSP,f,c
  1502                           
  1503                           ;emulator.c: 597: break;
  1504  001462  D206               	goto	l1767
  1505  001464                     l1665:
  1506                           
  1507                           ;emulator.c: 600: stack[regSP] = getMXbits(1);
  1508  001464  5020               	movf	_regSP,w,c
  1509  001466  0D01               	mullw	1
  1510  001468  0101               	movlb	1	; () banked
  1511  00146A  0E00               	movlw	low _stack
  1512  00146C  24F3               	addwf	prodl,w,c
  1513  00146E  6ED9               	movwf	fsr2l,c
  1514  001470  0101               	movlb	1	; () banked
  1515  001472  0E01               	movlw	high _stack
  1516  001474  20F4               	addwfc	prodh,w,c
  1517  001476  6EDA               	movwf	fsr2h,c
  1518  001478  0E01               	movlw	1
  1519  00147A  ECB2  F010         	call	_getMXbits
  1520  00147E                     L18:
  1521  00147E  6EDF               	movwf	indf2,c
  1522  001480  D7EF               	goto	L17
  1523  001482                     l1669:
  1524                           
  1525                           ;emulator.c: 605: stack[regSP] = regF;
  1526  001482  5020               	movf	_regSP,w,c
  1527  001484  0D01               	mullw	1
  1528  001486  0101               	movlb	1	; () banked
  1529  001488  0E00               	movlw	low _stack
  1530  00148A  24F3               	addwf	prodl,w,c
  1531  00148C  6ED9               	movwf	fsr2l,c
  1532  00148E  0101               	movlb	1	; () banked
  1533  001490  0E01               	movlw	high _stack
  1534  001492  20F4               	addwfc	prodh,w,c
  1535  001494  6EDA               	movwf	fsr2h,c
  1536  001496  C01F  FFDF         	movff	_regF,indf2
  1537  00149A  D7E2               	goto	L17
  1538  00149C                     l1673:
  1539                           
  1540                           ;emulator.c: 610: stack[regSP] = immData_1;
  1541  00149C  5020               	movf	_regSP,w,c
  1542  00149E  0D01               	mullw	1
  1543  0014A0  0101               	movlb	1	; () banked
  1544  0014A2  0E00               	movlw	low _stack
  1545  0014A4  24F3               	addwf	prodl,w,c
  1546  0014A6  6ED9               	movwf	fsr2l,c
  1547  0014A8  0101               	movlb	1	; () banked
  1548  0014AA  0E01               	movlw	high _stack
  1549  0014AC  20F4               	addwfc	prodh,w,c
  1550  0014AE  6EDA               	movwf	fsr2h,c
  1551  0014B0  C01B  FFDF         	movff	_immData_1,indf2
  1552                           
  1553                           ; BSR set to: 1
  1554                           ;emulator.c: 611: regSP++;
  1555  0014B4  2A20               	incf	_regSP,f,c
  1556  0014B6  D0D3               	goto	L20
  1557  0014B8                     l1679:
  1558                           
  1559                           ;emulator.c: 616: regSP--;
  1560  0014B8  0620               	decf	_regSP,f,c
  1561                           
  1562                           ;emulator.c: 617: regA = stack[regSP];
  1563  0014BA  5020               	movf	_regSP,w,c
  1564  0014BC  0D01               	mullw	1
  1565  0014BE  0101               	movlb	1	; () banked
  1566  0014C0  0E00               	movlw	low _stack
  1567  0014C2  24F3               	addwf	prodl,w,c
  1568  0014C4  6ED9               	movwf	fsr2l,c
  1569  0014C6  0101               	movlb	1	; () banked
  1570  0014C8  0E01               	movlw	high _stack
  1571  0014CA  20F4               	addwfc	prodh,w,c
  1572  0014CC                     L23:
  1573  0014CC  6EDA               	movwf	fsr2h,c
  1574  0014CE  50DF               	movf	indf2,w,c
  1575  0014D0                     L10:
  1576  0014D0  6E1D               	movwf	_regA,c
  1577                           
  1578                           ;emulator.c: 618: break;
  1579  0014D2  D1CE               	goto	l1767
  1580  0014D4                     l1683:
  1581                           
  1582                           ;emulator.c: 621: regSP--;
  1583  0014D4  0620               	decf	_regSP,f,c
  1584                           
  1585                           ;emulator.c: 622: regB = stack[regSP];
  1586  0014D6  5020               	movf	_regSP,w,c
  1587  0014D8  0D01               	mullw	1
  1588  0014DA  0101               	movlb	1	; () banked
  1589  0014DC  0E00               	movlw	low _stack
  1590  0014DE  24F3               	addwf	prodl,w,c
  1591  0014E0  6ED9               	movwf	fsr2l,c
  1592  0014E2  0101               	movlb	1	; () banked
  1593  0014E4  0E01               	movlw	high _stack
  1594  0014E6  20F4               	addwfc	prodh,w,c
  1595  0014E8  6EDA               	movwf	fsr2h,c
  1596  0014EA  50DF               	movf	indf2,w,c
  1597  0014EC  6E1E               	movwf	_regB,c
  1598                           
  1599                           ;emulator.c: 623: break;
  1600  0014EE  D1C0               	goto	l1767
  1601  0014F0                     l1687:
  1602                           
  1603                           ;emulator.c: 626: regSP -= 2;
  1604  0014F0  0E02               	movlw	2
  1605  0014F2  5E20               	subwf	_regSP,f,c
  1606                           
  1607                           ;emulator.c: 627: regMX = stack[regSP];
  1608  0014F4  5020               	movf	_regSP,w,c
  1609  0014F6  0D01               	mullw	1
  1610  0014F8  0101               	movlb	1	; () banked
  1611  0014FA  0E00               	movlw	low _stack
  1612  0014FC  24F3               	addwf	prodl,w,c
  1613  0014FE  6ED9               	movwf	fsr2l,c
  1614  001500  0101               	movlb	1	; () banked
  1615  001502  0E01               	movlw	high _stack
  1616  001504  20F4               	addwfc	prodh,w,c
  1617  001506  6EDA               	movwf	fsr2h,c
  1618  001508  50DF               	movf	indf2,w,c
  1619  00150A  6E0A               	movwf	??_processOpcode& (0+255),c
  1620  00150C  500A               	movf	??_processOpcode,w,c
  1621  00150E  6E16               	movwf	_regMX,c
  1622  001510  6A17               	clrf	_regMX+1,c
  1623                           
  1624                           ;emulator.c: 628: break;
  1625  001512  D1AE               	goto	l1767
  1626  001514                     l1691:
  1627                           
  1628                           ;emulator.c: 631: regSP--;
  1629  001514  0620               	decf	_regSP,f,c
  1630                           
  1631                           ;emulator.c: 632: setMXbits(0, stack[regSP]);
  1632  001516  5020               	movf	_regSP,w,c
  1633  001518  0D01               	mullw	1
  1634  00151A  0101               	movlb	1	; () banked
  1635  00151C  0E00               	movlw	low _stack
  1636  00151E  24F3               	addwf	prodl,w,c
  1637  001520  6ED9               	movwf	fsr2l,c
  1638  001522  0101               	movlb	1	; () banked
  1639  001524  0E01               	movlw	high _stack
  1640  001526  20F4               	addwfc	prodh,w,c
  1641  001528  6EDA               	movwf	fsr2h,c
  1642  00152A  50DF               	movf	indf2,w,c
  1643  00152C  6E01               	movwf	setMXbits@value,c
  1644  00152E  0E00               	movlw	0
  1645  001530  ECB0  F00F         	call	_setMXbits
  1646                           
  1647                           ;emulator.c: 633: break;
  1648  001534  D19D               	goto	l1767
  1649  001536                     l1695:
  1650                           
  1651                           ;emulator.c: 636: regSP--;
  1652  001536  0620               	decf	_regSP,f,c
  1653                           
  1654                           ;emulator.c: 637: setMXbits(1, stack[regSP]);
  1655  001538  5020               	movf	_regSP,w,c
  1656  00153A  0D01               	mullw	1
  1657  00153C  0101               	movlb	1	; () banked
  1658  00153E  0E00               	movlw	low _stack
  1659  001540  24F3               	addwf	prodl,w,c
  1660  001542  6ED9               	movwf	fsr2l,c
  1661  001544  0101               	movlb	1	; () banked
  1662  001546  0E01               	movlw	high _stack
  1663  001548  20F4               	addwfc	prodh,w,c
  1664  00154A  6EDA               	movwf	fsr2h,c
  1665  00154C  50DF               	movf	indf2,w,c
  1666  00154E  6E01               	movwf	setMXbits@value,c
  1667  001550  0E01               	movlw	1
  1668  001552  ECB0  F00F         	call	_setMXbits
  1669                           
  1670                           ;emulator.c: 638: break;
  1671  001556  D18C               	goto	l1767
  1672  001558                     l1699:
  1673                           
  1674                           ;emulator.c: 645: regA_temp16 += (uint16_t) regB;
  1675  001558  501E               	movf	_regB,w,c
  1676  00155A  260F               	addwf	processOpcode@regA_temp16,f,c
  1677  00155C  0E00               	movlw	0
  1678  00155E  2210               	addwfc	processOpcode@regA_temp16+1,f,c
  1679                           
  1680                           ;emulator.c: 646: if (regA_temp16 > 255) setFbits(0, 1);
  1681  001560  0E00               	movlw	0
  1682  001562  5C0F               	subwf	processOpcode@regA_temp16,w,c
  1683  001564  0E01               	movlw	1
  1684  001566  5810               	subwfb	processOpcode@regA_temp16+1,w,c
  1685  001568  A0D8               	btfss	status,0,c
  1686  00156A  D008               	goto	l1703
  1687  00156C  6E0A               	movwf	??_processOpcode& (0+255),c
  1688  00156E  0E01               	movlw	1
  1689  001570  6E01               	movwf	setFbits@value,c
  1690  001572  500A               	movf	??_processOpcode& (0+255),w,c
  1691  001574  0E00               	movlw	0
  1692  001576  EC3D  F00E         	call	_setFbits
  1693  00157A  D007               	goto	l1705
  1694  00157C                     l1703:
  1695                           
  1696                           ;emulator.c: 647: else setFbits(0, 0);
  1697  00157C  6E0A               	movwf	??_processOpcode& (0+255),c
  1698  00157E  0E00               	movlw	0
  1699  001580  6E01               	movwf	setFbits@value,c
  1700  001582  500A               	movf	??_processOpcode& (0+255),w,c
  1701  001584  0E00               	movlw	0
  1702  001586  EC3D  F00E         	call	_setFbits
  1703  00158A                     l1705:
  1704                           
  1705                           ;emulator.c: 648: regA += regB;
  1706  00158A  501E               	movf	_regB,w,c
  1707  00158C                     L11:
  1708  00158C  261D               	addwf	_regA,f,c
  1709                           
  1710                           ;emulator.c: 649: break;
  1711  00158E  D170               	goto	l1767
  1712  001590                     l1707:
  1713                           
  1714                           ;emulator.c: 653: regA_temp16 += (uint16_t) immData_1;
  1715  001590  501B               	movf	_immData_1,w,c
  1716  001592  260F               	addwf	processOpcode@regA_temp16,f,c
  1717  001594  0E00               	movlw	0
  1718  001596  2210               	addwfc	processOpcode@regA_temp16+1,f,c
  1719                           
  1720                           ;emulator.c: 654: if (regA_temp16 > 255) setFbits(0, 1);
  1721  001598  0E00               	movlw	0
  1722  00159A  5C0F               	subwf	processOpcode@regA_temp16,w,c
  1723  00159C  0E01               	movlw	1
  1724  00159E  5810               	subwfb	processOpcode@regA_temp16+1,w,c
  1725  0015A0  A0D8               	btfss	status,0,c
  1726  0015A2  D008               	goto	l1711
  1727  0015A4  6E0A               	movwf	??_processOpcode& (0+255),c
  1728  0015A6  0E01               	movlw	1
  1729  0015A8  6E01               	movwf	setFbits@value,c
  1730  0015AA  500A               	movf	??_processOpcode& (0+255),w,c
  1731  0015AC  0E00               	movlw	0
  1732  0015AE  EC3D  F00E         	call	_setFbits
  1733  0015B2  D007               	goto	l1713
  1734  0015B4                     l1711:
  1735                           
  1736                           ;emulator.c: 655: else setFbits(0, 0);
  1737  0015B4  6E0A               	movwf	??_processOpcode& (0+255),c
  1738  0015B6  0E00               	movlw	0
  1739  0015B8  6E01               	movwf	setFbits@value,c
  1740  0015BA  500A               	movf	??_processOpcode& (0+255),w,c
  1741  0015BC  0E00               	movlw	0
  1742  0015BE  EC3D  F00E         	call	_setFbits
  1743  0015C2                     l1713:
  1744                           
  1745                           ;emulator.c: 657: regA += immData_1;
  1746  0015C2  501B               	movf	_immData_1,w,c
  1747  0015C4  261D               	addwf	_regA,f,c
  1748  0015C6  D04B               	goto	L20
  1749  0015C8                     l352:
  1750                           
  1751                           ;emulator.c: 664: regA_temp16 = regA;
  1752  0015C8  C01D  F00F         	movff	_regA,processOpcode@regA_temp16
  1753  0015CC  6A10               	clrf	processOpcode@regA_temp16+1,c
  1754                           
  1755                           ;emulator.c: 665: regA_temp16 <<= 8;
  1756  0015CE  500F               	movf	processOpcode@regA_temp16,w,c
  1757  0015D0  6E10               	movwf	processOpcode@regA_temp16+1,c
  1758  0015D2  6A0F               	clrf	processOpcode@regA_temp16,c
  1759                           
  1760                           ;emulator.c: 666: regA_temp16 += 255;
  1761  0015D4  0EFF               	movlw	255
  1762  0015D6  260F               	addwf	processOpcode@regA_temp16,f,c
  1763  0015D8  0E00               	movlw	0
  1764  0015DA  2210               	addwfc	processOpcode@regA_temp16+1,f,c
  1765                           
  1766                           ;emulator.c: 667: regA_temp16 -= regB;
  1767  0015DC  501E               	movf	_regB,w,c
  1768  0015DE  5E0F               	subwf	processOpcode@regA_temp16,f,c
  1769  0015E0  0E00               	movlw	0
  1770  0015E2  5A10               	subwfb	processOpcode@regA_temp16+1,f,c
  1771                           
  1772                           ;emulator.c: 668: if (regA_temp16 < 255) setFbits(0, 1);
  1773  0015E4  0EFF               	movlw	255
  1774  0015E6  5C0F               	subwf	processOpcode@regA_temp16,w,c
  1775  0015E8  0E00               	movlw	0
  1776  0015EA  5810               	subwfb	processOpcode@regA_temp16+1,w,c
  1777  0015EC  B0D8               	btfsc	status,0,c
  1778  0015EE  D008               	goto	l1727
  1779  0015F0  6E0A               	movwf	??_processOpcode& (0+255),c
  1780  0015F2  0E01               	movlw	1
  1781  0015F4  6E01               	movwf	setFbits@value,c
  1782  0015F6  500A               	movf	??_processOpcode& (0+255),w,c
  1783  0015F8  0E00               	movlw	0
  1784  0015FA  EC3D  F00E         	call	_setFbits
  1785  0015FE  D007               	goto	l1729
  1786  001600                     l1727:
  1787                           
  1788                           ;emulator.c: 669: else setFbits(0, 0);
  1789  001600  6E0A               	movwf	??_processOpcode& (0+255),c
  1790  001602  0E00               	movlw	0
  1791  001604  6E01               	movwf	setFbits@value,c
  1792  001606  500A               	movf	??_processOpcode& (0+255),w,c
  1793  001608  0E00               	movlw	0
  1794  00160A  EC3D  F00E         	call	_setFbits
  1795  00160E                     l1729:
  1796                           
  1797                           ;emulator.c: 670: regA -= regB;
  1798  00160E  501E               	movf	_regB,w,c
  1799  001610  5E1D               	subwf	_regA,f,c
  1800                           
  1801                           ;emulator.c: 671: break;
  1802  001612  D12E               	goto	l1767
  1803  001614                     l355:
  1804                           
  1805                           ;emulator.c: 675: regA_temp16 = regA;
  1806  001614  C01D  F00F         	movff	_regA,processOpcode@regA_temp16
  1807  001618  6A10               	clrf	processOpcode@regA_temp16+1,c
  1808                           
  1809                           ;emulator.c: 676: regA_temp16 <<= 8;
  1810  00161A  500F               	movf	processOpcode@regA_temp16,w,c
  1811  00161C  6E10               	movwf	processOpcode@regA_temp16+1,c
  1812  00161E  6A0F               	clrf	processOpcode@regA_temp16,c
  1813                           
  1814                           ;emulator.c: 677: regA_temp16 += 255;
  1815  001620  0EFF               	movlw	255
  1816  001622  260F               	addwf	processOpcode@regA_temp16,f,c
  1817  001624  0E00               	movlw	0
  1818  001626  2210               	addwfc	processOpcode@regA_temp16+1,f,c
  1819                           
  1820                           ;emulator.c: 678: regA_temp16 -= immData_1;
  1821  001628  501B               	movf	_immData_1,w,c
  1822  00162A  5E0F               	subwf	processOpcode@regA_temp16,f,c
  1823  00162C  0E00               	movlw	0
  1824  00162E  5A10               	subwfb	processOpcode@regA_temp16+1,f,c
  1825                           
  1826                           ;emulator.c: 679: if (regA_temp16 < 255) setFbits(0, 1);
  1827  001630  0EFF               	movlw	255
  1828  001632  5C0F               	subwf	processOpcode@regA_temp16,w,c
  1829  001634  0E00               	movlw	0
  1830  001636  5810               	subwfb	processOpcode@regA_temp16+1,w,c
  1831  001638  B0D8               	btfsc	status,0,c
  1832  00163A  D008               	goto	l1741
  1833  00163C  6E0A               	movwf	??_processOpcode& (0+255),c
  1834  00163E  0E01               	movlw	1
  1835  001640  6E01               	movwf	setFbits@value,c
  1836  001642  500A               	movf	??_processOpcode& (0+255),w,c
  1837  001644  0E00               	movlw	0
  1838  001646  EC3D  F00E         	call	_setFbits
  1839  00164A  D007               	goto	l1743
  1840  00164C                     l1741:
  1841                           
  1842                           ;emulator.c: 680: else setFbits(0, 0);
  1843  00164C  6E0A               	movwf	??_processOpcode& (0+255),c
  1844  00164E  0E00               	movlw	0
  1845  001650  6E01               	movwf	setFbits@value,c
  1846  001652  500A               	movf	??_processOpcode& (0+255),w,c
  1847  001654  0E00               	movlw	0
  1848  001656  EC3D  F00E         	call	_setFbits
  1849  00165A                     l1743:
  1850                           
  1851                           ;emulator.c: 681: regA -= immData_1;
  1852  00165A  501B               	movf	_immData_1,w,c
  1853  00165C  5E1D               	subwf	_regA,f,c
  1854  00165E                     L20:
  1855                           
  1856                           ;emulator.c: 682: regPC++;
  1857  00165E  4A18               	infsnz	_regPC,f,c
  1858  001660  2A19               	incf	_regPC+1,f,c
  1859                           
  1860                           ;emulator.c: 683: break;
  1861  001662  D106               	goto	l1767
  1862  001664                     l1747:
  1863                           
  1864                           ;emulator.c: 687: regA_temp16 = regA + 1;
  1865  001664  0E01               	movlw	1
  1866  001666  241D               	addwf	_regA,w,c
  1867  001668  6E0F               	movwf	processOpcode@regA_temp16,c
  1868  00166A  6A10               	clrf	processOpcode@regA_temp16+1,c
  1869  00166C  0E00               	movlw	0
  1870  00166E  2210               	addwfc	processOpcode@regA_temp16+1,f,c
  1871                           
  1872                           ;emulator.c: 688: if (regA_temp16 > 255) setFbits(0, 1);
  1873  001670  0E00               	movlw	0
  1874  001672  5C0F               	subwf	processOpcode@regA_temp16,w,c
  1875  001674  0E01               	movlw	1
  1876  001676  5810               	subwfb	processOpcode@regA_temp16+1,w,c
  1877  001678  A0D8               	btfss	status,0,c
  1878  00167A  D008               	goto	l1751
  1879  00167C  6E0A               	movwf	??_processOpcode& (0+255),c
  1880  00167E  0E01               	movlw	1
  1881  001680  6E01               	movwf	setFbits@value,c
  1882  001682  500A               	movf	??_processOpcode& (0+255),w,c
  1883  001684  0E00               	movlw	0
  1884  001686  EC3D  F00E         	call	_setFbits
  1885  00168A  D007               	goto	l1753
  1886  00168C                     l1751:
  1887                           
  1888                           ;emulator.c: 689: else setFbits(0, 0);
  1889  00168C  6E0A               	movwf	??_processOpcode& (0+255),c
  1890  00168E  0E00               	movlw	0
  1891  001690  6E01               	movwf	setFbits@value,c
  1892  001692  500A               	movf	??_processOpcode& (0+255),w,c
  1893  001694  0E00               	movlw	0
  1894  001696  EC3D  F00E         	call	_setFbits
  1895  00169A                     l1753:
  1896                           
  1897                           ;emulator.c: 690: regA++;
  1898  00169A  2A1D               	incf	_regA,f,c
  1899                           
  1900                           ;emulator.c: 691: break;
  1901  00169C  D0E9               	goto	l1767
  1902  00169E                     l1755:
  1903                           
  1904                           ;emulator.c: 695: regA_temp8 = regA - 1;
  1905  00169E  041D               	decf	_regA,w,c
  1906  0016A0  6E0E               	movwf	processOpcode@regA_temp8,c
  1907                           
  1908                           ;emulator.c: 696: if (regA_temp8 == 255) setFbits(0, 1);
  1909  0016A2  280E               	incf	processOpcode@regA_temp8,w,c
  1910  0016A4  A4D8               	btfss	status,2,c
  1911  0016A6  D008               	goto	l1759
  1912  0016A8  6E0A               	movwf	??_processOpcode& (0+255),c
  1913  0016AA  0E01               	movlw	1
  1914  0016AC  6E01               	movwf	setFbits@value,c
  1915  0016AE  500A               	movf	??_processOpcode& (0+255),w,c
  1916  0016B0  0E00               	movlw	0
  1917  0016B2  EC3D  F00E         	call	_setFbits
  1918  0016B6  D007               	goto	l1761
  1919  0016B8                     l1759:
  1920                           
  1921                           ;emulator.c: 697: else setFbits(0, 0);
  1922  0016B8  6E0A               	movwf	??_processOpcode& (0+255),c
  1923  0016BA  0E00               	movlw	0
  1924  0016BC  6E01               	movwf	setFbits@value,c
  1925  0016BE  500A               	movf	??_processOpcode& (0+255),w,c
  1926  0016C0  0E00               	movlw	0
  1927  0016C2  EC3D  F00E         	call	_setFbits
  1928  0016C6                     l1761:
  1929                           
  1930                           ;emulator.c: 698: regA--;
  1931  0016C6  061D               	decf	_regA,f,c
  1932                           
  1933                           ;emulator.c: 699: break;
  1934  0016C8  D0D3               	goto	l1767
  1935  0016CA                     l1765:
  1936  0016CA  0E00               	movlw	low _virtualMemory
  1937  0016CC  2418               	addwf	_regPC,w,c
  1938  0016CE  6ED9               	movwf	fsr2l,c
  1939  0016D0  0E02               	movlw	high _virtualMemory
  1940  0016D2  2019               	addwfc	_regPC+1,w,c
  1941  0016D4  6EDA               	movwf	fsr2h,c
  1942  0016D6  50DF               	movf	indf2,w,c
  1943                           
  1944                           ; Switch size 1, requested type "space"
  1945                           ; Number of cases is 68, Range of values is 1 to 85
  1946                           ; switch strategies available:
  1947                           ; Name         Instructions Cycles
  1948                           ; simple_byte          205   103 (average)
  1949                           ;	Chosen strategy is simple_byte
  1950  0016D8  0A01               	xorlw	1	; case 1
  1951  0016DA  B4D8               	btfsc	status,2,c
  1952  0016DC  D4A0               	goto	l1429
  1953  0016DE  0A03               	xorlw	3	; case 2
  1954  0016E0  B4D8               	btfsc	status,2,c
  1955  0016E2  D4A6               	goto	l1431
  1956  0016E4  0A01               	xorlw	1	; case 3
  1957  0016E6  B4D8               	btfsc	status,2,c
  1958  0016E8  D4B2               	goto	l1435
  1959  0016EA  0A07               	xorlw	7	; case 4
  1960  0016EC  B4D8               	btfsc	status,2,c
  1961  0016EE  D4B3               	goto	l1437
  1962  0016F0  0A01               	xorlw	1	; case 5
  1963  0016F2  B4D8               	btfsc	status,2,c
  1964  0016F4  D4B5               	goto	l1441
  1965  0016F6  0A03               	xorlw	3	; case 6
  1966  0016F8  B4D8               	btfsc	status,2,c
  1967  0016FA  D4B9               	goto	l1443
  1968  0016FC  0A01               	xorlw	1	; case 7
  1969  0016FE  B4D8               	btfsc	status,2,c
  1970  001700  D4BC               	goto	l1447
  1971  001702  0A0F               	xorlw	15	; case 8
  1972  001704  B4D8               	btfsc	status,2,c
  1973  001706  D49D               	goto	l1433
  1974  001708  0A18               	xorlw	24	; case 16
  1975  00170A  B4D8               	btfsc	status,2,c
  1976  00170C  D4BC               	goto	l1451
  1977  00170E  0A01               	xorlw	1	; case 17
  1978  001710  B4D8               	btfsc	status,2,c
  1979  001712  D4BF               	goto	l1453
  1980  001714  0A03               	xorlw	3	; case 18
  1981  001716  B4D8               	btfsc	status,2,c
  1982  001718  D4C0               	goto	l1455
  1983  00171A  0A01               	xorlw	1	; case 19
  1984  00171C  B4D8               	btfsc	status,2,c
  1985  00171E  D4C1               	goto	l273
  1986  001720  0A07               	xorlw	7	; case 20
  1987  001722  B4D8               	btfsc	status,2,c
  1988  001724  D4C1               	goto	l274
  1989  001726  0A01               	xorlw	1	; case 21
  1990  001728  B4D8               	btfsc	status,2,c
  1991  00172A  D4C1               	goto	l275
  1992  00172C  0A03               	xorlw	3	; case 22
  1993  00172E  B4D8               	btfsc	status,2,c
  1994  001730  D4C1               	goto	l1457
  1995  001732  0A01               	xorlw	1	; case 23
  1996  001734  B4D8               	btfsc	status,2,c
  1997  001736  D4C7               	goto	l1459
  1998  001738  0A0F               	xorlw	15	; case 24
  1999  00173A  B4D8               	btfsc	status,2,c
  2000  00173C  D4CA               	goto	l1461
  2001  00173E  0A01               	xorlw	1	; case 25
  2002  001740  B4D8               	btfsc	status,2,c
  2003  001742  D4CD               	goto	l279
  2004  001744  0A03               	xorlw	3	; case 26
  2005  001746  B4D8               	btfsc	status,2,c
  2006  001748  D4CD               	goto	l280
  2007  00174A  0A01               	xorlw	1	; case 27
  2008  00174C  B4D8               	btfsc	status,2,c
  2009  00174E  D4CD               	goto	l281
  2010  001750  0A07               	xorlw	7	; case 28
  2011  001752  B4D8               	btfsc	status,2,c
  2012  001754  D4CD               	goto	l282
  2013  001756  0A3C               	xorlw	60	; case 32
  2014  001758  B4D8               	btfsc	status,2,c
  2015  00175A  D4D1               	goto	l1465
  2016  00175C  0A01               	xorlw	1	; case 33
  2017  00175E  B4D8               	btfsc	status,2,c
  2018  001760  D4D1               	goto	l1467
  2019  001762  0A03               	xorlw	3	; case 34
  2020  001764  B4D8               	btfsc	status,2,c
  2021  001766  D4D1               	goto	l1471
  2022  001768  0A01               	xorlw	1	; case 35
  2023  00176A  B4D8               	btfsc	status,2,c
  2024  00176C  D4D1               	goto	l1473
  2025  00176E  0A07               	xorlw	7	; case 36
  2026  001770  B4D8               	btfsc	status,2,c
  2027  001772  D4D4               	goto	l1479
  2028  001774  0A01               	xorlw	1	; case 37
  2029  001776  B4D8               	btfsc	status,2,c
  2030  001778  D4D4               	goto	l1483
  2031  00177A  0A03               	xorlw	3	; case 38
  2032  00177C  B4D8               	btfsc	status,2,c
  2033  00177E  D4D3               	goto	l290
  2034  001780  0A01               	xorlw	1	; case 39
  2035  001782  B4D8               	btfsc	status,2,c
  2036  001784  D4EA               	goto	l293
  2037  001786  0A0F               	xorlw	15	; case 40
  2038  001788  B4D8               	btfsc	status,2,c
  2039  00178A  D504               	goto	l296
  2040  00178C  0A01               	xorlw	1	; case 41
  2041  00178E  B4D8               	btfsc	status,2,c
  2042  001790  D50B               	goto	l297
  2043  001792  0A03               	xorlw	3	; case 42
  2044  001794  B4D8               	btfsc	status,2,c
  2045  001796  D511               	goto	l1505
  2046  001798  0A01               	xorlw	1	; case 43
  2047  00179A  B4D8               	btfsc	status,2,c
  2048  00179C  D4BC               	goto	l1477
  2049  00179E  0A1B               	xorlw	27	; case 48
  2050  0017A0  B4D8               	btfsc	status,2,c
  2051  0017A2  D54D               	goto	L27
  2052  0017A4  0A01               	xorlw	1	; case 49
  2053  0017A6  B4D8               	btfsc	status,2,c
  2054  0017A8  D541               	goto	l1525
  2055  0017AA  0A03               	xorlw	3	; case 50
  2056  0017AC  B4D8               	btfsc	status,2,c
  2057  0017AE  D541               	goto	l1529
  2058  0017B0  0A01               	xorlw	1	; case 51
  2059  0017B2  B4D8               	btfsc	status,2,c
  2060  0017B4  D549               	goto	l1535
  2061  0017B6  0A07               	xorlw	7	; case 52
  2062  0017B8  B4D8               	btfsc	status,2,c
  2063  0017BA  D550               	goto	l1541
  2064  0017BC  0A01               	xorlw	1	; case 53
  2065  0017BE  B4D8               	btfsc	status,2,c
  2066  0017C0  D551               	goto	l1547
  2067  0017C2  0A03               	xorlw	3	; case 54
  2068  0017C4  B4D8               	btfsc	status,2,c
  2069  0017C6  D55B               	goto	l1553
  2070  0017C8  0A01               	xorlw	1	; case 55
  2071  0017CA  B4D8               	btfsc	status,2,c
  2072  0017CC  D55F               	goto	l1559
  2073  0017CE  0A0F               	xorlw	15	; case 56
  2074  0017D0  B4D8               	btfsc	status,2,c
  2075  0017D2  D566               	goto	l1565
  2076  0017D4  0A01               	xorlw	1	; case 57
  2077  0017D6  B4D8               	btfsc	status,2,c
  2078  0017D8  D567               	goto	l1571
  2079  0017DA  0A03               	xorlw	3	; case 58
  2080  0017DC  B4D8               	btfsc	status,2,c
  2081  0017DE  D576               	goto	l1577
  2082  0017E0  0A01               	xorlw	1	; case 59
  2083  0017E2  B4D8               	btfsc	status,2,c
  2084  0017E4  D577               	goto	l1583
  2085  0017E6  0A07               	xorlw	7	; case 60
  2086  0017E8  B4D8               	btfsc	status,2,c
  2087  0017EA  D57E               	goto	l1589
  2088  0017EC  0A01               	xorlw	1	; case 61
  2089  0017EE  B4D8               	btfsc	status,2,c
  2090  0017F0  D580               	goto	l1595
  2091  0017F2  0A03               	xorlw	3	; case 62
  2092  0017F4  B4D8               	btfsc	status,2,c
  2093  0017F6  D586               	goto	l1601
  2094  0017F8  0A01               	xorlw	1	; case 63
  2095  0017FA  B4D8               	btfsc	status,2,c
  2096  0017FC  D5A7               	goto	l1619
  2097  0017FE  0A7F               	xorlw	127	; case 64
  2098  001800  B4D8               	btfsc	status,2,c
  2099  001802  D5CC               	goto	l1637
  2100  001804  0A01               	xorlw	1	; case 65
  2101  001806  B4D8               	btfsc	status,2,c
  2102  001808  D5F4               	goto	l1649
  2103  00180A  0A03               	xorlw	3	; case 66
  2104  00180C  B4D8               	btfsc	status,2,c
  2105  00180E  D5FE               	goto	l1653
  2106  001810  0A01               	xorlw	1	; case 67
  2107  001812  B4D8               	btfsc	status,2,c
  2108  001814  D608               	goto	l1657
  2109  001816  0A07               	xorlw	7	; case 68
  2110  001818  B4D8               	btfsc	status,2,c
  2111  00181A  D614               	goto	l1661
  2112  00181C  0A01               	xorlw	1	; case 69
  2113  00181E  B4D8               	btfsc	status,2,c
  2114  001820  D621               	goto	l1665
  2115  001822  0A03               	xorlw	3	; case 70
  2116  001824  B4D8               	btfsc	status,2,c
  2117  001826  D62D               	goto	l1669
  2118  001828  0A01               	xorlw	1	; case 71
  2119  00182A  B4D8               	btfsc	status,2,c
  2120  00182C  D637               	goto	l1673
  2121  00182E  0A0F               	xorlw	15	; case 72
  2122  001830  B4D8               	btfsc	status,2,c
  2123  001832  D642               	goto	l1679
  2124  001834  0A01               	xorlw	1	; case 73
  2125  001836  B4D8               	btfsc	status,2,c
  2126  001838  D64D               	goto	l1683
  2127  00183A  0A03               	xorlw	3	; case 74
  2128  00183C  B4D8               	btfsc	status,2,c
  2129  00183E  D658               	goto	l1687
  2130  001840  0A01               	xorlw	1	; case 75
  2131  001842  B4D8               	btfsc	status,2,c
  2132  001844  D667               	goto	l1691
  2133  001846  0A07               	xorlw	7	; case 76
  2134  001848  B4D8               	btfsc	status,2,c
  2135  00184A  D675               	goto	l1695
  2136  00184C  0A1C               	xorlw	28	; case 80
  2137  00184E  B4D8               	btfsc	status,2,c
  2138  001850  D683               	goto	l1699
  2139  001852  0A01               	xorlw	1	; case 81
  2140  001854  B4D8               	btfsc	status,2,c
  2141  001856  D69C               	goto	l1707
  2142  001858  0A03               	xorlw	3	; case 82
  2143  00185A  B4D8               	btfsc	status,2,c
  2144  00185C  D6B5               	goto	l352
  2145  00185E  0A01               	xorlw	1	; case 83
  2146  001860  B4D8               	btfsc	status,2,c
  2147  001862  D6D8               	goto	l355
  2148  001864  0A07               	xorlw	7	; case 84
  2149  001866  B4D8               	btfsc	status,2,c
  2150  001868  D6FD               	goto	l1747
  2151  00186A  0A01               	xorlw	1	; case 85
  2152  00186C  B4D8               	btfsc	status,2,c
  2153  00186E  D717               	goto	l1755
  2154  001870                     l1767:
  2155                           
  2156                           ;emulator.c: 703: regPC++;
  2157  001870  4A18               	infsnz	_regPC,f,c
  2158  001872  2A19               	incf	_regPC+1,f,c
  2159  001874  0012               	return	
  2160  001876                     __end_of_processOpcode:
  2161                           	opt stack 0
  2162                           tblptru	equ	0xFF8
  2163                           tblptrh	equ	0xFF7
  2164                           tblptrl	equ	0xFF6
  2165                           tablat	equ	0xFF5
  2166                           prodh	equ	0xFF4
  2167                           prodl	equ	0xFF3
  2168                           postinc0	equ	0xFEE
  2169                           wreg	equ	0xFE8
  2170                           postdec1	equ	0xFE5
  2171                           fsr1h	equ	0xFE2
  2172                           fsr1l	equ	0xFE1
  2173                           indf2	equ	0xFDF
  2174                           fsr2h	equ	0xFDA
  2175                           fsr2l	equ	0xFD9
  2176                           status	equ	0xFD8
  2177                           
  2178 ;; *************** function _update_immData *****************
  2179 ;; Defined at:
  2180 ;;		line 209 in file "source/emulator.c"
  2181 ;; Parameters:    Size  Location     Type
  2182 ;;		None
  2183 ;; Auto vars:     Size  Location     Type
  2184 ;;		None
  2185 ;; Return value:  Size  Location     Type
  2186 ;;		None               void
  2187 ;; Registers used:
  2188 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2189 ;; Tracked objects:
  2190 ;;		On entry : 0/0
  2191 ;;		On exit  : 0/0
  2192 ;;		Unchanged: 0/0
  2193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2196 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2197 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2198 ;;Total ram usage:        2 bytes
  2199 ;; Hardware stack levels used:    1
  2200 ;; This function calls:
  2201 ;;		Nothing
  2202 ;; This function is called by:
  2203 ;;		_processOpcode
  2204 ;; This function uses a non-reentrant model
  2205 ;;
  2206                           
  2207                           	psect	text4
  2208  001DCC                     __ptext4:
  2209                           	opt stack 0
  2210  001DCC                     _update_immData:
  2211                           	opt stack 29
  2212                           
  2213                           ;emulator.c: 212: if (regPC + 1 == 2047 + 1) immData_1 = 0;
  2214                           
  2215                           ;incstack = 0
  2216  001DCC  0E01               	movlw	1
  2217  001DCE  2418               	addwf	_regPC,w,c
  2218  001DD0  6E01               	movwf	??_update_immData& (0+255),c
  2219  001DD2  0E00               	movlw	0
  2220  001DD4  2019               	addwfc	_regPC+1,w,c
  2221  001DD6  6E02               	movwf	(??_update_immData+1)& (0+255),c
  2222  001DD8  5002               	movf	??_update_immData+1,w,c
  2223  001DDA  0A08               	xorlw	8
  2224  001DDC  1001               	iorwf	??_update_immData,w,c
  2225  001DDE  A4D8               	btfss	status,2,c
  2226  001DE0  D004               	goto	l1369
  2227  001DE2  6E01               	movwf	??_update_immData& (0+255),c
  2228  001DE4  0E00               	movlw	0
  2229  001DE6  6E1B               	movwf	_immData_1,c
  2230  001DE8  5001               	movf	??_update_immData& (0+255),w,c
  2231  001DEA                     l1369:
  2232                           
  2233                           ;emulator.c: 213: if (regPC + 2 == 2047 + 1) immData_2 = 0;
  2234  001DEA  0E02               	movlw	2
  2235  001DEC  2418               	addwf	_regPC,w,c
  2236  001DEE  6E01               	movwf	??_update_immData& (0+255),c
  2237  001DF0  0E00               	movlw	0
  2238  001DF2  2019               	addwfc	_regPC+1,w,c
  2239  001DF4  6E02               	movwf	(??_update_immData+1)& (0+255),c
  2240  001DF6  5002               	movf	??_update_immData+1,w,c
  2241  001DF8  0A08               	xorlw	8
  2242  001DFA  1001               	iorwf	??_update_immData,w,c
  2243  001DFC  A4D8               	btfss	status,2,c
  2244  001DFE  D004               	goto	l1373
  2245  001E00  6E01               	movwf	??_update_immData& (0+255),c
  2246  001E02  0E00               	movlw	0
  2247  001E04  6E1C               	movwf	_immData_2,c
  2248  001E06  5001               	movf	??_update_immData& (0+255),w,c
  2249  001E08                     l1373:
  2250                           
  2251                           ;emulator.c: 214: if (regPC + 2 == 2047 + 2) immData_2 = 1;
  2252  001E08  0E02               	movlw	2
  2253  001E0A  2418               	addwf	_regPC,w,c
  2254  001E0C  6E01               	movwf	??_update_immData& (0+255),c
  2255  001E0E  0E00               	movlw	0
  2256  001E10  2019               	addwfc	_regPC+1,w,c
  2257  001E12  6E02               	movwf	(??_update_immData+1)& (0+255),c
  2258  001E14  0401               	decf	??_update_immData,w,c
  2259  001E16  0E08               	movlw	8
  2260  001E18  B4D8               	btfsc	status,2,c
  2261  001E1A  1802               	xorwf	??_update_immData+1,w,c
  2262  001E1C  A4D8               	btfss	status,2,c
  2263  001E1E  D004               	goto	l1377
  2264  001E20  6E01               	movwf	??_update_immData& (0+255),c
  2265  001E22  0E01               	movlw	1
  2266  001E24  6E1C               	movwf	_immData_2,c
  2267  001E26  5001               	movf	??_update_immData& (0+255),w,c
  2268  001E28                     l1377:
  2269                           
  2270                           ;emulator.c: 218: immData_1 = virtualMemory[regPC + 1];
  2271  001E28  0E01               	movlw	1
  2272  001E2A  2418               	addwf	_regPC,w,c
  2273  001E2C  6E01               	movwf	??_update_immData& (0+255),c
  2274  001E2E  0E00               	movlw	0
  2275  001E30  2019               	addwfc	_regPC+1,w,c
  2276  001E32  6E02               	movwf	(??_update_immData+1)& (0+255),c
  2277  001E34  0E00               	movlw	low _virtualMemory
  2278  001E36  2401               	addwf	??_update_immData,w,c
  2279  001E38  6ED9               	movwf	fsr2l,c
  2280  001E3A  0E02               	movlw	high _virtualMemory
  2281  001E3C  2002               	addwfc	??_update_immData+1,w,c
  2282  001E3E  6EDA               	movwf	fsr2h,c
  2283  001E40  50DF               	movf	indf2,w,c
  2284  001E42  6E1B               	movwf	_immData_1,c
  2285                           
  2286                           ;emulator.c: 219: immData_2 = virtualMemory[regPC + 2];
  2287  001E44  0E02               	movlw	2
  2288  001E46  2418               	addwf	_regPC,w,c
  2289  001E48  6E01               	movwf	??_update_immData& (0+255),c
  2290  001E4A  0E00               	movlw	0
  2291  001E4C  2019               	addwfc	_regPC+1,w,c
  2292  001E4E  6E02               	movwf	(??_update_immData+1)& (0+255),c
  2293  001E50  0E00               	movlw	low _virtualMemory
  2294  001E52  2401               	addwf	??_update_immData,w,c
  2295  001E54  6ED9               	movwf	fsr2l,c
  2296  001E56  0E02               	movlw	high _virtualMemory
  2297  001E58  2002               	addwfc	??_update_immData+1,w,c
  2298  001E5A  6EDA               	movwf	fsr2h,c
  2299  001E5C  50DF               	movf	indf2,w,c
  2300  001E5E  6E1C               	movwf	_immData_2,c
  2301  001E60  0012               	return	
  2302  001E62                     __end_of_update_immData:
  2303                           	opt stack 0
  2304                           tblptru	equ	0xFF8
  2305                           tblptrh	equ	0xFF7
  2306                           tblptrl	equ	0xFF6
  2307                           tablat	equ	0xFF5
  2308                           prodh	equ	0xFF4
  2309                           prodl	equ	0xFF3
  2310                           postinc0	equ	0xFEE
  2311                           wreg	equ	0xFE8
  2312                           postdec1	equ	0xFE5
  2313                           fsr1h	equ	0xFE2
  2314                           fsr1l	equ	0xFE1
  2315                           indf2	equ	0xFDF
  2316                           fsr2h	equ	0xFDA
  2317                           fsr2l	equ	0xFD9
  2318                           status	equ	0xFD8
  2319                           
  2320 ;; *************** function _setPortData *****************
  2321 ;; Defined at:
  2322 ;;		line 178 in file "source/emulator.c"
  2323 ;; Parameters:    Size  Location     Type
  2324 ;;  portNumber      1    wreg     unsigned char 
  2325 ;;  outputData      1    4[COMRAM] unsigned char 
  2326 ;; Auto vars:     Size  Location     Type
  2327 ;;  portNumber      1    5[COMRAM] unsigned char 
  2328 ;;  outputData_t    2    6[COMRAM] unsigned int 
  2329 ;;  outputData_t    1    8[COMRAM] unsigned char 
  2330 ;; Return value:  Size  Location     Type
  2331 ;;		None               void
  2332 ;; Registers used:
  2333 ;;		wreg, status,2, status,0, cstack
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: 0/0
  2338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2339 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2340 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2342 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2343 ;;Total ram usage:        5 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    1
  2346 ;; This function calls:
  2347 ;;		_dispSeg
  2348 ;;		_enableSerial
  2349 ;;		_hexToChar
  2350 ;; This function is called by:
  2351 ;;		_processOpcode
  2352 ;; This function uses a non-reentrant model
  2353 ;;
  2354                           
  2355                           	psect	text5
  2356  001D24                     __ptext5:
  2357                           	opt stack 0
  2358  001D24                     _setPortData:
  2359                           	opt stack 28
  2360                           
  2361                           ;incstack = 0
  2362                           ;setPortData@portNumber stored from wreg
  2363  001D24  CFE8 F006          	movff	wreg,setPortData@portNumber
  2364                           
  2365                           ;emulator.c: 180: uint16_t outputData_temp16;
  2366                           ;emulator.c: 181: uint8_t outputData_temp8;
  2367                           ;emulator.c: 182: switch (portNumber)
  2368  001D28  D043               	goto	l1419
  2369  001D2A                     l240:
  2370                           
  2371                           ;emulator.c: 185: if (outputData == 0) outputData_temp16 = 1200;
  2372  001D2A  6605               	tstfsz	setPortData@outputData,c
  2373  001D2C  D004               	goto	l1395
  2374  001D2E  0E04               	movlw	4
  2375  001D30  6E08               	movwf	setPortData@outputData_temp16+1,c
  2376  001D32  0EB0               	movlw	176
  2377  001D34  6E07               	movwf	setPortData@outputData_temp16,c
  2378  001D36                     l1395:
  2379                           
  2380                           ;emulator.c: 186: if (outputData == 1) outputData_temp16 = 2400;
  2381  001D36  0405               	decf	setPortData@outputData,w,c
  2382  001D38  A4D8               	btfss	status,2,c
  2383  001D3A  D004               	goto	l1399
  2384  001D3C  0E09               	movlw	9
  2385  001D3E  6E08               	movwf	setPortData@outputData_temp16+1,c
  2386  001D40  0E60               	movlw	96
  2387  001D42  6E07               	movwf	setPortData@outputData_temp16,c
  2388  001D44                     l1399:
  2389                           
  2390                           ;emulator.c: 187: if (outputData == 2) outputData_temp16 = 9600;
  2391  001D44  5005               	movf	setPortData@outputData,w,c
  2392  001D46  0A02               	xorlw	2
  2393  001D48  A4D8               	btfss	status,2,c
  2394  001D4A  D004               	goto	l1403
  2395  001D4C  0E25               	movlw	37
  2396  001D4E  6E08               	movwf	setPortData@outputData_temp16+1,c
  2397  001D50  0E80               	movlw	128
  2398  001D52  6E07               	movwf	setPortData@outputData_temp16,c
  2399  001D54                     l1403:
  2400                           
  2401                           ;emulator.c: 188: if (outputData == 3) outputData_temp16 = 10417;
  2402  001D54  5005               	movf	setPortData@outputData,w,c
  2403  001D56  0A03               	xorlw	3
  2404  001D58  A4D8               	btfss	status,2,c
  2405  001D5A  D004               	goto	l1407
  2406  001D5C  0E28               	movlw	40
  2407  001D5E  6E08               	movwf	setPortData@outputData_temp16+1,c
  2408  001D60  0EB1               	movlw	177
  2409  001D62  6E07               	movwf	setPortData@outputData_temp16,c
  2410  001D64                     l1407:
  2411                           
  2412                           ;emulator.c: 189: if (outputData == 4) outputData_temp16 = 19200;
  2413  001D64  5005               	movf	setPortData@outputData,w,c
  2414  001D66  0A04               	xorlw	4
  2415  001D68  A4D8               	btfss	status,2,c
  2416  001D6A  D004               	goto	l1411
  2417  001D6C  0E4B               	movlw	75
  2418  001D6E  6E08               	movwf	setPortData@outputData_temp16+1,c
  2419  001D70  0E00               	movlw	0
  2420  001D72  6E07               	movwf	setPortData@outputData_temp16,c
  2421  001D74                     l1411:
  2422                           
  2423                           ;emulator.c: 190: enableSerial(outputData_temp16);
  2424  001D74  C007  F001         	movff	setPortData@outputData_temp16,enableSerial@baudRate
  2425  001D78  C008  F002         	movff	setPortData@outputData_temp16+1,enableSerial@baudRate+1
  2426  001D7C  EC31  F00F         	call	_enableSerial	;wreg free
  2427                           
  2428                           ;emulator.c: 191: break;
  2429  001D80  0012               	return	
  2430  001D82                     l247:
  2431                           
  2432                           ;emulator.c: 194: TXREG2 = outputData;
  2433  001D82  C005  FF73         	movff	setPortData@outputData,3955	;volatile
  2434                           
  2435                           ;emulator.c: 195: break;
  2436  001D86  0012               	return	
  2437  001D88                     l1413:
  2438                           
  2439                           ;emulator.c: 198: outputData_temp8 = hexToChar(outputData);
  2440  001D88  5005               	movf	setPortData@outputData,w,c
  2441  001D8A  ECE1  F00D         	call	_hexToChar
  2442  001D8E  6E09               	movwf	setPortData@outputData_temp8,c
  2443                           
  2444                           ;emulator.c: 199: dispSeg(1, outputData_temp8);
  2445  001D90  C009  F001         	movff	setPortData@outputData_temp8,dispSeg@letter
  2446  001D94  0E01               	movlw	1
  2447  001D96  EC3B  F00C         	call	_dispSeg
  2448                           
  2449                           ;emulator.c: 200: break;
  2450  001D9A  0012               	return	
  2451  001D9C                     l1415:
  2452                           
  2453                           ;emulator.c: 203: outputData_temp8 = hexToChar(outputData);
  2454  001D9C  5005               	movf	setPortData@outputData,w,c
  2455  001D9E  ECE1  F00D         	call	_hexToChar
  2456  001DA2  6E09               	movwf	setPortData@outputData_temp8,c
  2457                           
  2458                           ;emulator.c: 204: dispSeg(2, outputData_temp8);
  2459  001DA4  C009  F001         	movff	setPortData@outputData_temp8,dispSeg@letter
  2460  001DA8  0E02               	movlw	2
  2461  001DAA  EC3B  F00C         	call	_dispSeg
  2462                           
  2463                           ;emulator.c: 205: break;
  2464  001DAE  0012               	return	
  2465  001DB0                     l1419:
  2466  001DB0  5006               	movf	setPortData@portNumber,w,c
  2467                           
  2468                           ; Switch size 1, requested type "space"
  2469                           ; Number of cases is 4, Range of values is 0 to 4
  2470                           ; switch strategies available:
  2471                           ; Name         Instructions Cycles
  2472                           ; simple_byte           13     7 (average)
  2473                           ;	Chosen strategy is simple_byte
  2474  001DB2  0A00               	xorlw	0	; case 0
  2475  001DB4  B4D8               	btfsc	status,2,c
  2476  001DB6  D7B9               	goto	l240
  2477  001DB8  0A01               	xorlw	1	; case 1
  2478  001DBA  B4D8               	btfsc	status,2,c
  2479  001DBC  D7E2               	goto	l247
  2480  001DBE  0A02               	xorlw	2	; case 3
  2481  001DC0  B4D8               	btfsc	status,2,c
  2482  001DC2  D7E2               	goto	l1413
  2483  001DC4  0A07               	xorlw	7	; case 4
  2484  001DC6  A4D8               	btfss	status,2,c
  2485  001DC8  0012               	return	
  2486  001DCA  D7E8               	goto	l1415
  2487  001DCC                     __end_of_setPortData:
  2488                           	opt stack 0
  2489                           tblptru	equ	0xFF8
  2490                           tblptrh	equ	0xFF7
  2491                           tblptrl	equ	0xFF6
  2492                           tablat	equ	0xFF5
  2493                           prodh	equ	0xFF4
  2494                           prodl	equ	0xFF3
  2495                           postinc0	equ	0xFEE
  2496                           wreg	equ	0xFE8
  2497                           postdec1	equ	0xFE5
  2498                           fsr1h	equ	0xFE2
  2499                           fsr1l	equ	0xFE1
  2500                           indf2	equ	0xFDF
  2501                           fsr2h	equ	0xFDA
  2502                           fsr2l	equ	0xFD9
  2503                           status	equ	0xFD8
  2504                           
  2505 ;; *************** function _hexToChar *****************
  2506 ;; Defined at:
  2507 ;;		line 63 in file "source/system.c"
  2508 ;; Parameters:    Size  Location     Type
  2509 ;;  number          1    wreg     unsigned char 
  2510 ;; Auto vars:     Size  Location     Type
  2511 ;;  number          1    0[COMRAM] unsigned char 
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  1    wreg      unsigned char 
  2514 ;; Registers used:
  2515 ;;		wreg, status,2, status,0
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2525 ;;Total ram usage:        1 bytes
  2526 ;; Hardware stack levels used:    1
  2527 ;; This function calls:
  2528 ;;		Nothing
  2529 ;; This function is called by:
  2530 ;;		_setPortData
  2531 ;; This function uses a non-reentrant model
  2532 ;;
  2533                           
  2534                           	psect	text6
  2535  001BC2                     __ptext6:
  2536                           	opt stack 0
  2537  001BC2                     _hexToChar:
  2538                           	opt stack 28
  2539                           
  2540                           ;incstack = 0
  2541                           ;hexToChar@number stored from wreg
  2542  001BC2  CFE8 F001          	movff	wreg,hexToChar@number
  2543                           
  2544                           ;system.c: 65: number = number << 4;
  2545  001BC6  3801               	swapf	hexToChar@number,w,c
  2546  001BC8  0BF0               	andlw	240
  2547  001BCA  6E01               	movwf	hexToChar@number,c
  2548                           
  2549                           ;system.c: 66: number = number >> 4;
  2550  001BCC  3801               	swapf	hexToChar@number,w,c
  2551  001BCE  0B0F               	andlw	15
  2552  001BD0  6E01               	movwf	hexToChar@number,c
  2553                           
  2554                           ;system.c: 67: switch (number)
  2555  001BD2  D020               	goto	l1227
  2556  001BD4                     l1161:
  2557                           
  2558                           ;system.c: 70: return '0';
  2559  001BD4  0E30               	movlw	48
  2560  001BD6  0012               	return	
  2561  001BD8                     l1165:
  2562                           
  2563                           ;system.c: 72: return '1';
  2564  001BD8  0E31               	movlw	49
  2565  001BDA  0012               	return	
  2566  001BDC                     l1169:
  2567                           
  2568                           ;system.c: 74: return '2';
  2569  001BDC  0E32               	movlw	50
  2570  001BDE  0012               	return	
  2571  001BE0                     l1173:
  2572                           
  2573                           ;system.c: 76: return '3';
  2574  001BE0  0E33               	movlw	51
  2575  001BE2  0012               	return	
  2576  001BE4                     l1177:
  2577                           
  2578                           ;system.c: 78: return '4';
  2579  001BE4  0E34               	movlw	52
  2580  001BE6  0012               	return	
  2581  001BE8                     l1181:
  2582                           
  2583                           ;system.c: 80: return '5';
  2584  001BE8  0E35               	movlw	53
  2585  001BEA  0012               	return	
  2586  001BEC                     l1185:
  2587                           
  2588                           ;system.c: 82: return '6';
  2589  001BEC  0E36               	movlw	54
  2590  001BEE  0012               	return	
  2591  001BF0                     l1189:
  2592                           
  2593                           ;system.c: 84: return '7';
  2594  001BF0  0E37               	movlw	55
  2595  001BF2  0012               	return	
  2596  001BF4                     l1193:
  2597                           
  2598                           ;system.c: 86: return '8';
  2599  001BF4  0E38               	movlw	56
  2600  001BF6  0012               	return	
  2601  001BF8                     l1197:
  2602                           
  2603                           ;system.c: 88: return '9';
  2604  001BF8  0E39               	movlw	57
  2605  001BFA  0012               	return	
  2606  001BFC                     l1201:
  2607                           
  2608                           ;system.c: 90: return 'A';
  2609  001BFC  0E41               	movlw	65
  2610  001BFE  0012               	return	
  2611  001C00                     l1205:
  2612                           
  2613                           ;system.c: 92: return 'B';
  2614  001C00  0E42               	movlw	66
  2615  001C02  0012               	return	
  2616  001C04                     l1209:
  2617                           
  2618                           ;system.c: 94: return 'C';
  2619  001C04  0E43               	movlw	67
  2620  001C06  0012               	return	
  2621  001C08                     l1213:
  2622                           
  2623                           ;system.c: 96: return 'D';
  2624  001C08  0E44               	movlw	68
  2625  001C0A  0012               	return	
  2626  001C0C                     l1217:
  2627                           
  2628                           ;system.c: 98: return 'E';
  2629  001C0C  0E45               	movlw	69
  2630  001C0E  0012               	return	
  2631  001C10                     l1221:
  2632                           
  2633                           ;system.c: 100: return 'F';
  2634  001C10  0E46               	movlw	70
  2635  001C12  0012               	return	
  2636  001C14                     l1227:
  2637  001C14  5001               	movf	hexToChar@number,w,c
  2638                           
  2639                           ; Switch size 1, requested type "space"
  2640                           ; Number of cases is 16, Range of values is 0 to 15
  2641                           ; switch strategies available:
  2642                           ; Name         Instructions Cycles
  2643                           ; simple_byte           49    25 (average)
  2644                           ;	Chosen strategy is simple_byte
  2645  001C16  0A00               	xorlw	0	; case 0
  2646  001C18  B4D8               	btfsc	status,2,c
  2647  001C1A  D7DC               	goto	l1161
  2648  001C1C  0A01               	xorlw	1	; case 1
  2649  001C1E  B4D8               	btfsc	status,2,c
  2650  001C20  D7DB               	goto	l1165
  2651  001C22  0A03               	xorlw	3	; case 2
  2652  001C24  B4D8               	btfsc	status,2,c
  2653  001C26  D7DA               	goto	l1169
  2654  001C28  0A01               	xorlw	1	; case 3
  2655  001C2A  B4D8               	btfsc	status,2,c
  2656  001C2C  D7D9               	goto	l1173
  2657  001C2E  0A07               	xorlw	7	; case 4
  2658  001C30  B4D8               	btfsc	status,2,c
  2659  001C32  D7D8               	goto	l1177
  2660  001C34  0A01               	xorlw	1	; case 5
  2661  001C36  B4D8               	btfsc	status,2,c
  2662  001C38  D7D7               	goto	l1181
  2663  001C3A  0A03               	xorlw	3	; case 6
  2664  001C3C  B4D8               	btfsc	status,2,c
  2665  001C3E  D7D6               	goto	l1185
  2666  001C40  0A01               	xorlw	1	; case 7
  2667  001C42  B4D8               	btfsc	status,2,c
  2668  001C44  D7D5               	goto	l1189
  2669  001C46  0A0F               	xorlw	15	; case 8
  2670  001C48  B4D8               	btfsc	status,2,c
  2671  001C4A  D7D4               	goto	l1193
  2672  001C4C  0A01               	xorlw	1	; case 9
  2673  001C4E  B4D8               	btfsc	status,2,c
  2674  001C50  D7D3               	goto	l1197
  2675  001C52  0A03               	xorlw	3	; case 10
  2676  001C54  B4D8               	btfsc	status,2,c
  2677  001C56  D7D2               	goto	l1201
  2678  001C58  0A01               	xorlw	1	; case 11
  2679  001C5A  B4D8               	btfsc	status,2,c
  2680  001C5C  D7D1               	goto	l1205
  2681  001C5E  0A07               	xorlw	7	; case 12
  2682  001C60  B4D8               	btfsc	status,2,c
  2683  001C62  D7D0               	goto	l1209
  2684  001C64  0A01               	xorlw	1	; case 13
  2685  001C66  B4D8               	btfsc	status,2,c
  2686  001C68  D7CF               	goto	l1213
  2687  001C6A  0A03               	xorlw	3	; case 14
  2688  001C6C  B4D8               	btfsc	status,2,c
  2689  001C6E  D7CE               	goto	l1217
  2690  001C70  0A01               	xorlw	1	; case 15
  2691  001C72  B4D8               	btfsc	status,2,c
  2692  001C74  D7CD               	goto	l1221
  2693                           
  2694                           ;system.c: 102: return 0;
  2695  001C76  0E00               	movlw	0
  2696  001C78  0012               	return	
  2697  001C7A                     __end_of_hexToChar:
  2698                           	opt stack 0
  2699                           tblptru	equ	0xFF8
  2700                           tblptrh	equ	0xFF7
  2701                           tblptrl	equ	0xFF6
  2702                           tablat	equ	0xFF5
  2703                           prodh	equ	0xFF4
  2704                           prodl	equ	0xFF3
  2705                           postinc0	equ	0xFEE
  2706                           wreg	equ	0xFE8
  2707                           postdec1	equ	0xFE5
  2708                           fsr1h	equ	0xFE2
  2709                           fsr1l	equ	0xFE1
  2710                           indf2	equ	0xFDF
  2711                           fsr2h	equ	0xFDA
  2712                           fsr2l	equ	0xFD9
  2713                           status	equ	0xFD8
  2714                           
  2715 ;; *************** function _enableSerial *****************
  2716 ;; Defined at:
  2717 ;;		line 21 in file "source/serial.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;  baudRate        2    0[COMRAM] unsigned int 
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;		None
  2722 ;; Return value:  Size  Location     Type
  2723 ;;		None               void
  2724 ;; Registers used:
  2725 ;;		wreg, status,2, status,0
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2731 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;Total ram usage:        4 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; This function calls:
  2738 ;;		Nothing
  2739 ;; This function is called by:
  2740 ;;		_setPortData
  2741 ;; This function uses a non-reentrant model
  2742 ;;
  2743                           
  2744                           	psect	text7
  2745  001E62                     __ptext7:
  2746                           	opt stack 0
  2747  001E62                     _enableSerial:
  2748                           	opt stack 28
  2749                           
  2750                           ;serial.c: 23: LATDbits.LD3 = 1;
  2751                           
  2752                           ;incstack = 0
  2753  001E62  868C               	bsf	3980,3,c	;volatile
  2754                           
  2755                           ;serial.c: 26: switch (baudRate) {
  2756  001E64  D00B               	goto	l1323
  2757  001E66                     l1313:
  2758                           
  2759                           ;serial.c: 31: SPBRG2 = 103;
  2760  001E66  0E67               	movlw	103
  2761  001E68  D007               	goto	L39
  2762  001E6A                     l1315:
  2763                           
  2764                           ;serial.c: 34: SPBRG2 = 25;
  2765  001E6A  0E19               	movlw	25
  2766  001E6C  D005               	goto	L39
  2767  001E6E                     l1317:
  2768                           
  2769                           ;serial.c: 37: SPBRG2 = 23;
  2770  001E6E  0E17               	movlw	23
  2771  001E70  D003               	goto	L39
  2772  001E72                     l1319:
  2773                           
  2774                           ;serial.c: 40: SPBRG2 = 12;
  2775  001E72  0E0C               	movlw	12
  2776  001E74  D001               	goto	L39
  2777  001E76                     l1321:
  2778                           
  2779                           ;serial.c: 43: SPBRG2 = 207;
  2780  001E76  0ECF               	movlw	207
  2781  001E78                     L39:
  2782  001E78  6E75               	movwf	3957,c	;volatile
  2783                           
  2784                           ;serial.c: 44: }
  2785  001E7A  D02C               	goto	l1325
  2786  001E7C                     l1323:
  2787  001E7C  C001  F003         	movff	enableSerial@baudRate,??_enableSerial
  2788  001E80  C002  F004         	movff	enableSerial@baudRate+1,??_enableSerial+1
  2789                           
  2790                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 5 sub-sw
      +                          itches
  2791                           ; Switch size 1, requested type "space"
  2792                           ; Number of cases is 5, Range of values is 4 to 75
  2793                           ; switch strategies available:
  2794                           ; Name         Instructions Cycles
  2795                           ; simple_byte           16     9 (average)
  2796                           ;	Chosen strategy is simple_byte
  2797  001E84  5004               	movf	??_enableSerial+1,w,c
  2798  001E86  0A04               	xorlw	4	; case 4
  2799  001E88  B4D8               	btfsc	status,2,c
  2800  001E8A  D00D               	goto	l1887
  2801  001E8C  0A0D               	xorlw	13	; case 9
  2802  001E8E  B4D8               	btfsc	status,2,c
  2803  001E90  D00D               	goto	l1889
  2804  001E92  0A2C               	xorlw	44	; case 37
  2805  001E94  B4D8               	btfsc	status,2,c
  2806  001E96  D00F               	goto	l1891
  2807  001E98  0A0D               	xorlw	13	; case 40
  2808  001E9A  B4D8               	btfsc	status,2,c
  2809  001E9C  D011               	goto	l1893
  2810  001E9E  0A63               	xorlw	99	; case 75
  2811  001EA0  B4D8               	btfsc	status,2,c
  2812  001EA2  D013               	goto	l1895
  2813  001EA4  D7E8               	goto	l1321
  2814  001EA6                     l1887:
  2815                           
  2816                           ; Switch size 1, requested type "space"
  2817                           ; Number of cases is 1, Range of values is 176 to 176
  2818                           ; switch strategies available:
  2819                           ; Name         Instructions Cycles
  2820                           ; simple_byte            4     3 (average)
  2821                           ;	Chosen strategy is simple_byte
  2822  001EA6  5003               	movf	??_enableSerial,w,c
  2823  001EA8  0AB0               	xorlw	176	; case 176
  2824  001EAA  D7E5               	goto	l1321
  2825  001EAC                     l1889:
  2826                           
  2827                           ; Switch size 1, requested type "space"
  2828                           ; Number of cases is 1, Range of values is 96 to 96
  2829                           ; switch strategies available:
  2830                           ; Name         Instructions Cycles
  2831                           ; simple_byte            4     3 (average)
  2832                           ;	Chosen strategy is simple_byte
  2833  001EAC  5003               	movf	??_enableSerial,w,c
  2834  001EAE  0A60               	xorlw	96	; case 96
  2835  001EB0  B4D8               	btfsc	status,2,c
  2836  001EB2  D7D9               	goto	l1313
  2837  001EB4  D7E0               	goto	l1321
  2838  001EB6                     l1891:
  2839                           
  2840                           ; Switch size 1, requested type "space"
  2841                           ; Number of cases is 1, Range of values is 128 to 128
  2842                           ; switch strategies available:
  2843                           ; Name         Instructions Cycles
  2844                           ; simple_byte            4     3 (average)
  2845                           ;	Chosen strategy is simple_byte
  2846  001EB6  5003               	movf	??_enableSerial,w,c
  2847  001EB8  0A80               	xorlw	128	; case 128
  2848  001EBA  B4D8               	btfsc	status,2,c
  2849  001EBC  D7D6               	goto	l1315
  2850  001EBE  D7DB               	goto	l1321
  2851  001EC0                     l1893:
  2852                           
  2853                           ; Switch size 1, requested type "space"
  2854                           ; Number of cases is 1, Range of values is 177 to 177
  2855                           ; switch strategies available:
  2856                           ; Name         Instructions Cycles
  2857                           ; simple_byte            4     3 (average)
  2858                           ;	Chosen strategy is simple_byte
  2859  001EC0  5003               	movf	??_enableSerial,w,c
  2860  001EC2  0AB1               	xorlw	177	; case 177
  2861  001EC4  B4D8               	btfsc	status,2,c
  2862  001EC6  D7D3               	goto	l1317
  2863  001EC8  D7D6               	goto	l1321
  2864  001ECA                     l1895:
  2865                           
  2866                           ; Switch size 1, requested type "space"
  2867                           ; Number of cases is 1, Range of values is 0 to 0
  2868                           ; switch strategies available:
  2869                           ; Name         Instructions Cycles
  2870                           ; simple_byte            4     3 (average)
  2871                           ;	Chosen strategy is simple_byte
  2872  001ECA  5003               	movf	??_enableSerial,w,c
  2873  001ECC  0A00               	xorlw	0	; case 0
  2874  001ECE  B4D8               	btfsc	status,2,c
  2875  001ED0  D7D0               	goto	l1319
  2876  001ED2  D7D1               	goto	l1321
  2877  001ED4                     l1325:
  2878                           
  2879                           ;serial.c: 46: SPBRGH2 = 0;
  2880  001ED4  0E00               	movlw	0
  2881  001ED6  6E76               	movwf	3958,c	;volatile
  2882                           
  2883                           ;serial.c: 47: TXSTA2bits.BRGH = 0;
  2884  001ED8  9472               	bcf	3954,2,c	;volatile
  2885                           
  2886                           ;serial.c: 48: BAUDCON2bits.BRG16 = 0;
  2887  001EDA  9670               	bcf	3952,3,c	;volatile
  2888                           
  2889                           ;serial.c: 50: TXSTA2bits.TX9 = 0;
  2890  001EDC  9C72               	bcf	3954,6,c	;volatile
  2891                           
  2892                           ;serial.c: 51: RCSTA2bits.RX9 = 0;
  2893  001EDE  9C71               	bcf	3953,6,c	;volatile
  2894                           
  2895                           ;serial.c: 53: TXSTA2bits.SYNC = 0;
  2896  001EE0  9872               	bcf	3954,4,c	;volatile
  2897                           
  2898                           ;serial.c: 54: BAUDCON2bits.DTRXP = 0;
  2899  001EE2  9A70               	bcf	3952,5,c	;volatile
  2900                           
  2901                           ;serial.c: 56: TXSTA2bits.TXEN = 1;
  2902  001EE4  8A72               	bsf	3954,5,c	;volatile
  2903                           
  2904                           ;serial.c: 57: RCSTA2bits.CREN = 1;
  2905  001EE6  8871               	bsf	3953,4,c	;volatile
  2906                           
  2907                           ;serial.c: 59: RCSTA2bits.SPEN = 1;
  2908  001EE8  8E71               	bsf	3953,7,c	;volatile
  2909  001EEA  0012               	return	
  2910  001EEC                     __end_of_enableSerial:
  2911                           	opt stack 0
  2912                           tblptru	equ	0xFF8
  2913                           tblptrh	equ	0xFF7
  2914                           tblptrl	equ	0xFF6
  2915                           tablat	equ	0xFF5
  2916                           prodh	equ	0xFF4
  2917                           prodl	equ	0xFF3
  2918                           postinc0	equ	0xFEE
  2919                           wreg	equ	0xFE8
  2920                           postdec1	equ	0xFE5
  2921                           fsr1h	equ	0xFE2
  2922                           fsr1l	equ	0xFE1
  2923                           indf2	equ	0xFDF
  2924                           fsr2h	equ	0xFDA
  2925                           fsr2l	equ	0xFD9
  2926                           status	equ	0xFD8
  2927                           
  2928 ;; *************** function _dispSeg *****************
  2929 ;; Defined at:
  2930 ;;		line 13 in file "source/segment.c"
  2931 ;; Parameters:    Size  Location     Type
  2932 ;;  segment         1    wreg     unsigned char 
  2933 ;;  letter          1    0[COMRAM] unsigned char 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  segment         1    1[COMRAM] unsigned char 
  2936 ;; Return value:  Size  Location     Type
  2937 ;;		None               void
  2938 ;; Registers used:
  2939 ;;		wreg, status,2, status,0
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2945 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2948 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2949 ;;Total ram usage:        2 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; This function calls:
  2952 ;;		Nothing
  2953 ;; This function is called by:
  2954 ;;		_main
  2955 ;;		_setPortData
  2956 ;;		_cycleSegDisplays
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           	psect	text8
  2961  001876                     __ptext8:
  2962                           	opt stack 0
  2963  001876                     _dispSeg:
  2964                           	opt stack 28
  2965                           
  2966                           ;incstack = 0
  2967                           ;dispSeg@segment stored from wreg
  2968  001876  CFE8 F002          	movff	wreg,dispSeg@segment
  2969                           
  2970                           ;segment.c: 15: switch (letter) {
  2971  00187A  D156               	goto	l1075
  2972  00187C                     l1001:
  2973                           
  2974                           ;segment.c: 17: case 'X':
  2975                           ;segment.c: 18: if (segment == 1) {
  2976  00187C  0402               	decf	dispSeg@segment,w,c
  2977  00187E  A4D8               	btfss	status,2,c
  2978  001880  D008               	goto	l56
  2979                           
  2980                           ;segment.c: 19: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = LATAbits.LA1 = 0;
  2981  001882  9289               	bcf	3977,1,c	;volatile
  2982  001884  9089               	bcf	3977,0,c	;volatile
  2983  001886  908D               	bcf	3981,0,c	;volatile
  2984  001888  9A89               	bcf	3977,5,c	;volatile
  2985  00188A  9889               	bcf	3977,4,c	;volatile
  2986  00188C  9689               	bcf	3977,3,c	;volatile
  2987  00188E  9489               	bcf	3977,2,c	;volatile
  2988                           
  2989                           ;segment.c: 20: return;
  2990  001890  0012               	return	
  2991  001892                     l56:
  2992                           
  2993                           ;segment.c: 21: }
  2994                           ;segment.c: 22: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = LATEbits.LE2 = 0;
  2995  001892  948D               	bcf	3981,2,c	;volatile
  2996  001894  928D               	bcf	3981,1,c	;volatile
  2997  001896  928B               	bcf	3979,1,c	;volatile
  2998  001898  908B               	bcf	3979,0,c	;volatile
  2999  00189A  948B               	bcf	3979,2,c	;volatile
  3000  00189C  9C89               	bcf	3977,6,c	;volatile
  3001  00189E  9E89               	bcf	3977,7,c	;volatile
  3002                           
  3003                           ;segment.c: 23: break;
  3004  0018A0  0012               	return	
  3005  0018A2                     l1005:
  3006                           
  3007                           ;segment.c: 25: if (segment == 1) {
  3008  0018A2  0402               	decf	dispSeg@segment,w,c
  3009  0018A4  A4D8               	btfss	status,2,c
  3010  0018A6  D008               	goto	l60
  3011                           
  3012                           ;segment.c: 26: LATAbits.LA1 = 1;
  3013  0018A8  8289               	bsf	3977,1,c	;volatile
  3014                           
  3015                           ;segment.c: 27: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = 0;
  3016  0018AA  9089               	bcf	3977,0,c	;volatile
  3017  0018AC  908D               	bcf	3981,0,c	;volatile
  3018  0018AE  9A89               	bcf	3977,5,c	;volatile
  3019  0018B0  9889               	bcf	3977,4,c	;volatile
  3020  0018B2  9689               	bcf	3977,3,c	;volatile
  3021  0018B4  9489               	bcf	3977,2,c	;volatile
  3022                           
  3023                           ;segment.c: 28: return;
  3024  0018B6  0012               	return	
  3025  0018B8                     l60:
  3026                           
  3027                           ;segment.c: 29: }
  3028                           ;segment.c: 30: LATEbits.LE2 = 1;
  3029  0018B8  848D               	bsf	3981,2,c	;volatile
  3030                           
  3031                           ;segment.c: 31: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = 0;
  3032  0018BA  928D               	bcf	3981,1,c	;volatile
  3033  0018BC  928B               	bcf	3979,1,c	;volatile
  3034  0018BE  908B               	bcf	3979,0,c	;volatile
  3035  0018C0  948B               	bcf	3979,2,c	;volatile
  3036  0018C2  9C89               	bcf	3977,6,c	;volatile
  3037  0018C4  9E89               	bcf	3977,7,c	;volatile
  3038                           
  3039                           ;segment.c: 32: break;
  3040  0018C6  0012               	return	
  3041  0018C8                     l1009:
  3042                           
  3043                           ;segment.c: 34: if (segment == 1) {
  3044  0018C8  0402               	decf	dispSeg@segment,w,c
  3045  0018CA  A4D8               	btfss	status,2,c
  3046  0018CC  D008               	goto	l62
  3047                           
  3048                           ;segment.c: 35: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = 1;
  3049  0018CE  8089               	bsf	3977,0,c	;volatile
  3050  0018D0  808D               	bsf	3981,0,c	;volatile
  3051  0018D2  8A89               	bsf	3977,5,c	;volatile
  3052  0018D4  8889               	bsf	3977,4,c	;volatile
  3053  0018D6  8689               	bsf	3977,3,c	;volatile
  3054  0018D8  8489               	bsf	3977,2,c	;volatile
  3055                           
  3056                           ;segment.c: 36: LATAbits.LA1 = 0;
  3057  0018DA  9289               	bcf	3977,1,c	;volatile
  3058                           
  3059                           ;segment.c: 37: return;
  3060  0018DC  0012               	return	
  3061  0018DE                     l62:
  3062                           
  3063                           ;segment.c: 38: }
  3064                           ;segment.c: 39: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = 1;
  3065  0018DE  828D               	bsf	3981,1,c	;volatile
  3066  0018E0  828B               	bsf	3979,1,c	;volatile
  3067  0018E2  808B               	bsf	3979,0,c	;volatile
  3068  0018E4  848B               	bsf	3979,2,c	;volatile
  3069  0018E6  8C89               	bsf	3977,6,c	;volatile
  3070  0018E8  8E89               	bsf	3977,7,c	;volatile
  3071                           
  3072                           ;segment.c: 40: LATEbits.LE2 = 0;
  3073  0018EA  948D               	bcf	3981,2,c	;volatile
  3074                           
  3075                           ;segment.c: 41: break;
  3076  0018EC  0012               	return	
  3077  0018EE                     l1013:
  3078                           
  3079                           ;segment.c: 43: if (segment == 1) {
  3080  0018EE  0402               	decf	dispSeg@segment,w,c
  3081  0018F0  A4D8               	btfss	status,2,c
  3082  0018F2  D008               	goto	l64
  3083                           
  3084                           ;segment.c: 44: LATAbits.LA3 = LATAbits.LA4 = 1;
  3085  0018F4  8889               	bsf	3977,4,c	;volatile
  3086  0018F6  8689               	bsf	3977,3,c	;volatile
  3087                           
  3088                           ;segment.c: 45: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1
      +                           = 0;
  3089  0018F8  9289               	bcf	3977,1,c	;volatile
  3090  0018FA  9089               	bcf	3977,0,c	;volatile
  3091  0018FC  908D               	bcf	3981,0,c	;volatile
  3092  0018FE  9A89               	bcf	3977,5,c	;volatile
  3093  001900  9489               	bcf	3977,2,c	;volatile
  3094                           
  3095                           ;segment.c: 46: return;
  3096  001902  0012               	return	
  3097  001904                     l64:
  3098                           
  3099                           ;segment.c: 47: }
  3100                           ;segment.c: 48: LATAbits.LA6 = LATCbits.LC2 = 1;
  3101  001904  848B               	bsf	3979,2,c	;volatile
  3102  001906  8C89               	bsf	3977,6,c	;volatile
  3103                           
  3104                           ;segment.c: 49: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2
      +                           = 0;
  3105  001908  948D               	bcf	3981,2,c	;volatile
  3106  00190A  928D               	bcf	3981,1,c	;volatile
  3107  00190C  928B               	bcf	3979,1,c	;volatile
  3108  00190E  908B               	bcf	3979,0,c	;volatile
  3109  001910  9E89               	bcf	3977,7,c	;volatile
  3110                           
  3111                           ;segment.c: 50: break;
  3112  001912  0012               	return	
  3113  001914                     l1017:
  3114                           
  3115                           ;segment.c: 52: if (segment == 1) {
  3116  001914  0402               	decf	dispSeg@segment,w,c
  3117  001916  A4D8               	btfss	status,2,c
  3118  001918  D008               	goto	l66
  3119                           
  3120                           ;segment.c: 53: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA1 = LATEbits.LE0 = LATAbits.LA5
      +                           = 1;
  3121  00191A  8A89               	bsf	3977,5,c	;volatile
  3122  00191C  808D               	bsf	3981,0,c	;volatile
  3123  00191E  8289               	bsf	3977,1,c	;volatile
  3124  001920  8689               	bsf	3977,3,c	;volatile
  3125  001922  8489               	bsf	3977,2,c	;volatile
  3126                           
  3127                           ;segment.c: 54: LATAbits.LA4 = LATAbits.LA0 = 0;
  3128  001924  9089               	bcf	3977,0,c	;volatile
  3129  001926  9889               	bcf	3977,4,c	;volatile
  3130                           
  3131                           ;segment.c: 55: return;
  3132  001928  0012               	return	
  3133  00192A                     l66:
  3134                           
  3135                           ;segment.c: 56: }
  3136                           ;segment.c: 57: LATAbits.LA7 = LATAbits.LA6 = LATEbits.LE2 = LATCbits.LC1 = LATCbits.LC0
      +                           = 1;
  3137  00192A  808B               	bsf	3979,0,c	;volatile
  3138  00192C  828B               	bsf	3979,1,c	;volatile
  3139  00192E  848D               	bsf	3981,2,c	;volatile
  3140  001930  8C89               	bsf	3977,6,c	;volatile
  3141  001932  8E89               	bsf	3977,7,c	;volatile
  3142                           
  3143                           ;segment.c: 58: LATCbits.LC2 = LATEbits.LE1 = 0;
  3144  001934  928D               	bcf	3981,1,c	;volatile
  3145  001936  948B               	bcf	3979,2,c	;volatile
  3146                           
  3147                           ;segment.c: 59: break;
  3148  001938  0012               	return	
  3149  00193A                     l1021:
  3150                           
  3151                           ;segment.c: 61: if (segment == 1) {
  3152  00193A  0402               	decf	dispSeg@segment,w,c
  3153  00193C  A4D8               	btfss	status,2,c
  3154  00193E  D008               	goto	l68
  3155                           
  3156                           ;segment.c: 62: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = 1;
  3157  001940  8A89               	bsf	3977,5,c	;volatile
  3158  001942  8889               	bsf	3977,4,c	;volatile
  3159  001944  8289               	bsf	3977,1,c	;volatile
  3160  001946  8689               	bsf	3977,3,c	;volatile
  3161  001948  8489               	bsf	3977,2,c	;volatile
  3162                           
  3163                           ;segment.c: 63: LATEbits.LE0 = LATAbits.LA0 = 0;
  3164  00194A  9089               	bcf	3977,0,c	;volatile
  3165  00194C  908D               	bcf	3981,0,c	;volatile
  3166                           
  3167                           ;segment.c: 64: return;
  3168  00194E  0012               	return	
  3169  001950                     l68:
  3170                           
  3171                           ;segment.c: 65: }
  3172                           ;segment.c: 66: LATAbits.LA7 = LATAbits.LA6 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = 1;
  3173  001950  808B               	bsf	3979,0,c	;volatile
  3174  001952  848B               	bsf	3979,2,c	;volatile
  3175  001954  848D               	bsf	3981,2,c	;volatile
  3176  001956  8C89               	bsf	3977,6,c	;volatile
  3177  001958  8E89               	bsf	3977,7,c	;volatile
  3178                           
  3179                           ;segment.c: 67: LATCbits.LC1 = LATEbits.LE1 = 0;
  3180  00195A  928D               	bcf	3981,1,c	;volatile
  3181  00195C  928B               	bcf	3979,1,c	;volatile
  3182                           
  3183                           ;segment.c: 68: break;
  3184  00195E  0012               	return	
  3185  001960                     l1025:
  3186                           
  3187                           ;segment.c: 70: if (segment == 1) {
  3188  001960  0402               	decf	dispSeg@segment,w,c
  3189  001962  A4D8               	btfss	status,2,c
  3190  001964  D008               	goto	l70
  3191                           
  3192                           ;segment.c: 71: LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA3 = LATAbits.LA4 = 1;
  3193  001966  8889               	bsf	3977,4,c	;volatile
  3194  001968  8689               	bsf	3977,3,c	;volatile
  3195  00196A  8289               	bsf	3977,1,c	;volatile
  3196  00196C  8089               	bsf	3977,0,c	;volatile
  3197                           
  3198                           ;segment.c: 72: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = 0;
  3199  00196E  908D               	bcf	3981,0,c	;volatile
  3200  001970  9A89               	bcf	3977,5,c	;volatile
  3201  001972  9489               	bcf	3977,2,c	;volatile
  3202                           
  3203                           ;segment.c: 73: return;
  3204  001974  0012               	return	
  3205  001976                     l70:
  3206                           
  3207                           ;segment.c: 74: }
  3208                           ;segment.c: 75: LATEbits.LE1 = LATEbits.LE2 = LATAbits.LA6 = LATCbits.LC2 = 1;
  3209  001976  848B               	bsf	3979,2,c	;volatile
  3210  001978  8C89               	bsf	3977,6,c	;volatile
  3211  00197A  848D               	bsf	3981,2,c	;volatile
  3212  00197C  828D               	bsf	3981,1,c	;volatile
  3213                           
  3214                           ;segment.c: 76: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = 0;
  3215  00197E  928B               	bcf	3979,1,c	;volatile
  3216  001980  908B               	bcf	3979,0,c	;volatile
  3217  001982  9E89               	bcf	3977,7,c	;volatile
  3218                           
  3219                           ;segment.c: 77: break;
  3220  001984  0012               	return	
  3221  001986                     l1029:
  3222                           
  3223                           ;segment.c: 79: if (segment == 1) {
  3224  001986  0402               	decf	dispSeg@segment,w,c
  3225  001988  A4D8               	btfss	status,2,c
  3226  00198A  D008               	goto	l72
  3227                           
  3228                           ;segment.c: 80: LATAbits.LA2 = LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = 1;
  3229  00198C  8A89               	bsf	3977,5,c	;volatile
  3230  00198E  8889               	bsf	3977,4,c	;volatile
  3231  001990  8289               	bsf	3977,1,c	;volatile
  3232  001992  8089               	bsf	3977,0,c	;volatile
  3233  001994  8489               	bsf	3977,2,c	;volatile
  3234                           
  3235                           ;segment.c: 81: LATAbits.LA3 = LATEbits.LE0 = 0;
  3236  001996  908D               	bcf	3981,0,c	;volatile
  3237  001998  9689               	bcf	3977,3,c	;volatile
  3238                           
  3239                           ;segment.c: 82: return;
  3240  00199A  0012               	return	
  3241  00199C                     l72:
  3242                           
  3243                           ;segment.c: 83: }
  3244                           ;segment.c: 84: LATAbits.LA7 = LATEbits.LE1 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = 1;
  3245  00199C  808B               	bsf	3979,0,c	;volatile
  3246  00199E  848B               	bsf	3979,2,c	;volatile
  3247  0019A0  848D               	bsf	3981,2,c	;volatile
  3248  0019A2  828D               	bsf	3981,1,c	;volatile
  3249  0019A4  8E89               	bsf	3977,7,c	;volatile
  3250                           
  3251                           ;segment.c: 85: LATAbits.LA6 = LATCbits.LC1 = 0;
  3252  0019A6  928B               	bcf	3979,1,c	;volatile
  3253  0019A8  9C89               	bcf	3977,6,c	;volatile
  3254                           
  3255                           ;segment.c: 86: break;
  3256  0019AA  0012               	return	
  3257  0019AC                     l1033:
  3258                           
  3259                           ;segment.c: 88: if (segment == 1) {
  3260  0019AC  0402               	decf	dispSeg@segment,w,c
  3261  0019AE  A4D8               	btfss	status,2,c
  3262  0019B0  D008               	goto	l74
  3263                           
  3264                           ;segment.c: 89: LATAbits.LA2 = LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = LATEbits.LE0 = 1;
  3265  0019B2  808D               	bsf	3981,0,c	;volatile
  3266  0019B4  8A89               	bsf	3977,5,c	;volatile
  3267  0019B6  8889               	bsf	3977,4,c	;volatile
  3268  0019B8  8289               	bsf	3977,1,c	;volatile
  3269  0019BA  8089               	bsf	3977,0,c	;volatile
  3270  0019BC  8489               	bsf	3977,2,c	;volatile
  3271                           
  3272                           ;segment.c: 90: LATAbits.LA3 = 0;
  3273  0019BE  9689               	bcf	3977,3,c	;volatile
  3274                           
  3275                           ;segment.c: 91: return;
  3276  0019C0  0012               	return	
  3277  0019C2                     l74:
  3278                           
  3279                           ;segment.c: 92: }
  3280                           ;segment.c: 93: LATAbits.LA7 = LATEbits.LE1 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = LATCbits.LC1 = 1;
  3281  0019C2  828B               	bsf	3979,1,c	;volatile
  3282  0019C4  808B               	bsf	3979,0,c	;volatile
  3283  0019C6  848B               	bsf	3979,2,c	;volatile
  3284  0019C8  848D               	bsf	3981,2,c	;volatile
  3285  0019CA  828D               	bsf	3981,1,c	;volatile
  3286  0019CC  8E89               	bsf	3977,7,c	;volatile
  3287                           
  3288                           ;segment.c: 94: LATAbits.LA6 = 0;
  3289  0019CE  9C89               	bcf	3977,6,c	;volatile
  3290                           
  3291                           ;segment.c: 95: break;
  3292  0019D0  0012               	return	
  3293  0019D2                     l1037:
  3294                           
  3295                           ;segment.c: 97: if (segment == 1) {
  3296  0019D2  0402               	decf	dispSeg@segment,w,c
  3297  0019D4  A4D8               	btfss	status,2,c
  3298  0019D6  D008               	goto	l76
  3299                           
  3300                           ;segment.c: 98: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = 1;
  3301  0019D8  8889               	bsf	3977,4,c	;volatile
  3302  0019DA  8689               	bsf	3977,3,c	;volatile
  3303  0019DC  8489               	bsf	3977,2,c	;volatile
  3304                           
  3305                           ;segment.c: 99: LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1 = 0;
  3306  0019DE  9289               	bcf	3977,1,c	;volatile
  3307  0019E0  9089               	bcf	3977,0,c	;volatile
  3308  0019E2  908D               	bcf	3981,0,c	;volatile
  3309  0019E4  9A89               	bcf	3977,5,c	;volatile
  3310                           
  3311                           ;segment.c: 100: return;
  3312  0019E6  0012               	return	
  3313  0019E8                     l76:
  3314                           
  3315                           ;segment.c: 101: }
  3316                           ;segment.c: 102: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = 1;
  3317  0019E8  848B               	bsf	3979,2,c	;volatile
  3318  0019EA  8C89               	bsf	3977,6,c	;volatile
  3319  0019EC  8E89               	bsf	3977,7,c	;volatile
  3320                           
  3321                           ;segment.c: 103: LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2 = 0;
  3322  0019EE  948D               	bcf	3981,2,c	;volatile
  3323  0019F0  928D               	bcf	3981,1,c	;volatile
  3324  0019F2  928B               	bcf	3979,1,c	;volatile
  3325  0019F4  908B               	bcf	3979,0,c	;volatile
  3326                           
  3327                           ;segment.c: 104: break;
  3328  0019F6  0012               	return	
  3329  0019F8                     l1041:
  3330                           
  3331                           ;segment.c: 106: if (segment == 1) {
  3332  0019F8  0402               	decf	dispSeg@segment,w,c
  3333  0019FA  A4D8               	btfss	status,2,c
  3334  0019FC  D008               	goto	l78
  3335                           
  3336                           ;segment.c: 107: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE
      +                          0 = LATAbits.LA0 = LATAbits.LA1 = 1;
  3337  0019FE  8289               	bsf	3977,1,c	;volatile
  3338  001A00  8089               	bsf	3977,0,c	;volatile
  3339  001A02  808D               	bsf	3981,0,c	;volatile
  3340  001A04  8A89               	bsf	3977,5,c	;volatile
  3341  001A06  8889               	bsf	3977,4,c	;volatile
  3342  001A08  8689               	bsf	3977,3,c	;volatile
  3343  001A0A  8489               	bsf	3977,2,c	;volatile
  3344                           
  3345                           ;segment.c: 108: return;
  3346  001A0C  0012               	return	
  3347  001A0E                     l78:
  3348                           
  3349                           ;segment.c: 109: }
  3350                           ;segment.c: 110: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC
      +                          1 = LATEbits.LE1 = LATEbits.LE2 = 1;
  3351  001A0E  848D               	bsf	3981,2,c	;volatile
  3352  001A10  828D               	bsf	3981,1,c	;volatile
  3353  001A12  828B               	bsf	3979,1,c	;volatile
  3354  001A14  808B               	bsf	3979,0,c	;volatile
  3355  001A16  848B               	bsf	3979,2,c	;volatile
  3356  001A18  8C89               	bsf	3977,6,c	;volatile
  3357  001A1A  8E89               	bsf	3977,7,c	;volatile
  3358                           
  3359                           ;segment.c: 111: break;
  3360  001A1C  0012               	return	
  3361  001A1E                     l1045:
  3362                           
  3363                           ;segment.c: 113: if (segment == 1) {
  3364  001A1E  0402               	decf	dispSeg@segment,w,c
  3365  001A20  A4D8               	btfss	status,2,c
  3366  001A22  D008               	goto	l80
  3367                           
  3368                           ;segment.c: 114: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATAbits.LA
      +                          0 = LATAbits.LA1 = 1;
  3369  001A24  8289               	bsf	3977,1,c	;volatile
  3370  001A26  8089               	bsf	3977,0,c	;volatile
  3371  001A28  8A89               	bsf	3977,5,c	;volatile
  3372  001A2A  8889               	bsf	3977,4,c	;volatile
  3373  001A2C  8689               	bsf	3977,3,c	;volatile
  3374  001A2E  8489               	bsf	3977,2,c	;volatile
  3375                           
  3376                           ;segment.c: 115: LATEbits.LE0 = 0;
  3377  001A30  908D               	bcf	3981,0,c	;volatile
  3378                           
  3379                           ;segment.c: 116: return;
  3380  001A32  0012               	return	
  3381  001A34                     l80:
  3382                           
  3383                           ;segment.c: 117: }
  3384                           ;segment.c: 118: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATEbits.LE
      +                          1 = LATEbits.LE2 = 1;
  3385  001A34  848D               	bsf	3981,2,c	;volatile
  3386  001A36  828D               	bsf	3981,1,c	;volatile
  3387  001A38  808B               	bsf	3979,0,c	;volatile
  3388  001A3A  848B               	bsf	3979,2,c	;volatile
  3389  001A3C  8C89               	bsf	3977,6,c	;volatile
  3390  001A3E  8E89               	bsf	3977,7,c	;volatile
  3391                           
  3392                           ;segment.c: 119: LATCbits.LC1 = 0;
  3393  001A40  928B               	bcf	3979,1,c	;volatile
  3394                           
  3395                           ;segment.c: 120: break;
  3396  001A42  0012               	return	
  3397  001A44                     l1049:
  3398                           
  3399                           ;segment.c: 122: case 'A':
  3400                           ;segment.c: 123: if (segment == 1) {
  3401  001A44  0402               	decf	dispSeg@segment,w,c
  3402  001A46  A4D8               	btfss	status,2,c
  3403  001A48  D008               	goto	l83
  3404                           
  3405                           ;segment.c: 124: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATEbits.LE0 = LATAbits.LA
      +                          0 = LATAbits.LA1 = 1;
  3406  001A4A  8289               	bsf	3977,1,c	;volatile
  3407  001A4C  8089               	bsf	3977,0,c	;volatile
  3408  001A4E  808D               	bsf	3981,0,c	;volatile
  3409  001A50  8889               	bsf	3977,4,c	;volatile
  3410  001A52  8689               	bsf	3977,3,c	;volatile
  3411  001A54  8489               	bsf	3977,2,c	;volatile
  3412                           
  3413                           ;segment.c: 125: LATAbits.LA5 = 0;
  3414  001A56  9A89               	bcf	3977,5,c	;volatile
  3415                           
  3416                           ;segment.c: 126: return;
  3417  001A58  0012               	return	
  3418  001A5A                     l83:
  3419                           
  3420                           ;segment.c: 127: }
  3421                           ;segment.c: 128: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC1 = LATEbits.LE
      +                          1 = LATEbits.LE2 = 1;
  3422  001A5A  848D               	bsf	3981,2,c	;volatile
  3423  001A5C  828D               	bsf	3981,1,c	;volatile
  3424  001A5E  828B               	bsf	3979,1,c	;volatile
  3425  001A60  848B               	bsf	3979,2,c	;volatile
  3426  001A62  8C89               	bsf	3977,6,c	;volatile
  3427  001A64  8E89               	bsf	3977,7,c	;volatile
  3428                           
  3429                           ;segment.c: 129: LATCbits.LC0 = 0;
  3430  001A66  908B               	bcf	3979,0,c	;volatile
  3431                           
  3432                           ;segment.c: 130: break;
  3433  001A68  0012               	return	
  3434  001A6A                     l1053:
  3435                           
  3436                           ;segment.c: 132: case 'B':
  3437                           ;segment.c: 133: if (segment == 1) {
  3438  001A6A  0402               	decf	dispSeg@segment,w,c
  3439  001A6C  A4D8               	btfss	status,2,c
  3440  001A6E  D008               	goto	l86
  3441                           
  3442                           ;segment.c: 134: LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA
      +                          1 = 1;
  3443  001A70  8289               	bsf	3977,1,c	;volatile
  3444  001A72  8089               	bsf	3977,0,c	;volatile
  3445  001A74  808D               	bsf	3981,0,c	;volatile
  3446  001A76  8A89               	bsf	3977,5,c	;volatile
  3447  001A78  8889               	bsf	3977,4,c	;volatile
  3448                           
  3449                           ;segment.c: 135: LATAbits.LA2 = LATAbits.LA3 = 0;
  3450  001A7A  9689               	bcf	3977,3,c	;volatile
  3451  001A7C  9489               	bcf	3977,2,c	;volatile
  3452                           
  3453                           ;segment.c: 136: return;
  3454  001A7E  0012               	return	
  3455  001A80                     l86:
  3456                           
  3457                           ;segment.c: 137: }
  3458                           ;segment.c: 138: LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE
      +                          2 = 1;
  3459  001A80  848D               	bsf	3981,2,c	;volatile
  3460  001A82  828D               	bsf	3981,1,c	;volatile
  3461  001A84  828B               	bsf	3979,1,c	;volatile
  3462  001A86  808B               	bsf	3979,0,c	;volatile
  3463  001A88  848B               	bsf	3979,2,c	;volatile
  3464                           
  3465                           ;segment.c: 139: LATAbits.LA7 = LATAbits.LA6 = 0;
  3466  001A8A  9C89               	bcf	3977,6,c	;volatile
  3467  001A8C  9E89               	bcf	3977,7,c	;volatile
  3468                           
  3469                           ;segment.c: 140: break;
  3470  001A8E  0012               	return	
  3471  001A90                     l1057:
  3472                           
  3473                           ;segment.c: 142: case 'C':
  3474                           ;segment.c: 143: if (segment == 1) {
  3475  001A90  0402               	decf	dispSeg@segment,w,c
  3476  001A92  A4D8               	btfss	status,2,c
  3477  001A94  D008               	goto	l89
  3478                           
  3479                           ;segment.c: 144: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = 1;
  3480  001A96  8089               	bsf	3977,0,c	;volatile
  3481  001A98  808D               	bsf	3981,0,c	;volatile
  3482  001A9A  8A89               	bsf	3977,5,c	;volatile
  3483  001A9C  8489               	bsf	3977,2,c	;volatile
  3484                           
  3485                           ;segment.c: 145: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA1 = 0;
  3486  001A9E  9289               	bcf	3977,1,c	;volatile
  3487  001AA0  9889               	bcf	3977,4,c	;volatile
  3488  001AA2  9689               	bcf	3977,3,c	;volatile
  3489                           
  3490                           ;segment.c: 146: return;
  3491  001AA4  0012               	return	
  3492  001AA6                     l89:
  3493                           
  3494                           ;segment.c: 147: }
  3495                           ;segment.c: 148: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = 1;
  3496  001AA6  828D               	bsf	3981,1,c	;volatile
  3497  001AA8  828B               	bsf	3979,1,c	;volatile
  3498  001AAA  808B               	bsf	3979,0,c	;volatile
  3499  001AAC  8E89               	bsf	3977,7,c	;volatile
  3500                           
  3501                           ;segment.c: 149: LATAbits.LA6 = LATCbits.LC2 = LATEbits.LE2 = 0;
  3502  001AAE  948D               	bcf	3981,2,c	;volatile
  3503  001AB0  948B               	bcf	3979,2,c	;volatile
  3504  001AB2  9C89               	bcf	3977,6,c	;volatile
  3505                           
  3506                           ;segment.c: 150: break;
  3507  001AB4  0012               	return	
  3508  001AB6                     l1061:
  3509                           
  3510                           ;segment.c: 152: case 'D':
  3511                           ;segment.c: 153: if (segment == 1) {
  3512  001AB6  0402               	decf	dispSeg@segment,w,c
  3513  001AB8  A4D8               	btfss	status,2,c
  3514  001ABA  D008               	goto	l92
  3515                           
  3516                           ;segment.c: 154: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA
      +                          1 = 1;
  3517  001ABC  8289               	bsf	3977,1,c	;volatile
  3518  001ABE  808D               	bsf	3981,0,c	;volatile
  3519  001AC0  8A89               	bsf	3977,5,c	;volatile
  3520  001AC2  8889               	bsf	3977,4,c	;volatile
  3521  001AC4  8689               	bsf	3977,3,c	;volatile
  3522                           
  3523                           ;segment.c: 155: LATAbits.LA2 = LATAbits.LA0 = 0;
  3524  001AC6  9089               	bcf	3977,0,c	;volatile
  3525  001AC8  9489               	bcf	3977,2,c	;volatile
  3526                           
  3527                           ;segment.c: 156: return;
  3528  001ACA  0012               	return	
  3529  001ACC                     l92:
  3530                           
  3531                           ;segment.c: 157: }
  3532                           ;segment.c: 158: LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE
      +                          2 = 1;
  3533  001ACC  848D               	bsf	3981,2,c	;volatile
  3534  001ACE  828B               	bsf	3979,1,c	;volatile
  3535  001AD0  808B               	bsf	3979,0,c	;volatile
  3536  001AD2  848B               	bsf	3979,2,c	;volatile
  3537  001AD4  8C89               	bsf	3977,6,c	;volatile
  3538                           
  3539                           ;segment.c: 159: LATAbits.LA7 = LATEbits.LE1 = 0;
  3540  001AD6  928D               	bcf	3981,1,c	;volatile
  3541  001AD8  9E89               	bcf	3977,7,c	;volatile
  3542                           
  3543                           ;segment.c: 160: break;
  3544  001ADA  0012               	return	
  3545  001ADC                     l1065:
  3546                           
  3547                           ;segment.c: 162: case 'E':
  3548                           ;segment.c: 163: if (segment == 1) {
  3549  001ADC  0402               	decf	dispSeg@segment,w,c
  3550  001ADE  A4D8               	btfss	status,2,c
  3551  001AE0  D008               	goto	l95
  3552                           
  3553                           ;segment.c: 164: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA
      +                          1 = 1;
  3554  001AE2  8289               	bsf	3977,1,c	;volatile
  3555  001AE4  8089               	bsf	3977,0,c	;volatile
  3556  001AE6  808D               	bsf	3981,0,c	;volatile
  3557  001AE8  8A89               	bsf	3977,5,c	;volatile
  3558  001AEA  8489               	bsf	3977,2,c	;volatile
  3559                           
  3560                           ;segment.c: 165: LATAbits.LA3 = LATAbits.LA4 = 0;
  3561  001AEC  9889               	bcf	3977,4,c	;volatile
  3562  001AEE  9689               	bcf	3977,3,c	;volatile
  3563                           
  3564                           ;segment.c: 166: return;
  3565  001AF0  0012               	return	
  3566  001AF2                     l95:
  3567                           
  3568                           ;segment.c: 167: }
  3569                           ;segment.c: 168: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE
      +                          2 = 1;
  3570  001AF2  848D               	bsf	3981,2,c	;volatile
  3571  001AF4  828D               	bsf	3981,1,c	;volatile
  3572  001AF6  828B               	bsf	3979,1,c	;volatile
  3573  001AF8  808B               	bsf	3979,0,c	;volatile
  3574  001AFA  8E89               	bsf	3977,7,c	;volatile
  3575                           
  3576                           ;segment.c: 169: LATAbits.LA6 = LATCbits.LC2 = 0;
  3577  001AFC  948B               	bcf	3979,2,c	;volatile
  3578  001AFE  9C89               	bcf	3977,6,c	;volatile
  3579                           
  3580                           ;segment.c: 170: break;
  3581  001B00  0012               	return	
  3582  001B02                     l1069:
  3583                           
  3584                           ;segment.c: 172: case 'F':
  3585                           ;segment.c: 173: if (segment == 1) {
  3586  001B02  0402               	decf	dispSeg@segment,w,c
  3587  001B04  A4D8               	btfss	status,2,c
  3588  001B06  D008               	goto	l98
  3589                           
  3590                           ;segment.c: 174: LATAbits.LA2 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1 = 1;
  3591  001B08  8289               	bsf	3977,1,c	;volatile
  3592  001B0A  8089               	bsf	3977,0,c	;volatile
  3593  001B0C  808D               	bsf	3981,0,c	;volatile
  3594  001B0E  8489               	bsf	3977,2,c	;volatile
  3595                           
  3596                           ;segment.c: 175: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = 0;
  3597  001B10  9A89               	bcf	3977,5,c	;volatile
  3598  001B12  9889               	bcf	3977,4,c	;volatile
  3599  001B14  9689               	bcf	3977,3,c	;volatile
  3600                           
  3601                           ;segment.c: 176: return;
  3602  001B16  0012               	return	
  3603  001B18                     l98:
  3604                           
  3605                           ;segment.c: 177: }
  3606                           ;segment.c: 178: LATAbits.LA7 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2 = 1;
  3607  001B18  848D               	bsf	3981,2,c	;volatile
  3608  001B1A  828D               	bsf	3981,1,c	;volatile
  3609  001B1C  828B               	bsf	3979,1,c	;volatile
  3610  001B1E  8E89               	bsf	3977,7,c	;volatile
  3611                           
  3612                           ;segment.c: 179: LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = 0;
  3613  001B20  908B               	bcf	3979,0,c	;volatile
  3614  001B22  948B               	bcf	3979,2,c	;volatile
  3615  001B24  9C89               	bcf	3977,6,c	;volatile
  3616                           
  3617                           ;segment.c: 180: break;
  3618  001B26  0012               	return	
  3619  001B28                     l1075:
  3620  001B28  5001               	movf	dispSeg@letter,w,c
  3621                           
  3622                           ; Switch size 1, requested type "space"
  3623                           ; Number of cases is 25, Range of values is 45 to 120
  3624                           ; switch strategies available:
  3625                           ; Name         Instructions Cycles
  3626                           ; simple_byte           76    39 (average)
  3627                           ;	Chosen strategy is simple_byte
  3628  001B2A  0A2D               	xorlw	45	; case 45
  3629  001B2C  B4D8               	btfsc	status,2,c
  3630  001B2E  D6B9               	goto	l1005
  3631  001B30  0A1D               	xorlw	29	; case 48
  3632  001B32  B4D8               	btfsc	status,2,c
  3633  001B34  D6C9               	goto	l1009
  3634  001B36  0A01               	xorlw	1	; case 49
  3635  001B38  B4D8               	btfsc	status,2,c
  3636  001B3A  D6D9               	goto	l1013
  3637  001B3C  0A03               	xorlw	3	; case 50
  3638  001B3E  B4D8               	btfsc	status,2,c
  3639  001B40  D6E9               	goto	l1017
  3640  001B42  0A01               	xorlw	1	; case 51
  3641  001B44  B4D8               	btfsc	status,2,c
  3642  001B46  D6F9               	goto	l1021
  3643  001B48  0A07               	xorlw	7	; case 52
  3644  001B4A  B4D8               	btfsc	status,2,c
  3645  001B4C  D709               	goto	l1025
  3646  001B4E  0A01               	xorlw	1	; case 53
  3647  001B50  B4D8               	btfsc	status,2,c
  3648  001B52  D719               	goto	l1029
  3649  001B54  0A03               	xorlw	3	; case 54
  3650  001B56  B4D8               	btfsc	status,2,c
  3651  001B58  D729               	goto	l1033
  3652  001B5A  0A01               	xorlw	1	; case 55
  3653  001B5C  B4D8               	btfsc	status,2,c
  3654  001B5E  D739               	goto	l1037
  3655  001B60  0A0F               	xorlw	15	; case 56
  3656  001B62  B4D8               	btfsc	status,2,c
  3657  001B64  D749               	goto	l1041
  3658  001B66  0A01               	xorlw	1	; case 57
  3659  001B68  B4D8               	btfsc	status,2,c
  3660  001B6A  D759               	goto	l1045
  3661  001B6C  0A78               	xorlw	120	; case 65
  3662  001B6E  B4D8               	btfsc	status,2,c
  3663  001B70  D769               	goto	l1049
  3664  001B72  0A03               	xorlw	3	; case 66
  3665  001B74  B4D8               	btfsc	status,2,c
  3666  001B76  D779               	goto	l1053
  3667  001B78  0A01               	xorlw	1	; case 67
  3668  001B7A  B4D8               	btfsc	status,2,c
  3669  001B7C  D789               	goto	l1057
  3670  001B7E  0A07               	xorlw	7	; case 68
  3671  001B80  B4D8               	btfsc	status,2,c
  3672  001B82  D799               	goto	l1061
  3673  001B84  0A01               	xorlw	1	; case 69
  3674  001B86  B4D8               	btfsc	status,2,c
  3675  001B88  D7A9               	goto	l1065
  3676  001B8A  0A03               	xorlw	3	; case 70
  3677  001B8C  B4D8               	btfsc	status,2,c
  3678  001B8E  D7B9               	goto	l1069
  3679  001B90  0A1E               	xorlw	30	; case 88
  3680  001B92  B4D8               	btfsc	status,2,c
  3681  001B94  D673               	goto	l1001
  3682  001B96  0A39               	xorlw	57	; case 97
  3683  001B98  B4D8               	btfsc	status,2,c
  3684  001B9A  D754               	goto	l1049
  3685  001B9C  0A03               	xorlw	3	; case 98
  3686  001B9E  B4D8               	btfsc	status,2,c
  3687  001BA0  D764               	goto	l1053
  3688  001BA2  0A01               	xorlw	1	; case 99
  3689  001BA4  B4D8               	btfsc	status,2,c
  3690  001BA6  D774               	goto	l1057
  3691  001BA8  0A07               	xorlw	7	; case 100
  3692  001BAA  B4D8               	btfsc	status,2,c
  3693  001BAC  D784               	goto	l1061
  3694  001BAE  0A01               	xorlw	1	; case 101
  3695  001BB0  B4D8               	btfsc	status,2,c
  3696  001BB2  D794               	goto	l1065
  3697  001BB4  0A03               	xorlw	3	; case 102
  3698  001BB6  B4D8               	btfsc	status,2,c
  3699  001BB8  D7A4               	goto	l1069
  3700  001BBA  0A1E               	xorlw	30	; case 120
  3701  001BBC  A4D8               	btfss	status,2,c
  3702  001BBE  0012               	return	
  3703  001BC0  D65D               	goto	l1001
  3704  001BC2                     __end_of_dispSeg:
  3705                           	opt stack 0
  3706                           tblptru	equ	0xFF8
  3707                           tblptrh	equ	0xFF7
  3708                           tblptrl	equ	0xFF6
  3709                           tablat	equ	0xFF5
  3710                           prodh	equ	0xFF4
  3711                           prodl	equ	0xFF3
  3712                           postinc0	equ	0xFEE
  3713                           wreg	equ	0xFE8
  3714                           postdec1	equ	0xFE5
  3715                           fsr1h	equ	0xFE2
  3716                           fsr1l	equ	0xFE1
  3717                           indf2	equ	0xFDF
  3718                           fsr2h	equ	0xFDA
  3719                           fsr2l	equ	0xFD9
  3720                           status	equ	0xFD8
  3721                           
  3722 ;; *************** function _setMXbits *****************
  3723 ;; Defined at:
  3724 ;;		line 37 in file "source/emulator.c"
  3725 ;; Parameters:    Size  Location     Type
  3726 ;;  subRegister     1    wreg     unsigned char 
  3727 ;;  value           1    0[COMRAM] unsigned char 
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;  subRegister     1    3[COMRAM] unsigned char 
  3730 ;;  regMX_temp      2    4[COMRAM] unsigned int 
  3731 ;;  value_temp      2    1[COMRAM] unsigned int 
  3732 ;; Return value:  Size  Location     Type
  3733 ;;		None               void
  3734 ;; Registers used:
  3735 ;;		wreg, status,2, status,0
  3736 ;; Tracked objects:
  3737 ;;		On entry : 0/0
  3738 ;;		On exit  : 0/0
  3739 ;;		Unchanged: 0/0
  3740 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3741 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3742 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3743 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3744 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3745 ;;Total ram usage:        6 bytes
  3746 ;; Hardware stack levels used:    1
  3747 ;; This function calls:
  3748 ;;		Nothing
  3749 ;; This function is called by:
  3750 ;;		_processOpcode
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           	psect	text9
  3755  001F60                     __ptext9:
  3756                           	opt stack 0
  3757  001F60                     _setMXbits:
  3758                           	opt stack 29
  3759                           
  3760                           ;incstack = 0
  3761                           ;setMXbits@subRegister stored from wreg
  3762  001F60  CFE8 F004          	movff	wreg,setMXbits@subRegister
  3763                           
  3764                           ;emulator.c: 39: uint16_t value_temp = (uint16_t) value;
  3765  001F64  C001  F002         	movff	setMXbits@value,setMXbits@value_temp
  3766  001F68  6A03               	clrf	setMXbits@value_temp+1,c
  3767                           
  3768                           ;emulator.c: 40: uint16_t regMX_temp = regMX;
  3769  001F6A  C016  F005         	movff	_regMX,setMXbits@regMX_temp
  3770  001F6E  C017  F006         	movff	_regMX+1,setMXbits@regMX_temp+1
  3771                           
  3772                           ;emulator.c: 42: switch(subRegister)
  3773  001F72  D011               	goto	l1249
  3774  001F74                     l1243:
  3775                           
  3776                           ;emulator.c: 45: regMX_temp <<= 8;
  3777  001F74  5005               	movf	setMXbits@regMX_temp,w,c
  3778  001F76  6E06               	movwf	setMXbits@regMX_temp+1,c
  3779  001F78  6A05               	clrf	setMXbits@regMX_temp,c
  3780                           
  3781                           ;emulator.c: 46: regMX_temp >>= 8;
  3782  001F7A  5006               	movf	setMXbits@regMX_temp+1,w,c
  3783  001F7C  6E05               	movwf	setMXbits@regMX_temp,c
  3784  001F7E  6A06               	clrf	setMXbits@regMX_temp+1,c
  3785                           
  3786                           ;emulator.c: 47: value_temp <<= 8;
  3787  001F80  5002               	movf	setMXbits@value_temp,w,c
  3788  001F82  6E03               	movwf	setMXbits@value_temp+1,c
  3789  001F84  6A02               	clrf	setMXbits@value_temp,c
  3790                           
  3791                           ;emulator.c: 48: break;
  3792  001F86  D00E               	goto	l1251
  3793  001F88                     l1245:
  3794                           
  3795                           ;emulator.c: 51: regMX_temp >>= 8;
  3796  001F88  5006               	movf	setMXbits@regMX_temp+1,w,c
  3797  001F8A  6E05               	movwf	setMXbits@regMX_temp,c
  3798  001F8C  6A06               	clrf	setMXbits@regMX_temp+1,c
  3799                           
  3800                           ;emulator.c: 52: regMX_temp <<= 8;
  3801  001F8E  5005               	movf	setMXbits@regMX_temp,w,c
  3802  001F90  6E06               	movwf	setMXbits@regMX_temp+1,c
  3803  001F92  6A05               	clrf	setMXbits@regMX_temp,c
  3804                           
  3805                           ;emulator.c: 53: break;
  3806  001F94  D007               	goto	l1251
  3807  001F96                     l1249:
  3808  001F96  5004               	movf	setMXbits@subRegister,w,c
  3809                           
  3810                           ; Switch size 1, requested type "space"
  3811                           ; Number of cases is 2, Range of values is 0 to 1
  3812                           ; switch strategies available:
  3813                           ; Name         Instructions Cycles
  3814                           ; simple_byte            7     4 (average)
  3815                           ;	Chosen strategy is simple_byte
  3816  001F98  0A00               	xorlw	0	; case 0
  3817  001F9A  B4D8               	btfsc	status,2,c
  3818  001F9C  D7EB               	goto	l1243
  3819  001F9E  0A01               	xorlw	1	; case 1
  3820  001FA0  B4D8               	btfsc	status,2,c
  3821  001FA2  D7F2               	goto	l1245
  3822  001FA4                     l1251:
  3823                           
  3824                           ;emulator.c: 56: regMX = regMX_temp + value_temp;
  3825  001FA4  5002               	movf	setMXbits@value_temp,w,c
  3826  001FA6  2405               	addwf	setMXbits@regMX_temp,w,c
  3827  001FA8  6E16               	movwf	_regMX,c
  3828  001FAA  5003               	movf	setMXbits@value_temp+1,w,c
  3829  001FAC  2006               	addwfc	setMXbits@regMX_temp+1,w,c
  3830  001FAE  6E17               	movwf	_regMX+1,c
  3831  001FB0  0012               	return	
  3832  001FB2                     __end_of_setMXbits:
  3833                           	opt stack 0
  3834                           tblptru	equ	0xFF8
  3835                           tblptrh	equ	0xFF7
  3836                           tblptrl	equ	0xFF6
  3837                           tablat	equ	0xFF5
  3838                           prodh	equ	0xFF4
  3839                           prodl	equ	0xFF3
  3840                           postinc0	equ	0xFEE
  3841                           wreg	equ	0xFE8
  3842                           postdec1	equ	0xFE5
  3843                           fsr1h	equ	0xFE2
  3844                           fsr1l	equ	0xFE1
  3845                           indf2	equ	0xFDF
  3846                           fsr2h	equ	0xFDA
  3847                           fsr2l	equ	0xFD9
  3848                           status	equ	0xFD8
  3849                           
  3850 ;; *************** function _setFbits *****************
  3851 ;; Defined at:
  3852 ;;		line 100 in file "source/emulator.c"
  3853 ;; Parameters:    Size  Location     Type
  3854 ;;  subRegister     1    wreg     unsigned char 
  3855 ;;  value           1    0[COMRAM] unsigned char 
  3856 ;; Auto vars:     Size  Location     Type
  3857 ;;  subRegister     1    2[COMRAM] unsigned char 
  3858 ;;  regF_temp1      1    4[COMRAM] unsigned char 
  3859 ;;  regF_temp2      1    3[COMRAM] unsigned char 
  3860 ;; Return value:  Size  Location     Type
  3861 ;;		None               void
  3862 ;; Registers used:
  3863 ;;		wreg, status,2, status,0
  3864 ;; Tracked objects:
  3865 ;;		On entry : 0/0
  3866 ;;		On exit  : 0/0
  3867 ;;		Unchanged: 0/0
  3868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3869 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3870 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3871 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3872 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;Total ram usage:        5 bytes
  3874 ;; Hardware stack levels used:    1
  3875 ;; This function calls:
  3876 ;;		Nothing
  3877 ;; This function is called by:
  3878 ;;		_processOpcode
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           	psect	text10
  3883  001C7A                     __ptext10:
  3884                           	opt stack 0
  3885  001C7A                     _setFbits:
  3886                           	opt stack 29
  3887                           
  3888                           ;incstack = 0
  3889                           ;setFbits@subRegister stored from wreg
  3890  001C7A  CFE8 F003          	movff	wreg,setFbits@subRegister
  3891                           
  3892                           ;emulator.c: 102: uint8_t regF_temp1 = regF;
  3893  001C7E  C01F  F005         	movff	_regF,setFbits@regF_temp1
  3894                           
  3895                           ;emulator.c: 103: uint8_t regF_temp2 = regF;
  3896  001C82  C01F  F004         	movff	_regF,setFbits@regF_temp2
  3897                           
  3898                           ;emulator.c: 105: switch(subRegister)
  3899  001C86  D03C               	goto	l1285
  3900  001C88                     l1273:
  3901                           
  3902                           ;emulator.c: 108: regF_temp1 >>= 1;
  3903  001C88  90D8               	bcf	status,0,c
  3904  001C8A  3205               	rrcf	setFbits@regF_temp1,f,c
  3905                           
  3906                           ;emulator.c: 109: regF_temp1 <<= 1;
  3907  001C8C  90D8               	bcf	status,0,c
  3908  001C8E  3605               	rlcf	setFbits@regF_temp1,f,c
  3909                           
  3910                           ;emulator.c: 110: regF_temp2 = 0;
  3911  001C90  6E02               	movwf	??_setFbits& (0+255),c
  3912  001C92  0E00               	movlw	0
  3913  001C94  6E04               	movwf	setFbits@regF_temp2,c
  3914  001C96  5002               	movf	??_setFbits& (0+255),w,c
  3915                           
  3916                           ;emulator.c: 111: break;
  3917  001C98  D040               	goto	l1287
  3918  001C9A                     l1277:
  3919                           
  3920                           ;emulator.c: 114: regF_temp1 >>= 2;
  3921  001C9A  90D8               	bcf	status,0,c
  3922  001C9C  3205               	rrcf	setFbits@regF_temp1,f,c
  3923  001C9E  90D8               	bcf	status,0,c
  3924  001CA0  3205               	rrcf	setFbits@regF_temp1,f,c
  3925                           
  3926                           ;emulator.c: 115: regF_temp1 <<= 2;
  3927  001CA2  90D8               	bcf	status,0,c
  3928  001CA4  3605               	rlcf	setFbits@regF_temp1,f,c
  3929  001CA6  90D8               	bcf	status,0,c
  3930  001CA8  3605               	rlcf	setFbits@regF_temp1,f,c
  3931                           
  3932                           ;emulator.c: 116: regF_temp2 <<= 6;
  3933  001CAA  3A04               	swapf	setFbits@regF_temp2,f,c
  3934  001CAC  3604               	rlcf	setFbits@regF_temp2,f,c
  3935  001CAE  3604               	rlcf	setFbits@regF_temp2,f,c
  3936  001CB0  0EC0               	movlw	192
  3937  001CB2  1604               	andwf	setFbits@regF_temp2,f,c
  3938                           
  3939                           ;emulator.c: 117: regF_temp2 >>= 6;
  3940  001CB4  3A04               	swapf	setFbits@regF_temp2,f,c
  3941  001CB6  3204               	rrcf	setFbits@regF_temp2,f,c
  3942  001CB8  3204               	rrcf	setFbits@regF_temp2,f,c
  3943  001CBA  0E03               	movlw	3
  3944  001CBC  D01F               	goto	L41
  3945  001CBE                     l1279:
  3946                           
  3947                           ;emulator.c: 121: regF_temp1 >>= 3;
  3948  001CBE  90D8               	bcf	status,0,c
  3949  001CC0  3205               	rrcf	setFbits@regF_temp1,f,c
  3950  001CC2  90D8               	bcf	status,0,c
  3951  001CC4  3205               	rrcf	setFbits@regF_temp1,f,c
  3952  001CC6  90D8               	bcf	status,0,c
  3953  001CC8  3205               	rrcf	setFbits@regF_temp1,f,c
  3954                           
  3955                           ;emulator.c: 122: regF_temp1 <<= 3;
  3956  001CCA  90D8               	bcf	status,0,c
  3957  001CCC  3605               	rlcf	setFbits@regF_temp1,f,c
  3958  001CCE  90D8               	bcf	status,0,c
  3959  001CD0  3605               	rlcf	setFbits@regF_temp1,f,c
  3960  001CD2  90D8               	bcf	status,0,c
  3961  001CD4  3605               	rlcf	setFbits@regF_temp1,f,c
  3962                           
  3963                           ;emulator.c: 123: regF_temp2 <<= 5;
  3964  001CD6  3A04               	swapf	setFbits@regF_temp2,f,c
  3965  001CD8  3604               	rlcf	setFbits@regF_temp2,f,c
  3966  001CDA  0EE0               	movlw	224
  3967  001CDC  1604               	andwf	setFbits@regF_temp2,f,c
  3968                           
  3969                           ;emulator.c: 124: regF_temp2 >>= 5;
  3970  001CDE  3A04               	swapf	setFbits@regF_temp2,f,c
  3971  001CE0  3204               	rrcf	setFbits@regF_temp2,f,c
  3972  001CE2  0E07               	movlw	7
  3973  001CE4  D00B               	goto	L41
  3974  001CE6                     l1281:
  3975                           
  3976                           ;emulator.c: 128: regF_temp1 >>= 4;
  3977  001CE6  3A05               	swapf	setFbits@regF_temp1,f,c
  3978  001CE8  0E0F               	movlw	15
  3979  001CEA  1605               	andwf	setFbits@regF_temp1,f,c
  3980                           
  3981                           ;emulator.c: 129: regF_temp1 <<= 4;
  3982  001CEC  3A05               	swapf	setFbits@regF_temp1,f,c
  3983  001CEE  0EF0               	movlw	240
  3984  001CF0  1605               	andwf	setFbits@regF_temp1,f,c
  3985                           
  3986                           ;emulator.c: 130: regF_temp2 <<= 4;
  3987  001CF2  3A04               	swapf	setFbits@regF_temp2,f,c
  3988  001CF4  0EF0               	movlw	240
  3989  001CF6  1604               	andwf	setFbits@regF_temp2,f,c
  3990                           
  3991                           ;emulator.c: 131: regF_temp2 >>= 4;
  3992  001CF8  3A04               	swapf	setFbits@regF_temp2,f,c
  3993  001CFA  0E0F               	movlw	15
  3994  001CFC                     L41:
  3995  001CFC  1604               	andwf	setFbits@regF_temp2,f,c
  3996                           
  3997                           ;emulator.c: 132: break;
  3998  001CFE  D00D               	goto	l1287
  3999  001D00                     l1285:
  4000  001D00  5003               	movf	setFbits@subRegister,w,c
  4001                           
  4002                           ; Switch size 1, requested type "space"
  4003                           ; Number of cases is 4, Range of values is 0 to 3
  4004                           ; switch strategies available:
  4005                           ; Name         Instructions Cycles
  4006                           ; simple_byte           13     7 (average)
  4007                           ;	Chosen strategy is simple_byte
  4008  001D02  0A00               	xorlw	0	; case 0
  4009  001D04  B4D8               	btfsc	status,2,c
  4010  001D06  D7C0               	goto	l1273
  4011  001D08  0A01               	xorlw	1	; case 1
  4012  001D0A  B4D8               	btfsc	status,2,c
  4013  001D0C  D7C6               	goto	l1277
  4014  001D0E  0A03               	xorlw	3	; case 2
  4015  001D10  B4D8               	btfsc	status,2,c
  4016  001D12  D7D5               	goto	l1279
  4017  001D14  0A01               	xorlw	1	; case 3
  4018  001D16  B4D8               	btfsc	status,2,c
  4019  001D18  D7E6               	goto	l1281
  4020  001D1A                     l1287:
  4021                           
  4022                           ;emulator.c: 135: regF = regF_temp1 + regF_temp2 + value;
  4023  001D1A  5005               	movf	setFbits@regF_temp1,w,c
  4024  001D1C  2404               	addwf	setFbits@regF_temp2,w,c
  4025  001D1E  2401               	addwf	setFbits@value,w,c
  4026  001D20  6E1F               	movwf	_regF,c
  4027  001D22  0012               	return	
  4028  001D24                     __end_of_setFbits:
  4029                           	opt stack 0
  4030                           tblptru	equ	0xFF8
  4031                           tblptrh	equ	0xFF7
  4032                           tblptrl	equ	0xFF6
  4033                           tablat	equ	0xFF5
  4034                           prodh	equ	0xFF4
  4035                           prodl	equ	0xFF3
  4036                           postinc0	equ	0xFEE
  4037                           wreg	equ	0xFE8
  4038                           postdec1	equ	0xFE5
  4039                           fsr1h	equ	0xFE2
  4040                           fsr1l	equ	0xFE1
  4041                           indf2	equ	0xFDF
  4042                           fsr2h	equ	0xFDA
  4043                           fsr2l	equ	0xFD9
  4044                           status	equ	0xFD8
  4045                           
  4046 ;; *************** function _immData_toPointer *****************
  4047 ;; Defined at:
  4048 ;;		line 138 in file "source/emulator.c"
  4049 ;; Parameters:    Size  Location     Type
  4050 ;;		None
  4051 ;; Auto vars:     Size  Location     Type
  4052 ;;  pointer         2    2[COMRAM] unsigned int 
  4053 ;; Return value:  Size  Location     Type
  4054 ;;                  2    0[COMRAM] unsigned int 
  4055 ;; Registers used:
  4056 ;;		wreg, status,2, status,0
  4057 ;; Tracked objects:
  4058 ;;		On entry : 0/0
  4059 ;;		On exit  : 0/0
  4060 ;;		Unchanged: 0/0
  4061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4062 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4063 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4065 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4066 ;;Total ram usage:        4 bytes
  4067 ;; Hardware stack levels used:    1
  4068 ;; This function calls:
  4069 ;;		Nothing
  4070 ;; This function is called by:
  4071 ;;		_processOpcode
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           	psect	text11
  4076  00212A                     __ptext11:
  4077                           	opt stack 0
  4078  00212A                     _immData_toPointer:
  4079                           	opt stack 29
  4080                           
  4081                           ;emulator.c: 140: uint16_t pointer = (uint16_t) immData_1;
  4082                           
  4083                           ;incstack = 0
  4084  00212A  C01B  F003         	movff	_immData_1,immData_toPointer@pointer
  4085  00212E  6A04               	clrf	immData_toPointer@pointer+1,c
  4086                           
  4087                           ;emulator.c: 141: pointer <<= 8;
  4088  002130  5003               	movf	immData_toPointer@pointer,w,c
  4089  002132  6E04               	movwf	immData_toPointer@pointer+1,c
  4090  002134  6A03               	clrf	immData_toPointer@pointer,c
  4091                           
  4092                           ;emulator.c: 142: pointer += immData_2;
  4093  002136  501C               	movf	_immData_2,w,c
  4094  002138  2603               	addwf	immData_toPointer@pointer,f,c
  4095  00213A  0E00               	movlw	0
  4096  00213C  2204               	addwfc	immData_toPointer@pointer+1,f,c
  4097                           
  4098                           ;emulator.c: 143: return pointer;
  4099  00213E  C003  F001         	movff	immData_toPointer@pointer,?_immData_toPointer
  4100  002142  C004  F002         	movff	immData_toPointer@pointer+1,?_immData_toPointer+1
  4101  002146  0012               	return	
  4102  002148                     __end_of_immData_toPointer:
  4103                           	opt stack 0
  4104                           tblptru	equ	0xFF8
  4105                           tblptrh	equ	0xFF7
  4106                           tblptrl	equ	0xFF6
  4107                           tablat	equ	0xFF5
  4108                           prodh	equ	0xFF4
  4109                           prodl	equ	0xFF3
  4110                           postinc0	equ	0xFEE
  4111                           wreg	equ	0xFE8
  4112                           postdec1	equ	0xFE5
  4113                           fsr1h	equ	0xFE2
  4114                           fsr1l	equ	0xFE1
  4115                           indf2	equ	0xFDF
  4116                           fsr2h	equ	0xFDA
  4117                           fsr2l	equ	0xFD9
  4118                           status	equ	0xFD8
  4119                           
  4120 ;; *************** function _getPortData *****************
  4121 ;; Defined at:
  4122 ;;		line 162 in file "source/emulator.c"
  4123 ;; Parameters:    Size  Location     Type
  4124 ;;  portNumber      1    wreg     unsigned char 
  4125 ;; Auto vars:     Size  Location     Type
  4126 ;;  portNumber      1    0[COMRAM] unsigned char 
  4127 ;; Return value:  Size  Location     Type
  4128 ;;                  1    wreg      unsigned char 
  4129 ;; Registers used:
  4130 ;;		wreg, status,2, status,0
  4131 ;; Tracked objects:
  4132 ;;		On entry : 0/0
  4133 ;;		On exit  : 0/0
  4134 ;;		Unchanged: 0/0
  4135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4137 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4139 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4140 ;;Total ram usage:        1 bytes
  4141 ;; Hardware stack levels used:    1
  4142 ;; This function calls:
  4143 ;;		Nothing
  4144 ;; This function is called by:
  4145 ;;		_processOpcode
  4146 ;; This function uses a non-reentrant model
  4147 ;;
  4148                           
  4149                           	psect	text12
  4150  00217E                     __ptext12:
  4151                           	opt stack 0
  4152  00217E                     _getPortData:
  4153                           	opt stack 29
  4154                           
  4155                           ;incstack = 0
  4156                           ;getPortData@portNumber stored from wreg
  4157  00217E  CFE8 F001          	movff	wreg,getPortData@portNumber
  4158                           
  4159                           ;emulator.c: 164: switch (portNumber)
  4160  002182  D002               	goto	l1303
  4161  002184                     l234:
  4162                           
  4163                           ;emulator.c: 167: return RCREG2;
  4164  002184  5074               	movf	3956,w,c	;volatile
  4165  002186  0012               	return	
  4166  002188                     l1303:
  4167  002188  5001               	movf	getPortData@portNumber,w,c
  4168                           
  4169                           ; Switch size 1, requested type "space"
  4170                           ; Number of cases is 1, Range of values is 2 to 2
  4171                           ; switch strategies available:
  4172                           ; Name         Instructions Cycles
  4173                           ; simple_byte            4     3 (average)
  4174                           ;	Chosen strategy is simple_byte
  4175  00218A  0A02               	xorlw	2	; case 2
  4176  00218C  B4D8               	btfsc	status,2,c
  4177  00218E  D7FA               	goto	l234
  4178                           
  4179                           ;emulator.c: 170: return 0;
  4180  002190  0E00               	movlw	0
  4181  002192  0012               	return	
  4182  002194                     __end_of_getPortData:
  4183                           	opt stack 0
  4184                           tblptru	equ	0xFF8
  4185                           tblptrh	equ	0xFF7
  4186                           tblptrl	equ	0xFF6
  4187                           tablat	equ	0xFF5
  4188                           prodh	equ	0xFF4
  4189                           prodl	equ	0xFF3
  4190                           postinc0	equ	0xFEE
  4191                           wreg	equ	0xFE8
  4192                           postdec1	equ	0xFE5
  4193                           fsr1h	equ	0xFE2
  4194                           fsr1l	equ	0xFE1
  4195                           indf2	equ	0xFDF
  4196                           fsr2h	equ	0xFDA
  4197                           fsr2l	equ	0xFD9
  4198                           status	equ	0xFD8
  4199                           
  4200 ;; *************** function _getMXbits *****************
  4201 ;; Defined at:
  4202 ;;		line 20 in file "source/emulator.c"
  4203 ;; Parameters:    Size  Location     Type
  4204 ;;  subRegister     1    wreg     unsigned char 
  4205 ;; Auto vars:     Size  Location     Type
  4206 ;;  subRegister     1    2[COMRAM] unsigned char 
  4207 ;;  regMX_temp      2    0[COMRAM] unsigned int 
  4208 ;; Return value:  Size  Location     Type
  4209 ;;                  1    wreg      unsigned char 
  4210 ;; Registers used:
  4211 ;;		wreg, status,2
  4212 ;; Tracked objects:
  4213 ;;		On entry : 0/0
  4214 ;;		On exit  : 0/0
  4215 ;;		Unchanged: 0/0
  4216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4218 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;Total ram usage:        3 bytes
  4222 ;; Hardware stack levels used:    1
  4223 ;; This function calls:
  4224 ;;		Nothing
  4225 ;; This function is called by:
  4226 ;;		_processOpcode
  4227 ;; This function uses a non-reentrant model
  4228 ;;
  4229                           
  4230                           	psect	text13
  4231  002164                     __ptext13:
  4232                           	opt stack 0
  4233  002164                     _getMXbits:
  4234                           	opt stack 29
  4235                           
  4236                           ;incstack = 0
  4237                           ;getMXbits@subRegister stored from wreg
  4238  002164  CFE8 F003          	movff	wreg,getMXbits@subRegister
  4239                           
  4240                           ;emulator.c: 22: uint16_t regMX_temp = regMX;
  4241  002168  C016  F001         	movff	_regMX,getMXbits@regMX_temp
  4242  00216C  C017  F002         	movff	_regMX+1,getMXbits@regMX_temp+1
  4243                           
  4244                           ;emulator.c: 24: if (subRegister == 0)
  4245  002170  6603               	tstfsz	getMXbits@subRegister,c
  4246  002172  D003               	goto	l198
  4247                           
  4248                           ;emulator.c: 25: {
  4249                           ;emulator.c: 26: regMX_temp >>= 8;
  4250  002174  5002               	movf	getMXbits@regMX_temp+1,w,c
  4251  002176  6E01               	movwf	getMXbits@regMX_temp,c
  4252  002178  6A02               	clrf	getMXbits@regMX_temp+1,c
  4253  00217A                     l198:
  4254                           
  4255                           ;emulator.c: 27: }
  4256                           ;emulator.c: 29: return (uint8_t) regMX_temp;
  4257  00217A  5001               	movf	getMXbits@regMX_temp,w,c
  4258  00217C  0012               	return	
  4259  00217E                     __end_of_getMXbits:
  4260                           	opt stack 0
  4261                           tblptru	equ	0xFF8
  4262                           tblptrh	equ	0xFF7
  4263                           tblptrl	equ	0xFF6
  4264                           tablat	equ	0xFF5
  4265                           prodh	equ	0xFF4
  4266                           prodl	equ	0xFF3
  4267                           postinc0	equ	0xFEE
  4268                           wreg	equ	0xFE8
  4269                           postdec1	equ	0xFE5
  4270                           fsr1h	equ	0xFE2
  4271                           fsr1l	equ	0xFE1
  4272                           indf2	equ	0xFDF
  4273                           fsr2h	equ	0xFDA
  4274                           fsr2l	equ	0xFD9
  4275                           status	equ	0xFD8
  4276                           
  4277 ;; *************** function _getFbits *****************
  4278 ;; Defined at:
  4279 ;;		line 65 in file "source/emulator.c"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;  subRegister     1    wreg     unsigned char 
  4282 ;; Auto vars:     Size  Location     Type
  4283 ;;  subRegister     1    0[COMRAM] unsigned char 
  4284 ;;  regF_temp       1    1[COMRAM] unsigned char 
  4285 ;; Return value:  Size  Location     Type
  4286 ;;                  1    wreg      unsigned char 
  4287 ;; Registers used:
  4288 ;;		wreg, status,2, status,0
  4289 ;; Tracked objects:
  4290 ;;		On entry : 0/0
  4291 ;;		On exit  : 0/0
  4292 ;;		Unchanged: 0/0
  4293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4295 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4297 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4298 ;;Total ram usage:        2 bytes
  4299 ;; Hardware stack levels used:    1
  4300 ;; This function calls:
  4301 ;;		Nothing
  4302 ;; This function is called by:
  4303 ;;		_processOpcode
  4304 ;; This function uses a non-reentrant model
  4305 ;;
  4306                           
  4307                           	psect	text14
  4308  001FB2                     __ptext14:
  4309                           	opt stack 0
  4310  001FB2                     _getFbits:
  4311                           	opt stack 29
  4312                           
  4313                           ;incstack = 0
  4314                           ;getFbits@subRegister stored from wreg
  4315  001FB2  CFE8 F001          	movff	wreg,getFbits@subRegister
  4316                           
  4317                           ;emulator.c: 67: uint8_t regF_temp = regF;
  4318  001FB6  C01F  F002         	movff	_regF,getFbits@regF_temp
  4319                           
  4320                           ;emulator.c: 69: switch(subRegister)
  4321  001FBA  D015               	goto	l1265
  4322  001FBC                     l1255:
  4323                           
  4324                           ;emulator.c: 72: regF_temp <<= 7;
  4325  001FBC  3202               	rrcf	getFbits@regF_temp,f,c
  4326  001FBE  6A02               	clrf	getFbits@regF_temp,c
  4327  001FC0  3202               	rrcf	getFbits@regF_temp,f,c
  4328  001FC2  D005               	goto	L42
  4329  001FC4                     l1257:
  4330                           
  4331                           ;emulator.c: 77: regF_temp <<= 6;
  4332  001FC4  3A02               	swapf	getFbits@regF_temp,f,c
  4333  001FC6  3602               	rlcf	getFbits@regF_temp,f,c
  4334  001FC8  3602               	rlcf	getFbits@regF_temp,f,c
  4335  001FCA  0EC0               	movlw	192
  4336  001FCC  D00A               	goto	L44
  4337  001FCE                     L42:
  4338                           
  4339                           ;emulator.c: 78: regF_temp >>= 7;
  4340  001FCE  3602               	rlcf	getFbits@regF_temp,f,c
  4341  001FD0  6A02               	clrf	getFbits@regF_temp,c
  4342  001FD2  3602               	rlcf	getFbits@regF_temp,f,c
  4343                           
  4344                           ;emulator.c: 79: break;
  4345  001FD4  D015               	goto	l1267
  4346  001FD6                     l1259:
  4347                           
  4348                           ;emulator.c: 82: regF_temp <<= 5;
  4349  001FD6  3A02               	swapf	getFbits@regF_temp,f,c
  4350  001FD8  3602               	rlcf	getFbits@regF_temp,f,c
  4351  001FDA  0EE0               	movlw	224
  4352  001FDC  D002               	goto	L44
  4353  001FDE                     l1261:
  4354                           
  4355                           ;emulator.c: 87: regF_temp <<= 4;
  4356  001FDE  3A02               	swapf	getFbits@regF_temp,f,c
  4357  001FE0  0EF0               	movlw	240
  4358  001FE2                     L44:
  4359  001FE2  1602               	andwf	getFbits@regF_temp,f,c
  4360  001FE4  D7F4               	goto	L42
  4361  001FE6                     l1265:
  4362  001FE6  5001               	movf	getFbits@subRegister,w,c
  4363                           
  4364                           ; Switch size 1, requested type "space"
  4365                           ; Number of cases is 4, Range of values is 0 to 3
  4366                           ; switch strategies available:
  4367                           ; Name         Instructions Cycles
  4368                           ; simple_byte           13     7 (average)
  4369                           ;	Chosen strategy is simple_byte
  4370  001FE8  0A00               	xorlw	0	; case 0
  4371  001FEA  B4D8               	btfsc	status,2,c
  4372  001FEC  D7E7               	goto	l1255
  4373  001FEE  0A01               	xorlw	1	; case 1
  4374  001FF0  B4D8               	btfsc	status,2,c
  4375  001FF2  D7E8               	goto	l1257
  4376  001FF4  0A03               	xorlw	3	; case 2
  4377  001FF6  B4D8               	btfsc	status,2,c
  4378  001FF8  D7EE               	goto	l1259
  4379  001FFA  0A01               	xorlw	1	; case 3
  4380  001FFC  B4D8               	btfsc	status,2,c
  4381  001FFE  D7EF               	goto	l1261
  4382  002000                     l1267:
  4383                           
  4384                           ;emulator.c: 92: return regF_temp;
  4385  002000  5002               	movf	getFbits@regF_temp,w,c
  4386  002002  0012               	return	
  4387  002004                     __end_of_getFbits:
  4388                           	opt stack 0
  4389                           tblptru	equ	0xFF8
  4390                           tblptrh	equ	0xFF7
  4391                           tblptrl	equ	0xFF6
  4392                           tablat	equ	0xFF5
  4393                           prodh	equ	0xFF4
  4394                           prodl	equ	0xFF3
  4395                           postinc0	equ	0xFEE
  4396                           wreg	equ	0xFE8
  4397                           postdec1	equ	0xFE5
  4398                           fsr1h	equ	0xFE2
  4399                           fsr1l	equ	0xFE1
  4400                           indf2	equ	0xFDF
  4401                           fsr2h	equ	0xFDA
  4402                           fsr2l	equ	0xFD9
  4403                           status	equ	0xFD8
  4404                           
  4405 ;; *************** function _initializeRegisters *****************
  4406 ;; Defined at:
  4407 ;;		line 146 in file "source/emulator.c"
  4408 ;; Parameters:    Size  Location     Type
  4409 ;;		None
  4410 ;; Auto vars:     Size  Location     Type
  4411 ;;		None
  4412 ;; Return value:  Size  Location     Type
  4413 ;;		None               void
  4414 ;; Registers used:
  4415 ;;		wreg, status,2
  4416 ;; Tracked objects:
  4417 ;;		On entry : 0/0
  4418 ;;		On exit  : 0/0
  4419 ;;		Unchanged: 0/0
  4420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4423 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4424 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4425 ;;Total ram usage:        1 bytes
  4426 ;; Hardware stack levels used:    1
  4427 ;; This function calls:
  4428 ;;		Nothing
  4429 ;; This function is called by:
  4430 ;;		_main
  4431 ;; This function uses a non-reentrant model
  4432 ;;
  4433                           
  4434                           	psect	text15
  4435  0020C8                     __ptext15:
  4436                           	opt stack 0
  4437  0020C8                     _initializeRegisters:
  4438                           	opt stack 30
  4439                           
  4440                           ;emulator.c: 148: haltFlag = 0;
  4441                           
  4442                           ;incstack = 0
  4443  0020C8  6E01               	movwf	??_initializeRegisters& (0+255),c
  4444  0020CA  0E00               	movlw	0
  4445  0020CC  6E1A               	movwf	_haltFlag,c
  4446  0020CE  5001               	movf	??_initializeRegisters& (0+255),w,c
  4447                           
  4448                           ;emulator.c: 149: regA = 0;
  4449  0020D0  6E01               	movwf	??_initializeRegisters& (0+255),c
  4450  0020D2  0E00               	movlw	0
  4451  0020D4  6E1D               	movwf	_regA,c
  4452  0020D6  5001               	movf	??_initializeRegisters& (0+255),w,c
  4453                           
  4454                           ;emulator.c: 150: regB = 0;
  4455  0020D8  6E01               	movwf	??_initializeRegisters& (0+255),c
  4456  0020DA  0E00               	movlw	0
  4457  0020DC  6E1E               	movwf	_regB,c
  4458  0020DE  5001               	movf	??_initializeRegisters& (0+255),w,c
  4459                           
  4460                           ;emulator.c: 151: regPC = 0;
  4461  0020E0  0E00               	movlw	0
  4462  0020E2  6E19               	movwf	_regPC+1,c
  4463  0020E4  0E00               	movlw	0
  4464  0020E6  6E18               	movwf	_regPC,c
  4465                           
  4466                           ;emulator.c: 152: regSP = 0;
  4467  0020E8  6E01               	movwf	??_initializeRegisters& (0+255),c
  4468  0020EA  0E00               	movlw	0
  4469  0020EC  6E20               	movwf	_regSP,c
  4470  0020EE  5001               	movf	??_initializeRegisters& (0+255),w,c
  4471                           
  4472                           ;emulator.c: 153: regF = 0;
  4473  0020F0  6E01               	movwf	??_initializeRegisters& (0+255),c
  4474  0020F2  0E00               	movlw	0
  4475  0020F4  6E1F               	movwf	_regF,c
  4476  0020F6  5001               	movf	??_initializeRegisters& (0+255),w,c
  4477  0020F8  0012               	return	
  4478  0020FA                     __end_of_initializeRegisters:
  4479                           	opt stack 0
  4480                           tblptru	equ	0xFF8
  4481                           tblptrh	equ	0xFF7
  4482                           tblptrl	equ	0xFF6
  4483                           tablat	equ	0xFF5
  4484                           prodh	equ	0xFF4
  4485                           prodl	equ	0xFF3
  4486                           postinc0	equ	0xFEE
  4487                           wreg	equ	0xFE8
  4488                           postdec1	equ	0xFE5
  4489                           fsr1h	equ	0xFE2
  4490                           fsr1l	equ	0xFE1
  4491                           indf2	equ	0xFDF
  4492                           fsr2h	equ	0xFDA
  4493                           fsr2l	equ	0xFD9
  4494                           status	equ	0xFD8
  4495                           
  4496 ;; *************** function _initPorts *****************
  4497 ;; Defined at:
  4498 ;;		line 26 in file "source/system.c"
  4499 ;; Parameters:    Size  Location     Type
  4500 ;;		None
  4501 ;; Auto vars:     Size  Location     Type
  4502 ;;		None
  4503 ;; Return value:  Size  Location     Type
  4504 ;;		None               void
  4505 ;; Registers used:
  4506 ;;		wreg, status,2
  4507 ;; Tracked objects:
  4508 ;;		On entry : 0/0
  4509 ;;		On exit  : 0/0
  4510 ;;		Unchanged: 0/0
  4511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;Total ram usage:        0 bytes
  4517 ;; Hardware stack levels used:    1
  4518 ;; This function calls:
  4519 ;;		Nothing
  4520 ;; This function is called by:
  4521 ;;		_main
  4522 ;; This function uses a non-reentrant model
  4523 ;;
  4524                           
  4525                           	psect	text16
  4526  0020FA                     __ptext16:
  4527                           	opt stack 0
  4528  0020FA                     _initPorts:
  4529                           	opt stack 30
  4530                           
  4531                           ;system.c: 28: TRISA = 0;
  4532                           
  4533                           ;incstack = 0
  4534  0020FA  0E00               	movlw	0
  4535  0020FC  6E92               	movwf	3986,c	;volatile
  4536                           
  4537                           ;system.c: 29: TRISC = 0;
  4538  0020FE  0E00               	movlw	0
  4539  002100  6E94               	movwf	3988,c	;volatile
  4540                           
  4541                           ;system.c: 30: TRISE = 0;
  4542  002102  0E00               	movlw	0
  4543  002104  6E96               	movwf	3990,c	;volatile
  4544                           
  4545                           ;system.c: 32: ANSELD = 0;
  4546  002106  0E00               	movlw	0
  4547  002108  010F               	movlb	15	; () banked
  4548  00210A  010F               	movlb	15	; () banked
  4549  00210C  6F3B               	movwf	59,b	;volatile
  4550                           
  4551                           ; BSR set to: 15
  4552                           ;system.c: 33: TRISDbits.RD3 = 0;
  4553  00210E  9695               	bcf	3989,3,c	;volatile
  4554                           
  4555                           ; BSR set to: 15
  4556                           ;system.c: 34: TRISDbits.RD4 = 1;
  4557  002110  8895               	bsf	3989,4,c	;volatile
  4558                           
  4559                           ; BSR set to: 15
  4560                           ;system.c: 35: TRISDbits.RD5 = 0;
  4561  002112  9A95               	bcf	3989,5,c	;volatile
  4562                           
  4563                           ; BSR set to: 15
  4564                           ;system.c: 36: TRISDbits.RD7 = 1;
  4565  002114  8E95               	bsf	3989,7,c	;volatile
  4566                           
  4567                           ; BSR set to: 15
  4568                           ;system.c: 37: TRISDbits.RD6 = 0;
  4569  002116  9C95               	bcf	3989,6,c	;volatile
  4570                           
  4571                           ;system.c: 39: LATA = 0;
  4572  002118  0E00               	movlw	0
  4573  00211A  6E89               	movwf	3977,c	;volatile
  4574                           
  4575                           ;system.c: 40: LATC = 0;
  4576  00211C  0E00               	movlw	0
  4577  00211E  6E8B               	movwf	3979,c	;volatile
  4578                           
  4579                           ;system.c: 41: LATD = 0;
  4580  002120  0E00               	movlw	0
  4581  002122  6E8C               	movwf	3980,c	;volatile
  4582                           
  4583                           ;system.c: 42: LATE = 0;
  4584  002124  0E00               	movlw	0
  4585  002126  6E8D               	movwf	3981,c	;volatile
  4586                           
  4587                           ; BSR set to: 15
  4588  002128  0012               	return	
  4589  00212A                     __end_of_initPorts:
  4590                           	opt stack 0
  4591                           tblptru	equ	0xFF8
  4592                           tblptrh	equ	0xFF7
  4593                           tblptrl	equ	0xFF6
  4594                           tablat	equ	0xFF5
  4595                           prodh	equ	0xFF4
  4596                           prodl	equ	0xFF3
  4597                           postinc0	equ	0xFEE
  4598                           wreg	equ	0xFE8
  4599                           postdec1	equ	0xFE5
  4600                           fsr1h	equ	0xFE2
  4601                           fsr1l	equ	0xFE1
  4602                           indf2	equ	0xFDF
  4603                           fsr2h	equ	0xFDA
  4604                           fsr2l	equ	0xFD9
  4605                           status	equ	0xFD8
  4606                           
  4607 ;; *************** function _initOscillator *****************
  4608 ;; Defined at:
  4609 ;;		line 9 in file "source/system.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;		None
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;		None
  4614 ;; Return value:  Size  Location     Type
  4615 ;;		None               void
  4616 ;; Registers used:
  4617 ;;		wreg, status,2
  4618 ;; Tracked objects:
  4619 ;;		On entry : 0/0
  4620 ;;		On exit  : 0/0
  4621 ;;		Unchanged: 0/0
  4622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4623 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;Total ram usage:        0 bytes
  4628 ;; Hardware stack levels used:    1
  4629 ;; This function calls:
  4630 ;;		Nothing
  4631 ;; This function is called by:
  4632 ;;		_main
  4633 ;; This function uses a non-reentrant model
  4634 ;;
  4635                           
  4636                           	psect	text17
  4637  002148                     __ptext17:
  4638                           	opt stack 0
  4639  002148                     _initOscillator:
  4640                           	opt stack 30
  4641                           
  4642                           ;system.c: 11: OSCCONbits.IDLEN = 0;
  4643                           
  4644                           ; BSR set to: 15
  4645                           ;incstack = 0
  4646  002148  9ED3               	bcf	4051,7,c	;volatile
  4647                           
  4648                           ;system.c: 12: OSCCONbits.IRCF = 0b111;
  4649  00214A  88D3               	bsf	4051,4,c	;volatile
  4650  00214C  8AD3               	bsf	4051,5,c	;volatile
  4651  00214E  8CD3               	bsf	4051,6,c	;volatile
  4652                           
  4653                           ;system.c: 13: OSCCONbits.SCS = 0b10;
  4654  002150  50D3               	movf	4051,w,c	;volatile
  4655  002152  0BFC               	andlw	-4
  4656  002154  0902               	iorlw	2
  4657  002156  6ED3               	movwf	4051,c	;volatile
  4658                           
  4659                           ;system.c: 14: OSCCON2bits.MFIOSEL = 0;
  4660  002158  98D2               	bcf	4050,4,c	;volatile
  4661                           
  4662                           ;system.c: 15: OSCCON2bits.SOSCGO = 0;
  4663  00215A  96D2               	bcf	4050,3,c	;volatile
  4664                           
  4665                           ;system.c: 16: OSCCON2bits.PRISD = 0;
  4666  00215C  94D2               	bcf	4050,2,c	;volatile
  4667  00215E                     l126:
  4668  00215E  B4D3               	btfsc	4051,2,c	;volatile
  4669  002160  0012               	return	
  4670  002162  D7FD               	goto	l126
  4671  002164                     __end_of_initOscillator:
  4672                           	opt stack 0
  4673                           tblptru	equ	0xFF8
  4674                           tblptrh	equ	0xFF7
  4675                           tblptrl	equ	0xFF6
  4676                           tablat	equ	0xFF5
  4677                           prodh	equ	0xFF4
  4678                           prodl	equ	0xFF3
  4679                           postinc0	equ	0xFEE
  4680                           wreg	equ	0xFE8
  4681                           postdec1	equ	0xFE5
  4682                           fsr1h	equ	0xFE2
  4683                           fsr1l	equ	0xFE1
  4684                           indf2	equ	0xFDF
  4685                           fsr2h	equ	0xFDA
  4686                           fsr2l	equ	0xFD9
  4687                           status	equ	0xFD8
  4688                           tblptru	equ	0xFF8
  4689                           tblptrh	equ	0xFF7
  4690                           tblptrl	equ	0xFF6
  4691                           tablat	equ	0xFF5
  4692                           prodh	equ	0xFF4
  4693                           prodl	equ	0xFF3
  4694                           postinc0	equ	0xFEE
  4695                           wreg	equ	0xFE8
  4696                           postdec1	equ	0xFE5
  4697                           fsr1h	equ	0xFE2
  4698                           fsr1l	equ	0xFE1
  4699                           indf2	equ	0xFDF
  4700                           fsr2h	equ	0xFDA
  4701                           fsr2l	equ	0xFD9
  4702                           status	equ	0xFD8
  4703                           
  4704                           	psect	rparam
  4705  0000                     tblptru	equ	0xFF8
  4706                           tblptrh	equ	0xFF7
  4707                           tblptrl	equ	0xFF6
  4708                           tablat	equ	0xFF5
  4709                           prodh	equ	0xFF4
  4710                           prodl	equ	0xFF3
  4711                           postinc0	equ	0xFEE
  4712                           wreg	equ	0xFE8
  4713                           postdec1	equ	0xFE5
  4714                           fsr1h	equ	0xFE2
  4715                           fsr1l	equ	0xFE1
  4716                           indf2	equ	0xFDF
  4717                           fsr2h	equ	0xFDA
  4718                           fsr2l	equ	0xFD9
  4719                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        2048
    BSS         271
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     17      32
    BANK0           160      0       0
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_processOpcode
    _wait_ms->___wmul
    _processOpcode->_setPortData
    _setPortData->_enableSerial

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    6008
                                             16 COMRAM     1     1      0
                            _dispSeg
                     _initOscillator
                          _initPorts
                _initializeRegisters
                      _processOpcode
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _wait_ms                                              2     0      2     834
                                              6 COMRAM     2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     173
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _processOpcode                                        7     7      0    3461
                                              9 COMRAM     7     7      0
                           _getFbits
                          _getMXbits
                        _getPortData
                  _immData_toPointer
                           _setFbits
                          _setMXbits
                        _setPortData
                     _update_immData
 ---------------------------------------------------------------------------------
 (2) _update_immData                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setPortData                                          5     4      1    2089
                                              4 COMRAM     5     4      1
                            _dispSeg
                       _enableSerial
                          _hexToChar
 ---------------------------------------------------------------------------------
 (3) _hexToChar                                            1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _enableSerial                                         4     2      2      49
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _dispSeg                                              2     1      1    1713
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _setMXbits                                            6     5      1     196
                                              0 COMRAM     6     5      1
 ---------------------------------------------------------------------------------
 (2) _setFbits                                             5     4      1     876
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (2) _immData_toPointer                                    4     2      2      15
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _getPortData                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMXbits                                            3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getFbits                                             2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initializeRegisters                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initOscillator                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dispSeg
   _initOscillator
   _initPorts
   _initializeRegisters
   _processOpcode
     _getFbits
     _getMXbits
     _getPortData
     _immData_toPointer
     _setFbits
     _setMXbits
     _setPortData
       _dispSeg
       _enableSerial
       _hexToChar
     _update_immData
   _wait_ms
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     800      37       52.6%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     11      20       1       33.7%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     120      12        0.0%
DATA                 0      0     920       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Fri Mar 21 13:25:55 2014

                          l60 18B8                            l70 1976                            l62 18DE  
                          l39 1F5E                            l80 1A34                            l72 199C  
                          l64 1904                            l56 1892                            l74 19C2  
                          l66 192A                            l83 1A5A                            l92 1ACC  
                          l76 19E8                            l68 1950                            l86 1A80  
                          l78 1A0E                            l95 1AF2                            l89 1AA6  
                          l98 1B18           ___wmul@multiplicand 0003                _update_immData 1DCC  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l126 215E                           l240 1D2A  
                         l137 2080                           l234 2184                           l247 1D82  
                         l352 15C8                           l280 10E4                           l281 10EA  
                         l273 10A2                           l290 1126                           l282 10F0  
                         l274 10A8                           l355 1614                           l275 10AE  
                         l293 115A                           l198 217A                           l279 10DE  
                         l296 1194                           l297 11A8                  __CFG_CPB$OFF 000000  
                __CFG_CPD$OFF 000000                           prod 000FF3                           wreg 000FE8  
       getPortData@portNumber 0001                    _TXSTA2bits 000F72                  __CFG_LVP$OFF 000000  
                        l1001 187C                          l1021 193A                          l1013 18EE  
                        l1005 18A2                          l1041 19F8                          l1033 19AC  
                        l1025 1960                          l1017 1914                          l1009 18C8  
                        l1201 1BFC                          l1061 1AB6                          l1053 1A6A  
                        l1045 1A1E                          l1037 19D2                          l1029 1986  
                        l1221 1C10                          l1213 1C08                          l1205 1C00  
                        l1303 2188                          l1065 1ADC                          l1057 1A90  
                        l1049 1A44                          l1321 1E76                          l1313 1E66  
                        l1217 1C0C                          l1209 1C04                          l1161 1BD4  
                        l1251 1FA4                          l1243 1F74                          l1075 1B28  
                        l1315 1E6A                          l1323 1E7C                          l1227 1C14  
                        l1411 1D74                          l1403 1D54                          l1261 1FDE  
                        l1245 1F88                          l1069 1B02                          l1317 1E6E  
                        l1325 1ED4                          l1181 1BE8                          l1173 1BE0  
                        l1165 1BD8                          l1413 1D88                          l1255 1FBC  
                        l1319 1E72                          l1415 1D9C                          l1407 1D64  
                        l1511 11DE                          l1431 1030                          l1257 1FC4  
                        l1265 1FE6                          l1281 1CE6                          l1273 1C88  
                        l1249 1F96                          l1193 1BF4                          l1185 1BEC  
                        l1177 1BE4                          l1169 1BDC                          l1601 1304  
                        l1521 121C                          l1505 11BA                          l1441 1060  
                        l1433 1042                          l1259 1FD6                          l1267 2000  
                        l1419 1DB0                          l1515 11F6                          l1451 1086  
                        l1443 106E                          l1435 104E                          l1277 1C9A  
                        l1285 1D00                          l1197 1BF8                          l1189 1BF0  
                        l1373 1E08                          l1541 125C                          l1525 122C  
                        l1517 1204                          l1509 11D0                          l1461 10D2  
                        l1453 1092                          l1437 1056                          l1429 101E  
                        l1279 1CBE                          l1287 1D1A                          l1711 15B4  
                        l1703 157C                          l1535 1248                          l1471 110A  
                        l1455 109A                          l1447 107A                          l1377 1E28  
                        l1369 1DEA                          l1713 15C2                          l1705 158A  
                        l1553 127E                          l1529 1232                          l1473 1110  
                        l1465 10FE                          l1457 10B4         setPortData@portNumber 0006  
                        l1395 1D36                          l1707 1590                          l1619 134C  
                        l1571 12A8                          l1547 1264                          l1491 1154  
                        l1483 1122                          l1467 1104                          l1459 10C6  
                        l1741 164C                          l1661 1444                          l1653 140C  
                        l1637 139C                          l1565 12A0                          l1477 1116  
                        l1389 2070                          l1399 1D44                          l1751 168C  
                        l1743 165A                          l1727 1600                          l1583 12D4  
                        l1575 12C2                          l1559 128C                          l1479 111C  
                        l1761 16C6                          l1753 169A                          l1729 160E  
                        l1673 149C                          l1665 1464                          l1657 1426  
                        l1649 13F2                          l1577 12CC                          l1497 1180  
                        l1489 1146                          l1755 169E                          l1747 1664  
                        l1691 1514                          l1683 14D4                          l1595 12F2  
                        l1499 118E                          l1669 1482                          l1589 12E8  
                        l1765 16CA                          l1759 16B8                          l1695 1536  
                        l1687 14F0                          l1679 14B8                          l1767 1870  
                        l1775 1F16                          l1783 1F3C                          l1891 1EB6  
                        l1699 1558                          l1779 1F2C                          l1893 1EC0  
                        l1895 1ECA                          l1887 1EA6                          l1889 1EAC  
                        _LATA 000F89                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          _main 1EEC                          _regA 001D  
                        _regB 001E                          _regF 001F                          fsr1h 000FE2  
                        fsr1l 000FE1                          indf2 000FDF                          fsr2l 000FD9  
               __CFG_BORV$190 000000                          prodh 000FF4                          prodl 000FF3  
                        start 0000                 __CFG_IESO$OFF 000000        __end_of_update_immData 1E62  
       setPortData@outputData 0005             getFbits@regF_temp 0002                  _BAUDCON2bits 000F70  
                       ?_main 0001                         _TRISA 000F92                         _TRISC 000F94  
                       _TRISE 000F96                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000               __end_of_dispSeg 1BC2                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
             ??_processOpcode 000A                         _regPC 0018                         _regMX 0016  
                       _regSP 0020            __CFG_MCLRE$EXTMCLR 000000                         _stack 0100  
    processOpcode@regA_temp16 000F                __CFG_BOREN$OFF 000000                         tablat 000FF5  
             __end_of_wait_ms 208E                         status 000FD8                __CFG_HFOFST$ON 000000  
             __initialization 2004                  __end_of_main 1F60               ?_update_immData 0001  
  __end_of_virtualMemory_size 1005          __end_of_enableSerial 1EEC                        ??_main 0011  
               __activetblptr 000003          enableSerial@baudRate 0001            setFbits@regF_temp1 0005  
          setFbits@regF_temp2 0004                  ?_setPortData 0005                        _ANSELD 000F3B  
              __CFG_WDTEN$OFF 000000          __size_of_getPortData 0016                        _RCREG2 000F74  
                      _SPBRG2 000F75           getMXbits@regMX_temp 0001           setMXbits@regMX_temp 0005  
                      _TXREG2 000F73              __end_of_getFbits 2004                __CFG_XINST$OFF 000000  
                      ___wmul 208E                __CFG_STVREN$ON 000000  __size_of_initializeRegisters 0032  
                      clear_0 200C                        clear_1 201E                     ??_dispSeg 0002  
            __end_of_setFbits 1D24                  __pdataBIGRAM 0200                  __mediumconst 0000  
               _virtualMemory 0200                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8             _immData_toPointer 212A                     ??_wait_ms 0009  
             hexToChar@number 0001            ?_immData_toPointer 0001                    __accesstop 0060  
     __end_of__initialization 2048               __CFG_PBADEN$OFF 000000  setPortData@outputData_temp16 0007  
               setFbits@value 0001           ??_immData_toPointer 0003           setMXbits@value_temp 0002  
              __pcstackCOMRAM 0001            __size_of_getMXbits 001A     __end_of_immData_toPointer 2148  
          __size_of_hexToChar 00B8       __size_of_initOscillator 001C                    __pbssBANK1 0100  
             __CFG_PLLCFG$OFF 000000            __size_of_initPorts 0030            __CFG_CCP2MX$PORTC1 000000  
 setPortData@outputData_temp8 0009         __size_of_enableSerial 008A            __size_of_setMXbits 0052  
                     ?___wmul 0001            __CFG_CCP3MX$PORTB5 000000                     ?_getFbits 0001  
           __CFG_PRICLKEN$OFF 000000                       _SPBRGH2 000F76          __size_of_setPortData 00A8  
                _enableSerial 1E62             __end_of_getMXbits 217E                     ?_setFbits 0001  
            ??_update_immData 0001               __CFG_PWRTEN$OFF 000000                       __Hparam 0000  
                     __Lparam 0000             __end_of_hexToChar 1C7A               __size_of___wmul 003A  
                __psmallconst 1000                       __pcinit 2004                       __ramtop 1000  
                     __ptext0 1EEC                       __ptext1 204E                       __ptext2 208E  
                     __ptext3 1006                       __ptext4 1DCC                       __ptext5 1D24  
                     __ptext6 1BC2                       __ptext7 1E62                       __ptext8 1876  
                     __ptext9 1F60                       _dispSeg 1876             __end_of_initPorts 212A  
  __size_of_immData_toPointer 001E                    ??_getFbits 0001                       _wait_ms 204E  
          _virtualMemory_size 1001             __end_of_setMXbits 1FB2          end_of_initialization 2048  
       __end_of_processOpcode 1876           _initializeRegisters 20C8                    ??_setFbits 0002  
                     postdec1 000FE5                       postinc0 000FEE                   wait_ms@time 0007  
         getFbits@subRegister 0001          ?_initializeRegisters 0001           setFbits@subRegister 0003  
     processOpcode@carriedBit 000B                     _TRISDbits 000F95                 ??_getPortData 0001  
              _initOscillator 2148                setMXbits@value 0001          getMXbits@subRegister 0003  
        setMXbits@subRegister 0004         ??_initializeRegisters 0001                 __pidataBIGRAM 2194  
              __end_of___wmul 20C8       processOpcode@regPC_temp 000C       processOpcode@regA_temp8 000E  
         start_initialization 2004        __end_of_initOscillator 2164           __end_of_getPortData 2194  
                    ??___wmul 0005                   __pbssCOMRAM 0012               ?_initOscillator 0001  
           __size_of_getFbits 0052                     _getMXbits 2164             __size_of_setFbits 00AA  
                   _hexToChar 1BC2                     _immData_1 001B                     _immData_2 001C  
                    ?_dispSeg 0001                   __smallconst 1000                      ?_wait_ms 0007  
                   _initPorts 20FA                   _getPortData 217E                 ??_setPortData 0006  
                   _setMXbits 1F60                ___wmul@product 0005                      _LATAbits 000F89  
                    _LATCbits 000F8B                      _LATDbits 000F8C                      _LATEbits 000F8D  
                  ?_getMXbits 0001              __CFG_WDTPS$32768 000000                    ?_hexToChar 0001  
           ___wmul@multiplier 0001                    ?_initPorts 0001                     copy_data0 2038  
                  ?_setMXbits 0001           __end_of_setPortData 1DCC                      __Hrparam 0000  
                    __Lrparam 0000             __CFG_P2BMX$PORTD2 000000        __size_of_processOpcode 0870  
     __size_of_update_immData 0096              __size_of_dispSeg 034C                      _getFbits 1FB2  
                    _haltFlag 001A                      __ptext10 1C7A                      __ptext11 212A  
                    __ptext12 217E                      __ptext13 2164                      __ptext14 1FB2  
                    __ptext15 20C8                      __ptext16 20FA                      __ptext17 2148  
            __size_of_wait_ms 0040                   _OSCCON2bits 000FD2      immData_toPointer@pointer 0003  
               __size_of_main 0074                      _setFbits 1C7A   __end_of_initializeRegisters 20FA  
                 ??_getMXbits 0001                   ??_hexToChar 0001              ??_initOscillator 0001  
                 ??_initPorts 0001                   _setPortData 1D24                 ?_enableSerial 0001  
               _processOpcode 1006                   ??_setMXbits 0002                    _RCSTA2bits 000F71  
                  _OSCCONbits 000FD3                dispSeg@segment 0002                  wait_ms@timel 0012  
           __CFG_T3CMX$PORTC0 000000                 dispSeg@letter 0001                  ?_getPortData 0001  
              ??_enableSerial 0003                ?_processOpcode 0001             __CFG_FOSC$INTIO67 000000  
