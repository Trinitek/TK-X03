

Microchip Technology PIC18 LITE Macro Assembler V1.30 build 55553 
                                                                                               Mon Mar 17 23:21:49 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 55553
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBIGRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	text16,global,reloc=2,class=CODE,delta=1
    29                           	psect	text17,global,reloc=2,class=CODE,delta=1
    30                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    31                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    32  0000                     
    33                           	psect	idataBIGRAM
    34  001006                     __pidataBIGRAM:
    35                           	opt stack 0
    36                           
    37                           ;initializer for _virtualMemory
    38  001006  07                 	db	7
    39  001007  03                 	db	3
    40  001008  00                 	db	0
    41  001009  54                 	db	84
    42  00100A  06                 	db	6
    43  00100B  04                 	db	4
    44  00100C  31                 	db	49
    45  00100D  00                 	db	0
    46  00100E  03                 	db	3
    47  00100F  00                 	db	0
    48  001010  00                 	db	0
    49  001011  00                 	db	0
    50  001012  00                 	db	0
    51  001013  00                 	db	0
    52  001014  00                 	db	0
    53  001015  00                 	db	0
    54  001016  00                 	db	0
    55  001017  00                 	db	0
    56  001018  00                 	db	0
    57  001019  00                 	db	0
    58  00101A  00                 	db	0
    59  00101B  00                 	db	0
    60  00101C  00                 	db	0
    61  00101D  00                 	db	0
    62  00101E  00                 	db	0
    63  00101F  00                 	db	0
    64  001020  00                 	db	0
    65  001021  00                 	db	0
    66  001022  00                 	db	0
    67  001023  00                 	db	0
    68  001024  00                 	db	0
    69  001025  00                 	db	0
    70  001026  00                 	db	0
    71  001027  00                 	db	0
    72  001028  00                 	db	0
    73  001029  00                 	db	0
    74  00102A  00                 	db	0
    75  00102B  00                 	db	0
    76  00102C  00                 	db	0
    77  00102D  00                 	db	0
    78  00102E  00                 	db	0
    79  00102F  00                 	db	0
    80  001030  00                 	db	0
    81  001031  00                 	db	0
    82  001032  00                 	db	0
    83  001033  00                 	db	0
    84  001034  00                 	db	0
    85  001035  00                 	db	0
    86  001036  00                 	db	0
    87  001037  00                 	db	0
    88  001038  00                 	db	0
    89  001039  00                 	db	0
    90  00103A  00                 	db	0
    91  00103B  00                 	db	0
    92  00103C  00                 	db	0
    93  00103D  00                 	db	0
    94  00103E  00                 	db	0
    95  00103F  00                 	db	0
    96  001040  00                 	db	0
    97  001041  00                 	db	0
    98  001042  00                 	db	0
    99  001043  00                 	db	0
   100  001044  00                 	db	0
   101  001045  00                 	db	0
   102  001046  00                 	db	0
   103  001047  00                 	db	0
   104  001048  00                 	db	0
   105  001049  00                 	db	0
   106  00104A  00                 	db	0
   107  00104B  00                 	db	0
   108  00104C  00                 	db	0
   109  00104D  00                 	db	0
   110  00104E  00                 	db	0
   111  00104F  00                 	db	0
   112  001050  00                 	db	0
   113  001051  00                 	db	0
   114  001052  00                 	db	0
   115  001053  00                 	db	0
   116  001054  00                 	db	0
   117  001055  00                 	db	0
   118  001056  00                 	db	0
   119  001057  00                 	db	0
   120  001058  00                 	db	0
   121  001059  00                 	db	0
   122  00105A  00                 	db	0
   123  00105B  00                 	db	0
   124  00105C  00                 	db	0
   125  00105D  00                 	db	0
   126  00105E  00                 	db	0
   127  00105F  00                 	db	0
   128  001060  00                 	db	0
   129  001061  00                 	db	0
   130  001062  00                 	db	0
   131  001063  00                 	db	0
   132  001064  00                 	db	0
   133  001065  00                 	db	0
   134  001066  00                 	db	0
   135  001067  00                 	db	0
   136  001068  00                 	db	0
   137  001069  00                 	db	0
   138  00106A  00                 	db	0
   139  00106B  00                 	db	0
   140  00106C  00                 	db	0
   141  00106D  00                 	db	0
   142  00106E  00                 	db	0
   143  00106F  00                 	db	0
   144  001070  00                 	db	0
   145  001071  00                 	db	0
   146  001072  00                 	db	0
   147  001073  00                 	db	0
   148  001074  00                 	db	0
   149  001075  00                 	db	0
   150  001076  00                 	db	0
   151  001077  00                 	db	0
   152  001078  00                 	db	0
   153  001079  00                 	db	0
   154  00107A  00                 	db	0
   155  00107B  00                 	db	0
   156  00107C  00                 	db	0
   157  00107D  00                 	db	0
   158  00107E  00                 	db	0
   159  00107F  00                 	db	0
   160  001080  00                 	db	0
   161  001081  00                 	db	0
   162  001082  00                 	db	0
   163  001083  00                 	db	0
   164  001084  00                 	db	0
   165  001085  00                 	db	0
   166  001086  00                 	db	0
   167  001087  00                 	db	0
   168  001088  00                 	db	0
   169  001089  00                 	db	0
   170  00108A  00                 	db	0
   171  00108B  00                 	db	0
   172  00108C  00                 	db	0
   173  00108D  00                 	db	0
   174  00108E  00                 	db	0
   175  00108F  00                 	db	0
   176  001090  00                 	db	0
   177  001091  00                 	db	0
   178  001092  00                 	db	0
   179  001093  00                 	db	0
   180  001094  00                 	db	0
   181  001095  00                 	db	0
   182  001096  00                 	db	0
   183  001097  00                 	db	0
   184  001098  00                 	db	0
   185  001099  00                 	db	0
   186  00109A  00                 	db	0
   187  00109B  00                 	db	0
   188  00109C  00                 	db	0
   189  00109D  00                 	db	0
   190  00109E  00                 	db	0
   191  00109F  00                 	db	0
   192  0010A0  00                 	db	0
   193  0010A1  00                 	db	0
   194  0010A2  00                 	db	0
   195  0010A3  00                 	db	0
   196  0010A4  00                 	db	0
   197  0010A5  00                 	db	0
   198  0010A6  00                 	db	0
   199  0010A7  00                 	db	0
   200  0010A8  00                 	db	0
   201  0010A9  00                 	db	0
   202  0010AA  00                 	db	0
   203  0010AB  00                 	db	0
   204  0010AC  00                 	db	0
   205  0010AD  00                 	db	0
   206  0010AE  00                 	db	0
   207  0010AF  00                 	db	0
   208  0010B0  00                 	db	0
   209  0010B1  00                 	db	0
   210  0010B2  00                 	db	0
   211  0010B3  00                 	db	0
   212  0010B4  00                 	db	0
   213  0010B5  00                 	db	0
   214  0010B6  00                 	db	0
   215  0010B7  00                 	db	0
   216  0010B8  00                 	db	0
   217  0010B9  00                 	db	0
   218  0010BA  00                 	db	0
   219  0010BB  00                 	db	0
   220  0010BC  00                 	db	0
   221  0010BD  00                 	db	0
   222  0010BE  00                 	db	0
   223  0010BF  00                 	db	0
   224  0010C0  00                 	db	0
   225  0010C1  00                 	db	0
   226  0010C2  00                 	db	0
   227  0010C3  00                 	db	0
   228  0010C4  00                 	db	0
   229  0010C5  00                 	db	0
   230  0010C6  00                 	db	0
   231  0010C7  00                 	db	0
   232  0010C8  00                 	db	0
   233  0010C9  00                 	db	0
   234  0010CA  00                 	db	0
   235  0010CB  00                 	db	0
   236  0010CC  00                 	db	0
   237  0010CD  00                 	db	0
   238  0010CE  00                 	db	0
   239  0010CF  00                 	db	0
   240  0010D0  00                 	db	0
   241  0010D1  00                 	db	0
   242  0010D2  00                 	db	0
   243  0010D3  00                 	db	0
   244  0010D4  00                 	db	0
   245  0010D5  00                 	db	0
   246  0010D6  00                 	db	0
   247  0010D7  00                 	db	0
   248  0010D8  00                 	db	0
   249  0010D9  00                 	db	0
   250  0010DA  00                 	db	0
   251  0010DB  00                 	db	0
   252  0010DC  00                 	db	0
   253  0010DD  00                 	db	0
   254  0010DE  00                 	db	0
   255  0010DF  00                 	db	0
   256  0010E0  00                 	db	0
   257  0010E1  00                 	db	0
   258  0010E2  00                 	db	0
   259  0010E3  00                 	db	0
   260  0010E4  00                 	db	0
   261  0010E5  00                 	db	0
   262  0010E6  00                 	db	0
   263  0010E7  00                 	db	0
   264  0010E8  00                 	db	0
   265  0010E9  00                 	db	0
   266  0010EA  00                 	db	0
   267  0010EB  00                 	db	0
   268  0010EC  00                 	db	0
   269  0010ED  00                 	db	0
   270  0010EE  00                 	db	0
   271  0010EF  00                 	db	0
   272  0010F0  00                 	db	0
   273  0010F1  00                 	db	0
   274  0010F2  00                 	db	0
   275  0010F3  00                 	db	0
   276  0010F4  00                 	db	0
   277  0010F5  00                 	db	0
   278  0010F6  00                 	db	0
   279  0010F7  00                 	db	0
   280  0010F8  00                 	db	0
   281  0010F9  00                 	db	0
   282  0010FA  00                 	db	0
   283  0010FB  00                 	db	0
   284  0010FC  00                 	db	0
   285  0010FD  00                 	db	0
   286  0010FE  00                 	db	0
   287  0010FF  00                 	db	0
   288  001100  00                 	db	0
   289  001101  00                 	db	0
   290  001102  00                 	db	0
   291  001103  00                 	db	0
   292  001104  00                 	db	0
   293  001105  00                 	db	0
   294  001106  00                 	db	0
   295  001107  00                 	db	0
   296  001108  00                 	db	0
   297  001109  00                 	db	0
   298  00110A  00                 	db	0
   299  00110B  00                 	db	0
   300  00110C  00                 	db	0
   301  00110D  00                 	db	0
   302  00110E  00                 	db	0
   303  00110F  00                 	db	0
   304  001110  00                 	db	0
   305  001111  00                 	db	0
   306  001112  00                 	db	0
   307  001113  00                 	db	0
   308  001114  00                 	db	0
   309  001115  00                 	db	0
   310  001116  00                 	db	0
   311  001117  00                 	db	0
   312  001118  00                 	db	0
   313  001119  00                 	db	0
   314  00111A  00                 	db	0
   315  00111B  00                 	db	0
   316  00111C  00                 	db	0
   317  00111D  00                 	db	0
   318  00111E  00                 	db	0
   319  00111F  00                 	db	0
   320  001120  00                 	db	0
   321  001121  00                 	db	0
   322  001122  00                 	db	0
   323  001123  00                 	db	0
   324  001124  00                 	db	0
   325  001125  00                 	db	0
   326  001126  00                 	db	0
   327  001127  00                 	db	0
   328  001128  00                 	db	0
   329  001129  00                 	db	0
   330  00112A  00                 	db	0
   331  00112B  00                 	db	0
   332  00112C  00                 	db	0
   333  00112D  00                 	db	0
   334  00112E  00                 	db	0
   335  00112F  00                 	db	0
   336  001130  00                 	db	0
   337  001131  00                 	db	0
   338  001132  00                 	db	0
   339  001133  00                 	db	0
   340  001134  00                 	db	0
   341  001135  00                 	db	0
   342  001136  00                 	db	0
   343  001137  00                 	db	0
   344  001138  00                 	db	0
   345  001139  00                 	db	0
   346  00113A  00                 	db	0
   347  00113B  00                 	db	0
   348  00113C  00                 	db	0
   349  00113D  00                 	db	0
   350  00113E  00                 	db	0
   351  00113F  00                 	db	0
   352  001140  00                 	db	0
   353  001141  00                 	db	0
   354  001142  00                 	db	0
   355  001143  00                 	db	0
   356  001144  00                 	db	0
   357  001145  00                 	db	0
   358  001146  00                 	db	0
   359  001147  00                 	db	0
   360  001148  00                 	db	0
   361  001149  00                 	db	0
   362  00114A  00                 	db	0
   363  00114B  00                 	db	0
   364  00114C  00                 	db	0
   365  00114D  00                 	db	0
   366  00114E  00                 	db	0
   367  00114F  00                 	db	0
   368  001150  00                 	db	0
   369  001151  00                 	db	0
   370  001152  00                 	db	0
   371  001153  00                 	db	0
   372  001154  00                 	db	0
   373  001155  00                 	db	0
   374  001156  00                 	db	0
   375  001157  00                 	db	0
   376  001158  00                 	db	0
   377  001159  00                 	db	0
   378  00115A  00                 	db	0
   379  00115B  00                 	db	0
   380  00115C  00                 	db	0
   381  00115D  00                 	db	0
   382  00115E  00                 	db	0
   383  00115F  00                 	db	0
   384  001160  00                 	db	0
   385  001161  00                 	db	0
   386  001162  00                 	db	0
   387  001163  00                 	db	0
   388  001164  00                 	db	0
   389  001165  00                 	db	0
   390  001166  00                 	db	0
   391  001167  00                 	db	0
   392  001168  00                 	db	0
   393  001169  00                 	db	0
   394  00116A  00                 	db	0
   395  00116B  00                 	db	0
   396  00116C  00                 	db	0
   397  00116D  00                 	db	0
   398  00116E  00                 	db	0
   399  00116F  00                 	db	0
   400  001170  00                 	db	0
   401  001171  00                 	db	0
   402  001172  00                 	db	0
   403  001173  00                 	db	0
   404  001174  00                 	db	0
   405  001175  00                 	db	0
   406  001176  00                 	db	0
   407  001177  00                 	db	0
   408  001178  00                 	db	0
   409  001179  00                 	db	0
   410  00117A  00                 	db	0
   411  00117B  00                 	db	0
   412  00117C  00                 	db	0
   413  00117D  00                 	db	0
   414  00117E  00                 	db	0
   415  00117F  00                 	db	0
   416  001180  00                 	db	0
   417  001181  00                 	db	0
   418  001182  00                 	db	0
   419  001183  00                 	db	0
   420  001184  00                 	db	0
   421  001185  00                 	db	0
   422  001186  00                 	db	0
   423  001187  00                 	db	0
   424  001188  00                 	db	0
   425  001189  00                 	db	0
   426  00118A  00                 	db	0
   427  00118B  00                 	db	0
   428  00118C  00                 	db	0
   429  00118D  00                 	db	0
   430  00118E  00                 	db	0
   431  00118F  00                 	db	0
   432  001190  00                 	db	0
   433  001191  00                 	db	0
   434  001192  00                 	db	0
   435  001193  00                 	db	0
   436  001194  00                 	db	0
   437  001195  00                 	db	0
   438  001196  00                 	db	0
   439  001197  00                 	db	0
   440  001198  00                 	db	0
   441  001199  00                 	db	0
   442  00119A  00                 	db	0
   443  00119B  00                 	db	0
   444  00119C  00                 	db	0
   445  00119D  00                 	db	0
   446  00119E  00                 	db	0
   447  00119F  00                 	db	0
   448  0011A0  00                 	db	0
   449  0011A1  00                 	db	0
   450  0011A2  00                 	db	0
   451  0011A3  00                 	db	0
   452  0011A4  00                 	db	0
   453  0011A5  00                 	db	0
   454  0011A6  00                 	db	0
   455  0011A7  00                 	db	0
   456  0011A8  00                 	db	0
   457  0011A9  00                 	db	0
   458  0011AA  00                 	db	0
   459  0011AB  00                 	db	0
   460  0011AC  00                 	db	0
   461  0011AD  00                 	db	0
   462  0011AE  00                 	db	0
   463  0011AF  00                 	db	0
   464  0011B0  00                 	db	0
   465  0011B1  00                 	db	0
   466  0011B2  00                 	db	0
   467  0011B3  00                 	db	0
   468  0011B4  00                 	db	0
   469  0011B5  00                 	db	0
   470  0011B6  00                 	db	0
   471  0011B7  00                 	db	0
   472  0011B8  00                 	db	0
   473  0011B9  00                 	db	0
   474  0011BA  00                 	db	0
   475  0011BB  00                 	db	0
   476  0011BC  00                 	db	0
   477  0011BD  00                 	db	0
   478  0011BE  00                 	db	0
   479  0011BF  00                 	db	0
   480  0011C0  00                 	db	0
   481  0011C1  00                 	db	0
   482  0011C2  00                 	db	0
   483  0011C3  00                 	db	0
   484  0011C4  00                 	db	0
   485  0011C5  00                 	db	0
   486  0011C6  00                 	db	0
   487  0011C7  00                 	db	0
   488  0011C8  00                 	db	0
   489  0011C9  00                 	db	0
   490  0011CA  00                 	db	0
   491  0011CB  00                 	db	0
   492  0011CC  00                 	db	0
   493  0011CD  00                 	db	0
   494  0011CE  00                 	db	0
   495  0011CF  00                 	db	0
   496  0011D0  00                 	db	0
   497  0011D1  00                 	db	0
   498  0011D2  00                 	db	0
   499  0011D3  00                 	db	0
   500  0011D4  00                 	db	0
   501  0011D5  00                 	db	0
   502  0011D6  00                 	db	0
   503  0011D7  00                 	db	0
   504  0011D8  00                 	db	0
   505  0011D9  00                 	db	0
   506  0011DA  00                 	db	0
   507  0011DB  00                 	db	0
   508  0011DC  00                 	db	0
   509  0011DD  00                 	db	0
   510  0011DE  00                 	db	0
   511  0011DF  00                 	db	0
   512  0011E0  00                 	db	0
   513  0011E1  00                 	db	0
   514  0011E2  00                 	db	0
   515  0011E3  00                 	db	0
   516  0011E4  00                 	db	0
   517  0011E5  00                 	db	0
   518  0011E6  00                 	db	0
   519  0011E7  00                 	db	0
   520  0011E8  00                 	db	0
   521  0011E9  00                 	db	0
   522  0011EA  00                 	db	0
   523  0011EB  00                 	db	0
   524  0011EC  00                 	db	0
   525  0011ED  00                 	db	0
   526  0011EE  00                 	db	0
   527  0011EF  00                 	db	0
   528  0011F0  00                 	db	0
   529  0011F1  00                 	db	0
   530  0011F2  00                 	db	0
   531  0011F3  00                 	db	0
   532  0011F4  00                 	db	0
   533  0011F5  00                 	db	0
   534  0011F6  00                 	db	0
   535  0011F7  00                 	db	0
   536  0011F8  00                 	db	0
   537  0011F9  00                 	db	0
   538  0011FA  00                 	db	0
   539  0011FB  00                 	db	0
   540  0011FC  00                 	db	0
   541  0011FD  00                 	db	0
   542  0011FE  00                 	db	0
   543  0011FF  00                 	db	0
   544  001200  00                 	db	0
   545  001201  00                 	db	0
   546  001202  00                 	db	0
   547  001203  00                 	db	0
   548  001204  00                 	db	0
   549  001205  00                 	db	0
   550  001206  00                 	db	0
   551  001207  00                 	db	0
   552  001208  00                 	db	0
   553  001209  00                 	db	0
   554  00120A  00                 	db	0
   555  00120B  00                 	db	0
   556  00120C  00                 	db	0
   557  00120D  00                 	db	0
   558  00120E  00                 	db	0
   559  00120F  00                 	db	0
   560  001210  00                 	db	0
   561  001211  00                 	db	0
   562  001212  00                 	db	0
   563  001213  00                 	db	0
   564  001214  00                 	db	0
   565  001215  00                 	db	0
   566  001216  00                 	db	0
   567  001217  00                 	db	0
   568  001218  00                 	db	0
   569  001219  00                 	db	0
   570  00121A  00                 	db	0
   571  00121B  00                 	db	0
   572  00121C  00                 	db	0
   573  00121D  00                 	db	0
   574  00121E  00                 	db	0
   575  00121F  00                 	db	0
   576  001220  00                 	db	0
   577  001221  00                 	db	0
   578  001222  00                 	db	0
   579  001223  00                 	db	0
   580  001224  00                 	db	0
   581  001225  00                 	db	0
   582  001226  00                 	db	0
   583  001227  00                 	db	0
   584  001228  00                 	db	0
   585  001229  00                 	db	0
   586  00122A  00                 	db	0
   587  00122B  00                 	db	0
   588  00122C  00                 	db	0
   589  00122D  00                 	db	0
   590  00122E  00                 	db	0
   591  00122F  00                 	db	0
   592  001230  00                 	db	0
   593  001231  00                 	db	0
   594  001232  00                 	db	0
   595  001233  00                 	db	0
   596  001234  00                 	db	0
   597  001235  00                 	db	0
   598  001236  00                 	db	0
   599  001237  00                 	db	0
   600  001238  00                 	db	0
   601  001239  00                 	db	0
   602  00123A  00                 	db	0
   603  00123B  00                 	db	0
   604  00123C  00                 	db	0
   605  00123D  00                 	db	0
   606  00123E  00                 	db	0
   607  00123F  00                 	db	0
   608  001240  00                 	db	0
   609  001241  00                 	db	0
   610  001242  00                 	db	0
   611  001243  00                 	db	0
   612  001244  00                 	db	0
   613  001245  00                 	db	0
   614  001246  00                 	db	0
   615  001247  00                 	db	0
   616  001248  00                 	db	0
   617  001249  00                 	db	0
   618  00124A  00                 	db	0
   619  00124B  00                 	db	0
   620  00124C  00                 	db	0
   621  00124D  00                 	db	0
   622  00124E  00                 	db	0
   623  00124F  00                 	db	0
   624  001250  00                 	db	0
   625  001251  00                 	db	0
   626  001252  00                 	db	0
   627  001253  00                 	db	0
   628  001254  00                 	db	0
   629  001255  00                 	db	0
   630  001256  00                 	db	0
   631  001257  00                 	db	0
   632  001258  00                 	db	0
   633  001259  00                 	db	0
   634  00125A  00                 	db	0
   635  00125B  00                 	db	0
   636  00125C  00                 	db	0
   637  00125D  00                 	db	0
   638  00125E  00                 	db	0
   639  00125F  00                 	db	0
   640  001260  00                 	db	0
   641  001261  00                 	db	0
   642  001262  00                 	db	0
   643  001263  00                 	db	0
   644  001264  00                 	db	0
   645  001265  00                 	db	0
   646  001266  00                 	db	0
   647  001267  00                 	db	0
   648  001268  00                 	db	0
   649  001269  00                 	db	0
   650  00126A  00                 	db	0
   651  00126B  00                 	db	0
   652  00126C  00                 	db	0
   653  00126D  00                 	db	0
   654  00126E  00                 	db	0
   655  00126F  00                 	db	0
   656  001270  00                 	db	0
   657  001271  00                 	db	0
   658  001272  00                 	db	0
   659  001273  00                 	db	0
   660  001274  00                 	db	0
   661  001275  00                 	db	0
   662  001276  00                 	db	0
   663  001277  00                 	db	0
   664  001278  00                 	db	0
   665  001279  00                 	db	0
   666  00127A  00                 	db	0
   667  00127B  00                 	db	0
   668  00127C  00                 	db	0
   669  00127D  00                 	db	0
   670  00127E  00                 	db	0
   671  00127F  00                 	db	0
   672  001280  00                 	db	0
   673  001281  00                 	db	0
   674  001282  00                 	db	0
   675  001283  00                 	db	0
   676  001284  00                 	db	0
   677  001285  00                 	db	0
   678  001286  00                 	db	0
   679  001287  00                 	db	0
   680  001288  00                 	db	0
   681  001289  00                 	db	0
   682  00128A  00                 	db	0
   683  00128B  00                 	db	0
   684  00128C  00                 	db	0
   685  00128D  00                 	db	0
   686  00128E  00                 	db	0
   687  00128F  00                 	db	0
   688  001290  00                 	db	0
   689  001291  00                 	db	0
   690  001292  00                 	db	0
   691  001293  00                 	db	0
   692  001294  00                 	db	0
   693  001295  00                 	db	0
   694  001296  00                 	db	0
   695  001297  00                 	db	0
   696  001298  00                 	db	0
   697  001299  00                 	db	0
   698  00129A  00                 	db	0
   699  00129B  00                 	db	0
   700  00129C  00                 	db	0
   701  00129D  00                 	db	0
   702  00129E  00                 	db	0
   703  00129F  00                 	db	0
   704  0012A0  00                 	db	0
   705  0012A1  00                 	db	0
   706  0012A2  00                 	db	0
   707  0012A3  00                 	db	0
   708  0012A4  00                 	db	0
   709  0012A5  00                 	db	0
   710  0012A6  00                 	db	0
   711  0012A7  00                 	db	0
   712  0012A8  00                 	db	0
   713  0012A9  00                 	db	0
   714  0012AA  00                 	db	0
   715  0012AB  00                 	db	0
   716  0012AC  00                 	db	0
   717  0012AD  00                 	db	0
   718  0012AE  00                 	db	0
   719  0012AF  00                 	db	0
   720  0012B0  00                 	db	0
   721  0012B1  00                 	db	0
   722  0012B2  00                 	db	0
   723  0012B3  00                 	db	0
   724  0012B4  00                 	db	0
   725  0012B5  00                 	db	0
   726  0012B6  00                 	db	0
   727  0012B7  00                 	db	0
   728  0012B8  00                 	db	0
   729  0012B9  00                 	db	0
   730  0012BA  00                 	db	0
   731  0012BB  00                 	db	0
   732  0012BC  00                 	db	0
   733  0012BD  00                 	db	0
   734  0012BE  00                 	db	0
   735  0012BF  00                 	db	0
   736  0012C0  00                 	db	0
   737  0012C1  00                 	db	0
   738  0012C2  00                 	db	0
   739  0012C3  00                 	db	0
   740  0012C4  00                 	db	0
   741  0012C5  00                 	db	0
   742  0012C6  00                 	db	0
   743  0012C7  00                 	db	0
   744  0012C8  00                 	db	0
   745  0012C9  00                 	db	0
   746  0012CA  00                 	db	0
   747  0012CB  00                 	db	0
   748  0012CC  00                 	db	0
   749  0012CD  00                 	db	0
   750  0012CE  00                 	db	0
   751  0012CF  00                 	db	0
   752  0012D0  00                 	db	0
   753  0012D1  00                 	db	0
   754  0012D2  00                 	db	0
   755  0012D3  00                 	db	0
   756  0012D4  00                 	db	0
   757  0012D5  00                 	db	0
   758  0012D6  00                 	db	0
   759  0012D7  00                 	db	0
   760  0012D8  00                 	db	0
   761  0012D9  00                 	db	0
   762  0012DA  00                 	db	0
   763  0012DB  00                 	db	0
   764  0012DC  00                 	db	0
   765  0012DD  00                 	db	0
   766  0012DE  00                 	db	0
   767  0012DF  00                 	db	0
   768  0012E0  00                 	db	0
   769  0012E1  00                 	db	0
   770  0012E2  00                 	db	0
   771  0012E3  00                 	db	0
   772  0012E4  00                 	db	0
   773  0012E5  00                 	db	0
   774  0012E6  00                 	db	0
   775  0012E7  00                 	db	0
   776  0012E8  00                 	db	0
   777  0012E9  00                 	db	0
   778  0012EA  00                 	db	0
   779  0012EB  00                 	db	0
   780  0012EC  00                 	db	0
   781  0012ED  00                 	db	0
   782  0012EE  00                 	db	0
   783  0012EF  00                 	db	0
   784  0012F0  00                 	db	0
   785  0012F1  00                 	db	0
   786  0012F2  00                 	db	0
   787  0012F3  00                 	db	0
   788  0012F4  00                 	db	0
   789  0012F5  00                 	db	0
   790  0012F6  00                 	db	0
   791  0012F7  00                 	db	0
   792  0012F8  00                 	db	0
   793  0012F9  00                 	db	0
   794  0012FA  00                 	db	0
   795  0012FB  00                 	db	0
   796  0012FC  00                 	db	0
   797  0012FD  00                 	db	0
   798  0012FE  00                 	db	0
   799  0012FF  00                 	db	0
   800  001300  00                 	db	0
   801  001301  00                 	db	0
   802  001302  00                 	db	0
   803  001303  00                 	db	0
   804  001304  00                 	db	0
   805  001305  00                 	db	0
   806  001306  00                 	db	0
   807  001307  00                 	db	0
   808  001308  00                 	db	0
   809  001309  00                 	db	0
   810  00130A  00                 	db	0
   811  00130B  00                 	db	0
   812  00130C  00                 	db	0
   813  00130D  00                 	db	0
   814  00130E  00                 	db	0
   815  00130F  00                 	db	0
   816  001310  00                 	db	0
   817  001311  00                 	db	0
   818  001312  00                 	db	0
   819  001313  00                 	db	0
   820  001314  00                 	db	0
   821  001315  00                 	db	0
   822  001316  00                 	db	0
   823  001317  00                 	db	0
   824  001318  00                 	db	0
   825  001319  00                 	db	0
   826  00131A  00                 	db	0
   827  00131B  00                 	db	0
   828  00131C  00                 	db	0
   829  00131D  00                 	db	0
   830  00131E  00                 	db	0
   831  00131F  00                 	db	0
   832  001320  00                 	db	0
   833  001321  00                 	db	0
   834  001322  00                 	db	0
   835  001323  00                 	db	0
   836  001324  00                 	db	0
   837  001325  00                 	db	0
   838  001326  00                 	db	0
   839  001327  00                 	db	0
   840  001328  00                 	db	0
   841  001329  00                 	db	0
   842  00132A  00                 	db	0
   843  00132B  00                 	db	0
   844  00132C  00                 	db	0
   845  00132D  00                 	db	0
   846  00132E  00                 	db	0
   847  00132F  00                 	db	0
   848  001330  00                 	db	0
   849  001331  00                 	db	0
   850  001332  00                 	db	0
   851  001333  00                 	db	0
   852  001334  00                 	db	0
   853  001335  00                 	db	0
   854  001336  00                 	db	0
   855  001337  00                 	db	0
   856  001338  00                 	db	0
   857  001339  00                 	db	0
   858  00133A  00                 	db	0
   859  00133B  00                 	db	0
   860  00133C  00                 	db	0
   861  00133D  00                 	db	0
   862  00133E  00                 	db	0
   863  00133F  00                 	db	0
   864  001340  00                 	db	0
   865  001341  00                 	db	0
   866  001342  00                 	db	0
   867  001343  00                 	db	0
   868  001344  00                 	db	0
   869  001345  00                 	db	0
   870  001346  00                 	db	0
   871  001347  00                 	db	0
   872  001348  00                 	db	0
   873  001349  00                 	db	0
   874  00134A  00                 	db	0
   875  00134B  00                 	db	0
   876  00134C  00                 	db	0
   877  00134D  00                 	db	0
   878  00134E  00                 	db	0
   879  00134F  00                 	db	0
   880  001350  00                 	db	0
   881  001351  00                 	db	0
   882  001352  00                 	db	0
   883  001353  00                 	db	0
   884  001354  00                 	db	0
   885  001355  00                 	db	0
   886  001356  00                 	db	0
   887  001357  00                 	db	0
   888  001358  00                 	db	0
   889  001359  00                 	db	0
   890  00135A  00                 	db	0
   891  00135B  00                 	db	0
   892  00135C  00                 	db	0
   893  00135D  00                 	db	0
   894  00135E  00                 	db	0
   895  00135F  00                 	db	0
   896  001360  00                 	db	0
   897  001361  00                 	db	0
   898  001362  00                 	db	0
   899  001363  00                 	db	0
   900  001364  00                 	db	0
   901  001365  00                 	db	0
   902  001366  00                 	db	0
   903  001367  00                 	db	0
   904  001368  00                 	db	0
   905  001369  00                 	db	0
   906  00136A  00                 	db	0
   907  00136B  00                 	db	0
   908  00136C  00                 	db	0
   909  00136D  00                 	db	0
   910  00136E  00                 	db	0
   911  00136F  00                 	db	0
   912  001370  00                 	db	0
   913  001371  00                 	db	0
   914  001372  00                 	db	0
   915  001373  00                 	db	0
   916  001374  00                 	db	0
   917  001375  00                 	db	0
   918  001376  00                 	db	0
   919  001377  00                 	db	0
   920  001378  00                 	db	0
   921  001379  00                 	db	0
   922  00137A  00                 	db	0
   923  00137B  00                 	db	0
   924  00137C  00                 	db	0
   925  00137D  00                 	db	0
   926  00137E  00                 	db	0
   927  00137F  00                 	db	0
   928  001380  00                 	db	0
   929  001381  00                 	db	0
   930  001382  00                 	db	0
   931  001383  00                 	db	0
   932  001384  00                 	db	0
   933  001385  00                 	db	0
   934  001386  00                 	db	0
   935  001387  00                 	db	0
   936  001388  00                 	db	0
   937  001389  00                 	db	0
   938  00138A  00                 	db	0
   939  00138B  00                 	db	0
   940  00138C  00                 	db	0
   941  00138D  00                 	db	0
   942  00138E  00                 	db	0
   943  00138F  00                 	db	0
   944  001390  00                 	db	0
   945  001391  00                 	db	0
   946  001392  00                 	db	0
   947  001393  00                 	db	0
   948  001394  00                 	db	0
   949  001395  00                 	db	0
   950  001396  00                 	db	0
   951  001397  00                 	db	0
   952  001398  00                 	db	0
   953  001399  00                 	db	0
   954  00139A  00                 	db	0
   955  00139B  00                 	db	0
   956  00139C  00                 	db	0
   957  00139D  00                 	db	0
   958  00139E  00                 	db	0
   959  00139F  00                 	db	0
   960  0013A0  00                 	db	0
   961  0013A1  00                 	db	0
   962  0013A2  00                 	db	0
   963  0013A3  00                 	db	0
   964  0013A4  00                 	db	0
   965  0013A5  00                 	db	0
   966  0013A6  00                 	db	0
   967  0013A7  00                 	db	0
   968  0013A8  00                 	db	0
   969  0013A9  00                 	db	0
   970  0013AA  00                 	db	0
   971  0013AB  00                 	db	0
   972  0013AC  00                 	db	0
   973  0013AD  00                 	db	0
   974  0013AE  00                 	db	0
   975  0013AF  00                 	db	0
   976  0013B0  00                 	db	0
   977  0013B1  00                 	db	0
   978  0013B2  00                 	db	0
   979  0013B3  00                 	db	0
   980  0013B4  00                 	db	0
   981  0013B5  00                 	db	0
   982  0013B6  00                 	db	0
   983  0013B7  00                 	db	0
   984  0013B8  00                 	db	0
   985  0013B9  00                 	db	0
   986  0013BA  00                 	db	0
   987  0013BB  00                 	db	0
   988  0013BC  00                 	db	0
   989  0013BD  00                 	db	0
   990  0013BE  00                 	db	0
   991  0013BF  00                 	db	0
   992  0013C0  00                 	db	0
   993  0013C1  00                 	db	0
   994  0013C2  00                 	db	0
   995  0013C3  00                 	db	0
   996  0013C4  00                 	db	0
   997  0013C5  00                 	db	0
   998  0013C6  00                 	db	0
   999  0013C7  00                 	db	0
  1000  0013C8  00                 	db	0
  1001  0013C9  00                 	db	0
  1002  0013CA  00                 	db	0
  1003  0013CB  00                 	db	0
  1004  0013CC  00                 	db	0
  1005  0013CD  00                 	db	0
  1006  0013CE  00                 	db	0
  1007  0013CF  00                 	db	0
  1008  0013D0  00                 	db	0
  1009  0013D1  00                 	db	0
  1010  0013D2  00                 	db	0
  1011  0013D3  00                 	db	0
  1012  0013D4  00                 	db	0
  1013  0013D5  00                 	db	0
  1014  0013D6  00                 	db	0
  1015  0013D7  00                 	db	0
  1016  0013D8  00                 	db	0
  1017  0013D9  00                 	db	0
  1018  0013DA  00                 	db	0
  1019  0013DB  00                 	db	0
  1020  0013DC  00                 	db	0
  1021  0013DD  00                 	db	0
  1022  0013DE  00                 	db	0
  1023  0013DF  00                 	db	0
  1024  0013E0  00                 	db	0
  1025  0013E1  00                 	db	0
  1026  0013E2  00                 	db	0
  1027  0013E3  00                 	db	0
  1028  0013E4  00                 	db	0
  1029  0013E5  00                 	db	0
  1030  0013E6  00                 	db	0
  1031  0013E7  00                 	db	0
  1032  0013E8  00                 	db	0
  1033  0013E9  00                 	db	0
  1034  0013EA  00                 	db	0
  1035  0013EB  00                 	db	0
  1036  0013EC  00                 	db	0
  1037  0013ED  00                 	db	0
  1038  0013EE  00                 	db	0
  1039  0013EF  00                 	db	0
  1040  0013F0  00                 	db	0
  1041  0013F1  00                 	db	0
  1042  0013F2  00                 	db	0
  1043  0013F3  00                 	db	0
  1044  0013F4  00                 	db	0
  1045  0013F5  00                 	db	0
  1046  0013F6  00                 	db	0
  1047  0013F7  00                 	db	0
  1048  0013F8  00                 	db	0
  1049  0013F9  00                 	db	0
  1050  0013FA  00                 	db	0
  1051  0013FB  00                 	db	0
  1052  0013FC  00                 	db	0
  1053  0013FD  00                 	db	0
  1054  0013FE  00                 	db	0
  1055  0013FF  00                 	db	0
  1056  001400  00                 	db	0
  1057  001401  00                 	db	0
  1058  001402  00                 	db	0
  1059  001403  00                 	db	0
  1060  001404  00                 	db	0
  1061  001405  00                 	db	0
  1062  001406  00                 	db	0
  1063  001407  00                 	db	0
  1064  001408  00                 	db	0
  1065  001409  00                 	db	0
  1066  00140A  00                 	db	0
  1067  00140B  00                 	db	0
  1068  00140C  00                 	db	0
  1069  00140D  00                 	db	0
  1070  00140E  00                 	db	0
  1071  00140F  00                 	db	0
  1072  001410  00                 	db	0
  1073  001411  00                 	db	0
  1074  001412  00                 	db	0
  1075  001413  00                 	db	0
  1076  001414  00                 	db	0
  1077  001415  00                 	db	0
  1078  001416  00                 	db	0
  1079  001417  00                 	db	0
  1080  001418  00                 	db	0
  1081  001419  00                 	db	0
  1082  00141A  00                 	db	0
  1083  00141B  00                 	db	0
  1084  00141C  00                 	db	0
  1085  00141D  00                 	db	0
  1086  00141E  00                 	db	0
  1087  00141F  00                 	db	0
  1088  001420  00                 	db	0
  1089  001421  00                 	db	0
  1090  001422  00                 	db	0
  1091  001423  00                 	db	0
  1092  001424  00                 	db	0
  1093  001425  00                 	db	0
  1094  001426  00                 	db	0
  1095  001427  00                 	db	0
  1096  001428  00                 	db	0
  1097  001429  00                 	db	0
  1098  00142A  00                 	db	0
  1099  00142B  00                 	db	0
  1100  00142C  00                 	db	0
  1101  00142D  00                 	db	0
  1102  00142E  00                 	db	0
  1103  00142F  00                 	db	0
  1104  001430  00                 	db	0
  1105  001431  00                 	db	0
  1106  001432  00                 	db	0
  1107  001433  00                 	db	0
  1108  001434  00                 	db	0
  1109  001435  00                 	db	0
  1110  001436  00                 	db	0
  1111  001437  00                 	db	0
  1112  001438  00                 	db	0
  1113  001439  00                 	db	0
  1114  00143A  00                 	db	0
  1115  00143B  00                 	db	0
  1116  00143C  00                 	db	0
  1117  00143D  00                 	db	0
  1118  00143E  00                 	db	0
  1119  00143F  00                 	db	0
  1120  001440  00                 	db	0
  1121  001441  00                 	db	0
  1122  001442  00                 	db	0
  1123  001443  00                 	db	0
  1124  001444  00                 	db	0
  1125  001445  00                 	db	0
  1126  001446  00                 	db	0
  1127  001447  00                 	db	0
  1128  001448  00                 	db	0
  1129  001449  00                 	db	0
  1130  00144A  00                 	db	0
  1131  00144B  00                 	db	0
  1132  00144C  00                 	db	0
  1133  00144D  00                 	db	0
  1134  00144E  00                 	db	0
  1135  00144F  00                 	db	0
  1136  001450  00                 	db	0
  1137  001451  00                 	db	0
  1138  001452  00                 	db	0
  1139  001453  00                 	db	0
  1140  001454  00                 	db	0
  1141  001455  00                 	db	0
  1142  001456  00                 	db	0
  1143  001457  00                 	db	0
  1144  001458  00                 	db	0
  1145  001459  00                 	db	0
  1146  00145A  00                 	db	0
  1147  00145B  00                 	db	0
  1148  00145C  00                 	db	0
  1149  00145D  00                 	db	0
  1150  00145E  00                 	db	0
  1151  00145F  00                 	db	0
  1152  001460  00                 	db	0
  1153  001461  00                 	db	0
  1154  001462  00                 	db	0
  1155  001463  00                 	db	0
  1156  001464  00                 	db	0
  1157  001465  00                 	db	0
  1158  001466  00                 	db	0
  1159  001467  00                 	db	0
  1160  001468  00                 	db	0
  1161  001469  00                 	db	0
  1162  00146A  00                 	db	0
  1163  00146B  00                 	db	0
  1164  00146C  00                 	db	0
  1165  00146D  00                 	db	0
  1166  00146E  00                 	db	0
  1167  00146F  00                 	db	0
  1168  001470  00                 	db	0
  1169  001471  00                 	db	0
  1170  001472  00                 	db	0
  1171  001473  00                 	db	0
  1172  001474  00                 	db	0
  1173  001475  00                 	db	0
  1174  001476  00                 	db	0
  1175  001477  00                 	db	0
  1176  001478  00                 	db	0
  1177  001479  00                 	db	0
  1178  00147A  00                 	db	0
  1179  00147B  00                 	db	0
  1180  00147C  00                 	db	0
  1181  00147D  00                 	db	0
  1182  00147E  00                 	db	0
  1183  00147F  00                 	db	0
  1184  001480  00                 	db	0
  1185  001481  00                 	db	0
  1186  001482  00                 	db	0
  1187  001483  00                 	db	0
  1188  001484  00                 	db	0
  1189  001485  00                 	db	0
  1190  001486  00                 	db	0
  1191  001487  00                 	db	0
  1192  001488  00                 	db	0
  1193  001489  00                 	db	0
  1194  00148A  00                 	db	0
  1195  00148B  00                 	db	0
  1196  00148C  00                 	db	0
  1197  00148D  00                 	db	0
  1198  00148E  00                 	db	0
  1199  00148F  00                 	db	0
  1200  001490  00                 	db	0
  1201  001491  00                 	db	0
  1202  001492  00                 	db	0
  1203  001493  00                 	db	0
  1204  001494  00                 	db	0
  1205  001495  00                 	db	0
  1206  001496  00                 	db	0
  1207  001497  00                 	db	0
  1208  001498  00                 	db	0
  1209  001499  00                 	db	0
  1210  00149A  00                 	db	0
  1211  00149B  00                 	db	0
  1212  00149C  00                 	db	0
  1213  00149D  00                 	db	0
  1214  00149E  00                 	db	0
  1215  00149F  00                 	db	0
  1216  0014A0  00                 	db	0
  1217  0014A1  00                 	db	0
  1218  0014A2  00                 	db	0
  1219  0014A3  00                 	db	0
  1220  0014A4  00                 	db	0
  1221  0014A5  00                 	db	0
  1222  0014A6  00                 	db	0
  1223  0014A7  00                 	db	0
  1224  0014A8  00                 	db	0
  1225  0014A9  00                 	db	0
  1226  0014AA  00                 	db	0
  1227  0014AB  00                 	db	0
  1228  0014AC  00                 	db	0
  1229  0014AD  00                 	db	0
  1230  0014AE  00                 	db	0
  1231  0014AF  00                 	db	0
  1232  0014B0  00                 	db	0
  1233  0014B1  00                 	db	0
  1234  0014B2  00                 	db	0
  1235  0014B3  00                 	db	0
  1236  0014B4  00                 	db	0
  1237  0014B5  00                 	db	0
  1238  0014B6  00                 	db	0
  1239  0014B7  00                 	db	0
  1240  0014B8  00                 	db	0
  1241  0014B9  00                 	db	0
  1242  0014BA  00                 	db	0
  1243  0014BB  00                 	db	0
  1244  0014BC  00                 	db	0
  1245  0014BD  00                 	db	0
  1246  0014BE  00                 	db	0
  1247  0014BF  00                 	db	0
  1248  0014C0  00                 	db	0
  1249  0014C1  00                 	db	0
  1250  0014C2  00                 	db	0
  1251  0014C3  00                 	db	0
  1252  0014C4  00                 	db	0
  1253  0014C5  00                 	db	0
  1254  0014C6  00                 	db	0
  1255  0014C7  00                 	db	0
  1256  0014C8  00                 	db	0
  1257  0014C9  00                 	db	0
  1258  0014CA  00                 	db	0
  1259  0014CB  00                 	db	0
  1260  0014CC  00                 	db	0
  1261  0014CD  00                 	db	0
  1262  0014CE  00                 	db	0
  1263  0014CF  00                 	db	0
  1264  0014D0  00                 	db	0
  1265  0014D1  00                 	db	0
  1266  0014D2  00                 	db	0
  1267  0014D3  00                 	db	0
  1268  0014D4  00                 	db	0
  1269  0014D5  00                 	db	0
  1270  0014D6  00                 	db	0
  1271  0014D7  00                 	db	0
  1272  0014D8  00                 	db	0
  1273  0014D9  00                 	db	0
  1274  0014DA  00                 	db	0
  1275  0014DB  00                 	db	0
  1276  0014DC  00                 	db	0
  1277  0014DD  00                 	db	0
  1278  0014DE  00                 	db	0
  1279  0014DF  00                 	db	0
  1280  0014E0  00                 	db	0
  1281  0014E1  00                 	db	0
  1282  0014E2  00                 	db	0
  1283  0014E3  00                 	db	0
  1284  0014E4  00                 	db	0
  1285  0014E5  00                 	db	0
  1286  0014E6  00                 	db	0
  1287  0014E7  00                 	db	0
  1288  0014E8  00                 	db	0
  1289  0014E9  00                 	db	0
  1290  0014EA  00                 	db	0
  1291  0014EB  00                 	db	0
  1292  0014EC  00                 	db	0
  1293  0014ED  00                 	db	0
  1294  0014EE  00                 	db	0
  1295  0014EF  00                 	db	0
  1296  0014F0  00                 	db	0
  1297  0014F1  00                 	db	0
  1298  0014F2  00                 	db	0
  1299  0014F3  00                 	db	0
  1300  0014F4  00                 	db	0
  1301  0014F5  00                 	db	0
  1302  0014F6  00                 	db	0
  1303  0014F7  00                 	db	0
  1304  0014F8  00                 	db	0
  1305  0014F9  00                 	db	0
  1306  0014FA  00                 	db	0
  1307  0014FB  00                 	db	0
  1308  0014FC  00                 	db	0
  1309  0014FD  00                 	db	0
  1310  0014FE  00                 	db	0
  1311  0014FF  00                 	db	0
  1312  001500  00                 	db	0
  1313  001501  00                 	db	0
  1314  001502  00                 	db	0
  1315  001503  00                 	db	0
  1316  001504  00                 	db	0
  1317  001505  00                 	db	0
  1318  001506  00                 	db	0
  1319  001507  00                 	db	0
  1320  001508  00                 	db	0
  1321  001509  00                 	db	0
  1322  00150A  00                 	db	0
  1323  00150B  00                 	db	0
  1324  00150C  00                 	db	0
  1325  00150D  00                 	db	0
  1326  00150E  00                 	db	0
  1327  00150F  00                 	db	0
  1328  001510  00                 	db	0
  1329  001511  00                 	db	0
  1330  001512  00                 	db	0
  1331  001513  00                 	db	0
  1332  001514  00                 	db	0
  1333  001515  00                 	db	0
  1334  001516  00                 	db	0
  1335  001517  00                 	db	0
  1336  001518  00                 	db	0
  1337  001519  00                 	db	0
  1338  00151A  00                 	db	0
  1339  00151B  00                 	db	0
  1340  00151C  00                 	db	0
  1341  00151D  00                 	db	0
  1342  00151E  00                 	db	0
  1343  00151F  00                 	db	0
  1344  001520  00                 	db	0
  1345  001521  00                 	db	0
  1346  001522  00                 	db	0
  1347  001523  00                 	db	0
  1348  001524  00                 	db	0
  1349  001525  00                 	db	0
  1350  001526  00                 	db	0
  1351  001527  00                 	db	0
  1352  001528  00                 	db	0
  1353  001529  00                 	db	0
  1354  00152A  00                 	db	0
  1355  00152B  00                 	db	0
  1356  00152C  00                 	db	0
  1357  00152D  00                 	db	0
  1358  00152E  00                 	db	0
  1359  00152F  00                 	db	0
  1360  001530  00                 	db	0
  1361  001531  00                 	db	0
  1362  001532  00                 	db	0
  1363  001533  00                 	db	0
  1364  001534  00                 	db	0
  1365  001535  00                 	db	0
  1366  001536  00                 	db	0
  1367  001537  00                 	db	0
  1368  001538  00                 	db	0
  1369  001539  00                 	db	0
  1370  00153A  00                 	db	0
  1371  00153B  00                 	db	0
  1372  00153C  00                 	db	0
  1373  00153D  00                 	db	0
  1374  00153E  00                 	db	0
  1375  00153F  00                 	db	0
  1376  001540  00                 	db	0
  1377  001541  00                 	db	0
  1378  001542  00                 	db	0
  1379  001543  00                 	db	0
  1380  001544  00                 	db	0
  1381  001545  00                 	db	0
  1382  001546  00                 	db	0
  1383  001547  00                 	db	0
  1384  001548  00                 	db	0
  1385  001549  00                 	db	0
  1386  00154A  00                 	db	0
  1387  00154B  00                 	db	0
  1388  00154C  00                 	db	0
  1389  00154D  00                 	db	0
  1390  00154E  00                 	db	0
  1391  00154F  00                 	db	0
  1392  001550  00                 	db	0
  1393  001551  00                 	db	0
  1394  001552  00                 	db	0
  1395  001553  00                 	db	0
  1396  001554  00                 	db	0
  1397  001555  00                 	db	0
  1398  001556  00                 	db	0
  1399  001557  00                 	db	0
  1400  001558  00                 	db	0
  1401  001559  00                 	db	0
  1402  00155A  00                 	db	0
  1403  00155B  00                 	db	0
  1404  00155C  00                 	db	0
  1405  00155D  00                 	db	0
  1406  00155E  00                 	db	0
  1407  00155F  00                 	db	0
  1408  001560  00                 	db	0
  1409  001561  00                 	db	0
  1410  001562  00                 	db	0
  1411  001563  00                 	db	0
  1412  001564  00                 	db	0
  1413  001565  00                 	db	0
  1414  001566  00                 	db	0
  1415  001567  00                 	db	0
  1416  001568  00                 	db	0
  1417  001569  00                 	db	0
  1418  00156A  00                 	db	0
  1419  00156B  00                 	db	0
  1420  00156C  00                 	db	0
  1421  00156D  00                 	db	0
  1422  00156E  00                 	db	0
  1423  00156F  00                 	db	0
  1424  001570  00                 	db	0
  1425  001571  00                 	db	0
  1426  001572  00                 	db	0
  1427  001573  00                 	db	0
  1428  001574  00                 	db	0
  1429  001575  00                 	db	0
  1430  001576  00                 	db	0
  1431  001577  00                 	db	0
  1432  001578  00                 	db	0
  1433  001579  00                 	db	0
  1434  00157A  00                 	db	0
  1435  00157B  00                 	db	0
  1436  00157C  00                 	db	0
  1437  00157D  00                 	db	0
  1438  00157E  00                 	db	0
  1439  00157F  00                 	db	0
  1440  001580  00                 	db	0
  1441  001581  00                 	db	0
  1442  001582  00                 	db	0
  1443  001583  00                 	db	0
  1444  001584  00                 	db	0
  1445  001585  00                 	db	0
  1446  001586  00                 	db	0
  1447  001587  00                 	db	0
  1448  001588  00                 	db	0
  1449  001589  00                 	db	0
  1450  00158A  00                 	db	0
  1451  00158B  00                 	db	0
  1452  00158C  00                 	db	0
  1453  00158D  00                 	db	0
  1454  00158E  00                 	db	0
  1455  00158F  00                 	db	0
  1456  001590  00                 	db	0
  1457  001591  00                 	db	0
  1458  001592  00                 	db	0
  1459  001593  00                 	db	0
  1460  001594  00                 	db	0
  1461  001595  00                 	db	0
  1462  001596  00                 	db	0
  1463  001597  00                 	db	0
  1464  001598  00                 	db	0
  1465  001599  00                 	db	0
  1466  00159A  00                 	db	0
  1467  00159B  00                 	db	0
  1468  00159C  00                 	db	0
  1469  00159D  00                 	db	0
  1470  00159E  00                 	db	0
  1471  00159F  00                 	db	0
  1472  0015A0  00                 	db	0
  1473  0015A1  00                 	db	0
  1474  0015A2  00                 	db	0
  1475  0015A3  00                 	db	0
  1476  0015A4  00                 	db	0
  1477  0015A5  00                 	db	0
  1478  0015A6  00                 	db	0
  1479  0015A7  00                 	db	0
  1480  0015A8  00                 	db	0
  1481  0015A9  00                 	db	0
  1482  0015AA  00                 	db	0
  1483  0015AB  00                 	db	0
  1484  0015AC  00                 	db	0
  1485  0015AD  00                 	db	0
  1486  0015AE  00                 	db	0
  1487  0015AF  00                 	db	0
  1488  0015B0  00                 	db	0
  1489  0015B1  00                 	db	0
  1490  0015B2  00                 	db	0
  1491  0015B3  00                 	db	0
  1492  0015B4  00                 	db	0
  1493  0015B5  00                 	db	0
  1494  0015B6  00                 	db	0
  1495  0015B7  00                 	db	0
  1496  0015B8  00                 	db	0
  1497  0015B9  00                 	db	0
  1498  0015BA  00                 	db	0
  1499  0015BB  00                 	db	0
  1500  0015BC  00                 	db	0
  1501  0015BD  00                 	db	0
  1502  0015BE  00                 	db	0
  1503  0015BF  00                 	db	0
  1504  0015C0  00                 	db	0
  1505  0015C1  00                 	db	0
  1506  0015C2  00                 	db	0
  1507  0015C3  00                 	db	0
  1508  0015C4  00                 	db	0
  1509  0015C5  00                 	db	0
  1510  0015C6  00                 	db	0
  1511  0015C7  00                 	db	0
  1512  0015C8  00                 	db	0
  1513  0015C9  00                 	db	0
  1514  0015CA  00                 	db	0
  1515  0015CB  00                 	db	0
  1516  0015CC  00                 	db	0
  1517  0015CD  00                 	db	0
  1518  0015CE  00                 	db	0
  1519  0015CF  00                 	db	0
  1520  0015D0  00                 	db	0
  1521  0015D1  00                 	db	0
  1522  0015D2  00                 	db	0
  1523  0015D3  00                 	db	0
  1524  0015D4  00                 	db	0
  1525  0015D5  00                 	db	0
  1526  0015D6  00                 	db	0
  1527  0015D7  00                 	db	0
  1528  0015D8  00                 	db	0
  1529  0015D9  00                 	db	0
  1530  0015DA  00                 	db	0
  1531  0015DB  00                 	db	0
  1532  0015DC  00                 	db	0
  1533  0015DD  00                 	db	0
  1534  0015DE  00                 	db	0
  1535  0015DF  00                 	db	0
  1536  0015E0  00                 	db	0
  1537  0015E1  00                 	db	0
  1538  0015E2  00                 	db	0
  1539  0015E3  00                 	db	0
  1540  0015E4  00                 	db	0
  1541  0015E5  00                 	db	0
  1542  0015E6  00                 	db	0
  1543  0015E7  00                 	db	0
  1544  0015E8  00                 	db	0
  1545  0015E9  00                 	db	0
  1546  0015EA  00                 	db	0
  1547  0015EB  00                 	db	0
  1548  0015EC  00                 	db	0
  1549  0015ED  00                 	db	0
  1550  0015EE  00                 	db	0
  1551  0015EF  00                 	db	0
  1552  0015F0  00                 	db	0
  1553  0015F1  00                 	db	0
  1554  0015F2  00                 	db	0
  1555  0015F3  00                 	db	0
  1556  0015F4  00                 	db	0
  1557  0015F5  00                 	db	0
  1558  0015F6  00                 	db	0
  1559  0015F7  00                 	db	0
  1560  0015F8  00                 	db	0
  1561  0015F9  00                 	db	0
  1562  0015FA  00                 	db	0
  1563  0015FB  00                 	db	0
  1564  0015FC  00                 	db	0
  1565  0015FD  00                 	db	0
  1566  0015FE  00                 	db	0
  1567  0015FF  00                 	db	0
  1568  001600  00                 	db	0
  1569  001601  00                 	db	0
  1570  001602  00                 	db	0
  1571  001603  00                 	db	0
  1572  001604  00                 	db	0
  1573  001605  00                 	db	0
  1574  001606  00                 	db	0
  1575  001607  00                 	db	0
  1576  001608  00                 	db	0
  1577  001609  00                 	db	0
  1578  00160A  00                 	db	0
  1579  00160B  00                 	db	0
  1580  00160C  00                 	db	0
  1581  00160D  00                 	db	0
  1582  00160E  00                 	db	0
  1583  00160F  00                 	db	0
  1584  001610  00                 	db	0
  1585  001611  00                 	db	0
  1586  001612  00                 	db	0
  1587  001613  00                 	db	0
  1588  001614  00                 	db	0
  1589  001615  00                 	db	0
  1590  001616  00                 	db	0
  1591  001617  00                 	db	0
  1592  001618  00                 	db	0
  1593  001619  00                 	db	0
  1594  00161A  00                 	db	0
  1595  00161B  00                 	db	0
  1596  00161C  00                 	db	0
  1597  00161D  00                 	db	0
  1598  00161E  00                 	db	0
  1599  00161F  00                 	db	0
  1600  001620  00                 	db	0
  1601  001621  00                 	db	0
  1602  001622  00                 	db	0
  1603  001623  00                 	db	0
  1604  001624  00                 	db	0
  1605  001625  00                 	db	0
  1606  001626  00                 	db	0
  1607  001627  00                 	db	0
  1608  001628  00                 	db	0
  1609  001629  00                 	db	0
  1610  00162A  00                 	db	0
  1611  00162B  00                 	db	0
  1612  00162C  00                 	db	0
  1613  00162D  00                 	db	0
  1614  00162E  00                 	db	0
  1615  00162F  00                 	db	0
  1616  001630  00                 	db	0
  1617  001631  00                 	db	0
  1618  001632  00                 	db	0
  1619  001633  00                 	db	0
  1620  001634  00                 	db	0
  1621  001635  00                 	db	0
  1622  001636  00                 	db	0
  1623  001637  00                 	db	0
  1624  001638  00                 	db	0
  1625  001639  00                 	db	0
  1626  00163A  00                 	db	0
  1627  00163B  00                 	db	0
  1628  00163C  00                 	db	0
  1629  00163D  00                 	db	0
  1630  00163E  00                 	db	0
  1631  00163F  00                 	db	0
  1632  001640  00                 	db	0
  1633  001641  00                 	db	0
  1634  001642  00                 	db	0
  1635  001643  00                 	db	0
  1636  001644  00                 	db	0
  1637  001645  00                 	db	0
  1638  001646  00                 	db	0
  1639  001647  00                 	db	0
  1640  001648  00                 	db	0
  1641  001649  00                 	db	0
  1642  00164A  00                 	db	0
  1643  00164B  00                 	db	0
  1644  00164C  00                 	db	0
  1645  00164D  00                 	db	0
  1646  00164E  00                 	db	0
  1647  00164F  00                 	db	0
  1648  001650  00                 	db	0
  1649  001651  00                 	db	0
  1650  001652  00                 	db	0
  1651  001653  00                 	db	0
  1652  001654  00                 	db	0
  1653  001655  00                 	db	0
  1654  001656  00                 	db	0
  1655  001657  00                 	db	0
  1656  001658  00                 	db	0
  1657  001659  00                 	db	0
  1658  00165A  00                 	db	0
  1659  00165B  00                 	db	0
  1660  00165C  00                 	db	0
  1661  00165D  00                 	db	0
  1662  00165E  00                 	db	0
  1663  00165F  00                 	db	0
  1664  001660  00                 	db	0
  1665  001661  00                 	db	0
  1666  001662  00                 	db	0
  1667  001663  00                 	db	0
  1668  001664  00                 	db	0
  1669  001665  00                 	db	0
  1670  001666  00                 	db	0
  1671  001667  00                 	db	0
  1672  001668  00                 	db	0
  1673  001669  00                 	db	0
  1674  00166A  00                 	db	0
  1675  00166B  00                 	db	0
  1676  00166C  00                 	db	0
  1677  00166D  00                 	db	0
  1678  00166E  00                 	db	0
  1679  00166F  00                 	db	0
  1680  001670  00                 	db	0
  1681  001671  00                 	db	0
  1682  001672  00                 	db	0
  1683  001673  00                 	db	0
  1684  001674  00                 	db	0
  1685  001675  00                 	db	0
  1686  001676  00                 	db	0
  1687  001677  00                 	db	0
  1688  001678  00                 	db	0
  1689  001679  00                 	db	0
  1690  00167A  00                 	db	0
  1691  00167B  00                 	db	0
  1692  00167C  00                 	db	0
  1693  00167D  00                 	db	0
  1694  00167E  00                 	db	0
  1695  00167F  00                 	db	0
  1696  001680  00                 	db	0
  1697  001681  00                 	db	0
  1698  001682  00                 	db	0
  1699  001683  00                 	db	0
  1700  001684  00                 	db	0
  1701  001685  00                 	db	0
  1702  001686  00                 	db	0
  1703  001687  00                 	db	0
  1704  001688  00                 	db	0
  1705  001689  00                 	db	0
  1706  00168A  00                 	db	0
  1707  00168B  00                 	db	0
  1708  00168C  00                 	db	0
  1709  00168D  00                 	db	0
  1710  00168E  00                 	db	0
  1711  00168F  00                 	db	0
  1712  001690  00                 	db	0
  1713  001691  00                 	db	0
  1714  001692  00                 	db	0
  1715  001693  00                 	db	0
  1716  001694  00                 	db	0
  1717  001695  00                 	db	0
  1718  001696  00                 	db	0
  1719  001697  00                 	db	0
  1720  001698  00                 	db	0
  1721  001699  00                 	db	0
  1722  00169A  00                 	db	0
  1723  00169B  00                 	db	0
  1724  00169C  00                 	db	0
  1725  00169D  00                 	db	0
  1726  00169E  00                 	db	0
  1727  00169F  00                 	db	0
  1728  0016A0  00                 	db	0
  1729  0016A1  00                 	db	0
  1730  0016A2  00                 	db	0
  1731  0016A3  00                 	db	0
  1732  0016A4  00                 	db	0
  1733  0016A5  00                 	db	0
  1734  0016A6  00                 	db	0
  1735  0016A7  00                 	db	0
  1736  0016A8  00                 	db	0
  1737  0016A9  00                 	db	0
  1738  0016AA  00                 	db	0
  1739  0016AB  00                 	db	0
  1740  0016AC  00                 	db	0
  1741  0016AD  00                 	db	0
  1742  0016AE  00                 	db	0
  1743  0016AF  00                 	db	0
  1744  0016B0  00                 	db	0
  1745  0016B1  00                 	db	0
  1746  0016B2  00                 	db	0
  1747  0016B3  00                 	db	0
  1748  0016B4  00                 	db	0
  1749  0016B5  00                 	db	0
  1750  0016B6  00                 	db	0
  1751  0016B7  00                 	db	0
  1752  0016B8  00                 	db	0
  1753  0016B9  00                 	db	0
  1754  0016BA  00                 	db	0
  1755  0016BB  00                 	db	0
  1756  0016BC  00                 	db	0
  1757  0016BD  00                 	db	0
  1758  0016BE  00                 	db	0
  1759  0016BF  00                 	db	0
  1760  0016C0  00                 	db	0
  1761  0016C1  00                 	db	0
  1762  0016C2  00                 	db	0
  1763  0016C3  00                 	db	0
  1764  0016C4  00                 	db	0
  1765  0016C5  00                 	db	0
  1766  0016C6  00                 	db	0
  1767  0016C7  00                 	db	0
  1768  0016C8  00                 	db	0
  1769  0016C9  00                 	db	0
  1770  0016CA  00                 	db	0
  1771  0016CB  00                 	db	0
  1772  0016CC  00                 	db	0
  1773  0016CD  00                 	db	0
  1774  0016CE  00                 	db	0
  1775  0016CF  00                 	db	0
  1776  0016D0  00                 	db	0
  1777  0016D1  00                 	db	0
  1778  0016D2  00                 	db	0
  1779  0016D3  00                 	db	0
  1780  0016D4  00                 	db	0
  1781  0016D5  00                 	db	0
  1782  0016D6  00                 	db	0
  1783  0016D7  00                 	db	0
  1784  0016D8  00                 	db	0
  1785  0016D9  00                 	db	0
  1786  0016DA  00                 	db	0
  1787  0016DB  00                 	db	0
  1788  0016DC  00                 	db	0
  1789  0016DD  00                 	db	0
  1790  0016DE  00                 	db	0
  1791  0016DF  00                 	db	0
  1792  0016E0  00                 	db	0
  1793  0016E1  00                 	db	0
  1794  0016E2  00                 	db	0
  1795  0016E3  00                 	db	0
  1796  0016E4  00                 	db	0
  1797  0016E5  00                 	db	0
  1798  0016E6  00                 	db	0
  1799  0016E7  00                 	db	0
  1800  0016E8  00                 	db	0
  1801  0016E9  00                 	db	0
  1802  0016EA  00                 	db	0
  1803  0016EB  00                 	db	0
  1804  0016EC  00                 	db	0
  1805  0016ED  00                 	db	0
  1806  0016EE  00                 	db	0
  1807  0016EF  00                 	db	0
  1808  0016F0  00                 	db	0
  1809  0016F1  00                 	db	0
  1810  0016F2  00                 	db	0
  1811  0016F3  00                 	db	0
  1812  0016F4  00                 	db	0
  1813  0016F5  00                 	db	0
  1814  0016F6  00                 	db	0
  1815  0016F7  00                 	db	0
  1816  0016F8  00                 	db	0
  1817  0016F9  00                 	db	0
  1818  0016FA  00                 	db	0
  1819  0016FB  00                 	db	0
  1820  0016FC  00                 	db	0
  1821  0016FD  00                 	db	0
  1822  0016FE  00                 	db	0
  1823  0016FF  00                 	db	0
  1824  001700  00                 	db	0
  1825  001701  00                 	db	0
  1826  001702  00                 	db	0
  1827  001703  00                 	db	0
  1828  001704  00                 	db	0
  1829  001705  00                 	db	0
  1830  001706  00                 	db	0
  1831  001707  00                 	db	0
  1832  001708  00                 	db	0
  1833  001709  00                 	db	0
  1834  00170A  00                 	db	0
  1835  00170B  00                 	db	0
  1836  00170C  00                 	db	0
  1837  00170D  00                 	db	0
  1838  00170E  00                 	db	0
  1839  00170F  00                 	db	0
  1840  001710  00                 	db	0
  1841  001711  00                 	db	0
  1842  001712  00                 	db	0
  1843  001713  00                 	db	0
  1844  001714  00                 	db	0
  1845  001715  00                 	db	0
  1846  001716  00                 	db	0
  1847  001717  00                 	db	0
  1848  001718  00                 	db	0
  1849  001719  00                 	db	0
  1850  00171A  00                 	db	0
  1851  00171B  00                 	db	0
  1852  00171C  00                 	db	0
  1853  00171D  00                 	db	0
  1854  00171E  00                 	db	0
  1855  00171F  00                 	db	0
  1856  001720  00                 	db	0
  1857  001721  00                 	db	0
  1858  001722  00                 	db	0
  1859  001723  00                 	db	0
  1860  001724  00                 	db	0
  1861  001725  00                 	db	0
  1862  001726  00                 	db	0
  1863  001727  00                 	db	0
  1864  001728  00                 	db	0
  1865  001729  00                 	db	0
  1866  00172A  00                 	db	0
  1867  00172B  00                 	db	0
  1868  00172C  00                 	db	0
  1869  00172D  00                 	db	0
  1870  00172E  00                 	db	0
  1871  00172F  00                 	db	0
  1872  001730  00                 	db	0
  1873  001731  00                 	db	0
  1874  001732  00                 	db	0
  1875  001733  00                 	db	0
  1876  001734  00                 	db	0
  1877  001735  00                 	db	0
  1878  001736  00                 	db	0
  1879  001737  00                 	db	0
  1880  001738  00                 	db	0
  1881  001739  00                 	db	0
  1882  00173A  00                 	db	0
  1883  00173B  00                 	db	0
  1884  00173C  00                 	db	0
  1885  00173D  00                 	db	0
  1886  00173E  00                 	db	0
  1887  00173F  00                 	db	0
  1888  001740  00                 	db	0
  1889  001741  00                 	db	0
  1890  001742  00                 	db	0
  1891  001743  00                 	db	0
  1892  001744  00                 	db	0
  1893  001745  00                 	db	0
  1894  001746  00                 	db	0
  1895  001747  00                 	db	0
  1896  001748  00                 	db	0
  1897  001749  00                 	db	0
  1898  00174A  00                 	db	0
  1899  00174B  00                 	db	0
  1900  00174C  00                 	db	0
  1901  00174D  00                 	db	0
  1902  00174E  00                 	db	0
  1903  00174F  00                 	db	0
  1904  001750  00                 	db	0
  1905  001751  00                 	db	0
  1906  001752  00                 	db	0
  1907  001753  00                 	db	0
  1908  001754  00                 	db	0
  1909  001755  00                 	db	0
  1910  001756  00                 	db	0
  1911  001757  00                 	db	0
  1912  001758  00                 	db	0
  1913  001759  00                 	db	0
  1914  00175A  00                 	db	0
  1915  00175B  00                 	db	0
  1916  00175C  00                 	db	0
  1917  00175D  00                 	db	0
  1918  00175E  00                 	db	0
  1919  00175F  00                 	db	0
  1920  001760  00                 	db	0
  1921  001761  00                 	db	0
  1922  001762  00                 	db	0
  1923  001763  00                 	db	0
  1924  001764  00                 	db	0
  1925  001765  00                 	db	0
  1926  001766  00                 	db	0
  1927  001767  00                 	db	0
  1928  001768  00                 	db	0
  1929  001769  00                 	db	0
  1930  00176A  00                 	db	0
  1931  00176B  00                 	db	0
  1932  00176C  00                 	db	0
  1933  00176D  00                 	db	0
  1934  00176E  00                 	db	0
  1935  00176F  00                 	db	0
  1936  001770  00                 	db	0
  1937  001771  00                 	db	0
  1938  001772  00                 	db	0
  1939  001773  00                 	db	0
  1940  001774  00                 	db	0
  1941  001775  00                 	db	0
  1942  001776  00                 	db	0
  1943  001777  00                 	db	0
  1944  001778  00                 	db	0
  1945  001779  00                 	db	0
  1946  00177A  00                 	db	0
  1947  00177B  00                 	db	0
  1948  00177C  00                 	db	0
  1949  00177D  00                 	db	0
  1950  00177E  00                 	db	0
  1951  00177F  00                 	db	0
  1952  001780  00                 	db	0
  1953  001781  00                 	db	0
  1954  001782  00                 	db	0
  1955  001783  00                 	db	0
  1956  001784  00                 	db	0
  1957  001785  00                 	db	0
  1958  001786  00                 	db	0
  1959  001787  00                 	db	0
  1960  001788  00                 	db	0
  1961  001789  00                 	db	0
  1962  00178A  00                 	db	0
  1963  00178B  00                 	db	0
  1964  00178C  00                 	db	0
  1965  00178D  00                 	db	0
  1966  00178E  00                 	db	0
  1967  00178F  00                 	db	0
  1968  001790  00                 	db	0
  1969  001791  00                 	db	0
  1970  001792  00                 	db	0
  1971  001793  00                 	db	0
  1972  001794  00                 	db	0
  1973  001795  00                 	db	0
  1974  001796  00                 	db	0
  1975  001797  00                 	db	0
  1976  001798  00                 	db	0
  1977  001799  00                 	db	0
  1978  00179A  00                 	db	0
  1979  00179B  00                 	db	0
  1980  00179C  00                 	db	0
  1981  00179D  00                 	db	0
  1982  00179E  00                 	db	0
  1983  00179F  00                 	db	0
  1984  0017A0  00                 	db	0
  1985  0017A1  00                 	db	0
  1986  0017A2  00                 	db	0
  1987  0017A3  00                 	db	0
  1988  0017A4  00                 	db	0
  1989  0017A5  00                 	db	0
  1990  0017A6  00                 	db	0
  1991  0017A7  00                 	db	0
  1992  0017A8  00                 	db	0
  1993  0017A9  00                 	db	0
  1994  0017AA  00                 	db	0
  1995  0017AB  00                 	db	0
  1996  0017AC  00                 	db	0
  1997  0017AD  00                 	db	0
  1998  0017AE  00                 	db	0
  1999  0017AF  00                 	db	0
  2000  0017B0  00                 	db	0
  2001  0017B1  00                 	db	0
  2002  0017B2  00                 	db	0
  2003  0017B3  00                 	db	0
  2004  0017B4  00                 	db	0
  2005  0017B5  00                 	db	0
  2006  0017B6  00                 	db	0
  2007  0017B7  00                 	db	0
  2008  0017B8  00                 	db	0
  2009  0017B9  00                 	db	0
  2010  0017BA  00                 	db	0
  2011  0017BB  00                 	db	0
  2012  0017BC  00                 	db	0
  2013  0017BD  00                 	db	0
  2014  0017BE  00                 	db	0
  2015  0017BF  00                 	db	0
  2016  0017C0  00                 	db	0
  2017  0017C1  00                 	db	0
  2018  0017C2  00                 	db	0
  2019  0017C3  00                 	db	0
  2020  0017C4  00                 	db	0
  2021  0017C5  00                 	db	0
  2022  0017C6  00                 	db	0
  2023  0017C7  00                 	db	0
  2024  0017C8  00                 	db	0
  2025  0017C9  00                 	db	0
  2026  0017CA  00                 	db	0
  2027  0017CB  00                 	db	0
  2028  0017CC  00                 	db	0
  2029  0017CD  00                 	db	0
  2030  0017CE  00                 	db	0
  2031  0017CF  00                 	db	0
  2032  0017D0  00                 	db	0
  2033  0017D1  00                 	db	0
  2034  0017D2  00                 	db	0
  2035  0017D3  00                 	db	0
  2036  0017D4  00                 	db	0
  2037  0017D5  00                 	db	0
  2038  0017D6  00                 	db	0
  2039  0017D7  00                 	db	0
  2040  0017D8  00                 	db	0
  2041  0017D9  00                 	db	0
  2042  0017DA  00                 	db	0
  2043  0017DB  00                 	db	0
  2044  0017DC  00                 	db	0
  2045  0017DD  00                 	db	0
  2046  0017DE  00                 	db	0
  2047  0017DF  00                 	db	0
  2048  0017E0  00                 	db	0
  2049  0017E1  00                 	db	0
  2050  0017E2  00                 	db	0
  2051  0017E3  00                 	db	0
  2052  0017E4  00                 	db	0
  2053  0017E5  00                 	db	0
  2054  0017E6  00                 	db	0
  2055  0017E7  00                 	db	0
  2056  0017E8  00                 	db	0
  2057  0017E9  00                 	db	0
  2058  0017EA  00                 	db	0
  2059  0017EB  00                 	db	0
  2060  0017EC  00                 	db	0
  2061  0017ED  00                 	db	0
  2062  0017EE  00                 	db	0
  2063  0017EF  00                 	db	0
  2064  0017F0  00                 	db	0
  2065  0017F1  00                 	db	0
  2066  0017F2  00                 	db	0
  2067  0017F3  00                 	db	0
  2068  0017F4  00                 	db	0
  2069  0017F5  00                 	db	0
  2070  0017F6  00                 	db	0
  2071  0017F7  00                 	db	0
  2072  0017F8  00                 	db	0
  2073  0017F9  00                 	db	0
  2074  0017FA  00                 	db	0
  2075  0017FB  00                 	db	0
  2076  0017FC  00                 	db	0
  2077  0017FD  00                 	db	0
  2078  0017FE  00                 	db	0
  2079  0017FF  00                 	db	0
  2080  001800  00                 	db	0
  2081  001801  00                 	db	0
  2082  001802  00                 	db	0
  2083  001803  00                 	db	0
  2084  001804  00                 	db	0
  2085  001805  00                 	db	0
  2086                           
  2087                           	psect	smallconst
  2088  001000                     __psmallconst:
  2089                           	opt stack 0
  2090  001000  00                 	db	0
  2091  001001                     _virtualMemory_size:
  2092                           	opt stack 0
  2093  001001  0800               	dw	2048
  2094  001003  0000               	dw	0
  2095  001005                     __end_of_virtualMemory_size:
  2096                           	opt stack 0
  2097  0000                     _ANSELD	set	3899
  2098  0000                     _BAUDCON2bits	set	3952
  2099  0000                     _LATA	set	3977
  2100  0000                     _LATAbits	set	3977
  2101  0000                     _LATC	set	3979
  2102  0000                     _LATCbits	set	3979
  2103  0000                     _LATD	set	3980
  2104  0000                     _LATDbits	set	3980
  2105  0000                     _LATE	set	3981
  2106  0000                     _LATEbits	set	3981
  2107  0000                     _OSCCON2bits	set	4050
  2108  0000                     _OSCCONbits	set	4051
  2109  0000                     _RCREG2	set	3956
  2110  0000                     _RCSTA2bits	set	3953
  2111  0000                     _SPBRG2	set	3957
  2112  0000                     _SPBRGH2	set	3958
  2113  0000                     _TRISA	set	3986
  2114  0000                     _TRISC	set	3988
  2115  0000                     _TRISDbits	set	3989
  2116  0000                     _TRISE	set	3990
  2117  0000                     _TXREG2	set	3955
  2118  0000                     _TXSTA2bits	set	3954
  2119                           
  2120                           ; #config settings
  2121  001005  00                 	db	0	; dummy byte at the end
  2122  0000                     
  2123                           	psect	cinit
  2124  00260A                     __pcinit:
  2125                           	opt stack 0
  2126  00260A                     start_initialization:
  2127                           	opt stack 0
  2128  00260A                     __initialization:
  2129                           	opt stack 0
  2130                           
  2131                           ; Clear objects allocated to BANK1 (256 bytes)
  2132  00260A  EE01  F000         	lfsr	0,__pbssBANK1
  2133  00260E  EE11 F000          	lfsr	1,256
  2134  002612                     clear_0:
  2135  002612  6AEE               	clrf	postinc0,c
  2136  002614  50E5               	movf	postdec1,w,c
  2137  002616  50E1               	movf	fsr1l,w,c
  2138  002618  E1FC               	bnz	clear_0
  2139  00261A  50E2               	movf	fsr1h,w,c
  2140  00261C  E1FA               	bnz	clear_0
  2141                           
  2142                           ; Clear objects allocated to COMRAM (15 bytes)
  2143  00261E  EE00  F014         	lfsr	0,__pbssCOMRAM
  2144  002622  0E0F               	movlw	15
  2145  002624                     clear_1:
  2146  002624  6AEE               	clrf	postinc0,c
  2147  002626  06E8               	decf	wreg,f,c
  2148  002628  E1FD               	bnz	clear_1
  2149                           
  2150                           ; Initialize objects allocated to BIGRAM (2048 bytes)
  2151                           ; load TBLPTR registers with __pidataBIGRAM
  2152  00262A  0E06               	movlw	low __pidataBIGRAM
  2153  00262C  6EF6               	movwf	tblptrl,c
  2154  00262E  0E10               	movlw	high __pidataBIGRAM
  2155  002630  6EF7               	movwf	tblptrh,c
  2156  002632  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
  2157  002634  6EF8               	movwf	tblptru,c
  2158  002636  EE02  F000         	lfsr	0,__pdataBIGRAM
  2159  00263A  EE18 F000          	lfsr	1,2048
  2160  00263E                     copy_data0:
  2161  00263E  0009               	tblrd		*+
  2162  002640  CFF5 FFEE          	movff	tablat,postinc0
  2163  002644  50E5               	movf	postdec1,w,c
  2164  002646  50E1               	movf	fsr1l,w,c
  2165  002648  E1FA               	bnz	copy_data0
  2166  00264A  50E2               	movf	fsr1h,w,c
  2167  00264C  E1F8               	bnz	copy_data0
  2168  00264E                     end_of_initialization:
  2169                           	opt stack 0
  2170  00264E                     __end_of__initialization:
  2171                           	opt stack 0
  2172  00264E  0100               	movlb	0
  2173  002650  EFCB  F012         	goto	_main	;jump to C main() function
  2174                           tblptru	equ	0xFF8
  2175                           tblptrh	equ	0xFF7
  2176                           tblptrl	equ	0xFF6
  2177                           tablat	equ	0xFF5
  2178                           postinc0	equ	0xFEE
  2179                           wreg	equ	0xFE8
  2180                           postdec1	equ	0xFE5
  2181                           fsr1h	equ	0xFE2
  2182                           fsr1l	equ	0xFE1
  2183                           
  2184                           	psect	bssCOMRAM
  2185  000014                     __pbssCOMRAM:
  2186                           	opt stack 0
  2187  000014                     wait_ms@timel:
  2188                           	opt stack 0
  2189  000014                     	ds	4
  2190  000018                     _regMX:
  2191                           	opt stack 0
  2192  000018                     	ds	2
  2193  00001A                     _regPC:
  2194                           	opt stack 0
  2195  00001A                     	ds	2
  2196  00001C                     _haltFlag:
  2197                           	opt stack 0
  2198  00001C                     	ds	1
  2199  00001D                     _immData_1:
  2200                           	opt stack 0
  2201  00001D                     	ds	1
  2202  00001E                     _immData_2:
  2203                           	opt stack 0
  2204  00001E                     	ds	1
  2205  00001F                     _regA:
  2206                           	opt stack 0
  2207  00001F                     	ds	1
  2208  000020                     _regB:
  2209                           	opt stack 0
  2210  000020                     	ds	1
  2211  000021                     _regF:
  2212                           	opt stack 0
  2213  000021                     	ds	1
  2214  000022                     _regSP:
  2215                           	opt stack 0
  2216  000022                     	ds	1
  2217                           tblptru	equ	0xFF8
  2218                           tblptrh	equ	0xFF7
  2219                           tblptrl	equ	0xFF6
  2220                           tablat	equ	0xFF5
  2221                           postinc0	equ	0xFEE
  2222                           wreg	equ	0xFE8
  2223                           postdec1	equ	0xFE5
  2224                           fsr1h	equ	0xFE2
  2225                           fsr1l	equ	0xFE1
  2226                           
  2227                           	psect	bssBANK1
  2228  000100                     __pbssBANK1:
  2229                           	opt stack 0
  2230  000100                     _stack:
  2231                           	opt stack 0
  2232  000100                     	ds	256
  2233                           tblptru	equ	0xFF8
  2234                           tblptrh	equ	0xFF7
  2235                           tblptrl	equ	0xFF6
  2236                           tablat	equ	0xFF5
  2237                           postinc0	equ	0xFEE
  2238                           wreg	equ	0xFE8
  2239                           postdec1	equ	0xFE5
  2240                           fsr1h	equ	0xFE2
  2241                           fsr1l	equ	0xFE1
  2242                           
  2243                           	psect	dataBIGRAM
  2244  000200                     __pdataBIGRAM:
  2245                           	opt stack 0
  2246  000200                     _virtualMemory:
  2247                           	opt stack 0
  2248  000200                     	ds	2048
  2249                           tblptru	equ	0xFF8
  2250                           tblptrh	equ	0xFF7
  2251                           tblptrl	equ	0xFF6
  2252                           tablat	equ	0xFF5
  2253                           postinc0	equ	0xFEE
  2254                           wreg	equ	0xFE8
  2255                           postdec1	equ	0xFE5
  2256                           fsr1h	equ	0xFE2
  2257                           fsr1l	equ	0xFE1
  2258                           
  2259                           	psect	cstackCOMRAM
  2260  000001                     __pcstackCOMRAM:
  2261                           	opt stack 0
  2262  000001                     ??_initializeRegisters:
  2263  000001                     ??_update_immData:
  2264  000001                     ?_immData_toPointer:
  2265                           	opt stack 0
  2266  000001                     ?___wmul:
  2267                           	opt stack 0
  2268  000001                     dispSeg@letter:
  2269                           	opt stack 0
  2270  000001                     hexToChar@number:
  2271                           	opt stack 0
  2272  000001                     setMXbits@value:
  2273                           	opt stack 0
  2274  000001                     getFbits@subRegister:
  2275                           	opt stack 0
  2276  000001                     setFbits@value:
  2277                           	opt stack 0
  2278  000001                     getPortData@portNumber:
  2279                           	opt stack 0
  2280  000001                     getMXbits@regMX_temp:
  2281                           	opt stack 0
  2282  000001                     enableSerial@baudRate:
  2283                           	opt stack 0
  2284  000001                     ___wmul@multiplier:
  2285                           	opt stack 0
  2286                           
  2287                           ; 2 bytes @ 0x0
  2288  000001                     	ds	1
  2289  000002                     ??_setFbits:
  2290  000002                     dispSeg@segment:
  2291                           	opt stack 0
  2292  000002                     getFbits@regF_temp:
  2293                           	opt stack 0
  2294  000002                     setMXbits@value_temp:
  2295                           	opt stack 0
  2296                           
  2297                           ; 2 bytes @ 0x1
  2298  000002                     	ds	1
  2299  000003                     ??_enableSerial:
  2300  000003                     getMXbits@subRegister:
  2301                           	opt stack 0
  2302  000003                     setFbits@subRegister:
  2303                           	opt stack 0
  2304  000003                     immData_toPointer@pointer:
  2305                           	opt stack 0
  2306  000003                     ___wmul@multiplicand:
  2307                           	opt stack 0
  2308                           
  2309                           ; 2 bytes @ 0x2
  2310  000003                     	ds	1
  2311  000004                     setFbits@regF_temp1:
  2312                           	opt stack 0
  2313  000004                     setMXbits@regMX_temp:
  2314                           	opt stack 0
  2315                           
  2316                           ; 2 bytes @ 0x3
  2317  000004                     	ds	1
  2318  000005                     setFbits@regF_temp2:
  2319                           	opt stack 0
  2320  000005                     setPortData@outputData:
  2321                           	opt stack 0
  2322  000005                     ___wmul@product:
  2323                           	opt stack 0
  2324                           
  2325                           ; 2 bytes @ 0x4
  2326  000005                     	ds	1
  2327  000006                     setMXbits@subRegister:
  2328                           	opt stack 0
  2329  000006                     setPortData@portNumber:
  2330                           	opt stack 0
  2331                           
  2332                           ; 1 bytes @ 0x5
  2333  000006                     	ds	1
  2334  000007                     wait_ms@time:
  2335                           	opt stack 0
  2336  000007                     setPortData@outputData_temp16:
  2337                           	opt stack 0
  2338                           
  2339                           ; 2 bytes @ 0x6
  2340  000007                     	ds	2
  2341  000009                     setPortData@outputData_temp8:
  2342                           	opt stack 0
  2343                           
  2344                           ; 1 bytes @ 0x8
  2345  000009                     	ds	1
  2346  00000A                     ??_processOpcode:
  2347                           
  2348                           ; 0 bytes @ 0x9
  2349  00000A                     	ds	3
  2350  00000D                     processOpcode@regPC_temp:
  2351                           	opt stack 0
  2352                           
  2353                           ; 2 bytes @ 0xC
  2354  00000D                     	ds	2
  2355  00000F                     processOpcode@carriedBit:
  2356                           	opt stack 0
  2357                           
  2358                           ; 1 bytes @ 0xE
  2359  00000F                     	ds	1
  2360  000010                     processOpcode@regA_temp8:
  2361                           	opt stack 0
  2362                           
  2363                           ; 1 bytes @ 0xF
  2364  000010                     	ds	1
  2365  000011                     processOpcode@regA_temp16:
  2366                           	opt stack 0
  2367                           
  2368                           ; 2 bytes @ 0x10
  2369  000011                     	ds	2
  2370  000013                     ??_main:
  2371                           
  2372                           ; 0 bytes @ 0x12
  2373  000013                     	ds	1
  2374                           tblptru	equ	0xFF8
  2375                           tblptrh	equ	0xFF7
  2376                           tblptrl	equ	0xFF6
  2377                           tablat	equ	0xFF5
  2378                           postinc0	equ	0xFEE
  2379                           wreg	equ	0xFE8
  2380                           postdec1	equ	0xFE5
  2381                           fsr1h	equ	0xFE2
  2382                           fsr1l	equ	0xFE1
  2383                           
  2384 ;;
  2385 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2386 ;;
  2387 ;; *************** function _main *****************
  2388 ;; Defined at:
  2389 ;;		line 19 in file "source/main.c"
  2390 ;; Parameters:    Size  Location     Type
  2391 ;;		None
  2392 ;; Auto vars:     Size  Location     Type
  2393 ;;		None
  2394 ;; Return value:  Size  Location     Type
  2395 ;;		None               void
  2396 ;; Registers used:
  2397 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2398 ;; Tracked objects:
  2399 ;;		On entry : 0/0
  2400 ;;		On exit  : 0/0
  2401 ;;		Unchanged: 0/0
  2402 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2405 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2406 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2407 ;;Total ram usage:        1 bytes
  2408 ;; Hardware stack levels required when called:    3
  2409 ;; This function calls:
  2410 ;;		_dispSeg
  2411 ;;		_initOscillator
  2412 ;;		_initPorts
  2413 ;;		_initializeRegisters
  2414 ;;		_processOpcode
  2415 ;;		_wait_ms
  2416 ;; This function is called by:
  2417 ;;		Startup code after reset
  2418 ;; This function uses a non-reentrant model
  2419 ;;
  2420                           
  2421                           	psect	text0
  2422  002596                     __ptext0:
  2423                           	opt stack 0
  2424  002596                     _main:
  2425                           	opt stack 28
  2426                           
  2427                           ;main.c: 21: initOscillator();
  2428                           
  2429                           ;incstack = 0
  2430  002596  ECDD  F013         	call	_initOscillator	;wreg free
  2431                           
  2432                           ;main.c: 22: initPorts();
  2433  00259A  EC9E  F013         	call	_initPorts	;wreg free
  2434                           
  2435                           ;main.c: 23: dispSeg(1, '-'); dispSeg(2, '-');
  2436  00259E  6E13               	movwf	??_main& (0+255),c
  2437  0025A0  0E2D               	movlw	45
  2438  0025A2  6E01               	movwf	dispSeg@letter,c
  2439  0025A4  5013               	movf	??_main& (0+255),w,c
  2440  0025A6  0E01               	movlw	1
  2441  0025A8  ECE5  F00F         	call	_dispSeg
  2442  0025AC  6E13               	movwf	??_main& (0+255),c
  2443  0025AE  0E2D               	movlw	45
  2444  0025B0  6E01               	movwf	dispSeg@letter,c
  2445  0025B2  5013               	movf	??_main& (0+255),w,c
  2446  0025B4  0E02               	movlw	2
  2447  0025B6  ECE5  F00F         	call	_dispSeg
  2448                           
  2449                           ;main.c: 25: initializeRegisters();
  2450  0025BA  EC85  F013         	call	_initializeRegisters	;wreg free
  2451                           
  2452                           ;main.c: 27: while (haltFlag == 0)
  2453  0025BE  D013               	goto	l1697
  2454  0025C0                     l1689:
  2455                           
  2456                           ;main.c: 28: {
  2457                           ;main.c: 29: if (regPC > 2047)
  2458  0025C0  0E00               	movlw	0
  2459  0025C2  5C1A               	subwf	_regPC,w,c
  2460  0025C4  0E08               	movlw	8
  2461  0025C6  581B               	subwfb	_regPC+1,w,c
  2462  0025C8  A0D8               	btfss	status,0,c
  2463  0025CA  D005               	goto	l1693
  2464                           
  2465                           ;main.c: 30: {
  2466                           ;main.c: 31: regPC = 0;
  2467  0025CC  0E00               	movlw	0
  2468  0025CE  6E1B               	movwf	_regPC+1,c
  2469  0025D0  0E00               	movlw	0
  2470  0025D2  6E1A               	movwf	_regPC,c
  2471                           
  2472                           ;main.c: 32: continue;
  2473  0025D4  D008               	goto	l1697
  2474  0025D6                     l1693:
  2475                           
  2476                           ;main.c: 33: }
  2477                           ;main.c: 35: wait_ms(1000);
  2478  0025D6  0E03               	movlw	3
  2479  0025D8  6E08               	movwf	wait_ms@time+1,c
  2480  0025DA  0EE8               	movlw	232
  2481  0025DC  6E07               	movwf	wait_ms@time,c
  2482  0025DE  EC2A  F013         	call	_wait_ms	;wreg free
  2483                           
  2484                           ;main.c: 36: processOpcode();
  2485  0025E2  EC03  F00C         	call	_processOpcode	;wreg free
  2486  0025E6                     l1697:
  2487  0025E6  501C               	movf	_haltFlag,w,c
  2488  0025E8  B4D8               	btfsc	status,2,c
  2489  0025EA  D7EA               	goto	l1689
  2490                           
  2491                           ;main.c: 37: }
  2492                           ;main.c: 40: dispSeg(1, '-'); dispSeg(2, '-');
  2493  0025EC  6E13               	movwf	??_main& (0+255),c
  2494  0025EE  0E2D               	movlw	45
  2495  0025F0  6E01               	movwf	dispSeg@letter,c
  2496  0025F2  5013               	movf	??_main& (0+255),w,c
  2497  0025F4  0E01               	movlw	1
  2498  0025F6  ECE5  F00F         	call	_dispSeg
  2499  0025FA  6E13               	movwf	??_main& (0+255),c
  2500  0025FC  0E2D               	movlw	45
  2501  0025FE  6E01               	movwf	dispSeg@letter,c
  2502  002600  5013               	movf	??_main& (0+255),w,c
  2503  002602  0E02               	movlw	2
  2504  002604  ECE5  F00F         	call	_dispSeg
  2505  002608                     l39:
  2506  002608  D7FF               	goto	l39
  2507  00260A                     __end_of_main:
  2508                           	opt stack 0
  2509                           tblptru	equ	0xFF8
  2510                           tblptrh	equ	0xFF7
  2511                           tblptrl	equ	0xFF6
  2512                           tablat	equ	0xFF5
  2513                           postinc0	equ	0xFEE
  2514                           wreg	equ	0xFE8
  2515                           postdec1	equ	0xFE5
  2516                           fsr1h	equ	0xFE2
  2517                           fsr1l	equ	0xFE1
  2518                           status	equ	0xFD8
  2519                           
  2520 ;; *************** function _wait_ms *****************
  2521 ;; Defined at:
  2522 ;;		line 50 in file "source/system.c"
  2523 ;; Parameters:    Size  Location     Type
  2524 ;;  time            2    6[COMRAM] unsigned int 
  2525 ;; Auto vars:     Size  Location     Type
  2526 ;;		None
  2527 ;; Return value:  Size  Location     Type
  2528 ;;		None               void
  2529 ;; Registers used:
  2530 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  2531 ;; Tracked objects:
  2532 ;;		On entry : 0/0
  2533 ;;		On exit  : 0/0
  2534 ;;		Unchanged: 0/0
  2535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2536 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2539 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2540 ;;Total ram usage:        2 bytes
  2541 ;; Hardware stack levels used:    1
  2542 ;; Hardware stack levels required when called:    1
  2543 ;; This function calls:
  2544 ;;		___wmul
  2545 ;; This function is called by:
  2546 ;;		_main
  2547 ;;		_cycleSegDisplays
  2548 ;; This function uses a non-reentrant model
  2549 ;;
  2550                           
  2551                           	psect	text1
  2552  002654                     __ptext1:
  2553                           	opt stack 0
  2554  002654                     _wait_ms:
  2555                           	opt stack 29
  2556                           
  2557                           ;system.c: 52: static long timel = 0;
  2558                           ;system.c: 53: timel = time * 10;
  2559                           
  2560                           ;incstack = 0
  2561  002654  C007  F001         	movff	wait_ms@time,___wmul@multiplier
  2562  002658  C008  F002         	movff	wait_ms@time+1,___wmul@multiplier+1
  2563  00265C  0E00               	movlw	0
  2564  00265E  6E04               	movwf	___wmul@multiplicand+1,c
  2565  002660  0E0A               	movlw	10
  2566  002662  6E03               	movwf	___wmul@multiplicand,c
  2567  002664  EC68  F013         	call	___wmul	;wreg free
  2568  002668  C001  F014         	movff	?___wmul,wait_ms@timel
  2569  00266C  C002  F015         	movff	?___wmul+1,wait_ms@timel+1
  2570  002670  6A16               	clrf	wait_ms@timel+2,c
  2571  002672  6A17               	clrf	wait_ms@timel+3,c
  2572                           
  2573                           ;system.c: 54: for (; timel; timel--);
  2574  002674  D008               	goto	l137
  2575  002676                     l1361:
  2576  002676  0EFF               	movlw	255
  2577  002678  2614               	addwf	wait_ms@timel,f,c
  2578  00267A  0EFF               	movlw	255
  2579  00267C  2215               	addwfc	wait_ms@timel+1,f,c
  2580  00267E  0EFF               	movlw	255
  2581  002680  2216               	addwfc	wait_ms@timel+2,f,c
  2582  002682  0EFF               	movlw	255
  2583  002684  2217               	addwfc	wait_ms@timel+3,f,c
  2584  002686                     l137:
  2585  002686  5017               	movf	wait_ms@timel+3,w,c
  2586  002688  1014               	iorwf	wait_ms@timel,w,c
  2587  00268A  1015               	iorwf	wait_ms@timel+1,w,c
  2588  00268C  1016               	iorwf	wait_ms@timel+2,w,c
  2589  00268E  B4D8               	btfsc	status,2,c
  2590  002690  0012               	return	
  2591  002692  D7F1               	goto	l1361
  2592  002694                     __end_of_wait_ms:
  2593                           	opt stack 0
  2594                           tblptru	equ	0xFF8
  2595                           tblptrh	equ	0xFF7
  2596                           tblptrl	equ	0xFF6
  2597                           tablat	equ	0xFF5
  2598                           postinc0	equ	0xFEE
  2599                           wreg	equ	0xFE8
  2600                           postdec1	equ	0xFE5
  2601                           fsr1h	equ	0xFE2
  2602                           fsr1l	equ	0xFE1
  2603                           status	equ	0xFD8
  2604                           
  2605 ;; *************** function ___wmul *****************
  2606 ;; Defined at:
  2607 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.30\sources\common\wmul.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;  multiplier      2    0[COMRAM] unsigned int 
  2610 ;;  multiplicand    2    2[COMRAM] unsigned int 
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;  product         2    4[COMRAM] unsigned int 
  2613 ;; Return value:  Size  Location     Type
  2614 ;;                  2    0[COMRAM] unsigned int 
  2615 ;; Registers used:
  2616 ;;		wreg, status,2, status,0, prodl, prodh
  2617 ;; Tracked objects:
  2618 ;;		On entry : 0/0
  2619 ;;		On exit  : 0/0
  2620 ;;		Unchanged: 0/0
  2621 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2622 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2623 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2625 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2626 ;;Total ram usage:        6 bytes
  2627 ;; Hardware stack levels used:    1
  2628 ;; This function calls:
  2629 ;;		Nothing
  2630 ;; This function is called by:
  2631 ;;		_wait_ms
  2632 ;; This function uses a non-reentrant model
  2633 ;;
  2634                           
  2635                           	psect	text2
  2636  0026D0                     __ptext2:
  2637                           	opt stack 0
  2638  0026D0                     ___wmul:
  2639                           	opt stack 29
  2640                           
  2641                           ;incstack = 0
  2642  0026D0  5001               	movf	___wmul@multiplier,w,c
  2643  0026D2  0203               	mulwf	___wmul@multiplicand,c
  2644  0026D4  CFF3 F005          	movff	prodl,___wmul@product
  2645  0026D8  CFF4 F006          	movff	prodh,___wmul@product+1
  2646  0026DC  5001               	movf	___wmul@multiplier,w,c
  2647  0026DE  0204               	mulwf	___wmul@multiplicand+1,c
  2648  0026E0  CFF3 FFF4          	movff	prodl,prodh
  2649  0026E4  6AF3               	clrf	prodl,c
  2650  0026E6  50F3               	movf	prodl,w,c
  2651  0026E8  2605               	addwf	___wmul@product,f,c
  2652  0026EA  50F4               	movf	prodh,w,c
  2653  0026EC  2206               	addwfc	___wmul@product+1,f,c
  2654  0026EE  5002               	movf	___wmul@multiplier+1,w,c
  2655  0026F0  0203               	mulwf	___wmul@multiplicand,c
  2656  0026F2  CFF3 FFF4          	movff	prodl,prodh
  2657  0026F6  6AF3               	clrf	prodl,c
  2658  0026F8  50F3               	movf	prodl,w,c
  2659  0026FA  2605               	addwf	___wmul@product,f,c
  2660  0026FC  50F4               	movf	prodh,w,c
  2661  0026FE  2206               	addwfc	___wmul@product+1,f,c
  2662  002700  C005  F001         	movff	___wmul@product,?___wmul
  2663  002704  C006  F002         	movff	___wmul@product+1,?___wmul+1
  2664  002708  0012               	return	
  2665  00270A                     __end_of___wmul:
  2666                           	opt stack 0
  2667                           tblptru	equ	0xFF8
  2668                           tblptrh	equ	0xFF7
  2669                           tblptrl	equ	0xFF6
  2670                           tablat	equ	0xFF5
  2671                           prodh	equ	0xFF4
  2672                           prodl	equ	0xFF3
  2673                           postinc0	equ	0xFEE
  2674                           wreg	equ	0xFE8
  2675                           postdec1	equ	0xFE5
  2676                           fsr1h	equ	0xFE2
  2677                           fsr1l	equ	0xFE1
  2678                           status	equ	0xFD8
  2679                           
  2680 ;; *************** function _processOpcode *****************
  2681 ;; Defined at:
  2682 ;;		line 238 in file "source/emulator.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;		None
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;  regA_temp16     2   16[COMRAM] unsigned int 
  2687 ;;  regPC_temp      2   12[COMRAM] unsigned int 
  2688 ;;  regA_temp8      1   15[COMRAM] unsigned char 
  2689 ;;  carriedBit      1   14[COMRAM] unsigned char 
  2690 ;; Return value:  Size  Location     Type
  2691 ;;		None               void
  2692 ;; Registers used:
  2693 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2694 ;; Tracked objects:
  2695 ;;		On entry : 0/0
  2696 ;;		On exit  : 0/0
  2697 ;;		Unchanged: 0/0
  2698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2700 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2701 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2702 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2703 ;;Total ram usage:        9 bytes
  2704 ;; Hardware stack levels used:    1
  2705 ;; Hardware stack levels required when called:    2
  2706 ;; This function calls:
  2707 ;;		_getFbits
  2708 ;;		_getMXbits
  2709 ;;		_getPortData
  2710 ;;		_immData_toPointer
  2711 ;;		_setFbits
  2712 ;;		_setMXbits
  2713 ;;		_setPortData
  2714 ;;		_update_immData
  2715 ;; This function is called by:
  2716 ;;		_main
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           	psect	text3
  2721  001806                     __ptext3:
  2722                           	opt stack 0
  2723  001806                     _processOpcode:
  2724                           	opt stack 28
  2725                           
  2726                           ;emulator.c: 241: update_immData();
  2727                           
  2728                           ;incstack = 0
  2729  001806  EC3B  F012         	call	_update_immData	;wreg free
  2730                           
  2731                           ;emulator.c: 244: uint8_t regA_temp8 = regA;
  2732  00180A  C01F  F010         	movff	_regA,processOpcode@regA_temp8
  2733                           
  2734                           ;emulator.c: 245: uint16_t regA_temp16 = (uint16_t) regA;
  2735  00180E  C01F  F011         	movff	_regA,processOpcode@regA_temp16
  2736  001812  6A12               	clrf	processOpcode@regA_temp16+1,c
  2737                           
  2738                           ;emulator.c: 246: uint16_t regPC_temp = regPC;
  2739  001814  C01A  F00D         	movff	_regPC,processOpcode@regPC_temp
  2740  001818  C01B  F00E         	movff	_regPC+1,processOpcode@regPC_temp+1
  2741                           
  2742                           ;emulator.c: 247: uint8_t carriedBit;
  2743                           ;emulator.c: 250: switch (virtualMemory[regPC])
  2744  00181C  D300               	goto	l1679
  2745  00181E                     l1401:
  2746                           
  2747                           ;emulator.c: 258: setFbits(0, 1);
  2748  00181E  6E0A               	movwf	??_processOpcode& (0+255),c
  2749  001820  0E01               	movlw	1
  2750  001822  6E01               	movwf	setFbits@value,c
  2751  001824  500A               	movf	??_processOpcode& (0+255),w,c
  2752  001826  0E00               	movlw	0
  2753  001828  EC4A  F013         	call	_setFbits
  2754                           
  2755                           ;emulator.c: 259: break;
  2756  00182C  D3CB               	goto	l1681
  2757  00182E                     l1403:
  2758                           
  2759                           ;emulator.c: 262: setFbits(0, 0);
  2760  00182E  6E0A               	movwf	??_processOpcode& (0+255),c
  2761  001830  0E00               	movlw	0
  2762  001832  6E01               	movwf	setFbits@value,c
  2763  001834  500A               	movf	??_processOpcode& (0+255),w,c
  2764  001836  0E00               	movlw	0
  2765  001838  EC4A  F013         	call	_setFbits
  2766                           
  2767                           ;emulator.c: 263: break;
  2768  00183C  D3C3               	goto	l1681
  2769  00183E                     l1405:
  2770                           
  2771                           ;emulator.c: 266: haltFlag = 1;
  2772  00183E  6E0A               	movwf	??_processOpcode& (0+255),c
  2773  001840  0E01               	movlw	1
  2774  001842  6E1C               	movwf	_haltFlag,c
  2775  001844  500A               	movf	??_processOpcode& (0+255),w,c
  2776                           
  2777                           ;emulator.c: 267: break;
  2778  001846  D3BE               	goto	l1681
  2779  001848                     l1407:
  2780                           
  2781                           ;emulator.c: 273: regA = getPortData(regB);
  2782  001848  5020               	movf	_regB,w,c
  2783  00184A  ECF7  F013         	call	_getPortData
  2784  00184E  D1F0               	goto	L11
  2785  001850                     l1409:
  2786                           
  2787                           ;emulator.c: 277: regA = getPortData(immData_1);
  2788  001850  501D               	movf	_immData_1,w,c
  2789  001852  ECF7  F013         	call	_getPortData
  2790  001856  6E1F               	movwf	_regA,c
  2791  001858  D2AC               	goto	L20
  2792  00185A                     l1413:
  2793                           
  2794                           ;emulator.c: 282: setPortData(regB, regA);
  2795  00185A  C01F  F005         	movff	_regA,setPortData@outputData
  2796  00185E  5020               	movf	_regB,w,c
  2797  001860  ECE7  F011         	call	_setPortData
  2798                           
  2799                           ;emulator.c: 283: break;
  2800  001864  D3AF               	goto	l1681
  2801  001866                     l1415:
  2802                           
  2803                           ;emulator.c: 286: setPortData(immData_1, regA);
  2804  001866  C01F  F005         	movff	_regA,setPortData@outputData
  2805  00186A  501D               	movf	_immData_1,w,c
  2806  00186C  ECE7  F011         	call	_setPortData
  2807  001870  D2A0               	goto	L20
  2808  001872                     l1419:
  2809                           
  2810                           ;emulator.c: 291: setPortData(immData_1, immData_2);
  2811  001872  C01E  F005         	movff	_immData_2,setPortData@outputData
  2812  001876  501D               	movf	_immData_1,w,c
  2813  001878  ECE7  F011         	call	_setPortData
  2814  00187C  D11A               	goto	l1553
  2815  00187E                     l1423:
  2816                           
  2817                           ;emulator.c: 299: regA = virtualMemory[regMX];
  2818  00187E  0E00               	movlw	low _virtualMemory
  2819  001880  2418               	addwf	_regMX,w,c
  2820  001882  6ED9               	movwf	fsr2l,c
  2821  001884  0E02               	movlw	high _virtualMemory
  2822  001886  2019               	addwfc	_regMX+1,w,c
  2823  001888  D1D1               	goto	L26
  2824  00188A                     l1425:
  2825                           
  2826                           ;emulator.c: 303: regA = getMXbits(0);
  2827  00188A  0E00               	movlw	0
  2828  00188C  EC02  F014         	call	_getMXbits
  2829  001890  D1CF               	goto	L11
  2830  001892                     l1427:
  2831                           
  2832                           ;emulator.c: 307: regA = getMXbits(1);
  2833  001892  0E01               	movlw	1
  2834  001894  EC02  F014         	call	_getMXbits
  2835  001898  D1CB               	goto	L11
  2836  00189A                     l275:
  2837                           
  2838                           ;emulator.c: 311: regA = regSP;
  2839  00189A  C022  F01F         	movff	_regSP,_regA
  2840                           
  2841                           ;emulator.c: 312: break;
  2842  00189E  D392               	goto	l1681
  2843  0018A0                     l276:
  2844                           
  2845                           ;emulator.c: 315: regA = regF;
  2846  0018A0  C021  F01F         	movff	_regF,_regA
  2847                           
  2848                           ;emulator.c: 316: break;
  2849  0018A4  D38F               	goto	l1681
  2850  0018A6                     l277:
  2851                           
  2852                           ;emulator.c: 319: regA = regB;
  2853  0018A6  C020  F01F         	movff	_regB,_regA
  2854                           
  2855                           ;emulator.c: 320: break;
  2856  0018AA  D38C               	goto	l1681
  2857  0018AC                     l1429:
  2858                           
  2859                           ;emulator.c: 332: virtualMemory[regMX] = regA;
  2860  0018AC  0E00               	movlw	low _virtualMemory
  2861  0018AE  2418               	addwf	_regMX,w,c
  2862  0018B0  6ED9               	movwf	fsr2l,c
  2863  0018B2  0E02               	movlw	high _virtualMemory
  2864  0018B4  2019               	addwfc	_regMX+1,w,c
  2865  0018B6  6EDA               	movwf	fsr2h,c
  2866  0018B8  C01F  FFDF         	movff	_regA,indf2
  2867                           
  2868                           ;emulator.c: 334: break;
  2869  0018BC  D383               	goto	l1681
  2870  0018BE                     l1431:
  2871                           
  2872                           ;emulator.c: 337: setMXbits(0, regA);
  2873  0018BE  C01F  F001         	movff	_regA,setMXbits@value
  2874  0018C2  0E00               	movlw	0
  2875  0018C4  ECB6  F013         	call	_setMXbits
  2876                           
  2877                           ;emulator.c: 338: break;
  2878  0018C8  D37D               	goto	l1681
  2879  0018CA                     l1433:
  2880                           
  2881                           ;emulator.c: 341: setMXbits(1, regA);
  2882  0018CA  C01F  F001         	movff	_regA,setMXbits@value
  2883  0018CE  0E01               	movlw	1
  2884  0018D0  ECB6  F013         	call	_setMXbits
  2885                           
  2886                           ;emulator.c: 342: break;
  2887  0018D4  D377               	goto	l1681
  2888  0018D6                     l281:
  2889                           
  2890                           ;emulator.c: 345: regSP = regA;
  2891  0018D6  C01F  F022         	movff	_regA,_regSP
  2892                           
  2893                           ;emulator.c: 346: break;
  2894  0018DA  D374               	goto	l1681
  2895  0018DC                     l282:
  2896                           
  2897                           ;emulator.c: 349: regB = regA;
  2898  0018DC  C01F  F020         	movff	_regA,_regB
  2899                           
  2900                           ;emulator.c: 350: break;
  2901  0018E0  D371               	goto	l1681
  2902  0018E2                     l283:
  2903                           
  2904                           ;emulator.c: 353: regA = immData_1;
  2905  0018E2  C01D  F01F         	movff	_immData_1,_regA
  2906  0018E6  D265               	goto	L20
  2907  0018E8                     l284:
  2908                           
  2909                           ;emulator.c: 359: regA_temp8 = regA;
  2910  0018E8  C01F  F010         	movff	_regA,processOpcode@regA_temp8
  2911                           
  2912                           ;emulator.c: 360: regA = regB;
  2913  0018EC  C020  F01F         	movff	_regB,_regA
  2914                           
  2915                           ;emulator.c: 361: regB = regA_temp8;
  2916  0018F0  C010  F020         	movff	processOpcode@regA_temp8,_regB
  2917                           
  2918                           ;emulator.c: 362: break;
  2919  0018F4  D367               	goto	l1681
  2920  0018F6                     l1437:
  2921                           
  2922                           ;emulator.c: 368: regA &= regB;
  2923  0018F6  5020               	movf	_regB,w,c
  2924  0018F8  161F               	andwf	_regA,f,c
  2925                           
  2926                           ;emulator.c: 369: break;
  2927  0018FA  D364               	goto	l1681
  2928  0018FC                     l1439:
  2929                           
  2930                           ;emulator.c: 373: regA = regA & regB;
  2931  0018FC  501F               	movf	_regA,w,c
  2932  0018FE  1420               	andwf	_regB,w,c
  2933  001900  D00B               	goto	L10
  2934  001902                     l1443:
  2935                           
  2936                           ;emulator.c: 378: regA |= regB;
  2937  001902  5020               	movf	_regB,w,c
  2938  001904  121F               	iorwf	_regA,f,c
  2939                           
  2940                           ;emulator.c: 379: break;
  2941  001906  D35E               	goto	l1681
  2942  001908                     l1445:
  2943                           
  2944                           ;emulator.c: 383: regA = regA | regB;
  2945  001908  501F               	movf	_regA,w,c
  2946  00190A  1020               	iorwf	_regB,w,c
  2947  00190C  D005               	goto	L10
  2948  00190E                     l1449:
  2949                           
  2950                           ;emulator.c: 388: regA ^= regB;
  2951  00190E  5020               	movf	_regB,w,c
  2952  001910  1A1F               	xorwf	_regA,f,c
  2953                           
  2954                           ;emulator.c: 389: break;
  2955  001912  D358               	goto	l1681
  2956  001914                     l1451:
  2957                           
  2958                           ;emulator.c: 393: regA = regA ^ regB;
  2959  001914  501F               	movf	_regA,w,c
  2960  001916  1820               	xorwf	_regB,w,c
  2961  001918                     L10:
  2962  001918  6E1F               	movwf	_regA,c
  2963  00191A                     l1455:
  2964                           
  2965                           ;emulator.c: 398: regA =~ regA;
  2966  00191A  1E1F               	comf	_regA,f,c
  2967                           
  2968                           ;emulator.c: 399: break;
  2969  00191C  D353               	goto	l1681
  2970  00191E                     l292:
  2971                           
  2972                           ;emulator.c: 403: regA_temp8 = regA;
  2973  00191E  C01F  F010         	movff	_regA,processOpcode@regA_temp8
  2974                           
  2975                           ;emulator.c: 405: if (regA_temp8 == 1) setFbits(0, 1);
  2976  001922  0410               	decf	processOpcode@regA_temp8,w,c
  2977  001924  A4D8               	btfss	status,2,c
  2978  001926  D008               	goto	l1461
  2979  001928  6E0A               	movwf	??_processOpcode& (0+255),c
  2980  00192A  0E01               	movlw	1
  2981  00192C  6E01               	movwf	setFbits@value,c
  2982  00192E  500A               	movf	??_processOpcode& (0+255),w,c
  2983  001930  0E00               	movlw	0
  2984  001932  EC4A  F013         	call	_setFbits
  2985  001936  D346               	goto	l1681
  2986  001938                     l1461:
  2987                           
  2988                           ;emulator.c: 406: else setFbits(0, 0);
  2989  001938  6E0A               	movwf	??_processOpcode& (0+255),c
  2990  00193A  0E00               	movlw	0
  2991  00193C  6E01               	movwf	setFbits@value,c
  2992  00193E  500A               	movf	??_processOpcode& (0+255),w,c
  2993  001940  0E00               	movlw	0
  2994  001942  EC4A  F013         	call	_setFbits
  2995  001946  D33E               	goto	l1681
  2996  001948                     l295:
  2997                           
  2998                           ;emulator.c: 414: regA_temp8 = regA;
  2999  001948  C01F  F010         	movff	_regA,processOpcode@regA_temp8
  3000                           
  3001                           ;emulator.c: 417: if (regA_temp8 == 1) setFbits(0, 1);
  3002  00194C  0410               	decf	processOpcode@regA_temp8,w,c
  3003  00194E  A4D8               	btfss	status,2,c
  3004  001950  D008               	goto	l1467
  3005  001952  6E0A               	movwf	??_processOpcode& (0+255),c
  3006  001954  0E01               	movlw	1
  3007  001956  6E01               	movwf	setFbits@value,c
  3008  001958  500A               	movf	??_processOpcode& (0+255),w,c
  3009  00195A  0E00               	movlw	0
  3010  00195C  EC4A  F013         	call	_setFbits
  3011  001960  D331               	goto	l1681
  3012  001962                     l1467:
  3013                           
  3014                           ;emulator.c: 418: else setFbits(0, 0);
  3015  001962  6E0A               	movwf	??_processOpcode& (0+255),c
  3016  001964  0E00               	movlw	0
  3017  001966  6E01               	movwf	setFbits@value,c
  3018  001968  500A               	movf	??_processOpcode& (0+255),w,c
  3019  00196A  0E00               	movlw	0
  3020  00196C  EC4A  F013         	call	_setFbits
  3021  001970  D329               	goto	l1681
  3022  001972                     l298:
  3023                           
  3024                           ;emulator.c: 426: carriedBit = regA;
  3025  001972  C01F  F00F         	movff	_regA,processOpcode@carriedBit
  3026                           
  3027                           ;emulator.c: 433: regA = regA + carriedBit;
  3028  001976  501F               	movf	_regA,w,c
  3029  001978  240F               	addwf	processOpcode@carriedBit,w,c
  3030  00197A  D15A               	goto	L11
  3031  00197C                     l299:
  3032                           
  3033                           ;emulator.c: 438: carriedBit = regA;
  3034  00197C  C01F  F00F         	movff	_regA,processOpcode@carriedBit
  3035                           
  3036                           ;emulator.c: 445: regA += carriedBit;
  3037  001980  500F               	movf	processOpcode@carriedBit,w,c
  3038  001982  D1B4               	goto	L12
  3039  001984                     l1473:
  3040                           
  3041                           ;emulator.c: 450: if (regA == regB) setFbits(3, 1);
  3042  001984  5020               	movf	_regB,w,c
  3043  001986  621F               	cpfseq	_regA,c
  3044  001988  D008               	goto	l1477
  3045  00198A  6E0A               	movwf	??_processOpcode& (0+255),c
  3046  00198C  0E01               	movlw	1
  3047  00198E  6E01               	movwf	setFbits@value,c
  3048  001990  500A               	movf	??_processOpcode& (0+255),w,c
  3049  001992  0E03               	movlw	3
  3050  001994  EC4A  F013         	call	_setFbits
  3051  001998  D007               	goto	l1479
  3052  00199A                     l1477:
  3053                           
  3054                           ;emulator.c: 451: else setFbits(3, 0);
  3055  00199A  6E0A               	movwf	??_processOpcode& (0+255),c
  3056  00199C  0E00               	movlw	0
  3057  00199E  6E01               	movwf	setFbits@value,c
  3058  0019A0  500A               	movf	??_processOpcode& (0+255),w,c
  3059  0019A2  0E03               	movlw	3
  3060  0019A4  EC4A  F013         	call	_setFbits
  3061  0019A8                     l1479:
  3062                           
  3063                           ;emulator.c: 454: if (regA < regB) setFbits(2, 1);
  3064  0019A8  5020               	movf	_regB,w,c
  3065  0019AA  5C1F               	subwf	_regA,w,c
  3066  0019AC  B0D8               	btfsc	status,0,c
  3067  0019AE  D008               	goto	l1483
  3068  0019B0  6E0A               	movwf	??_processOpcode& (0+255),c
  3069  0019B2  0E01               	movlw	1
  3070  0019B4  6E01               	movwf	setFbits@value,c
  3071  0019B6  500A               	movf	??_processOpcode& (0+255),w,c
  3072  0019B8  0E02               	movlw	2
  3073  0019BA  EC4A  F013         	call	_setFbits
  3074  0019BE  D007               	goto	l1485
  3075  0019C0                     l1483:
  3076                           
  3077                           ;emulator.c: 455: else setFbits(2, 0);
  3078  0019C0  6E0A               	movwf	??_processOpcode& (0+255),c
  3079  0019C2  0E00               	movlw	0
  3080  0019C4  6E01               	movwf	setFbits@value,c
  3081  0019C6  500A               	movf	??_processOpcode& (0+255),w,c
  3082  0019C8  0E02               	movlw	2
  3083  0019CA  EC4A  F013         	call	_setFbits
  3084  0019CE                     l1485:
  3085                           
  3086                           ;emulator.c: 458: if (regA > regB) setFbits(1, 1);
  3087  0019CE  501F               	movf	_regA,w,c
  3088  0019D0  5C20               	subwf	_regB,w,c
  3089  0019D2  B0D8               	btfsc	status,0,c
  3090  0019D4  D008               	goto	l1489
  3091  0019D6  6E0A               	movwf	??_processOpcode& (0+255),c
  3092  0019D8  0E01               	movlw	1
  3093  0019DA  6E01               	movwf	setFbits@value,c
  3094  0019DC  500A               	movf	??_processOpcode& (0+255),w,c
  3095  0019DE  0E01               	movlw	1
  3096  0019E0  EC4A  F013         	call	_setFbits
  3097  0019E4  D2EF               	goto	l1681
  3098  0019E6                     l1489:
  3099                           
  3100                           ;emulator.c: 459: else setFbits(1, 0);
  3101  0019E6  6E0A               	movwf	??_processOpcode& (0+255),c
  3102  0019E8  0E00               	movlw	0
  3103  0019EA  6E01               	movwf	setFbits@value,c
  3104  0019EC  500A               	movf	??_processOpcode& (0+255),w,c
  3105  0019EE  0E01               	movlw	1
  3106  0019F0  EC4A  F013         	call	_setFbits
  3107  0019F4  D2E7               	goto	l1681
  3108  0019F6                     l1491:
  3109                           
  3110                           ;emulator.c: 471: regPC = immData_toPointer();
  3111  0019F6  ECEB  F013         	call	_immData_toPointer	;wreg free
  3112  0019FA  D011               	goto	L28
  3113  0019FC                     l1495:
  3114                           
  3115                           ;emulator.c: 476: if (getFbits(3) == 1) regPC = regMX;
  3116  0019FC  0E03               	movlw	3
  3117  0019FE  ECCA  F013         	call	_getFbits
  3118  001A02                     L22:
  3119  001A02  6E0A               	movwf	??_processOpcode& (0+255),c
  3120  001A04  040A               	decf	??_processOpcode,w,c
  3121  001A06                     L21:
  3122  001A06  A4D8               	btfss	status,2,c
  3123  001A08  D2DD               	goto	l1681
  3124  001A0A  D066               	goto	L13
  3125  001A0C                     l1499:
  3126                           
  3127                           ;emulator.c: 480: if (getFbits(3) == 1) regPC = immData_toPointer();
  3128  001A0C  0E03               	movlw	3
  3129  001A0E  ECCA  F013         	call	_getFbits
  3130  001A12  6E0A               	movwf	??_processOpcode& (0+255),c
  3131  001A14  040A               	decf	??_processOpcode,w,c
  3132  001A16  A4D8               	btfss	status,2,c
  3133  001A18  D04C               	goto	l1553
  3134  001A1A  ECEB  F013         	call	_immData_toPointer	;wreg free
  3135  001A1E                     L28:
  3136  001A1E  C001  F01A         	movff	?_immData_toPointer,_regPC
  3137  001A22  C002  F01B         	movff	?_immData_toPointer+1,_regPC+1
  3138  001A26  D045               	goto	l1553
  3139  001A28                     l1505:
  3140                           
  3141                           ;emulator.c: 485: if (getFbits(3) == 0) regPC = regMX;
  3142  001A28  0E03               	movlw	3
  3143  001A2A  ECCA  F013         	call	_getFbits
  3144  001A2E  D036               	goto	L24
  3145  001A30                     l1509:
  3146                           
  3147                           ;emulator.c: 489: if (getFbits(3) == 0) regPC = immData_toPointer();
  3148  001A30  0E03               	movlw	3
  3149  001A32  ECCA  F013         	call	_getFbits
  3150  001A36  0900               	iorlw	0
  3151  001A38  A4D8               	btfss	status,2,c
  3152  001A3A  D03B               	goto	l1553
  3153  001A3C  ECEB  F013         	call	_immData_toPointer	;wreg free
  3154  001A40  D7EE               	goto	L28
  3155  001A42                     l1515:
  3156                           
  3157                           ;emulator.c: 494: if (getFbits(1) == 1) regPC = regMX;
  3158  001A42  0E01               	movlw	1
  3159  001A44  ECCA  F013         	call	_getFbits
  3160  001A48  D7DC               	goto	L22
  3161  001A4A                     l1519:
  3162                           
  3163                           ;emulator.c: 498: if (getFbits(1) == 1) regPC = immData_toPointer();
  3164  001A4A  0E01               	movlw	1
  3165  001A4C  ECCA  F013         	call	_getFbits
  3166  001A50  6E0A               	movwf	??_processOpcode& (0+255),c
  3167  001A52  040A               	decf	??_processOpcode,w,c
  3168  001A54  A4D8               	btfss	status,2,c
  3169  001A56  D02D               	goto	l1553
  3170  001A58  ECEB  F013         	call	_immData_toPointer	;wreg free
  3171  001A5C  D7E0               	goto	L28
  3172  001A5E                     l1525:
  3173                           
  3174                           ;emulator.c: 503: if (getFbits(2) == 1) regPC = regMX;
  3175  001A5E  0E02               	movlw	2
  3176  001A60  ECCA  F013         	call	_getFbits
  3177  001A64  D7CE               	goto	L22
  3178  001A66                     l1529:
  3179                           
  3180                           ;emulator.c: 507: if (getFbits(2) == 1) regPC = immData_toPointer();
  3181  001A66  0E02               	movlw	2
  3182  001A68  ECCA  F013         	call	_getFbits
  3183  001A6C  6E0A               	movwf	??_processOpcode& (0+255),c
  3184  001A6E  040A               	decf	??_processOpcode,w,c
  3185  001A70  A4D8               	btfss	status,2,c
  3186  001A72  D01F               	goto	l1553
  3187  001A74  ECEB  F013         	call	_immData_toPointer	;wreg free
  3188  001A78  D7D2               	goto	L28
  3189  001A7A                     l1535:
  3190                           
  3191                           ;emulator.c: 512: if (getFbits(0) == 1) regPC = regMX;
  3192  001A7A  0E00               	movlw	0
  3193  001A7C  ECCA  F013         	call	_getFbits
  3194  001A80  D7C0               	goto	L22
  3195  001A82                     l1539:
  3196                           
  3197                           ;emulator.c: 516: if (getFbits(0) == 1) regPC = immData_toPointer();
  3198  001A82  0E00               	movlw	0
  3199  001A84  ECCA  F013         	call	_getFbits
  3200  001A88  6E0A               	movwf	??_processOpcode& (0+255),c
  3201  001A8A  040A               	decf	??_processOpcode,w,c
  3202  001A8C  A4D8               	btfss	status,2,c
  3203  001A8E  D011               	goto	l1553
  3204  001A90  ECEB  F013         	call	_immData_toPointer	;wreg free
  3205  001A94  D7C4               	goto	L28
  3206  001A96                     l1545:
  3207                           
  3208                           ;emulator.c: 521: if (getFbits(0) == 0) regPC = regMX;
  3209  001A96  0E00               	movlw	0
  3210  001A98  ECCA  F013         	call	_getFbits
  3211  001A9C                     L24:
  3212  001A9C  0900               	iorlw	0
  3213  001A9E  D7B3               	goto	L21
  3214  001AA0                     l1549:
  3215                           
  3216                           ;emulator.c: 525: if (getFbits(0) == 0) regPC = immData_toPointer();
  3217  001AA0  0E00               	movlw	0
  3218  001AA2  ECCA  F013         	call	_getFbits
  3219  001AA6  0900               	iorlw	0
  3220  001AA8  A4D8               	btfss	status,2,c
  3221  001AAA  D003               	goto	l1553
  3222  001AAC  ECEB  F013         	call	_immData_toPointer	;wreg free
  3223  001AB0  D7B6               	goto	L28
  3224  001AB2                     l1553:
  3225                           
  3226                           ;emulator.c: 526: regPC += 2;
  3227  001AB2  0E02               	movlw	2
  3228  001AB4  261A               	addwf	_regPC,f,c
  3229  001AB6  0E00               	movlw	0
  3230  001AB8  221B               	addwfc	_regPC+1,f,c
  3231                           
  3232                           ;emulator.c: 527: break;
  3233  001ABA  D284               	goto	l1681
  3234  001ABC                     l1555:
  3235                           
  3236                           ;emulator.c: 531: stack[regSP] = regPC;
  3237  001ABC  5022               	movf	_regSP,w,c
  3238  001ABE  0D01               	mullw	1
  3239  001AC0  0101               	movlb	1	; () banked
  3240  001AC2  0E00               	movlw	low _stack
  3241  001AC4  24F3               	addwf	prodl,w,c
  3242  001AC6  6ED9               	movwf	fsr2l,c
  3243  001AC8  0101               	movlb	1	; () banked
  3244  001ACA  0E01               	movlw	high _stack
  3245  001ACC  20F4               	addwfc	prodh,w,c
  3246  001ACE  6EDA               	movwf	fsr2h,c
  3247  001AD0  C01A  FFDF         	movff	_regPC,indf2
  3248                           
  3249                           ; BSR set to: 1
  3250                           ;emulator.c: 532: regSP += 2;
  3251  001AD4  0E02               	movlw	2
  3252  001AD6  2622               	addwf	_regSP,f,c
  3253  001AD8                     L13:
  3254                           
  3255                           ; BSR set to: 1
  3256                           ;emulator.c: 533: regPC = regMX;
  3257  001AD8  C018  F01A         	movff	_regMX,_regPC
  3258  001ADC  C019  F01B         	movff	_regMX+1,_regPC+1
  3259                           
  3260                           ;emulator.c: 534: break;
  3261  001AE0  D271               	goto	l1681
  3262  001AE2                     l1561:
  3263                           
  3264                           ;emulator.c: 538: stack[regSP] = regPC;
  3265  001AE2  5022               	movf	_regSP,w,c
  3266  001AE4  0D01               	mullw	1
  3267  001AE6  0101               	movlb	1	; () banked
  3268  001AE8  0E00               	movlw	low _stack
  3269  001AEA  24F3               	addwf	prodl,w,c
  3270  001AEC  6ED9               	movwf	fsr2l,c
  3271  001AEE  0101               	movlb	1	; () banked
  3272  001AF0  0E01               	movlw	high _stack
  3273  001AF2  20F4               	addwfc	prodh,w,c
  3274  001AF4  6EDA               	movwf	fsr2h,c
  3275  001AF6  C01A  FFDF         	movff	_regPC,indf2
  3276                           
  3277                           ; BSR set to: 1
  3278                           ;emulator.c: 539: regSP += 2;
  3279  001AFA  0E02               	movlw	2
  3280  001AFC  2622               	addwf	_regSP,f,c
  3281                           
  3282                           ; BSR set to: 1
  3283                           ;emulator.c: 540: regPC = immData_toPointer();
  3284  001AFE  ECEB  F013         	call	_immData_toPointer	;wreg free
  3285  001B02  D78D               	goto	L28
  3286  001B04                     l1569:
  3287                           
  3288                           ;emulator.c: 546: regSP -= 2;
  3289  001B04  0E02               	movlw	2
  3290  001B06  5E22               	subwf	_regSP,f,c
  3291                           
  3292                           ;emulator.c: 548: regPC_temp = (uint16_t) stack[regSP];
  3293  001B08  5022               	movf	_regSP,w,c
  3294  001B0A  0D01               	mullw	1
  3295  001B0C  0101               	movlb	1	; () banked
  3296  001B0E  0E00               	movlw	low _stack
  3297  001B10  24F3               	addwf	prodl,w,c
  3298  001B12  6ED9               	movwf	fsr2l,c
  3299  001B14  0101               	movlb	1	; () banked
  3300  001B16  0E01               	movlw	high _stack
  3301  001B18  20F4               	addwfc	prodh,w,c
  3302  001B1A  6EDA               	movwf	fsr2h,c
  3303  001B1C  50DF               	movf	indf2,w,c
  3304  001B1E  6E0A               	movwf	??_processOpcode& (0+255),c
  3305  001B20  500A               	movf	??_processOpcode,w,c
  3306  001B22  6E0D               	movwf	processOpcode@regPC_temp,c
  3307  001B24  6A0E               	clrf	processOpcode@regPC_temp+1,c
  3308                           
  3309                           ; BSR set to: 1
  3310                           ;emulator.c: 550: regPC += regPC_temp + (uint16_t) stack[regSP];
  3311  001B26  5022               	movf	_regSP,w,c
  3312  001B28  0D01               	mullw	1
  3313  001B2A  0101               	movlb	1	; () banked
  3314  001B2C  0E00               	movlw	low _stack
  3315  001B2E  24F3               	addwf	prodl,w,c
  3316  001B30  6ED9               	movwf	fsr2l,c
  3317  001B32  0101               	movlb	1	; () banked
  3318  001B34  0E01               	movlw	high _stack
  3319  001B36  20F4               	addwfc	prodh,w,c
  3320  001B38  6EDA               	movwf	fsr2h,c
  3321  001B3A  50DF               	movf	indf2,w,c
  3322  001B3C  6E0A               	movwf	??_processOpcode& (0+255),c
  3323  001B3E  500A               	movf	??_processOpcode,w,c
  3324  001B40  240D               	addwf	processOpcode@regPC_temp,w,c
  3325  001B42  6E0B               	movwf	(??_processOpcode+1)& (0+255),c
  3326  001B44  0E00               	movlw	0
  3327  001B46  200E               	addwfc	processOpcode@regPC_temp+1,w,c
  3328  001B48  6E0C               	movwf	(??_processOpcode+2)& (0+255),c
  3329  001B4A  500B               	movf	??_processOpcode+1,w,c
  3330  001B4C  261A               	addwf	_regPC,f,c
  3331  001B4E  500C               	movf	??_processOpcode+2,w,c
  3332  001B50  D7B3               	goto	L15
  3333  001B52                     l1575:
  3334                           
  3335                           ;emulator.c: 558: stack[regSP] = regA;
  3336  001B52  5022               	movf	_regSP,w,c
  3337  001B54  0D01               	mullw	1
  3338  001B56  0101               	movlb	1	; () banked
  3339  001B58  0E00               	movlw	low _stack
  3340  001B5A  24F3               	addwf	prodl,w,c
  3341  001B5C  6ED9               	movwf	fsr2l,c
  3342  001B5E  0101               	movlb	1	; () banked
  3343  001B60  0E01               	movlw	high _stack
  3344  001B62  20F4               	addwfc	prodh,w,c
  3345  001B64  6EDA               	movwf	fsr2h,c
  3346  001B66  C01F  FFDF         	movff	_regA,indf2
  3347  001B6A  D02A               	goto	L17
  3348  001B6C                     l1579:
  3349                           
  3350                           ;emulator.c: 564: stack[regSP] = regB;
  3351  001B6C  5022               	movf	_regSP,w,c
  3352  001B6E  0D01               	mullw	1
  3353  001B70  0101               	movlb	1	; () banked
  3354  001B72  0E00               	movlw	low _stack
  3355  001B74  24F3               	addwf	prodl,w,c
  3356  001B76  6ED9               	movwf	fsr2l,c
  3357  001B78  0101               	movlb	1	; () banked
  3358  001B7A  0E01               	movlw	high _stack
  3359  001B7C  20F4               	addwfc	prodh,w,c
  3360  001B7E  6EDA               	movwf	fsr2h,c
  3361  001B80  C020  FFDF         	movff	_regB,indf2
  3362  001B84  D01D               	goto	L17
  3363  001B86                     l1583:
  3364                           
  3365                           ;emulator.c: 570: stack[regSP] = regMX;
  3366  001B86  5022               	movf	_regSP,w,c
  3367  001B88  0D01               	mullw	1
  3368  001B8A  0101               	movlb	1	; () banked
  3369  001B8C  0E00               	movlw	low _stack
  3370  001B8E  24F3               	addwf	prodl,w,c
  3371  001B90  6ED9               	movwf	fsr2l,c
  3372  001B92  0101               	movlb	1	; () banked
  3373  001B94  0E01               	movlw	high _stack
  3374  001B96  20F4               	addwfc	prodh,w,c
  3375  001B98  6EDA               	movwf	fsr2h,c
  3376  001B9A  C018  FFDF         	movff	_regMX,indf2
  3377                           
  3378                           ; BSR set to: 1
  3379                           ;emulator.c: 571: regSP += 2;
  3380  001B9E  0E02               	movlw	2
  3381  001BA0  2622               	addwf	_regSP,f,c
  3382                           
  3383                           ;emulator.c: 572: break;
  3384  001BA2  D210               	goto	l1681
  3385  001BA4                     l1587:
  3386                           
  3387                           ;emulator.c: 576: stack[regSP] = getMXbits(0);
  3388  001BA4  5022               	movf	_regSP,w,c
  3389  001BA6  0D01               	mullw	1
  3390  001BA8  0101               	movlb	1	; () banked
  3391  001BAA  0E00               	movlw	low _stack
  3392  001BAC  24F3               	addwf	prodl,w,c
  3393  001BAE  6ED9               	movwf	fsr2l,c
  3394  001BB0  0101               	movlb	1	; () banked
  3395  001BB2  0E01               	movlw	high _stack
  3396  001BB4  20F4               	addwfc	prodh,w,c
  3397  001BB6  6EDA               	movwf	fsr2h,c
  3398  001BB8  0E00               	movlw	0
  3399  001BBA  EC02  F014         	call	_getMXbits
  3400  001BBE  D00F               	goto	L18
  3401  001BC0                     L17:
  3402                           
  3403                           ;emulator.c: 577: regSP++;
  3404  001BC0  2A22               	incf	_regSP,f,c
  3405                           
  3406                           ;emulator.c: 578: break;
  3407  001BC2  D200               	goto	l1681
  3408  001BC4                     l1591:
  3409                           
  3410                           ;emulator.c: 582: stack[regSP] = getMXbits(1);
  3411  001BC4  5022               	movf	_regSP,w,c
  3412  001BC6  0D01               	mullw	1
  3413  001BC8  0101               	movlb	1	; () banked
  3414  001BCA  0E00               	movlw	low _stack
  3415  001BCC  24F3               	addwf	prodl,w,c
  3416  001BCE  6ED9               	movwf	fsr2l,c
  3417  001BD0  0101               	movlb	1	; () banked
  3418  001BD2  0E01               	movlw	high _stack
  3419  001BD4  20F4               	addwfc	prodh,w,c
  3420  001BD6  6EDA               	movwf	fsr2h,c
  3421  001BD8  0E01               	movlw	1
  3422  001BDA  EC02  F014         	call	_getMXbits
  3423  001BDE                     L18:
  3424  001BDE  6EDF               	movwf	indf2,c
  3425  001BE0  D7EF               	goto	L17
  3426  001BE2                     l1595:
  3427                           
  3428                           ;emulator.c: 588: stack[regSP] = regF;
  3429  001BE2  5022               	movf	_regSP,w,c
  3430  001BE4  0D01               	mullw	1
  3431  001BE6  0101               	movlb	1	; () banked
  3432  001BE8  0E00               	movlw	low _stack
  3433  001BEA  24F3               	addwf	prodl,w,c
  3434  001BEC  6ED9               	movwf	fsr2l,c
  3435  001BEE  0101               	movlb	1	; () banked
  3436  001BF0  0E01               	movlw	high _stack
  3437  001BF2  20F4               	addwfc	prodh,w,c
  3438  001BF4  6EDA               	movwf	fsr2h,c
  3439  001BF6  C021  FFDF         	movff	_regF,indf2
  3440  001BFA  D7E2               	goto	L17
  3441  001BFC                     l1599:
  3442                           
  3443                           ;emulator.c: 594: stack[regSP] = immData_1;
  3444  001BFC  5022               	movf	_regSP,w,c
  3445  001BFE  0D01               	mullw	1
  3446  001C00  0101               	movlb	1	; () banked
  3447  001C02  0E00               	movlw	low _stack
  3448  001C04  24F3               	addwf	prodl,w,c
  3449  001C06  6ED9               	movwf	fsr2l,c
  3450  001C08  0101               	movlb	1	; () banked
  3451  001C0A  0E01               	movlw	high _stack
  3452  001C0C  20F4               	addwfc	prodh,w,c
  3453  001C0E  6EDA               	movwf	fsr2h,c
  3454  001C10  C01D  FFDF         	movff	_immData_1,indf2
  3455                           
  3456                           ; BSR set to: 1
  3457                           ;emulator.c: 595: regSP++;
  3458  001C14  2A22               	incf	_regSP,f,c
  3459  001C16  D0CD               	goto	L20
  3460  001C18                     l1605:
  3461                           
  3462                           ;emulator.c: 600: regSP--;
  3463  001C18  0622               	decf	_regSP,f,c
  3464                           
  3465                           ;emulator.c: 602: regA = stack[regSP];
  3466  001C1A  5022               	movf	_regSP,w,c
  3467  001C1C  0D01               	mullw	1
  3468  001C1E  0101               	movlb	1	; () banked
  3469  001C20  0E00               	movlw	low _stack
  3470  001C22  24F3               	addwf	prodl,w,c
  3471  001C24  6ED9               	movwf	fsr2l,c
  3472  001C26  0101               	movlb	1	; () banked
  3473  001C28  0E01               	movlw	high _stack
  3474  001C2A  20F4               	addwfc	prodh,w,c
  3475  001C2C                     L26:
  3476  001C2C  6EDA               	movwf	fsr2h,c
  3477  001C2E  50DF               	movf	indf2,w,c
  3478  001C30                     L11:
  3479  001C30  6E1F               	movwf	_regA,c
  3480                           
  3481                           ;emulator.c: 603: break;
  3482  001C32  D1C8               	goto	l1681
  3483  001C34                     l1609:
  3484                           
  3485                           ;emulator.c: 606: regSP--;
  3486  001C34  0622               	decf	_regSP,f,c
  3487                           
  3488                           ;emulator.c: 608: regB = stack[regSP];
  3489  001C36  5022               	movf	_regSP,w,c
  3490  001C38  0D01               	mullw	1
  3491  001C3A  0101               	movlb	1	; () banked
  3492  001C3C  0E00               	movlw	low _stack
  3493  001C3E  24F3               	addwf	prodl,w,c
  3494  001C40  6ED9               	movwf	fsr2l,c
  3495  001C42  0101               	movlb	1	; () banked
  3496  001C44  0E01               	movlw	high _stack
  3497  001C46  20F4               	addwfc	prodh,w,c
  3498  001C48  6EDA               	movwf	fsr2h,c
  3499  001C4A  50DF               	movf	indf2,w,c
  3500  001C4C  6E20               	movwf	_regB,c
  3501                           
  3502                           ;emulator.c: 609: break;
  3503  001C4E  D1BA               	goto	l1681
  3504  001C50                     l1613:
  3505                           
  3506                           ;emulator.c: 612: regSP -= 2;
  3507  001C50  0E02               	movlw	2
  3508  001C52  5E22               	subwf	_regSP,f,c
  3509                           
  3510                           ;emulator.c: 614: regMX = stack[regSP];
  3511  001C54  5022               	movf	_regSP,w,c
  3512  001C56  0D01               	mullw	1
  3513  001C58  0101               	movlb	1	; () banked
  3514  001C5A  0E00               	movlw	low _stack
  3515  001C5C  24F3               	addwf	prodl,w,c
  3516  001C5E  6ED9               	movwf	fsr2l,c
  3517  001C60  0101               	movlb	1	; () banked
  3518  001C62  0E01               	movlw	high _stack
  3519  001C64  20F4               	addwfc	prodh,w,c
  3520  001C66  6EDA               	movwf	fsr2h,c
  3521  001C68  50DF               	movf	indf2,w,c
  3522  001C6A  6E0A               	movwf	??_processOpcode& (0+255),c
  3523  001C6C  500A               	movf	??_processOpcode,w,c
  3524  001C6E  6E18               	movwf	_regMX,c
  3525  001C70  6A19               	clrf	_regMX+1,c
  3526                           
  3527                           ;emulator.c: 615: break;
  3528  001C72  D1A8               	goto	l1681
  3529  001C74                     l1617:
  3530                           
  3531                           ;emulator.c: 618: regSP--;
  3532  001C74  0622               	decf	_regSP,f,c
  3533                           
  3534                           ;emulator.c: 620: setMXbits(0, stack[regSP]);
  3535  001C76  5022               	movf	_regSP,w,c
  3536  001C78  0D01               	mullw	1
  3537  001C7A  0101               	movlb	1	; () banked
  3538  001C7C  0E00               	movlw	low _stack
  3539  001C7E  24F3               	addwf	prodl,w,c
  3540  001C80  6ED9               	movwf	fsr2l,c
  3541  001C82  0101               	movlb	1	; () banked
  3542  001C84  0E01               	movlw	high _stack
  3543  001C86  20F4               	addwfc	prodh,w,c
  3544  001C88  6EDA               	movwf	fsr2h,c
  3545  001C8A  50DF               	movf	indf2,w,c
  3546  001C8C  6E01               	movwf	setMXbits@value,c
  3547  001C8E  0E00               	movlw	0
  3548  001C90  ECB6  F013         	call	_setMXbits
  3549                           
  3550                           ;emulator.c: 621: break;
  3551  001C94  D197               	goto	l1681
  3552  001C96                     l1621:
  3553                           
  3554                           ;emulator.c: 624: regSP--;
  3555  001C96  0622               	decf	_regSP,f,c
  3556                           
  3557                           ;emulator.c: 626: setMXbits(1, stack[regSP]);
  3558  001C98  5022               	movf	_regSP,w,c
  3559  001C9A  0D01               	mullw	1
  3560  001C9C  0101               	movlb	1	; () banked
  3561  001C9E  0E00               	movlw	low _stack
  3562  001CA0  24F3               	addwf	prodl,w,c
  3563  001CA2  6ED9               	movwf	fsr2l,c
  3564  001CA4  0101               	movlb	1	; () banked
  3565  001CA6  0E01               	movlw	high _stack
  3566  001CA8  20F4               	addwfc	prodh,w,c
  3567  001CAA  6EDA               	movwf	fsr2h,c
  3568  001CAC  50DF               	movf	indf2,w,c
  3569  001CAE  6E01               	movwf	setMXbits@value,c
  3570  001CB0  0E01               	movlw	1
  3571  001CB2  ECB6  F013         	call	_setMXbits
  3572                           
  3573                           ;emulator.c: 627: break;
  3574  001CB6  D186               	goto	l1681
  3575  001CB8                     l1625:
  3576                           
  3577                           ;emulator.c: 634: regA_temp16 += (uint16_t) regB;
  3578  001CB8  5020               	movf	_regB,w,c
  3579  001CBA  2611               	addwf	processOpcode@regA_temp16,f,c
  3580  001CBC  0E00               	movlw	0
  3581  001CBE  2212               	addwfc	processOpcode@regA_temp16+1,f,c
  3582                           
  3583                           ;emulator.c: 635: if (regA_temp16 > 255) setFbits(4, 1);
  3584  001CC0  0E00               	movlw	0
  3585  001CC2  5C11               	subwf	processOpcode@regA_temp16,w,c
  3586  001CC4  0E01               	movlw	1
  3587  001CC6  5812               	subwfb	processOpcode@regA_temp16+1,w,c
  3588  001CC8  A0D8               	btfss	status,0,c
  3589  001CCA  D008               	goto	l1629
  3590  001CCC  6E0A               	movwf	??_processOpcode& (0+255),c
  3591  001CCE  0E01               	movlw	1
  3592  001CD0  6E01               	movwf	setFbits@value,c
  3593  001CD2  500A               	movf	??_processOpcode& (0+255),w,c
  3594  001CD4  0E04               	movlw	4
  3595  001CD6  EC4A  F013         	call	_setFbits
  3596  001CDA  D007               	goto	l1631
  3597  001CDC                     l1629:
  3598                           
  3599                           ;emulator.c: 636: else setFbits(4, 0);
  3600  001CDC  6E0A               	movwf	??_processOpcode& (0+255),c
  3601  001CDE  0E00               	movlw	0
  3602  001CE0  6E01               	movwf	setFbits@value,c
  3603  001CE2  500A               	movf	??_processOpcode& (0+255),w,c
  3604  001CE4  0E04               	movlw	4
  3605  001CE6  EC4A  F013         	call	_setFbits
  3606  001CEA                     l1631:
  3607                           
  3608                           ;emulator.c: 637: regA += regB;
  3609  001CEA  5020               	movf	_regB,w,c
  3610  001CEC                     L12:
  3611  001CEC  261F               	addwf	_regA,f,c
  3612                           
  3613                           ;emulator.c: 638: break;
  3614  001CEE  D16A               	goto	l1681
  3615  001CF0                     l1633:
  3616                           
  3617                           ;emulator.c: 642: regA_temp16 += (uint16_t) immData_1;
  3618  001CF0  501D               	movf	_immData_1,w,c
  3619  001CF2  2611               	addwf	processOpcode@regA_temp16,f,c
  3620  001CF4  0E00               	movlw	0
  3621  001CF6  2212               	addwfc	processOpcode@regA_temp16+1,f,c
  3622                           
  3623                           ;emulator.c: 643: if (regA_temp16 > 255) setFbits(4, 1);
  3624  001CF8  0E00               	movlw	0
  3625  001CFA  5C11               	subwf	processOpcode@regA_temp16,w,c
  3626  001CFC  0E01               	movlw	1
  3627  001CFE  5812               	subwfb	processOpcode@regA_temp16+1,w,c
  3628  001D00  A0D8               	btfss	status,0,c
  3629  001D02  D008               	goto	l1637
  3630  001D04  6E0A               	movwf	??_processOpcode& (0+255),c
  3631  001D06  0E01               	movlw	1
  3632  001D08  6E01               	movwf	setFbits@value,c
  3633  001D0A  500A               	movf	??_processOpcode& (0+255),w,c
  3634  001D0C  0E04               	movlw	4
  3635  001D0E  EC4A  F013         	call	_setFbits
  3636  001D12  D007               	goto	l1639
  3637  001D14                     l1637:
  3638                           
  3639                           ;emulator.c: 644: else setFbits(4, 0);
  3640  001D14  6E0A               	movwf	??_processOpcode& (0+255),c
  3641  001D16  0E00               	movlw	0
  3642  001D18  6E01               	movwf	setFbits@value,c
  3643  001D1A  500A               	movf	??_processOpcode& (0+255),w,c
  3644  001D1C  0E04               	movlw	4
  3645  001D1E  EC4A  F013         	call	_setFbits
  3646  001D22                     l1639:
  3647                           
  3648                           ;emulator.c: 646: regA += immData_1;
  3649  001D22  501D               	movf	_immData_1,w,c
  3650  001D24  261F               	addwf	_regA,f,c
  3651  001D26  D045               	goto	L20
  3652  001D28                     l354:
  3653                           
  3654                           ;emulator.c: 653: regA_temp16 = regA;
  3655  001D28  C01F  F011         	movff	_regA,processOpcode@regA_temp16
  3656  001D2C  6A12               	clrf	processOpcode@regA_temp16+1,c
  3657                           
  3658                           ;emulator.c: 655: regA_temp16 += 255;
  3659  001D2E  0EFF               	movlw	255
  3660  001D30  2611               	addwf	processOpcode@regA_temp16,f,c
  3661  001D32  0E00               	movlw	0
  3662  001D34  2212               	addwfc	processOpcode@regA_temp16+1,f,c
  3663                           
  3664                           ;emulator.c: 656: regA_temp16 -= regB;
  3665  001D36  5020               	movf	_regB,w,c
  3666  001D38  5E11               	subwf	processOpcode@regA_temp16,f,c
  3667  001D3A  0E00               	movlw	0
  3668  001D3C  5A12               	subwfb	processOpcode@regA_temp16+1,f,c
  3669                           
  3670                           ;emulator.c: 657: if (regA_temp16 < 255) setFbits(4, 1);
  3671  001D3E  0EFF               	movlw	255
  3672  001D40  5C11               	subwf	processOpcode@regA_temp16,w,c
  3673  001D42  0E00               	movlw	0
  3674  001D44  5812               	subwfb	processOpcode@regA_temp16+1,w,c
  3675  001D46  B0D8               	btfsc	status,0,c
  3676  001D48  D008               	goto	l1647
  3677  001D4A  6E0A               	movwf	??_processOpcode& (0+255),c
  3678  001D4C  0E01               	movlw	1
  3679  001D4E  6E01               	movwf	setFbits@value,c
  3680  001D50  500A               	movf	??_processOpcode& (0+255),w,c
  3681  001D52  0E04               	movlw	4
  3682  001D54  EC4A  F013         	call	_setFbits
  3683  001D58  D007               	goto	l1649
  3684  001D5A                     l1647:
  3685                           
  3686                           ;emulator.c: 658: else setFbits(4, 0);
  3687  001D5A  6E0A               	movwf	??_processOpcode& (0+255),c
  3688  001D5C  0E00               	movlw	0
  3689  001D5E  6E01               	movwf	setFbits@value,c
  3690  001D60  500A               	movf	??_processOpcode& (0+255),w,c
  3691  001D62  0E04               	movlw	4
  3692  001D64  EC4A  F013         	call	_setFbits
  3693  001D68                     l1649:
  3694                           
  3695                           ;emulator.c: 659: regA -= regB;
  3696  001D68  5020               	movf	_regB,w,c
  3697  001D6A  5E1F               	subwf	_regA,f,c
  3698                           
  3699                           ;emulator.c: 660: break;
  3700  001D6C  D12B               	goto	l1681
  3701  001D6E                     l357:
  3702                           
  3703                           ;emulator.c: 664: regA_temp16 = regA;
  3704  001D6E  C01F  F011         	movff	_regA,processOpcode@regA_temp16
  3705  001D72  6A12               	clrf	processOpcode@regA_temp16+1,c
  3706                           
  3707                           ;emulator.c: 666: regA_temp16 += 255;
  3708  001D74  0EFF               	movlw	255
  3709  001D76  2611               	addwf	processOpcode@regA_temp16,f,c
  3710  001D78  0E00               	movlw	0
  3711  001D7A  2212               	addwfc	processOpcode@regA_temp16+1,f,c
  3712                           
  3713                           ;emulator.c: 667: regA_temp16 -= immData_1;
  3714  001D7C  501D               	movf	_immData_1,w,c
  3715  001D7E  5E11               	subwf	processOpcode@regA_temp16,f,c
  3716  001D80  0E00               	movlw	0
  3717  001D82  5A12               	subwfb	processOpcode@regA_temp16+1,f,c
  3718                           
  3719                           ;emulator.c: 668: if (regA_temp16 < 255) setFbits(4, 1);
  3720  001D84  0EFF               	movlw	255
  3721  001D86  5C11               	subwf	processOpcode@regA_temp16,w,c
  3722  001D88  0E00               	movlw	0
  3723  001D8A  5812               	subwfb	processOpcode@regA_temp16+1,w,c
  3724  001D8C  B0D8               	btfsc	status,0,c
  3725  001D8E  D008               	goto	l1655
  3726  001D90  6E0A               	movwf	??_processOpcode& (0+255),c
  3727  001D92  0E01               	movlw	1
  3728  001D94  6E01               	movwf	setFbits@value,c
  3729  001D96  500A               	movf	??_processOpcode& (0+255),w,c
  3730  001D98  0E04               	movlw	4
  3731  001D9A  EC4A  F013         	call	_setFbits
  3732  001D9E  D007               	goto	l1657
  3733  001DA0                     l1655:
  3734                           
  3735                           ;emulator.c: 669: else setFbits(4, 0);
  3736  001DA0  6E0A               	movwf	??_processOpcode& (0+255),c
  3737  001DA2  0E00               	movlw	0
  3738  001DA4  6E01               	movwf	setFbits@value,c
  3739  001DA6  500A               	movf	??_processOpcode& (0+255),w,c
  3740  001DA8  0E04               	movlw	4
  3741  001DAA  EC4A  F013         	call	_setFbits
  3742  001DAE                     l1657:
  3743                           
  3744                           ;emulator.c: 670: regA -= immData_1;
  3745  001DAE  501D               	movf	_immData_1,w,c
  3746  001DB0  5E1F               	subwf	_regA,f,c
  3747  001DB2                     L20:
  3748                           
  3749                           ;emulator.c: 671: regPC++;
  3750  001DB2  4A1A               	infsnz	_regPC,f,c
  3751  001DB4  2A1B               	incf	_regPC+1,f,c
  3752                           
  3753                           ;emulator.c: 672: break;
  3754  001DB6  D106               	goto	l1681
  3755  001DB8                     l1661:
  3756                           
  3757                           ;emulator.c: 676: regA_temp16 = regA + 1;
  3758  001DB8  0E01               	movlw	1
  3759  001DBA  241F               	addwf	_regA,w,c
  3760  001DBC  6E11               	movwf	processOpcode@regA_temp16,c
  3761  001DBE  6A12               	clrf	processOpcode@regA_temp16+1,c
  3762  001DC0  0E00               	movlw	0
  3763  001DC2  2212               	addwfc	processOpcode@regA_temp16+1,f,c
  3764                           
  3765                           ;emulator.c: 677: if (regA_temp16 > 255) setFbits(4, 1);
  3766  001DC4  0E00               	movlw	0
  3767  001DC6  5C11               	subwf	processOpcode@regA_temp16,w,c
  3768  001DC8  0E01               	movlw	1
  3769  001DCA  5812               	subwfb	processOpcode@regA_temp16+1,w,c
  3770  001DCC  A0D8               	btfss	status,0,c
  3771  001DCE  D008               	goto	l1665
  3772  001DD0  6E0A               	movwf	??_processOpcode& (0+255),c
  3773  001DD2  0E01               	movlw	1
  3774  001DD4  6E01               	movwf	setFbits@value,c
  3775  001DD6  500A               	movf	??_processOpcode& (0+255),w,c
  3776  001DD8  0E04               	movlw	4
  3777  001DDA  EC4A  F013         	call	_setFbits
  3778  001DDE  D007               	goto	l1667
  3779  001DE0                     l1665:
  3780                           
  3781                           ;emulator.c: 678: else setFbits(4, 0);
  3782  001DE0  6E0A               	movwf	??_processOpcode& (0+255),c
  3783  001DE2  0E00               	movlw	0
  3784  001DE4  6E01               	movwf	setFbits@value,c
  3785  001DE6  500A               	movf	??_processOpcode& (0+255),w,c
  3786  001DE8  0E04               	movlw	4
  3787  001DEA  EC4A  F013         	call	_setFbits
  3788  001DEE                     l1667:
  3789                           
  3790                           ;emulator.c: 679: regA++;
  3791  001DEE  2A1F               	incf	_regA,f,c
  3792                           
  3793                           ;emulator.c: 680: break;
  3794  001DF0  D0E9               	goto	l1681
  3795  001DF2                     l1669:
  3796                           
  3797                           ;emulator.c: 684: regA_temp8 = regA - 1;
  3798  001DF2  041F               	decf	_regA,w,c
  3799  001DF4  6E10               	movwf	processOpcode@regA_temp8,c
  3800                           
  3801                           ;emulator.c: 685: if (regA_temp8 == 255) setFbits(4, 1);
  3802  001DF6  2810               	incf	processOpcode@regA_temp8,w,c
  3803  001DF8  A4D8               	btfss	status,2,c
  3804  001DFA  D008               	goto	l1673
  3805  001DFC  6E0A               	movwf	??_processOpcode& (0+255),c
  3806  001DFE  0E01               	movlw	1
  3807  001E00  6E01               	movwf	setFbits@value,c
  3808  001E02  500A               	movf	??_processOpcode& (0+255),w,c
  3809  001E04  0E04               	movlw	4
  3810  001E06  EC4A  F013         	call	_setFbits
  3811  001E0A  D007               	goto	l1675
  3812  001E0C                     l1673:
  3813                           
  3814                           ;emulator.c: 686: else setFbits(4, 0);
  3815  001E0C  6E0A               	movwf	??_processOpcode& (0+255),c
  3816  001E0E  0E00               	movlw	0
  3817  001E10  6E01               	movwf	setFbits@value,c
  3818  001E12  500A               	movf	??_processOpcode& (0+255),w,c
  3819  001E14  0E04               	movlw	4
  3820  001E16  EC4A  F013         	call	_setFbits
  3821  001E1A                     l1675:
  3822                           
  3823                           ;emulator.c: 687: regA--;
  3824  001E1A  061F               	decf	_regA,f,c
  3825                           
  3826                           ;emulator.c: 688: break;
  3827  001E1C  D0D3               	goto	l1681
  3828  001E1E                     l1679:
  3829  001E1E  0E00               	movlw	low _virtualMemory
  3830  001E20  241A               	addwf	_regPC,w,c
  3831  001E22  6ED9               	movwf	fsr2l,c
  3832  001E24  0E02               	movlw	high _virtualMemory
  3833  001E26  201B               	addwfc	_regPC+1,w,c
  3834  001E28  6EDA               	movwf	fsr2h,c
  3835  001E2A  50DF               	movf	indf2,w,c
  3836                           
  3837                           ; Switch size 1, requested type "space"
  3838                           ; Number of cases is 68, Range of values is 1 to 85
  3839                           ; switch strategies available:
  3840                           ; Name         Instructions Cycles
  3841                           ; simple_byte          205   103 (average)
  3842                           ;	Chosen strategy is simple_byte
  3843  001E2C  0A01               	xorlw	1	; case 1
  3844  001E2E  B4D8               	btfsc	status,2,c
  3845  001E30  D4F6               	goto	l1401
  3846  001E32  0A03               	xorlw	3	; case 2
  3847  001E34  B4D8               	btfsc	status,2,c
  3848  001E36  D4FB               	goto	l1403
  3849  001E38  0A01               	xorlw	1	; case 3
  3850  001E3A  B4D8               	btfsc	status,2,c
  3851  001E3C  D505               	goto	l1407
  3852  001E3E  0A07               	xorlw	7	; case 4
  3853  001E40  B4D8               	btfsc	status,2,c
  3854  001E42  D506               	goto	l1409
  3855  001E44  0A01               	xorlw	1	; case 5
  3856  001E46  B4D8               	btfsc	status,2,c
  3857  001E48  D508               	goto	l1413
  3858  001E4A  0A03               	xorlw	3	; case 6
  3859  001E4C  B4D8               	btfsc	status,2,c
  3860  001E4E  D50B               	goto	l1415
  3861  001E50  0A01               	xorlw	1	; case 7
  3862  001E52  B4D8               	btfsc	status,2,c
  3863  001E54  D50E               	goto	l1419
  3864  001E56  0A0F               	xorlw	15	; case 8
  3865  001E58  B4D8               	btfsc	status,2,c
  3866  001E5A  D4F1               	goto	l1405
  3867  001E5C  0A18               	xorlw	24	; case 16
  3868  001E5E  B4D8               	btfsc	status,2,c
  3869  001E60  D50E               	goto	l1423
  3870  001E62  0A01               	xorlw	1	; case 17
  3871  001E64  B4D8               	btfsc	status,2,c
  3872  001E66  D511               	goto	l1425
  3873  001E68  0A03               	xorlw	3	; case 18
  3874  001E6A  B4D8               	btfsc	status,2,c
  3875  001E6C  D512               	goto	l1427
  3876  001E6E  0A01               	xorlw	1	; case 19
  3877  001E70  B4D8               	btfsc	status,2,c
  3878  001E72  D513               	goto	l275
  3879  001E74  0A07               	xorlw	7	; case 20
  3880  001E76  B4D8               	btfsc	status,2,c
  3881  001E78  D513               	goto	l276
  3882  001E7A  0A01               	xorlw	1	; case 21
  3883  001E7C  B4D8               	btfsc	status,2,c
  3884  001E7E  D513               	goto	l277
  3885  001E80  0A03               	xorlw	3	; case 22
  3886  001E82  B4D8               	btfsc	status,2,c
  3887  001E84  D513               	goto	l1429
  3888  001E86  0A01               	xorlw	1	; case 23
  3889  001E88  B4D8               	btfsc	status,2,c
  3890  001E8A  D519               	goto	l1431
  3891  001E8C  0A0F               	xorlw	15	; case 24
  3892  001E8E  B4D8               	btfsc	status,2,c
  3893  001E90  D51C               	goto	l1433
  3894  001E92  0A01               	xorlw	1	; case 25
  3895  001E94  B4D8               	btfsc	status,2,c
  3896  001E96  D51F               	goto	l281
  3897  001E98  0A03               	xorlw	3	; case 26
  3898  001E9A  B4D8               	btfsc	status,2,c
  3899  001E9C  D51F               	goto	l282
  3900  001E9E  0A01               	xorlw	1	; case 27
  3901  001EA0  B4D8               	btfsc	status,2,c
  3902  001EA2  D51F               	goto	l283
  3903  001EA4  0A07               	xorlw	7	; case 28
  3904  001EA6  B4D8               	btfsc	status,2,c
  3905  001EA8  D51F               	goto	l284
  3906  001EAA  0A3C               	xorlw	60	; case 32
  3907  001EAC  B4D8               	btfsc	status,2,c
  3908  001EAE  D523               	goto	l1437
  3909  001EB0  0A01               	xorlw	1	; case 33
  3910  001EB2  B4D8               	btfsc	status,2,c
  3911  001EB4  D523               	goto	l1439
  3912  001EB6  0A03               	xorlw	3	; case 34
  3913  001EB8  B4D8               	btfsc	status,2,c
  3914  001EBA  D523               	goto	l1443
  3915  001EBC  0A01               	xorlw	1	; case 35
  3916  001EBE  B4D8               	btfsc	status,2,c
  3917  001EC0  D523               	goto	l1445
  3918  001EC2  0A07               	xorlw	7	; case 36
  3919  001EC4  B4D8               	btfsc	status,2,c
  3920  001EC6  D526               	goto	l1451
  3921  001EC8  0A01               	xorlw	1	; case 37
  3922  001ECA  B4D8               	btfsc	status,2,c
  3923  001ECC  D526               	goto	l1455
  3924  001ECE  0A03               	xorlw	3	; case 38
  3925  001ED0  B4D8               	btfsc	status,2,c
  3926  001ED2  D525               	goto	l292
  3927  001ED4  0A01               	xorlw	1	; case 39
  3928  001ED6  B4D8               	btfsc	status,2,c
  3929  001ED8  D537               	goto	l295
  3930  001EDA  0A0F               	xorlw	15	; case 40
  3931  001EDC  B4D8               	btfsc	status,2,c
  3932  001EDE  D549               	goto	l298
  3933  001EE0  0A01               	xorlw	1	; case 41
  3934  001EE2  B4D8               	btfsc	status,2,c
  3935  001EE4  D54B               	goto	l299
  3936  001EE6  0A03               	xorlw	3	; case 42
  3937  001EE8  B4D8               	btfsc	status,2,c
  3938  001EEA  D54C               	goto	l1473
  3939  001EEC  0A01               	xorlw	1	; case 43
  3940  001EEE  B4D8               	btfsc	status,2,c
  3941  001EF0  D50E               	goto	l1449
  3942  001EF2  0A1B               	xorlw	27	; case 48
  3943  001EF4  B4D8               	btfsc	status,2,c
  3944  001EF6  D5F0               	goto	L13
  3945  001EF8  0A01               	xorlw	1	; case 49
  3946  001EFA  B4D8               	btfsc	status,2,c
  3947  001EFC  D57C               	goto	l1491
  3948  001EFE  0A03               	xorlw	3	; case 50
  3949  001F00  B4D8               	btfsc	status,2,c
  3950  001F02  D57C               	goto	l1495
  3951  001F04  0A01               	xorlw	1	; case 51
  3952  001F06  B4D8               	btfsc	status,2,c
  3953  001F08  D581               	goto	l1499
  3954  001F0A  0A07               	xorlw	7	; case 52
  3955  001F0C  B4D8               	btfsc	status,2,c
  3956  001F0E  D58C               	goto	l1505
  3957  001F10  0A01               	xorlw	1	; case 53
  3958  001F12  B4D8               	btfsc	status,2,c
  3959  001F14  D58D               	goto	l1509
  3960  001F16  0A03               	xorlw	3	; case 54
  3961  001F18  B4D8               	btfsc	status,2,c
  3962  001F1A  D593               	goto	l1515
  3963  001F1C  0A01               	xorlw	1	; case 55
  3964  001F1E  B4D8               	btfsc	status,2,c
  3965  001F20  D594               	goto	l1519
  3966  001F22  0A0F               	xorlw	15	; case 56
  3967  001F24  B4D8               	btfsc	status,2,c
  3968  001F26  D59B               	goto	l1525
  3969  001F28  0A01               	xorlw	1	; case 57
  3970  001F2A  B4D8               	btfsc	status,2,c
  3971  001F2C  D59C               	goto	l1529
  3972  001F2E  0A03               	xorlw	3	; case 58
  3973  001F30  B4D8               	btfsc	status,2,c
  3974  001F32  D5A3               	goto	l1535
  3975  001F34  0A01               	xorlw	1	; case 59
  3976  001F36  B4D8               	btfsc	status,2,c
  3977  001F38  D5A4               	goto	l1539
  3978  001F3A  0A07               	xorlw	7	; case 60
  3979  001F3C  B4D8               	btfsc	status,2,c
  3980  001F3E  D5AB               	goto	l1545
  3981  001F40  0A01               	xorlw	1	; case 61
  3982  001F42  B4D8               	btfsc	status,2,c
  3983  001F44  D5AD               	goto	l1549
  3984  001F46  0A03               	xorlw	3	; case 62
  3985  001F48  B4D8               	btfsc	status,2,c
  3986  001F4A  D5B8               	goto	l1555
  3987  001F4C  0A01               	xorlw	1	; case 63
  3988  001F4E  B4D8               	btfsc	status,2,c
  3989  001F50  D5C8               	goto	l1561
  3990  001F52  0A7F               	xorlw	127	; case 64
  3991  001F54  B4D8               	btfsc	status,2,c
  3992  001F56  D5D6               	goto	l1569
  3993  001F58  0A01               	xorlw	1	; case 65
  3994  001F5A  B4D8               	btfsc	status,2,c
  3995  001F5C  D5FA               	goto	l1575
  3996  001F5E  0A03               	xorlw	3	; case 66
  3997  001F60  B4D8               	btfsc	status,2,c
  3998  001F62  D604               	goto	l1579
  3999  001F64  0A01               	xorlw	1	; case 67
  4000  001F66  B4D8               	btfsc	status,2,c
  4001  001F68  D60E               	goto	l1583
  4002  001F6A  0A07               	xorlw	7	; case 68
  4003  001F6C  B4D8               	btfsc	status,2,c
  4004  001F6E  D61A               	goto	l1587
  4005  001F70  0A01               	xorlw	1	; case 69
  4006  001F72  B4D8               	btfsc	status,2,c
  4007  001F74  D627               	goto	l1591
  4008  001F76  0A03               	xorlw	3	; case 70
  4009  001F78  B4D8               	btfsc	status,2,c
  4010  001F7A  D633               	goto	l1595
  4011  001F7C  0A01               	xorlw	1	; case 71
  4012  001F7E  B4D8               	btfsc	status,2,c
  4013  001F80  D63D               	goto	l1599
  4014  001F82  0A0F               	xorlw	15	; case 72
  4015  001F84  B4D8               	btfsc	status,2,c
  4016  001F86  D648               	goto	l1605
  4017  001F88  0A01               	xorlw	1	; case 73
  4018  001F8A  B4D8               	btfsc	status,2,c
  4019  001F8C  D653               	goto	l1609
  4020  001F8E  0A03               	xorlw	3	; case 74
  4021  001F90  B4D8               	btfsc	status,2,c
  4022  001F92  D65E               	goto	l1613
  4023  001F94  0A01               	xorlw	1	; case 75
  4024  001F96  B4D8               	btfsc	status,2,c
  4025  001F98  D66D               	goto	l1617
  4026  001F9A  0A07               	xorlw	7	; case 76
  4027  001F9C  B4D8               	btfsc	status,2,c
  4028  001F9E  D67B               	goto	l1621
  4029  001FA0  0A1C               	xorlw	28	; case 80
  4030  001FA2  B4D8               	btfsc	status,2,c
  4031  001FA4  D689               	goto	l1625
  4032  001FA6  0A01               	xorlw	1	; case 81
  4033  001FA8  B4D8               	btfsc	status,2,c
  4034  001FAA  D6A2               	goto	l1633
  4035  001FAC  0A03               	xorlw	3	; case 82
  4036  001FAE  B4D8               	btfsc	status,2,c
  4037  001FB0  D6BB               	goto	l354
  4038  001FB2  0A01               	xorlw	1	; case 83
  4039  001FB4  B4D8               	btfsc	status,2,c
  4040  001FB6  D6DB               	goto	l357
  4041  001FB8  0A07               	xorlw	7	; case 84
  4042  001FBA  B4D8               	btfsc	status,2,c
  4043  001FBC  D6FD               	goto	l1661
  4044  001FBE  0A01               	xorlw	1	; case 85
  4045  001FC0  B4D8               	btfsc	status,2,c
  4046  001FC2  D717               	goto	l1669
  4047  001FC4                     l1681:
  4048                           
  4049                           ;emulator.c: 692: regPC++;
  4050  001FC4  4A1A               	infsnz	_regPC,f,c
  4051  001FC6  2A1B               	incf	_regPC+1,f,c
  4052  001FC8  0012               	return	
  4053  001FCA                     __end_of_processOpcode:
  4054                           	opt stack 0
  4055                           tblptru	equ	0xFF8
  4056                           tblptrh	equ	0xFF7
  4057                           tblptrl	equ	0xFF6
  4058                           tablat	equ	0xFF5
  4059                           prodh	equ	0xFF4
  4060                           prodl	equ	0xFF3
  4061                           postinc0	equ	0xFEE
  4062                           wreg	equ	0xFE8
  4063                           postdec1	equ	0xFE5
  4064                           fsr1h	equ	0xFE2
  4065                           fsr1l	equ	0xFE1
  4066                           indf2	equ	0xFDF
  4067                           fsr2h	equ	0xFDA
  4068                           fsr2l	equ	0xFD9
  4069                           status	equ	0xFD8
  4070                           
  4071 ;; *************** function _update_immData *****************
  4072 ;; Defined at:
  4073 ;;		line 221 in file "source/emulator.c"
  4074 ;; Parameters:    Size  Location     Type
  4075 ;;		None
  4076 ;; Auto vars:     Size  Location     Type
  4077 ;;		None
  4078 ;; Return value:  Size  Location     Type
  4079 ;;		None               void
  4080 ;; Registers used:
  4081 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4082 ;; Tracked objects:
  4083 ;;		On entry : 0/0
  4084 ;;		On exit  : 0/0
  4085 ;;		Unchanged: 0/0
  4086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4090 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4091 ;;Total ram usage:        2 bytes
  4092 ;; Hardware stack levels used:    1
  4093 ;; This function calls:
  4094 ;;		Nothing
  4095 ;; This function is called by:
  4096 ;;		_processOpcode
  4097 ;; This function uses a non-reentrant model
  4098 ;;
  4099                           
  4100                           	psect	text4
  4101  002476                     __ptext4:
  4102                           	opt stack 0
  4103  002476                     _update_immData:
  4104                           	opt stack 29
  4105                           
  4106                           ;emulator.c: 224: if (regPC + 1 == 2047 + 1) immData_1 = 0;
  4107                           
  4108                           ;incstack = 0
  4109  002476  0E01               	movlw	1
  4110  002478  241A               	addwf	_regPC,w,c
  4111  00247A  6E01               	movwf	??_update_immData& (0+255),c
  4112  00247C  0E00               	movlw	0
  4113  00247E  201B               	addwfc	_regPC+1,w,c
  4114  002480  6E02               	movwf	(??_update_immData+1)& (0+255),c
  4115  002482  5002               	movf	??_update_immData+1,w,c
  4116  002484  0A08               	xorlw	8
  4117  002486  1001               	iorwf	??_update_immData,w,c
  4118  002488  A4D8               	btfss	status,2,c
  4119  00248A  D004               	goto	l1341
  4120  00248C  6E01               	movwf	??_update_immData& (0+255),c
  4121  00248E  0E00               	movlw	0
  4122  002490  6E1D               	movwf	_immData_1,c
  4123  002492  5001               	movf	??_update_immData& (0+255),w,c
  4124  002494                     l1341:
  4125                           
  4126                           ;emulator.c: 225: if (regPC + 2 == 2047 + 1) immData_2 = 0;
  4127  002494  0E02               	movlw	2
  4128  002496  241A               	addwf	_regPC,w,c
  4129  002498  6E01               	movwf	??_update_immData& (0+255),c
  4130  00249A  0E00               	movlw	0
  4131  00249C  201B               	addwfc	_regPC+1,w,c
  4132  00249E  6E02               	movwf	(??_update_immData+1)& (0+255),c
  4133  0024A0  5002               	movf	??_update_immData+1,w,c
  4134  0024A2  0A08               	xorlw	8
  4135  0024A4  1001               	iorwf	??_update_immData,w,c
  4136  0024A6  A4D8               	btfss	status,2,c
  4137  0024A8  D004               	goto	l1345
  4138  0024AA  6E01               	movwf	??_update_immData& (0+255),c
  4139  0024AC  0E00               	movlw	0
  4140  0024AE  6E1E               	movwf	_immData_2,c
  4141  0024B0  5001               	movf	??_update_immData& (0+255),w,c
  4142  0024B2                     l1345:
  4143                           
  4144                           ;emulator.c: 226: if (regPC + 2 == 2047 + 2) immData_2 = 1;
  4145  0024B2  0E02               	movlw	2
  4146  0024B4  241A               	addwf	_regPC,w,c
  4147  0024B6  6E01               	movwf	??_update_immData& (0+255),c
  4148  0024B8  0E00               	movlw	0
  4149  0024BA  201B               	addwfc	_regPC+1,w,c
  4150  0024BC  6E02               	movwf	(??_update_immData+1)& (0+255),c
  4151  0024BE  0401               	decf	??_update_immData,w,c
  4152  0024C0  0E08               	movlw	8
  4153  0024C2  B4D8               	btfsc	status,2,c
  4154  0024C4  1802               	xorwf	??_update_immData+1,w,c
  4155  0024C6  A4D8               	btfss	status,2,c
  4156  0024C8  D004               	goto	l1349
  4157  0024CA  6E01               	movwf	??_update_immData& (0+255),c
  4158  0024CC  0E01               	movlw	1
  4159  0024CE  6E1E               	movwf	_immData_2,c
  4160  0024D0  5001               	movf	??_update_immData& (0+255),w,c
  4161  0024D2                     l1349:
  4162                           
  4163                           ;emulator.c: 230: immData_1 = virtualMemory[regPC + 1];
  4164  0024D2  0E01               	movlw	1
  4165  0024D4  241A               	addwf	_regPC,w,c
  4166  0024D6  6E01               	movwf	??_update_immData& (0+255),c
  4167  0024D8  0E00               	movlw	0
  4168  0024DA  201B               	addwfc	_regPC+1,w,c
  4169  0024DC  6E02               	movwf	(??_update_immData+1)& (0+255),c
  4170  0024DE  0E00               	movlw	low _virtualMemory
  4171  0024E0  2401               	addwf	??_update_immData,w,c
  4172  0024E2  6ED9               	movwf	fsr2l,c
  4173  0024E4  0E02               	movlw	high _virtualMemory
  4174  0024E6  2002               	addwfc	??_update_immData+1,w,c
  4175  0024E8  6EDA               	movwf	fsr2h,c
  4176  0024EA  50DF               	movf	indf2,w,c
  4177  0024EC  6E1D               	movwf	_immData_1,c
  4178                           
  4179                           ;emulator.c: 231: immData_2 = virtualMemory[regPC + 2];
  4180  0024EE  0E02               	movlw	2
  4181  0024F0  241A               	addwf	_regPC,w,c
  4182  0024F2  6E01               	movwf	??_update_immData& (0+255),c
  4183  0024F4  0E00               	movlw	0
  4184  0024F6  201B               	addwfc	_regPC+1,w,c
  4185  0024F8  6E02               	movwf	(??_update_immData+1)& (0+255),c
  4186  0024FA  0E00               	movlw	low _virtualMemory
  4187  0024FC  2401               	addwf	??_update_immData,w,c
  4188  0024FE  6ED9               	movwf	fsr2l,c
  4189  002500  0E02               	movlw	high _virtualMemory
  4190  002502  2002               	addwfc	??_update_immData+1,w,c
  4191  002504  6EDA               	movwf	fsr2h,c
  4192  002506  50DF               	movf	indf2,w,c
  4193  002508  6E1E               	movwf	_immData_2,c
  4194  00250A  0012               	return	
  4195  00250C                     __end_of_update_immData:
  4196                           	opt stack 0
  4197                           tblptru	equ	0xFF8
  4198                           tblptrh	equ	0xFF7
  4199                           tblptrl	equ	0xFF6
  4200                           tablat	equ	0xFF5
  4201                           prodh	equ	0xFF4
  4202                           prodl	equ	0xFF3
  4203                           postinc0	equ	0xFEE
  4204                           wreg	equ	0xFE8
  4205                           postdec1	equ	0xFE5
  4206                           fsr1h	equ	0xFE2
  4207                           fsr1l	equ	0xFE1
  4208                           indf2	equ	0xFDF
  4209                           fsr2h	equ	0xFDA
  4210                           fsr2l	equ	0xFD9
  4211                           status	equ	0xFD8
  4212                           
  4213 ;; *************** function _setPortData *****************
  4214 ;; Defined at:
  4215 ;;		line 190 in file "source/emulator.c"
  4216 ;; Parameters:    Size  Location     Type
  4217 ;;  portNumber      1    wreg     unsigned char 
  4218 ;;  outputData      1    4[COMRAM] unsigned char 
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;  portNumber      1    5[COMRAM] unsigned char 
  4221 ;;  outputData_t    2    6[COMRAM] unsigned int 
  4222 ;;  outputData_t    1    8[COMRAM] unsigned char 
  4223 ;; Return value:  Size  Location     Type
  4224 ;;		None               void
  4225 ;; Registers used:
  4226 ;;		wreg, status,2, status,0, cstack
  4227 ;; Tracked objects:
  4228 ;;		On entry : 0/0
  4229 ;;		On exit  : 0/0
  4230 ;;		Unchanged: 0/0
  4231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4232 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4233 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4235 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4236 ;;Total ram usage:        5 bytes
  4237 ;; Hardware stack levels used:    1
  4238 ;; Hardware stack levels required when called:    1
  4239 ;; This function calls:
  4240 ;;		_dispSeg
  4241 ;;		_enableSerial
  4242 ;;		_hexToChar
  4243 ;; This function is called by:
  4244 ;;		_processOpcode
  4245 ;; This function uses a non-reentrant model
  4246 ;;
  4247                           
  4248                           	psect	text5
  4249  0023CE                     __ptext5:
  4250                           	opt stack 0
  4251  0023CE                     _setPortData:
  4252                           	opt stack 28
  4253                           
  4254                           ;incstack = 0
  4255                           ;setPortData@portNumber stored from wreg
  4256  0023CE  CFE8 F006          	movff	wreg,setPortData@portNumber
  4257                           
  4258                           ;emulator.c: 192: uint16_t outputData_temp16;
  4259                           ;emulator.c: 193: uint8_t outputData_temp8;
  4260                           ;emulator.c: 194: switch (portNumber)
  4261  0023D2  D043               	goto	l1391
  4262  0023D4                     l242:
  4263                           
  4264                           ;emulator.c: 197: if (outputData == 0) outputData_temp16 = 1200;
  4265  0023D4  6605               	tstfsz	setPortData@outputData,c
  4266  0023D6  D004               	goto	l1367
  4267  0023D8  0E04               	movlw	4
  4268  0023DA  6E08               	movwf	setPortData@outputData_temp16+1,c
  4269  0023DC  0EB0               	movlw	176
  4270  0023DE  6E07               	movwf	setPortData@outputData_temp16,c
  4271  0023E0                     l1367:
  4272                           
  4273                           ;emulator.c: 198: if (outputData == 1) outputData_temp16 = 2400;
  4274  0023E0  0405               	decf	setPortData@outputData,w,c
  4275  0023E2  A4D8               	btfss	status,2,c
  4276  0023E4  D004               	goto	l1371
  4277  0023E6  0E09               	movlw	9
  4278  0023E8  6E08               	movwf	setPortData@outputData_temp16+1,c
  4279  0023EA  0E60               	movlw	96
  4280  0023EC  6E07               	movwf	setPortData@outputData_temp16,c
  4281  0023EE                     l1371:
  4282                           
  4283                           ;emulator.c: 199: if (outputData == 2) outputData_temp16 = 9600;
  4284  0023EE  5005               	movf	setPortData@outputData,w,c
  4285  0023F0  0A02               	xorlw	2
  4286  0023F2  A4D8               	btfss	status,2,c
  4287  0023F4  D004               	goto	l1375
  4288  0023F6  0E25               	movlw	37
  4289  0023F8  6E08               	movwf	setPortData@outputData_temp16+1,c
  4290  0023FA  0E80               	movlw	128
  4291  0023FC  6E07               	movwf	setPortData@outputData_temp16,c
  4292  0023FE                     l1375:
  4293                           
  4294                           ;emulator.c: 200: if (outputData == 3) outputData_temp16 = 10417;
  4295  0023FE  5005               	movf	setPortData@outputData,w,c
  4296  002400  0A03               	xorlw	3
  4297  002402  A4D8               	btfss	status,2,c
  4298  002404  D004               	goto	l1379
  4299  002406  0E28               	movlw	40
  4300  002408  6E08               	movwf	setPortData@outputData_temp16+1,c
  4301  00240A  0EB1               	movlw	177
  4302  00240C  6E07               	movwf	setPortData@outputData_temp16,c
  4303  00240E                     l1379:
  4304                           
  4305                           ;emulator.c: 201: if (outputData == 4) outputData_temp16 = 19200;
  4306  00240E  5005               	movf	setPortData@outputData,w,c
  4307  002410  0A04               	xorlw	4
  4308  002412  A4D8               	btfss	status,2,c
  4309  002414  D004               	goto	l1383
  4310  002416  0E4B               	movlw	75
  4311  002418  6E08               	movwf	setPortData@outputData_temp16+1,c
  4312  00241A  0E00               	movlw	0
  4313  00241C  6E07               	movwf	setPortData@outputData_temp16,c
  4314  00241E                     l1383:
  4315                           
  4316                           ;emulator.c: 202: enableSerial(outputData_temp16);
  4317  00241E  C007  F001         	movff	setPortData@outputData_temp16,enableSerial@baudRate
  4318  002422  C008  F002         	movff	setPortData@outputData_temp16+1,enableSerial@baudRate+1
  4319  002426  EC86  F012         	call	_enableSerial	;wreg free
  4320                           
  4321                           ;emulator.c: 203: break;
  4322  00242A  0012               	return	
  4323  00242C                     l249:
  4324                           
  4325                           ;emulator.c: 206: TXREG2 = outputData;
  4326  00242C  C005  FF73         	movff	setPortData@outputData,3955	;volatile
  4327                           
  4328                           ;emulator.c: 207: break;
  4329  002430  0012               	return	
  4330  002432                     l1385:
  4331                           
  4332                           ;emulator.c: 210: outputData_temp8 = hexToChar(outputData);
  4333  002432  5005               	movf	setPortData@outputData,w,c
  4334  002434  EC8B  F011         	call	_hexToChar
  4335  002438  6E09               	movwf	setPortData@outputData_temp8,c
  4336                           
  4337                           ;emulator.c: 211: dispSeg(1, outputData_temp8);
  4338  00243A  C009  F001         	movff	setPortData@outputData_temp8,dispSeg@letter
  4339  00243E  0E01               	movlw	1
  4340  002440  ECE5  F00F         	call	_dispSeg
  4341                           
  4342                           ;emulator.c: 212: break;
  4343  002444  0012               	return	
  4344  002446                     l1387:
  4345                           
  4346                           ;emulator.c: 215: outputData_temp8 = hexToChar(outputData);
  4347  002446  5005               	movf	setPortData@outputData,w,c
  4348  002448  EC8B  F011         	call	_hexToChar
  4349  00244C  6E09               	movwf	setPortData@outputData_temp8,c
  4350                           
  4351                           ;emulator.c: 216: dispSeg(2, outputData_temp8);
  4352  00244E  C009  F001         	movff	setPortData@outputData_temp8,dispSeg@letter
  4353  002452  0E02               	movlw	2
  4354  002454  ECE5  F00F         	call	_dispSeg
  4355                           
  4356                           ;emulator.c: 217: break;
  4357  002458  0012               	return	
  4358  00245A                     l1391:
  4359  00245A  5006               	movf	setPortData@portNumber,w,c
  4360                           
  4361                           ; Switch size 1, requested type "space"
  4362                           ; Number of cases is 4, Range of values is 0 to 4
  4363                           ; switch strategies available:
  4364                           ; Name         Instructions Cycles
  4365                           ; simple_byte           13     7 (average)
  4366                           ;	Chosen strategy is simple_byte
  4367  00245C  0A00               	xorlw	0	; case 0
  4368  00245E  B4D8               	btfsc	status,2,c
  4369  002460  D7B9               	goto	l242
  4370  002462  0A01               	xorlw	1	; case 1
  4371  002464  B4D8               	btfsc	status,2,c
  4372  002466  D7E2               	goto	l249
  4373  002468  0A02               	xorlw	2	; case 3
  4374  00246A  B4D8               	btfsc	status,2,c
  4375  00246C  D7E2               	goto	l1385
  4376  00246E  0A07               	xorlw	7	; case 4
  4377  002470  A4D8               	btfss	status,2,c
  4378  002472  0012               	return	
  4379  002474  D7E8               	goto	l1387
  4380  002476                     __end_of_setPortData:
  4381                           	opt stack 0
  4382                           tblptru	equ	0xFF8
  4383                           tblptrh	equ	0xFF7
  4384                           tblptrl	equ	0xFF6
  4385                           tablat	equ	0xFF5
  4386                           prodh	equ	0xFF4
  4387                           prodl	equ	0xFF3
  4388                           postinc0	equ	0xFEE
  4389                           wreg	equ	0xFE8
  4390                           postdec1	equ	0xFE5
  4391                           fsr1h	equ	0xFE2
  4392                           fsr1l	equ	0xFE1
  4393                           indf2	equ	0xFDF
  4394                           fsr2h	equ	0xFDA
  4395                           fsr2l	equ	0xFD9
  4396                           status	equ	0xFD8
  4397                           
  4398 ;; *************** function _hexToChar *****************
  4399 ;; Defined at:
  4400 ;;		line 63 in file "source/system.c"
  4401 ;; Parameters:    Size  Location     Type
  4402 ;;  number          1    wreg     unsigned char 
  4403 ;; Auto vars:     Size  Location     Type
  4404 ;;  number          1    0[COMRAM] unsigned char 
  4405 ;; Return value:  Size  Location     Type
  4406 ;;                  1    wreg      unsigned char 
  4407 ;; Registers used:
  4408 ;;		wreg, status,2, status,0
  4409 ;; Tracked objects:
  4410 ;;		On entry : 0/0
  4411 ;;		On exit  : 0/0
  4412 ;;		Unchanged: 0/0
  4413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4415 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4417 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4418 ;;Total ram usage:        1 bytes
  4419 ;; Hardware stack levels used:    1
  4420 ;; This function calls:
  4421 ;;		Nothing
  4422 ;; This function is called by:
  4423 ;;		_setPortData
  4424 ;; This function uses a non-reentrant model
  4425 ;;
  4426                           
  4427                           	psect	text6
  4428  002316                     __ptext6:
  4429                           	opt stack 0
  4430  002316                     _hexToChar:
  4431                           	opt stack 28
  4432                           
  4433                           ;incstack = 0
  4434                           ;hexToChar@number stored from wreg
  4435  002316  CFE8 F001          	movff	wreg,hexToChar@number
  4436                           
  4437                           ;system.c: 65: number = number << 4;
  4438  00231A  3801               	swapf	hexToChar@number,w,c
  4439  00231C  0BF0               	andlw	240
  4440  00231E  6E01               	movwf	hexToChar@number,c
  4441                           
  4442                           ;system.c: 66: number = number >> 4;
  4443  002320  3801               	swapf	hexToChar@number,w,c
  4444  002322  0B0F               	andlw	15
  4445  002324  6E01               	movwf	hexToChar@number,c
  4446                           
  4447                           ;system.c: 67: switch (number)
  4448  002326  D020               	goto	l1229
  4449  002328                     l1163:
  4450                           
  4451                           ;system.c: 70: return '0';
  4452  002328  0E30               	movlw	48
  4453  00232A  0012               	return	
  4454  00232C                     l1167:
  4455                           
  4456                           ;system.c: 72: return '1';
  4457  00232C  0E31               	movlw	49
  4458  00232E  0012               	return	
  4459  002330                     l1171:
  4460                           
  4461                           ;system.c: 74: return '2';
  4462  002330  0E32               	movlw	50
  4463  002332  0012               	return	
  4464  002334                     l1175:
  4465                           
  4466                           ;system.c: 76: return '3';
  4467  002334  0E33               	movlw	51
  4468  002336  0012               	return	
  4469  002338                     l1179:
  4470                           
  4471                           ;system.c: 78: return '4';
  4472  002338  0E34               	movlw	52
  4473  00233A  0012               	return	
  4474  00233C                     l1183:
  4475                           
  4476                           ;system.c: 80: return '5';
  4477  00233C  0E35               	movlw	53
  4478  00233E  0012               	return	
  4479  002340                     l1187:
  4480                           
  4481                           ;system.c: 82: return '6';
  4482  002340  0E36               	movlw	54
  4483  002342  0012               	return	
  4484  002344                     l1191:
  4485                           
  4486                           ;system.c: 84: return '7';
  4487  002344  0E37               	movlw	55
  4488  002346  0012               	return	
  4489  002348                     l1195:
  4490                           
  4491                           ;system.c: 86: return '8';
  4492  002348  0E38               	movlw	56
  4493  00234A  0012               	return	
  4494  00234C                     l1199:
  4495                           
  4496                           ;system.c: 88: return '9';
  4497  00234C  0E39               	movlw	57
  4498  00234E  0012               	return	
  4499  002350                     l1203:
  4500                           
  4501                           ;system.c: 90: return 'A';
  4502  002350  0E41               	movlw	65
  4503  002352  0012               	return	
  4504  002354                     l1207:
  4505                           
  4506                           ;system.c: 92: return 'B';
  4507  002354  0E42               	movlw	66
  4508  002356  0012               	return	
  4509  002358                     l1211:
  4510                           
  4511                           ;system.c: 94: return 'C';
  4512  002358  0E43               	movlw	67
  4513  00235A  0012               	return	
  4514  00235C                     l1215:
  4515                           
  4516                           ;system.c: 96: return 'D';
  4517  00235C  0E44               	movlw	68
  4518  00235E  0012               	return	
  4519  002360                     l1219:
  4520                           
  4521                           ;system.c: 98: return 'E';
  4522  002360  0E45               	movlw	69
  4523  002362  0012               	return	
  4524  002364                     l1223:
  4525                           
  4526                           ;system.c: 100: return 'F';
  4527  002364  0E46               	movlw	70
  4528  002366  0012               	return	
  4529  002368                     l1229:
  4530  002368  5001               	movf	hexToChar@number,w,c
  4531                           
  4532                           ; Switch size 1, requested type "space"
  4533                           ; Number of cases is 16, Range of values is 0 to 15
  4534                           ; switch strategies available:
  4535                           ; Name         Instructions Cycles
  4536                           ; simple_byte           49    25 (average)
  4537                           ;	Chosen strategy is simple_byte
  4538  00236A  0A00               	xorlw	0	; case 0
  4539  00236C  B4D8               	btfsc	status,2,c
  4540  00236E  D7DC               	goto	l1163
  4541  002370  0A01               	xorlw	1	; case 1
  4542  002372  B4D8               	btfsc	status,2,c
  4543  002374  D7DB               	goto	l1167
  4544  002376  0A03               	xorlw	3	; case 2
  4545  002378  B4D8               	btfsc	status,2,c
  4546  00237A  D7DA               	goto	l1171
  4547  00237C  0A01               	xorlw	1	; case 3
  4548  00237E  B4D8               	btfsc	status,2,c
  4549  002380  D7D9               	goto	l1175
  4550  002382  0A07               	xorlw	7	; case 4
  4551  002384  B4D8               	btfsc	status,2,c
  4552  002386  D7D8               	goto	l1179
  4553  002388  0A01               	xorlw	1	; case 5
  4554  00238A  B4D8               	btfsc	status,2,c
  4555  00238C  D7D7               	goto	l1183
  4556  00238E  0A03               	xorlw	3	; case 6
  4557  002390  B4D8               	btfsc	status,2,c
  4558  002392  D7D6               	goto	l1187
  4559  002394  0A01               	xorlw	1	; case 7
  4560  002396  B4D8               	btfsc	status,2,c
  4561  002398  D7D5               	goto	l1191
  4562  00239A  0A0F               	xorlw	15	; case 8
  4563  00239C  B4D8               	btfsc	status,2,c
  4564  00239E  D7D4               	goto	l1195
  4565  0023A0  0A01               	xorlw	1	; case 9
  4566  0023A2  B4D8               	btfsc	status,2,c
  4567  0023A4  D7D3               	goto	l1199
  4568  0023A6  0A03               	xorlw	3	; case 10
  4569  0023A8  B4D8               	btfsc	status,2,c
  4570  0023AA  D7D2               	goto	l1203
  4571  0023AC  0A01               	xorlw	1	; case 11
  4572  0023AE  B4D8               	btfsc	status,2,c
  4573  0023B0  D7D1               	goto	l1207
  4574  0023B2  0A07               	xorlw	7	; case 12
  4575  0023B4  B4D8               	btfsc	status,2,c
  4576  0023B6  D7D0               	goto	l1211
  4577  0023B8  0A01               	xorlw	1	; case 13
  4578  0023BA  B4D8               	btfsc	status,2,c
  4579  0023BC  D7CF               	goto	l1215
  4580  0023BE  0A03               	xorlw	3	; case 14
  4581  0023C0  B4D8               	btfsc	status,2,c
  4582  0023C2  D7CE               	goto	l1219
  4583  0023C4  0A01               	xorlw	1	; case 15
  4584  0023C6  B4D8               	btfsc	status,2,c
  4585  0023C8  D7CD               	goto	l1223
  4586                           
  4587                           ;system.c: 102: return 0;
  4588  0023CA  0E00               	movlw	0
  4589  0023CC  0012               	return	
  4590  0023CE                     __end_of_hexToChar:
  4591                           	opt stack 0
  4592                           tblptru	equ	0xFF8
  4593                           tblptrh	equ	0xFF7
  4594                           tblptrl	equ	0xFF6
  4595                           tablat	equ	0xFF5
  4596                           prodh	equ	0xFF4
  4597                           prodl	equ	0xFF3
  4598                           postinc0	equ	0xFEE
  4599                           wreg	equ	0xFE8
  4600                           postdec1	equ	0xFE5
  4601                           fsr1h	equ	0xFE2
  4602                           fsr1l	equ	0xFE1
  4603                           indf2	equ	0xFDF
  4604                           fsr2h	equ	0xFDA
  4605                           fsr2l	equ	0xFD9
  4606                           status	equ	0xFD8
  4607                           
  4608 ;; *************** function _enableSerial *****************
  4609 ;; Defined at:
  4610 ;;		line 21 in file "source/serial.c"
  4611 ;; Parameters:    Size  Location     Type
  4612 ;;  baudRate        2    0[COMRAM] unsigned int 
  4613 ;; Auto vars:     Size  Location     Type
  4614 ;;		None
  4615 ;; Return value:  Size  Location     Type
  4616 ;;		None               void
  4617 ;; Registers used:
  4618 ;;		wreg, status,2, status,0
  4619 ;; Tracked objects:
  4620 ;;		On entry : 0/0
  4621 ;;		On exit  : 0/0
  4622 ;;		Unchanged: 0/0
  4623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4624 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4625 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4626 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4627 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4628 ;;Total ram usage:        4 bytes
  4629 ;; Hardware stack levels used:    1
  4630 ;; This function calls:
  4631 ;;		Nothing
  4632 ;; This function is called by:
  4633 ;;		_setPortData
  4634 ;; This function uses a non-reentrant model
  4635 ;;
  4636                           
  4637                           	psect	text7
  4638  00250C                     __ptext7:
  4639                           	opt stack 0
  4640  00250C                     _enableSerial:
  4641                           	opt stack 28
  4642                           
  4643                           ;serial.c: 23: LATDbits.LD3 = 1;
  4644                           
  4645                           ;incstack = 0
  4646  00250C  868C               	bsf	3980,3,c	;volatile
  4647                           
  4648                           ;serial.c: 26: switch (baudRate) {
  4649  00250E  D00B               	goto	l1295
  4650  002510                     l1285:
  4651                           
  4652                           ;serial.c: 31: SPBRG2 = 103;
  4653  002510  0E67               	movlw	103
  4654  002512  D007               	goto	L33
  4655  002514                     l1287:
  4656                           
  4657                           ;serial.c: 34: SPBRG2 = 25;
  4658  002514  0E19               	movlw	25
  4659  002516  D005               	goto	L33
  4660  002518                     l1289:
  4661                           
  4662                           ;serial.c: 37: SPBRG2 = 23;
  4663  002518  0E17               	movlw	23
  4664  00251A  D003               	goto	L33
  4665  00251C                     l1291:
  4666                           
  4667                           ;serial.c: 40: SPBRG2 = 12;
  4668  00251C  0E0C               	movlw	12
  4669  00251E  D001               	goto	L33
  4670  002520                     l1293:
  4671                           
  4672                           ;serial.c: 43: SPBRG2 = 207;
  4673  002520  0ECF               	movlw	207
  4674  002522                     L33:
  4675  002522  6E75               	movwf	3957,c	;volatile
  4676                           
  4677                           ;serial.c: 44: }
  4678  002524  D02C               	goto	l1297
  4679  002526                     l1295:
  4680  002526  C001  F003         	movff	enableSerial@baudRate,??_enableSerial
  4681  00252A  C002  F004         	movff	enableSerial@baudRate+1,??_enableSerial+1
  4682                           
  4683                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 5 sub-sw
      +                          itches
  4684                           ; Switch size 1, requested type "space"
  4685                           ; Number of cases is 5, Range of values is 4 to 75
  4686                           ; switch strategies available:
  4687                           ; Name         Instructions Cycles
  4688                           ; simple_byte           16     9 (average)
  4689                           ;	Chosen strategy is simple_byte
  4690  00252E  5004               	movf	??_enableSerial+1,w,c
  4691  002530  0A04               	xorlw	4	; case 4
  4692  002532  B4D8               	btfsc	status,2,c
  4693  002534  D00D               	goto	l1801
  4694  002536  0A0D               	xorlw	13	; case 9
  4695  002538  B4D8               	btfsc	status,2,c
  4696  00253A  D00D               	goto	l1803
  4697  00253C  0A2C               	xorlw	44	; case 37
  4698  00253E  B4D8               	btfsc	status,2,c
  4699  002540  D00F               	goto	l1805
  4700  002542  0A0D               	xorlw	13	; case 40
  4701  002544  B4D8               	btfsc	status,2,c
  4702  002546  D011               	goto	l1807
  4703  002548  0A63               	xorlw	99	; case 75
  4704  00254A  B4D8               	btfsc	status,2,c
  4705  00254C  D013               	goto	l1809
  4706  00254E  D7E8               	goto	l1293
  4707  002550                     l1801:
  4708                           
  4709                           ; Switch size 1, requested type "space"
  4710                           ; Number of cases is 1, Range of values is 176 to 176
  4711                           ; switch strategies available:
  4712                           ; Name         Instructions Cycles
  4713                           ; simple_byte            4     3 (average)
  4714                           ;	Chosen strategy is simple_byte
  4715  002550  5003               	movf	??_enableSerial,w,c
  4716  002552  0AB0               	xorlw	176	; case 176
  4717  002554  D7E5               	goto	l1293
  4718  002556                     l1803:
  4719                           
  4720                           ; Switch size 1, requested type "space"
  4721                           ; Number of cases is 1, Range of values is 96 to 96
  4722                           ; switch strategies available:
  4723                           ; Name         Instructions Cycles
  4724                           ; simple_byte            4     3 (average)
  4725                           ;	Chosen strategy is simple_byte
  4726  002556  5003               	movf	??_enableSerial,w,c
  4727  002558  0A60               	xorlw	96	; case 96
  4728  00255A  B4D8               	btfsc	status,2,c
  4729  00255C  D7D9               	goto	l1285
  4730  00255E  D7E0               	goto	l1293
  4731  002560                     l1805:
  4732                           
  4733                           ; Switch size 1, requested type "space"
  4734                           ; Number of cases is 1, Range of values is 128 to 128
  4735                           ; switch strategies available:
  4736                           ; Name         Instructions Cycles
  4737                           ; simple_byte            4     3 (average)
  4738                           ;	Chosen strategy is simple_byte
  4739  002560  5003               	movf	??_enableSerial,w,c
  4740  002562  0A80               	xorlw	128	; case 128
  4741  002564  B4D8               	btfsc	status,2,c
  4742  002566  D7D6               	goto	l1287
  4743  002568  D7DB               	goto	l1293
  4744  00256A                     l1807:
  4745                           
  4746                           ; Switch size 1, requested type "space"
  4747                           ; Number of cases is 1, Range of values is 177 to 177
  4748                           ; switch strategies available:
  4749                           ; Name         Instructions Cycles
  4750                           ; simple_byte            4     3 (average)
  4751                           ;	Chosen strategy is simple_byte
  4752  00256A  5003               	movf	??_enableSerial,w,c
  4753  00256C  0AB1               	xorlw	177	; case 177
  4754  00256E  B4D8               	btfsc	status,2,c
  4755  002570  D7D3               	goto	l1289
  4756  002572  D7D6               	goto	l1293
  4757  002574                     l1809:
  4758                           
  4759                           ; Switch size 1, requested type "space"
  4760                           ; Number of cases is 1, Range of values is 0 to 0
  4761                           ; switch strategies available:
  4762                           ; Name         Instructions Cycles
  4763                           ; simple_byte            4     3 (average)
  4764                           ;	Chosen strategy is simple_byte
  4765  002574  5003               	movf	??_enableSerial,w,c
  4766  002576  0A00               	xorlw	0	; case 0
  4767  002578  B4D8               	btfsc	status,2,c
  4768  00257A  D7D0               	goto	l1291
  4769  00257C  D7D1               	goto	l1293
  4770  00257E                     l1297:
  4771                           
  4772                           ;serial.c: 46: SPBRGH2 = 0;
  4773  00257E  0E00               	movlw	0
  4774  002580  6E76               	movwf	3958,c	;volatile
  4775                           
  4776                           ;serial.c: 47: TXSTA2bits.BRGH = 0;
  4777  002582  9472               	bcf	3954,2,c	;volatile
  4778                           
  4779                           ;serial.c: 48: BAUDCON2bits.BRG16 = 0;
  4780  002584  9670               	bcf	3952,3,c	;volatile
  4781                           
  4782                           ;serial.c: 50: TXSTA2bits.TX9 = 0;
  4783  002586  9C72               	bcf	3954,6,c	;volatile
  4784                           
  4785                           ;serial.c: 51: RCSTA2bits.RX9 = 0;
  4786  002588  9C71               	bcf	3953,6,c	;volatile
  4787                           
  4788                           ;serial.c: 53: TXSTA2bits.SYNC = 0;
  4789  00258A  9872               	bcf	3954,4,c	;volatile
  4790                           
  4791                           ;serial.c: 54: BAUDCON2bits.DTRXP = 0;
  4792  00258C  9A70               	bcf	3952,5,c	;volatile
  4793                           
  4794                           ;serial.c: 56: TXSTA2bits.TXEN = 1;
  4795  00258E  8A72               	bsf	3954,5,c	;volatile
  4796                           
  4797                           ;serial.c: 57: RCSTA2bits.CREN = 1;
  4798  002590  8871               	bsf	3953,4,c	;volatile
  4799                           
  4800                           ;serial.c: 59: RCSTA2bits.SPEN = 1;
  4801  002592  8E71               	bsf	3953,7,c	;volatile
  4802  002594  0012               	return	
  4803  002596                     __end_of_enableSerial:
  4804                           	opt stack 0
  4805                           tblptru	equ	0xFF8
  4806                           tblptrh	equ	0xFF7
  4807                           tblptrl	equ	0xFF6
  4808                           tablat	equ	0xFF5
  4809                           prodh	equ	0xFF4
  4810                           prodl	equ	0xFF3
  4811                           postinc0	equ	0xFEE
  4812                           wreg	equ	0xFE8
  4813                           postdec1	equ	0xFE5
  4814                           fsr1h	equ	0xFE2
  4815                           fsr1l	equ	0xFE1
  4816                           indf2	equ	0xFDF
  4817                           fsr2h	equ	0xFDA
  4818                           fsr2l	equ	0xFD9
  4819                           status	equ	0xFD8
  4820                           
  4821 ;; *************** function _dispSeg *****************
  4822 ;; Defined at:
  4823 ;;		line 13 in file "source/segment.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;  segment         1    wreg     unsigned char 
  4826 ;;  letter          1    0[COMRAM] unsigned char 
  4827 ;; Auto vars:     Size  Location     Type
  4828 ;;  segment         1    1[COMRAM] unsigned char 
  4829 ;; Return value:  Size  Location     Type
  4830 ;;		None               void
  4831 ;; Registers used:
  4832 ;;		wreg, status,2, status,0
  4833 ;; Tracked objects:
  4834 ;;		On entry : 0/0
  4835 ;;		On exit  : 0/0
  4836 ;;		Unchanged: 0/0
  4837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4838 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4839 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4841 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4842 ;;Total ram usage:        2 bytes
  4843 ;; Hardware stack levels used:    1
  4844 ;; This function calls:
  4845 ;;		Nothing
  4846 ;; This function is called by:
  4847 ;;		_main
  4848 ;;		_setPortData
  4849 ;;		_cycleSegDisplays
  4850 ;; This function uses a non-reentrant model
  4851 ;;
  4852                           
  4853                           	psect	text8
  4854  001FCA                     __ptext8:
  4855                           	opt stack 0
  4856  001FCA                     _dispSeg:
  4857                           	opt stack 28
  4858                           
  4859                           ;incstack = 0
  4860                           ;dispSeg@segment stored from wreg
  4861  001FCA  CFE8 F002          	movff	wreg,dispSeg@segment
  4862                           
  4863                           ;segment.c: 15: switch (letter) {
  4864  001FCE  D156               	goto	l1077
  4865  001FD0                     l1003:
  4866                           
  4867                           ;segment.c: 17: case 'X':
  4868                           ;segment.c: 18: if (segment == 1) {
  4869  001FD0  0402               	decf	dispSeg@segment,w,c
  4870  001FD2  A4D8               	btfss	status,2,c
  4871  001FD4  D008               	goto	l56
  4872                           
  4873                           ;segment.c: 19: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = LATAbits.LA1 = 0;
  4874  001FD6  9289               	bcf	3977,1,c	;volatile
  4875  001FD8  9089               	bcf	3977,0,c	;volatile
  4876  001FDA  908D               	bcf	3981,0,c	;volatile
  4877  001FDC  9A89               	bcf	3977,5,c	;volatile
  4878  001FDE  9889               	bcf	3977,4,c	;volatile
  4879  001FE0  9689               	bcf	3977,3,c	;volatile
  4880  001FE2  9489               	bcf	3977,2,c	;volatile
  4881                           
  4882                           ;segment.c: 20: return;
  4883  001FE4  0012               	return	
  4884  001FE6                     l56:
  4885                           
  4886                           ;segment.c: 21: }
  4887                           ;segment.c: 22: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = LATEbits.LE2 = 0;
  4888  001FE6  948D               	bcf	3981,2,c	;volatile
  4889  001FE8  928D               	bcf	3981,1,c	;volatile
  4890  001FEA  928B               	bcf	3979,1,c	;volatile
  4891  001FEC  908B               	bcf	3979,0,c	;volatile
  4892  001FEE  948B               	bcf	3979,2,c	;volatile
  4893  001FF0  9C89               	bcf	3977,6,c	;volatile
  4894  001FF2  9E89               	bcf	3977,7,c	;volatile
  4895                           
  4896                           ;segment.c: 23: break;
  4897  001FF4  0012               	return	
  4898  001FF6                     l1007:
  4899                           
  4900                           ;segment.c: 25: if (segment == 1) {
  4901  001FF6  0402               	decf	dispSeg@segment,w,c
  4902  001FF8  A4D8               	btfss	status,2,c
  4903  001FFA  D008               	goto	l60
  4904                           
  4905                           ;segment.c: 26: LATAbits.LA1 = 1;
  4906  001FFC  8289               	bsf	3977,1,c	;volatile
  4907                           
  4908                           ;segment.c: 27: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = 0;
  4909  001FFE  9089               	bcf	3977,0,c	;volatile
  4910  002000  908D               	bcf	3981,0,c	;volatile
  4911  002002  9A89               	bcf	3977,5,c	;volatile
  4912  002004  9889               	bcf	3977,4,c	;volatile
  4913  002006  9689               	bcf	3977,3,c	;volatile
  4914  002008  9489               	bcf	3977,2,c	;volatile
  4915                           
  4916                           ;segment.c: 28: return;
  4917  00200A  0012               	return	
  4918  00200C                     l60:
  4919                           
  4920                           ;segment.c: 29: }
  4921                           ;segment.c: 30: LATEbits.LE2 = 1;
  4922  00200C  848D               	bsf	3981,2,c	;volatile
  4923                           
  4924                           ;segment.c: 31: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = 0;
  4925  00200E  928D               	bcf	3981,1,c	;volatile
  4926  002010  928B               	bcf	3979,1,c	;volatile
  4927  002012  908B               	bcf	3979,0,c	;volatile
  4928  002014  948B               	bcf	3979,2,c	;volatile
  4929  002016  9C89               	bcf	3977,6,c	;volatile
  4930  002018  9E89               	bcf	3977,7,c	;volatile
  4931                           
  4932                           ;segment.c: 32: break;
  4933  00201A  0012               	return	
  4934  00201C                     l1011:
  4935                           
  4936                           ;segment.c: 34: if (segment == 1) {
  4937  00201C  0402               	decf	dispSeg@segment,w,c
  4938  00201E  A4D8               	btfss	status,2,c
  4939  002020  D008               	goto	l62
  4940                           
  4941                           ;segment.c: 35: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = 1;
  4942  002022  8089               	bsf	3977,0,c	;volatile
  4943  002024  808D               	bsf	3981,0,c	;volatile
  4944  002026  8A89               	bsf	3977,5,c	;volatile
  4945  002028  8889               	bsf	3977,4,c	;volatile
  4946  00202A  8689               	bsf	3977,3,c	;volatile
  4947  00202C  8489               	bsf	3977,2,c	;volatile
  4948                           
  4949                           ;segment.c: 36: LATAbits.LA1 = 0;
  4950  00202E  9289               	bcf	3977,1,c	;volatile
  4951                           
  4952                           ;segment.c: 37: return;
  4953  002030  0012               	return	
  4954  002032                     l62:
  4955                           
  4956                           ;segment.c: 38: }
  4957                           ;segment.c: 39: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = 1;
  4958  002032  828D               	bsf	3981,1,c	;volatile
  4959  002034  828B               	bsf	3979,1,c	;volatile
  4960  002036  808B               	bsf	3979,0,c	;volatile
  4961  002038  848B               	bsf	3979,2,c	;volatile
  4962  00203A  8C89               	bsf	3977,6,c	;volatile
  4963  00203C  8E89               	bsf	3977,7,c	;volatile
  4964                           
  4965                           ;segment.c: 40: LATEbits.LE2 = 0;
  4966  00203E  948D               	bcf	3981,2,c	;volatile
  4967                           
  4968                           ;segment.c: 41: break;
  4969  002040  0012               	return	
  4970  002042                     l1015:
  4971                           
  4972                           ;segment.c: 43: if (segment == 1) {
  4973  002042  0402               	decf	dispSeg@segment,w,c
  4974  002044  A4D8               	btfss	status,2,c
  4975  002046  D008               	goto	l64
  4976                           
  4977                           ;segment.c: 44: LATAbits.LA3 = LATAbits.LA4 = 1;
  4978  002048  8889               	bsf	3977,4,c	;volatile
  4979  00204A  8689               	bsf	3977,3,c	;volatile
  4980                           
  4981                           ;segment.c: 45: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1
      +                           = 0;
  4982  00204C  9289               	bcf	3977,1,c	;volatile
  4983  00204E  9089               	bcf	3977,0,c	;volatile
  4984  002050  908D               	bcf	3981,0,c	;volatile
  4985  002052  9A89               	bcf	3977,5,c	;volatile
  4986  002054  9489               	bcf	3977,2,c	;volatile
  4987                           
  4988                           ;segment.c: 46: return;
  4989  002056  0012               	return	
  4990  002058                     l64:
  4991                           
  4992                           ;segment.c: 47: }
  4993                           ;segment.c: 48: LATAbits.LA6 = LATCbits.LC2 = 1;
  4994  002058  848B               	bsf	3979,2,c	;volatile
  4995  00205A  8C89               	bsf	3977,6,c	;volatile
  4996                           
  4997                           ;segment.c: 49: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2
      +                           = 0;
  4998  00205C  948D               	bcf	3981,2,c	;volatile
  4999  00205E  928D               	bcf	3981,1,c	;volatile
  5000  002060  928B               	bcf	3979,1,c	;volatile
  5001  002062  908B               	bcf	3979,0,c	;volatile
  5002  002064  9E89               	bcf	3977,7,c	;volatile
  5003                           
  5004                           ;segment.c: 50: break;
  5005  002066  0012               	return	
  5006  002068                     l1019:
  5007                           
  5008                           ;segment.c: 52: if (segment == 1) {
  5009  002068  0402               	decf	dispSeg@segment,w,c
  5010  00206A  A4D8               	btfss	status,2,c
  5011  00206C  D008               	goto	l66
  5012                           
  5013                           ;segment.c: 53: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA1 = LATEbits.LE0 = LATAbits.LA5
      +                           = 1;
  5014  00206E  8A89               	bsf	3977,5,c	;volatile
  5015  002070  808D               	bsf	3981,0,c	;volatile
  5016  002072  8289               	bsf	3977,1,c	;volatile
  5017  002074  8689               	bsf	3977,3,c	;volatile
  5018  002076  8489               	bsf	3977,2,c	;volatile
  5019                           
  5020                           ;segment.c: 54: LATAbits.LA4 = LATAbits.LA0 = 0;
  5021  002078  9089               	bcf	3977,0,c	;volatile
  5022  00207A  9889               	bcf	3977,4,c	;volatile
  5023                           
  5024                           ;segment.c: 55: return;
  5025  00207C  0012               	return	
  5026  00207E                     l66:
  5027                           
  5028                           ;segment.c: 56: }
  5029                           ;segment.c: 57: LATAbits.LA7 = LATAbits.LA6 = LATEbits.LE2 = LATCbits.LC1 = LATCbits.LC0
      +                           = 1;
  5030  00207E  808B               	bsf	3979,0,c	;volatile
  5031  002080  828B               	bsf	3979,1,c	;volatile
  5032  002082  848D               	bsf	3981,2,c	;volatile
  5033  002084  8C89               	bsf	3977,6,c	;volatile
  5034  002086  8E89               	bsf	3977,7,c	;volatile
  5035                           
  5036                           ;segment.c: 58: LATCbits.LC2 = LATEbits.LE1 = 0;
  5037  002088  928D               	bcf	3981,1,c	;volatile
  5038  00208A  948B               	bcf	3979,2,c	;volatile
  5039                           
  5040                           ;segment.c: 59: break;
  5041  00208C  0012               	return	
  5042  00208E                     l1023:
  5043                           
  5044                           ;segment.c: 61: if (segment == 1) {
  5045  00208E  0402               	decf	dispSeg@segment,w,c
  5046  002090  A4D8               	btfss	status,2,c
  5047  002092  D008               	goto	l68
  5048                           
  5049                           ;segment.c: 62: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = 1;
  5050  002094  8A89               	bsf	3977,5,c	;volatile
  5051  002096  8889               	bsf	3977,4,c	;volatile
  5052  002098  8289               	bsf	3977,1,c	;volatile
  5053  00209A  8689               	bsf	3977,3,c	;volatile
  5054  00209C  8489               	bsf	3977,2,c	;volatile
  5055                           
  5056                           ;segment.c: 63: LATEbits.LE0 = LATAbits.LA0 = 0;
  5057  00209E  9089               	bcf	3977,0,c	;volatile
  5058  0020A0  908D               	bcf	3981,0,c	;volatile
  5059                           
  5060                           ;segment.c: 64: return;
  5061  0020A2  0012               	return	
  5062  0020A4                     l68:
  5063                           
  5064                           ;segment.c: 65: }
  5065                           ;segment.c: 66: LATAbits.LA7 = LATAbits.LA6 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = 1;
  5066  0020A4  808B               	bsf	3979,0,c	;volatile
  5067  0020A6  848B               	bsf	3979,2,c	;volatile
  5068  0020A8  848D               	bsf	3981,2,c	;volatile
  5069  0020AA  8C89               	bsf	3977,6,c	;volatile
  5070  0020AC  8E89               	bsf	3977,7,c	;volatile
  5071                           
  5072                           ;segment.c: 67: LATCbits.LC1 = LATEbits.LE1 = 0;
  5073  0020AE  928D               	bcf	3981,1,c	;volatile
  5074  0020B0  928B               	bcf	3979,1,c	;volatile
  5075                           
  5076                           ;segment.c: 68: break;
  5077  0020B2  0012               	return	
  5078  0020B4                     l1027:
  5079                           
  5080                           ;segment.c: 70: if (segment == 1) {
  5081  0020B4  0402               	decf	dispSeg@segment,w,c
  5082  0020B6  A4D8               	btfss	status,2,c
  5083  0020B8  D008               	goto	l70
  5084                           
  5085                           ;segment.c: 71: LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA3 = LATAbits.LA4 = 1;
  5086  0020BA  8889               	bsf	3977,4,c	;volatile
  5087  0020BC  8689               	bsf	3977,3,c	;volatile
  5088  0020BE  8289               	bsf	3977,1,c	;volatile
  5089  0020C0  8089               	bsf	3977,0,c	;volatile
  5090                           
  5091                           ;segment.c: 72: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = 0;
  5092  0020C2  908D               	bcf	3981,0,c	;volatile
  5093  0020C4  9A89               	bcf	3977,5,c	;volatile
  5094  0020C6  9489               	bcf	3977,2,c	;volatile
  5095                           
  5096                           ;segment.c: 73: return;
  5097  0020C8  0012               	return	
  5098  0020CA                     l70:
  5099                           
  5100                           ;segment.c: 74: }
  5101                           ;segment.c: 75: LATEbits.LE1 = LATEbits.LE2 = LATAbits.LA6 = LATCbits.LC2 = 1;
  5102  0020CA  848B               	bsf	3979,2,c	;volatile
  5103  0020CC  8C89               	bsf	3977,6,c	;volatile
  5104  0020CE  848D               	bsf	3981,2,c	;volatile
  5105  0020D0  828D               	bsf	3981,1,c	;volatile
  5106                           
  5107                           ;segment.c: 76: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = 0;
  5108  0020D2  928B               	bcf	3979,1,c	;volatile
  5109  0020D4  908B               	bcf	3979,0,c	;volatile
  5110  0020D6  9E89               	bcf	3977,7,c	;volatile
  5111                           
  5112                           ;segment.c: 77: break;
  5113  0020D8  0012               	return	
  5114  0020DA                     l1031:
  5115                           
  5116                           ;segment.c: 79: if (segment == 1) {
  5117  0020DA  0402               	decf	dispSeg@segment,w,c
  5118  0020DC  A4D8               	btfss	status,2,c
  5119  0020DE  D008               	goto	l72
  5120                           
  5121                           ;segment.c: 80: LATAbits.LA2 = LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = 1;
  5122  0020E0  8A89               	bsf	3977,5,c	;volatile
  5123  0020E2  8889               	bsf	3977,4,c	;volatile
  5124  0020E4  8289               	bsf	3977,1,c	;volatile
  5125  0020E6  8089               	bsf	3977,0,c	;volatile
  5126  0020E8  8489               	bsf	3977,2,c	;volatile
  5127                           
  5128                           ;segment.c: 81: LATAbits.LA3 = LATEbits.LE0 = 0;
  5129  0020EA  908D               	bcf	3981,0,c	;volatile
  5130  0020EC  9689               	bcf	3977,3,c	;volatile
  5131                           
  5132                           ;segment.c: 82: return;
  5133  0020EE  0012               	return	
  5134  0020F0                     l72:
  5135                           
  5136                           ;segment.c: 83: }
  5137                           ;segment.c: 84: LATAbits.LA7 = LATEbits.LE1 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = 1;
  5138  0020F0  808B               	bsf	3979,0,c	;volatile
  5139  0020F2  848B               	bsf	3979,2,c	;volatile
  5140  0020F4  848D               	bsf	3981,2,c	;volatile
  5141  0020F6  828D               	bsf	3981,1,c	;volatile
  5142  0020F8  8E89               	bsf	3977,7,c	;volatile
  5143                           
  5144                           ;segment.c: 85: LATAbits.LA6 = LATCbits.LC1 = 0;
  5145  0020FA  928B               	bcf	3979,1,c	;volatile
  5146  0020FC  9C89               	bcf	3977,6,c	;volatile
  5147                           
  5148                           ;segment.c: 86: break;
  5149  0020FE  0012               	return	
  5150  002100                     l1035:
  5151                           
  5152                           ;segment.c: 88: if (segment == 1) {
  5153  002100  0402               	decf	dispSeg@segment,w,c
  5154  002102  A4D8               	btfss	status,2,c
  5155  002104  D008               	goto	l74
  5156                           
  5157                           ;segment.c: 89: LATAbits.LA2 = LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = LATEbits.LE0 = 1;
  5158  002106  808D               	bsf	3981,0,c	;volatile
  5159  002108  8A89               	bsf	3977,5,c	;volatile
  5160  00210A  8889               	bsf	3977,4,c	;volatile
  5161  00210C  8289               	bsf	3977,1,c	;volatile
  5162  00210E  8089               	bsf	3977,0,c	;volatile
  5163  002110  8489               	bsf	3977,2,c	;volatile
  5164                           
  5165                           ;segment.c: 90: LATAbits.LA3 = 0;
  5166  002112  9689               	bcf	3977,3,c	;volatile
  5167                           
  5168                           ;segment.c: 91: return;
  5169  002114  0012               	return	
  5170  002116                     l74:
  5171                           
  5172                           ;segment.c: 92: }
  5173                           ;segment.c: 93: LATAbits.LA7 = LATEbits.LE1 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = LATCbits.LC1 = 1;
  5174  002116  828B               	bsf	3979,1,c	;volatile
  5175  002118  808B               	bsf	3979,0,c	;volatile
  5176  00211A  848B               	bsf	3979,2,c	;volatile
  5177  00211C  848D               	bsf	3981,2,c	;volatile
  5178  00211E  828D               	bsf	3981,1,c	;volatile
  5179  002120  8E89               	bsf	3977,7,c	;volatile
  5180                           
  5181                           ;segment.c: 94: LATAbits.LA6 = 0;
  5182  002122  9C89               	bcf	3977,6,c	;volatile
  5183                           
  5184                           ;segment.c: 95: break;
  5185  002124  0012               	return	
  5186  002126                     l1039:
  5187                           
  5188                           ;segment.c: 97: if (segment == 1) {
  5189  002126  0402               	decf	dispSeg@segment,w,c
  5190  002128  A4D8               	btfss	status,2,c
  5191  00212A  D008               	goto	l76
  5192                           
  5193                           ;segment.c: 98: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = 1;
  5194  00212C  8889               	bsf	3977,4,c	;volatile
  5195  00212E  8689               	bsf	3977,3,c	;volatile
  5196  002130  8489               	bsf	3977,2,c	;volatile
  5197                           
  5198                           ;segment.c: 99: LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1 = 0;
  5199  002132  9289               	bcf	3977,1,c	;volatile
  5200  002134  9089               	bcf	3977,0,c	;volatile
  5201  002136  908D               	bcf	3981,0,c	;volatile
  5202  002138  9A89               	bcf	3977,5,c	;volatile
  5203                           
  5204                           ;segment.c: 100: return;
  5205  00213A  0012               	return	
  5206  00213C                     l76:
  5207                           
  5208                           ;segment.c: 101: }
  5209                           ;segment.c: 102: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = 1;
  5210  00213C  848B               	bsf	3979,2,c	;volatile
  5211  00213E  8C89               	bsf	3977,6,c	;volatile
  5212  002140  8E89               	bsf	3977,7,c	;volatile
  5213                           
  5214                           ;segment.c: 103: LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2 = 0;
  5215  002142  948D               	bcf	3981,2,c	;volatile
  5216  002144  928D               	bcf	3981,1,c	;volatile
  5217  002146  928B               	bcf	3979,1,c	;volatile
  5218  002148  908B               	bcf	3979,0,c	;volatile
  5219                           
  5220                           ;segment.c: 104: break;
  5221  00214A  0012               	return	
  5222  00214C                     l1043:
  5223                           
  5224                           ;segment.c: 106: if (segment == 1) {
  5225  00214C  0402               	decf	dispSeg@segment,w,c
  5226  00214E  A4D8               	btfss	status,2,c
  5227  002150  D008               	goto	l78
  5228                           
  5229                           ;segment.c: 107: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE
      +                          0 = LATAbits.LA0 = LATAbits.LA1 = 1;
  5230  002152  8289               	bsf	3977,1,c	;volatile
  5231  002154  8089               	bsf	3977,0,c	;volatile
  5232  002156  808D               	bsf	3981,0,c	;volatile
  5233  002158  8A89               	bsf	3977,5,c	;volatile
  5234  00215A  8889               	bsf	3977,4,c	;volatile
  5235  00215C  8689               	bsf	3977,3,c	;volatile
  5236  00215E  8489               	bsf	3977,2,c	;volatile
  5237                           
  5238                           ;segment.c: 108: return;
  5239  002160  0012               	return	
  5240  002162                     l78:
  5241                           
  5242                           ;segment.c: 109: }
  5243                           ;segment.c: 110: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC
      +                          1 = LATEbits.LE1 = LATEbits.LE2 = 1;
  5244  002162  848D               	bsf	3981,2,c	;volatile
  5245  002164  828D               	bsf	3981,1,c	;volatile
  5246  002166  828B               	bsf	3979,1,c	;volatile
  5247  002168  808B               	bsf	3979,0,c	;volatile
  5248  00216A  848B               	bsf	3979,2,c	;volatile
  5249  00216C  8C89               	bsf	3977,6,c	;volatile
  5250  00216E  8E89               	bsf	3977,7,c	;volatile
  5251                           
  5252                           ;segment.c: 111: break;
  5253  002170  0012               	return	
  5254  002172                     l1047:
  5255                           
  5256                           ;segment.c: 113: if (segment == 1) {
  5257  002172  0402               	decf	dispSeg@segment,w,c
  5258  002174  A4D8               	btfss	status,2,c
  5259  002176  D008               	goto	l80
  5260                           
  5261                           ;segment.c: 114: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATAbits.LA
      +                          0 = LATAbits.LA1 = 1;
  5262  002178  8289               	bsf	3977,1,c	;volatile
  5263  00217A  8089               	bsf	3977,0,c	;volatile
  5264  00217C  8A89               	bsf	3977,5,c	;volatile
  5265  00217E  8889               	bsf	3977,4,c	;volatile
  5266  002180  8689               	bsf	3977,3,c	;volatile
  5267  002182  8489               	bsf	3977,2,c	;volatile
  5268                           
  5269                           ;segment.c: 115: LATEbits.LE0 = 0;
  5270  002184  908D               	bcf	3981,0,c	;volatile
  5271                           
  5272                           ;segment.c: 116: return;
  5273  002186  0012               	return	
  5274  002188                     l80:
  5275                           
  5276                           ;segment.c: 117: }
  5277                           ;segment.c: 118: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATEbits.LE
      +                          1 = LATEbits.LE2 = 1;
  5278  002188  848D               	bsf	3981,2,c	;volatile
  5279  00218A  828D               	bsf	3981,1,c	;volatile
  5280  00218C  808B               	bsf	3979,0,c	;volatile
  5281  00218E  848B               	bsf	3979,2,c	;volatile
  5282  002190  8C89               	bsf	3977,6,c	;volatile
  5283  002192  8E89               	bsf	3977,7,c	;volatile
  5284                           
  5285                           ;segment.c: 119: LATCbits.LC1 = 0;
  5286  002194  928B               	bcf	3979,1,c	;volatile
  5287                           
  5288                           ;segment.c: 120: break;
  5289  002196  0012               	return	
  5290  002198                     l1051:
  5291                           
  5292                           ;segment.c: 122: case 'A':
  5293                           ;segment.c: 123: if (segment == 1) {
  5294  002198  0402               	decf	dispSeg@segment,w,c
  5295  00219A  A4D8               	btfss	status,2,c
  5296  00219C  D008               	goto	l83
  5297                           
  5298                           ;segment.c: 124: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATEbits.LE0 = LATAbits.LA
      +                          0 = LATAbits.LA1 = 1;
  5299  00219E  8289               	bsf	3977,1,c	;volatile
  5300  0021A0  8089               	bsf	3977,0,c	;volatile
  5301  0021A2  808D               	bsf	3981,0,c	;volatile
  5302  0021A4  8889               	bsf	3977,4,c	;volatile
  5303  0021A6  8689               	bsf	3977,3,c	;volatile
  5304  0021A8  8489               	bsf	3977,2,c	;volatile
  5305                           
  5306                           ;segment.c: 125: LATAbits.LA5 = 0;
  5307  0021AA  9A89               	bcf	3977,5,c	;volatile
  5308                           
  5309                           ;segment.c: 126: return;
  5310  0021AC  0012               	return	
  5311  0021AE                     l83:
  5312                           
  5313                           ;segment.c: 127: }
  5314                           ;segment.c: 128: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC1 = LATEbits.LE
      +                          1 = LATEbits.LE2 = 1;
  5315  0021AE  848D               	bsf	3981,2,c	;volatile
  5316  0021B0  828D               	bsf	3981,1,c	;volatile
  5317  0021B2  828B               	bsf	3979,1,c	;volatile
  5318  0021B4  848B               	bsf	3979,2,c	;volatile
  5319  0021B6  8C89               	bsf	3977,6,c	;volatile
  5320  0021B8  8E89               	bsf	3977,7,c	;volatile
  5321                           
  5322                           ;segment.c: 129: LATCbits.LC0 = 0;
  5323  0021BA  908B               	bcf	3979,0,c	;volatile
  5324                           
  5325                           ;segment.c: 130: break;
  5326  0021BC  0012               	return	
  5327  0021BE                     l1055:
  5328                           
  5329                           ;segment.c: 132: case 'B':
  5330                           ;segment.c: 133: if (segment == 1) {
  5331  0021BE  0402               	decf	dispSeg@segment,w,c
  5332  0021C0  A4D8               	btfss	status,2,c
  5333  0021C2  D008               	goto	l86
  5334                           
  5335                           ;segment.c: 134: LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA
      +                          1 = 1;
  5336  0021C4  8289               	bsf	3977,1,c	;volatile
  5337  0021C6  8089               	bsf	3977,0,c	;volatile
  5338  0021C8  808D               	bsf	3981,0,c	;volatile
  5339  0021CA  8A89               	bsf	3977,5,c	;volatile
  5340  0021CC  8889               	bsf	3977,4,c	;volatile
  5341                           
  5342                           ;segment.c: 135: LATAbits.LA2 = LATAbits.LA3 = 0;
  5343  0021CE  9689               	bcf	3977,3,c	;volatile
  5344  0021D0  9489               	bcf	3977,2,c	;volatile
  5345                           
  5346                           ;segment.c: 136: return;
  5347  0021D2  0012               	return	
  5348  0021D4                     l86:
  5349                           
  5350                           ;segment.c: 137: }
  5351                           ;segment.c: 138: LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE
      +                          2 = 1;
  5352  0021D4  848D               	bsf	3981,2,c	;volatile
  5353  0021D6  828D               	bsf	3981,1,c	;volatile
  5354  0021D8  828B               	bsf	3979,1,c	;volatile
  5355  0021DA  808B               	bsf	3979,0,c	;volatile
  5356  0021DC  848B               	bsf	3979,2,c	;volatile
  5357                           
  5358                           ;segment.c: 139: LATAbits.LA7 = LATAbits.LA6 = 0;
  5359  0021DE  9C89               	bcf	3977,6,c	;volatile
  5360  0021E0  9E89               	bcf	3977,7,c	;volatile
  5361                           
  5362                           ;segment.c: 140: break;
  5363  0021E2  0012               	return	
  5364  0021E4                     l1059:
  5365                           
  5366                           ;segment.c: 142: case 'C':
  5367                           ;segment.c: 143: if (segment == 1) {
  5368  0021E4  0402               	decf	dispSeg@segment,w,c
  5369  0021E6  A4D8               	btfss	status,2,c
  5370  0021E8  D008               	goto	l89
  5371                           
  5372                           ;segment.c: 144: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = 1;
  5373  0021EA  8089               	bsf	3977,0,c	;volatile
  5374  0021EC  808D               	bsf	3981,0,c	;volatile
  5375  0021EE  8A89               	bsf	3977,5,c	;volatile
  5376  0021F0  8489               	bsf	3977,2,c	;volatile
  5377                           
  5378                           ;segment.c: 145: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA1 = 0;
  5379  0021F2  9289               	bcf	3977,1,c	;volatile
  5380  0021F4  9889               	bcf	3977,4,c	;volatile
  5381  0021F6  9689               	bcf	3977,3,c	;volatile
  5382                           
  5383                           ;segment.c: 146: return;
  5384  0021F8  0012               	return	
  5385  0021FA                     l89:
  5386                           
  5387                           ;segment.c: 147: }
  5388                           ;segment.c: 148: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = 1;
  5389  0021FA  828D               	bsf	3981,1,c	;volatile
  5390  0021FC  828B               	bsf	3979,1,c	;volatile
  5391  0021FE  808B               	bsf	3979,0,c	;volatile
  5392  002200  8E89               	bsf	3977,7,c	;volatile
  5393                           
  5394                           ;segment.c: 149: LATAbits.LA6 = LATCbits.LC2 = LATEbits.LE2 = 0;
  5395  002202  948D               	bcf	3981,2,c	;volatile
  5396  002204  948B               	bcf	3979,2,c	;volatile
  5397  002206  9C89               	bcf	3977,6,c	;volatile
  5398                           
  5399                           ;segment.c: 150: break;
  5400  002208  0012               	return	
  5401  00220A                     l1063:
  5402                           
  5403                           ;segment.c: 152: case 'D':
  5404                           ;segment.c: 153: if (segment == 1) {
  5405  00220A  0402               	decf	dispSeg@segment,w,c
  5406  00220C  A4D8               	btfss	status,2,c
  5407  00220E  D008               	goto	l92
  5408                           
  5409                           ;segment.c: 154: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA
      +                          1 = 1;
  5410  002210  8289               	bsf	3977,1,c	;volatile
  5411  002212  808D               	bsf	3981,0,c	;volatile
  5412  002214  8A89               	bsf	3977,5,c	;volatile
  5413  002216  8889               	bsf	3977,4,c	;volatile
  5414  002218  8689               	bsf	3977,3,c	;volatile
  5415                           
  5416                           ;segment.c: 155: LATAbits.LA2 = LATAbits.LA0 = 0;
  5417  00221A  9089               	bcf	3977,0,c	;volatile
  5418  00221C  9489               	bcf	3977,2,c	;volatile
  5419                           
  5420                           ;segment.c: 156: return;
  5421  00221E  0012               	return	
  5422  002220                     l92:
  5423                           
  5424                           ;segment.c: 157: }
  5425                           ;segment.c: 158: LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE
      +                          2 = 1;
  5426  002220  848D               	bsf	3981,2,c	;volatile
  5427  002222  828B               	bsf	3979,1,c	;volatile
  5428  002224  808B               	bsf	3979,0,c	;volatile
  5429  002226  848B               	bsf	3979,2,c	;volatile
  5430  002228  8C89               	bsf	3977,6,c	;volatile
  5431                           
  5432                           ;segment.c: 159: LATAbits.LA7 = LATEbits.LE1 = 0;
  5433  00222A  928D               	bcf	3981,1,c	;volatile
  5434  00222C  9E89               	bcf	3977,7,c	;volatile
  5435                           
  5436                           ;segment.c: 160: break;
  5437  00222E  0012               	return	
  5438  002230                     l1067:
  5439                           
  5440                           ;segment.c: 162: case 'E':
  5441                           ;segment.c: 163: if (segment == 1) {
  5442  002230  0402               	decf	dispSeg@segment,w,c
  5443  002232  A4D8               	btfss	status,2,c
  5444  002234  D008               	goto	l95
  5445                           
  5446                           ;segment.c: 164: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA
      +                          1 = 1;
  5447  002236  8289               	bsf	3977,1,c	;volatile
  5448  002238  8089               	bsf	3977,0,c	;volatile
  5449  00223A  808D               	bsf	3981,0,c	;volatile
  5450  00223C  8A89               	bsf	3977,5,c	;volatile
  5451  00223E  8489               	bsf	3977,2,c	;volatile
  5452                           
  5453                           ;segment.c: 165: LATAbits.LA3 = LATAbits.LA4 = 0;
  5454  002240  9889               	bcf	3977,4,c	;volatile
  5455  002242  9689               	bcf	3977,3,c	;volatile
  5456                           
  5457                           ;segment.c: 166: return;
  5458  002244  0012               	return	
  5459  002246                     l95:
  5460                           
  5461                           ;segment.c: 167: }
  5462                           ;segment.c: 168: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE
      +                          2 = 1;
  5463  002246  848D               	bsf	3981,2,c	;volatile
  5464  002248  828D               	bsf	3981,1,c	;volatile
  5465  00224A  828B               	bsf	3979,1,c	;volatile
  5466  00224C  808B               	bsf	3979,0,c	;volatile
  5467  00224E  8E89               	bsf	3977,7,c	;volatile
  5468                           
  5469                           ;segment.c: 169: LATAbits.LA6 = LATCbits.LC2 = 0;
  5470  002250  948B               	bcf	3979,2,c	;volatile
  5471  002252  9C89               	bcf	3977,6,c	;volatile
  5472                           
  5473                           ;segment.c: 170: break;
  5474  002254  0012               	return	
  5475  002256                     l1071:
  5476                           
  5477                           ;segment.c: 172: case 'F':
  5478                           ;segment.c: 173: if (segment == 1) {
  5479  002256  0402               	decf	dispSeg@segment,w,c
  5480  002258  A4D8               	btfss	status,2,c
  5481  00225A  D008               	goto	l98
  5482                           
  5483                           ;segment.c: 174: LATAbits.LA2 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1 = 1;
  5484  00225C  8289               	bsf	3977,1,c	;volatile
  5485  00225E  8089               	bsf	3977,0,c	;volatile
  5486  002260  808D               	bsf	3981,0,c	;volatile
  5487  002262  8489               	bsf	3977,2,c	;volatile
  5488                           
  5489                           ;segment.c: 175: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = 0;
  5490  002264  9A89               	bcf	3977,5,c	;volatile
  5491  002266  9889               	bcf	3977,4,c	;volatile
  5492  002268  9689               	bcf	3977,3,c	;volatile
  5493                           
  5494                           ;segment.c: 176: return;
  5495  00226A  0012               	return	
  5496  00226C                     l98:
  5497                           
  5498                           ;segment.c: 177: }
  5499                           ;segment.c: 178: LATAbits.LA7 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2 = 1;
  5500  00226C  848D               	bsf	3981,2,c	;volatile
  5501  00226E  828D               	bsf	3981,1,c	;volatile
  5502  002270  828B               	bsf	3979,1,c	;volatile
  5503  002272  8E89               	bsf	3977,7,c	;volatile
  5504                           
  5505                           ;segment.c: 179: LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = 0;
  5506  002274  908B               	bcf	3979,0,c	;volatile
  5507  002276  948B               	bcf	3979,2,c	;volatile
  5508  002278  9C89               	bcf	3977,6,c	;volatile
  5509                           
  5510                           ;segment.c: 180: break;
  5511  00227A  0012               	return	
  5512  00227C                     l1077:
  5513  00227C  5001               	movf	dispSeg@letter,w,c
  5514                           
  5515                           ; Switch size 1, requested type "space"
  5516                           ; Number of cases is 25, Range of values is 45 to 120
  5517                           ; switch strategies available:
  5518                           ; Name         Instructions Cycles
  5519                           ; simple_byte           76    39 (average)
  5520                           ;	Chosen strategy is simple_byte
  5521  00227E  0A2D               	xorlw	45	; case 45
  5522  002280  B4D8               	btfsc	status,2,c
  5523  002282  D6B9               	goto	l1007
  5524  002284  0A1D               	xorlw	29	; case 48
  5525  002286  B4D8               	btfsc	status,2,c
  5526  002288  D6C9               	goto	l1011
  5527  00228A  0A01               	xorlw	1	; case 49
  5528  00228C  B4D8               	btfsc	status,2,c
  5529  00228E  D6D9               	goto	l1015
  5530  002290  0A03               	xorlw	3	; case 50
  5531  002292  B4D8               	btfsc	status,2,c
  5532  002294  D6E9               	goto	l1019
  5533  002296  0A01               	xorlw	1	; case 51
  5534  002298  B4D8               	btfsc	status,2,c
  5535  00229A  D6F9               	goto	l1023
  5536  00229C  0A07               	xorlw	7	; case 52
  5537  00229E  B4D8               	btfsc	status,2,c
  5538  0022A0  D709               	goto	l1027
  5539  0022A2  0A01               	xorlw	1	; case 53
  5540  0022A4  B4D8               	btfsc	status,2,c
  5541  0022A6  D719               	goto	l1031
  5542  0022A8  0A03               	xorlw	3	; case 54
  5543  0022AA  B4D8               	btfsc	status,2,c
  5544  0022AC  D729               	goto	l1035
  5545  0022AE  0A01               	xorlw	1	; case 55
  5546  0022B0  B4D8               	btfsc	status,2,c
  5547  0022B2  D739               	goto	l1039
  5548  0022B4  0A0F               	xorlw	15	; case 56
  5549  0022B6  B4D8               	btfsc	status,2,c
  5550  0022B8  D749               	goto	l1043
  5551  0022BA  0A01               	xorlw	1	; case 57
  5552  0022BC  B4D8               	btfsc	status,2,c
  5553  0022BE  D759               	goto	l1047
  5554  0022C0  0A78               	xorlw	120	; case 65
  5555  0022C2  B4D8               	btfsc	status,2,c
  5556  0022C4  D769               	goto	l1051
  5557  0022C6  0A03               	xorlw	3	; case 66
  5558  0022C8  B4D8               	btfsc	status,2,c
  5559  0022CA  D779               	goto	l1055
  5560  0022CC  0A01               	xorlw	1	; case 67
  5561  0022CE  B4D8               	btfsc	status,2,c
  5562  0022D0  D789               	goto	l1059
  5563  0022D2  0A07               	xorlw	7	; case 68
  5564  0022D4  B4D8               	btfsc	status,2,c
  5565  0022D6  D799               	goto	l1063
  5566  0022D8  0A01               	xorlw	1	; case 69
  5567  0022DA  B4D8               	btfsc	status,2,c
  5568  0022DC  D7A9               	goto	l1067
  5569  0022DE  0A03               	xorlw	3	; case 70
  5570  0022E0  B4D8               	btfsc	status,2,c
  5571  0022E2  D7B9               	goto	l1071
  5572  0022E4  0A1E               	xorlw	30	; case 88
  5573  0022E6  B4D8               	btfsc	status,2,c
  5574  0022E8  D673               	goto	l1003
  5575  0022EA  0A39               	xorlw	57	; case 97
  5576  0022EC  B4D8               	btfsc	status,2,c
  5577  0022EE  D754               	goto	l1051
  5578  0022F0  0A03               	xorlw	3	; case 98
  5579  0022F2  B4D8               	btfsc	status,2,c
  5580  0022F4  D764               	goto	l1055
  5581  0022F6  0A01               	xorlw	1	; case 99
  5582  0022F8  B4D8               	btfsc	status,2,c
  5583  0022FA  D774               	goto	l1059
  5584  0022FC  0A07               	xorlw	7	; case 100
  5585  0022FE  B4D8               	btfsc	status,2,c
  5586  002300  D784               	goto	l1063
  5587  002302  0A01               	xorlw	1	; case 101
  5588  002304  B4D8               	btfsc	status,2,c
  5589  002306  D794               	goto	l1067
  5590  002308  0A03               	xorlw	3	; case 102
  5591  00230A  B4D8               	btfsc	status,2,c
  5592  00230C  D7A4               	goto	l1071
  5593  00230E  0A1E               	xorlw	30	; case 120
  5594  002310  A4D8               	btfss	status,2,c
  5595  002312  0012               	return	
  5596  002314  D65D               	goto	l1003
  5597  002316                     __end_of_dispSeg:
  5598                           	opt stack 0
  5599                           tblptru	equ	0xFF8
  5600                           tblptrh	equ	0xFF7
  5601                           tblptrl	equ	0xFF6
  5602                           tablat	equ	0xFF5
  5603                           prodh	equ	0xFF4
  5604                           prodl	equ	0xFF3
  5605                           postinc0	equ	0xFEE
  5606                           wreg	equ	0xFE8
  5607                           postdec1	equ	0xFE5
  5608                           fsr1h	equ	0xFE2
  5609                           fsr1l	equ	0xFE1
  5610                           indf2	equ	0xFDF
  5611                           fsr2h	equ	0xFDA
  5612                           fsr2l	equ	0xFD9
  5613                           status	equ	0xFD8
  5614                           
  5615 ;; *************** function _setMXbits *****************
  5616 ;; Defined at:
  5617 ;;		line 37 in file "source/emulator.c"
  5618 ;; Parameters:    Size  Location     Type
  5619 ;;  subRegister     1    wreg     unsigned char 
  5620 ;;  value           1    0[COMRAM] unsigned char 
  5621 ;; Auto vars:     Size  Location     Type
  5622 ;;  subRegister     1    5[COMRAM] unsigned char 
  5623 ;;  regMX_temp      2    3[COMRAM] unsigned int 
  5624 ;;  value_temp      2    1[COMRAM] unsigned int 
  5625 ;; Return value:  Size  Location     Type
  5626 ;;		None               void
  5627 ;; Registers used:
  5628 ;;		wreg, status,2, status,0
  5629 ;; Tracked objects:
  5630 ;;		On entry : 0/0
  5631 ;;		On exit  : 0/0
  5632 ;;		Unchanged: 0/0
  5633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5634 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5635 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5638 ;;Total ram usage:        6 bytes
  5639 ;; Hardware stack levels used:    1
  5640 ;; This function calls:
  5641 ;;		Nothing
  5642 ;; This function is called by:
  5643 ;;		_processOpcode
  5644 ;; This function uses a non-reentrant model
  5645 ;;
  5646                           
  5647                           	psect	text9
  5648  00276C                     __ptext9:
  5649                           	opt stack 0
  5650  00276C                     _setMXbits:
  5651                           	opt stack 29
  5652                           
  5653                           ;incstack = 0
  5654                           ;setMXbits@subRegister stored from wreg
  5655  00276C  CFE8 F006          	movff	wreg,setMXbits@subRegister
  5656                           
  5657                           ;emulator.c: 39: uint16_t value_temp = (uint16_t) value;
  5658  002770  C001  F002         	movff	setMXbits@value,setMXbits@value_temp
  5659  002774  6A03               	clrf	setMXbits@value_temp+1,c
  5660                           
  5661                           ;emulator.c: 40: uint16_t regMX_temp = regMX;
  5662  002776  C018  F004         	movff	_regMX,setMXbits@regMX_temp
  5663  00277A  C019  F005         	movff	_regMX+1,setMXbits@regMX_temp+1
  5664                           
  5665                           ;emulator.c: 54: }
  5666                           
  5667                           ;emulator.c: 53: break;
  5668                           
  5669                           ;emulator.c: 50: case 1:
  5670                           
  5671                           ;emulator.c: 48: break;
  5672                           
  5673                           ;emulator.c: 43: {
  5674                           ;emulator.c: 44: case 0:
  5675                           
  5676                           ;emulator.c: 42: switch(subRegister)
  5677  00277E  5006               	movf	setMXbits@subRegister,w,c
  5678                           
  5679                           ; Switch size 1, requested type "space"
  5680                           ; Number of cases is 2, Range of values is 0 to 1
  5681                           ; switch strategies available:
  5682                           ; Name         Instructions Cycles
  5683                           ; simple_byte            7     4 (average)
  5684                           ;	Chosen strategy is simple_byte
  5685  002780  0A00               	xorlw	0	; case 0
  5686  002782  A4D8               	btfss	status,2,c
  5687  002784  0A01               	xorlw	1	; case 1
  5688                           
  5689                           ;emulator.c: 56: regMX = regMX_temp + value_temp;
  5690  002786  5002               	movf	setMXbits@value_temp,w,c
  5691  002788  2404               	addwf	setMXbits@regMX_temp,w,c
  5692  00278A  6E18               	movwf	_regMX,c
  5693  00278C  5003               	movf	setMXbits@value_temp+1,w,c
  5694  00278E  2005               	addwfc	setMXbits@regMX_temp+1,w,c
  5695  002790  6E19               	movwf	_regMX+1,c
  5696  002792  0012               	return	
  5697  002794                     __end_of_setMXbits:
  5698                           	opt stack 0
  5699                           tblptru	equ	0xFF8
  5700                           tblptrh	equ	0xFF7
  5701                           tblptrl	equ	0xFF6
  5702                           tablat	equ	0xFF5
  5703                           prodh	equ	0xFF4
  5704                           prodl	equ	0xFF3
  5705                           postinc0	equ	0xFEE
  5706                           wreg	equ	0xFE8
  5707                           postdec1	equ	0xFE5
  5708                           fsr1h	equ	0xFE2
  5709                           fsr1l	equ	0xFE1
  5710                           indf2	equ	0xFDF
  5711                           fsr2h	equ	0xFDA
  5712                           fsr2l	equ	0xFD9
  5713                           status	equ	0xFD8
  5714                           
  5715 ;; *************** function _setFbits *****************
  5716 ;; Defined at:
  5717 ;;		line 105 in file "source/emulator.c"
  5718 ;; Parameters:    Size  Location     Type
  5719 ;;  subRegister     1    wreg     unsigned char 
  5720 ;;  value           1    0[COMRAM] unsigned char 
  5721 ;; Auto vars:     Size  Location     Type
  5722 ;;  subRegister     1    2[COMRAM] unsigned char 
  5723 ;;  regF_temp2      1    4[COMRAM] unsigned char 
  5724 ;;  regF_temp1      1    3[COMRAM] unsigned char 
  5725 ;; Return value:  Size  Location     Type
  5726 ;;		None               void
  5727 ;; Registers used:
  5728 ;;		wreg, status,2, status,0
  5729 ;; Tracked objects:
  5730 ;;		On entry : 0/0
  5731 ;;		On exit  : 0/0
  5732 ;;		Unchanged: 0/0
  5733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5734 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5735 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5736 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5737 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5738 ;;Total ram usage:        5 bytes
  5739 ;; Hardware stack levels used:    1
  5740 ;; This function calls:
  5741 ;;		Nothing
  5742 ;; This function is called by:
  5743 ;;		_processOpcode
  5744 ;; This function uses a non-reentrant model
  5745 ;;
  5746                           
  5747                           	psect	text10
  5748  002694                     __ptext10:
  5749                           	opt stack 0
  5750  002694                     _setFbits:
  5751                           	opt stack 29
  5752                           
  5753                           ;incstack = 0
  5754                           ;setFbits@subRegister stored from wreg
  5755  002694  CFE8 F003          	movff	wreg,setFbits@subRegister
  5756                           
  5757                           ;emulator.c: 107: uint8_t regF_temp1 = regF;
  5758  002698  C021  F004         	movff	_regF,setFbits@regF_temp1
  5759                           
  5760                           ;emulator.c: 108: uint8_t regF_temp2 = regF;
  5761  00269C  C021  F005         	movff	_regF,setFbits@regF_temp2
  5762                           
  5763                           ;emulator.c: 110: switch(subRegister)
  5764  0026A0  D005               	goto	l1259
  5765  0026A2                     l1255:
  5766                           
  5767                           ;emulator.c: 115: regF_temp2 = 0;
  5768  0026A2  6E02               	movwf	??_setFbits& (0+255),c
  5769  0026A4  0E00               	movlw	0
  5770  0026A6  6E05               	movwf	setFbits@regF_temp2,c
  5771  0026A8  5002               	movf	??_setFbits& (0+255),w,c
  5772                           
  5773                           ;emulator.c: 116: break;
  5774  0026AA  D00D               	goto	l1261
  5775  0026AC                     l1259:
  5776  0026AC  5003               	movf	setFbits@subRegister,w,c
  5777                           
  5778                           ; Switch size 1, requested type "space"
  5779                           ; Number of cases is 5, Range of values is 0 to 4
  5780                           ; switch strategies available:
  5781                           ; Name         Instructions Cycles
  5782                           ; simple_byte           16     9 (average)
  5783                           ;	Chosen strategy is simple_byte
  5784  0026AE  0A00               	xorlw	0	; case 0
  5785  0026B0  B4D8               	btfsc	status,2,c
  5786  0026B2  D7F7               	goto	l1255
  5787  0026B4  0A01               	xorlw	1	; case 1
  5788  0026B6  B4D8               	btfsc	status,2,c
  5789  0026B8  D006               	goto	l1261
  5790  0026BA  0A03               	xorlw	3	; case 2
  5791  0026BC  B4D8               	btfsc	status,2,c
  5792  0026BE  D003               	goto	l1261
  5793  0026C0  0A01               	xorlw	1	; case 3
  5794  0026C2  A4D8               	btfss	status,2,c
  5795  0026C4  0A07               	xorlw	7	; case 4
  5796  0026C6                     l1261:
  5797                           
  5798                           ;emulator.c: 147: regF = regF_temp1 + regF_temp2 + value;
  5799  0026C6  5004               	movf	setFbits@regF_temp1,w,c
  5800  0026C8  2405               	addwf	setFbits@regF_temp2,w,c
  5801  0026CA  2401               	addwf	setFbits@value,w,c
  5802  0026CC  6E21               	movwf	_regF,c
  5803  0026CE  0012               	return	
  5804  0026D0                     __end_of_setFbits:
  5805                           	opt stack 0
  5806                           tblptru	equ	0xFF8
  5807                           tblptrh	equ	0xFF7
  5808                           tblptrl	equ	0xFF6
  5809                           tablat	equ	0xFF5
  5810                           prodh	equ	0xFF4
  5811                           prodl	equ	0xFF3
  5812                           postinc0	equ	0xFEE
  5813                           wreg	equ	0xFE8
  5814                           postdec1	equ	0xFE5
  5815                           fsr1h	equ	0xFE2
  5816                           fsr1l	equ	0xFE1
  5817                           indf2	equ	0xFDF
  5818                           fsr2h	equ	0xFDA
  5819                           fsr2l	equ	0xFD9
  5820                           status	equ	0xFD8
  5821                           
  5822 ;; *************** function _immData_toPointer *****************
  5823 ;; Defined at:
  5824 ;;		line 150 in file "source/emulator.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;		None
  5827 ;; Auto vars:     Size  Location     Type
  5828 ;;  pointer         2    2[COMRAM] unsigned int 
  5829 ;; Return value:  Size  Location     Type
  5830 ;;                  2    0[COMRAM] unsigned int 
  5831 ;; Registers used:
  5832 ;;		wreg, status,2, status,0
  5833 ;; Tracked objects:
  5834 ;;		On entry : 0/0
  5835 ;;		On exit  : 0/0
  5836 ;;		Unchanged: 0/0
  5837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5838 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5839 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;Total ram usage:        4 bytes
  5843 ;; Hardware stack levels used:    1
  5844 ;; This function calls:
  5845 ;;		Nothing
  5846 ;; This function is called by:
  5847 ;;		_processOpcode
  5848 ;; This function uses a non-reentrant model
  5849 ;;
  5850                           
  5851                           	psect	text11
  5852  0027D6                     __ptext11:
  5853                           	opt stack 0
  5854  0027D6                     _immData_toPointer:
  5855                           	opt stack 29
  5856                           
  5857                           ;emulator.c: 152: uint16_t pointer = (uint16_t) immData_1;
  5858                           
  5859                           ;incstack = 0
  5860  0027D6  C01D  F003         	movff	_immData_1,immData_toPointer@pointer
  5861  0027DA  6A04               	clrf	immData_toPointer@pointer+1,c
  5862                           
  5863                           ;emulator.c: 154: pointer += immData_2;
  5864  0027DC  501E               	movf	_immData_2,w,c
  5865  0027DE  2603               	addwf	immData_toPointer@pointer,f,c
  5866  0027E0  0E00               	movlw	0
  5867  0027E2  2204               	addwfc	immData_toPointer@pointer+1,f,c
  5868                           
  5869                           ;emulator.c: 155: return pointer;
  5870  0027E4  C003  F001         	movff	immData_toPointer@pointer,?_immData_toPointer
  5871  0027E8  C004  F002         	movff	immData_toPointer@pointer+1,?_immData_toPointer+1
  5872  0027EC  0012               	return	
  5873  0027EE                     __end_of_immData_toPointer:
  5874                           	opt stack 0
  5875                           tblptru	equ	0xFF8
  5876                           tblptrh	equ	0xFF7
  5877                           tblptrl	equ	0xFF6
  5878                           tablat	equ	0xFF5
  5879                           prodh	equ	0xFF4
  5880                           prodl	equ	0xFF3
  5881                           postinc0	equ	0xFEE
  5882                           wreg	equ	0xFE8
  5883                           postdec1	equ	0xFE5
  5884                           fsr1h	equ	0xFE2
  5885                           fsr1l	equ	0xFE1
  5886                           indf2	equ	0xFDF
  5887                           fsr2h	equ	0xFDA
  5888                           fsr2l	equ	0xFD9
  5889                           status	equ	0xFD8
  5890                           
  5891 ;; *************** function _getPortData *****************
  5892 ;; Defined at:
  5893 ;;		line 174 in file "source/emulator.c"
  5894 ;; Parameters:    Size  Location     Type
  5895 ;;  portNumber      1    wreg     unsigned char 
  5896 ;; Auto vars:     Size  Location     Type
  5897 ;;  portNumber      1    0[COMRAM] unsigned char 
  5898 ;; Return value:  Size  Location     Type
  5899 ;;                  1    wreg      unsigned char 
  5900 ;; Registers used:
  5901 ;;		wreg, status,2, status,0
  5902 ;; Tracked objects:
  5903 ;;		On entry : 0/0
  5904 ;;		On exit  : 0/0
  5905 ;;		Unchanged: 0/0
  5906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5910 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5911 ;;Total ram usage:        1 bytes
  5912 ;; Hardware stack levels used:    1
  5913 ;; This function calls:
  5914 ;;		Nothing
  5915 ;; This function is called by:
  5916 ;;		_processOpcode
  5917 ;; This function uses a non-reentrant model
  5918 ;;
  5919                           
  5920                           	psect	text12
  5921  0027EE                     __ptext12:
  5922                           	opt stack 0
  5923  0027EE                     _getPortData:
  5924                           	opt stack 29
  5925                           
  5926                           ;incstack = 0
  5927                           ;getPortData@portNumber stored from wreg
  5928  0027EE  CFE8 F001          	movff	wreg,getPortData@portNumber
  5929                           
  5930                           ;emulator.c: 176: switch (portNumber)
  5931  0027F2  D002               	goto	l1275
  5932  0027F4                     l236:
  5933                           
  5934                           ;emulator.c: 179: return RCREG2;
  5935  0027F4  5074               	movf	3956,w,c	;volatile
  5936  0027F6  0012               	return	
  5937  0027F8                     l1275:
  5938  0027F8  5001               	movf	getPortData@portNumber,w,c
  5939                           
  5940                           ; Switch size 1, requested type "space"
  5941                           ; Number of cases is 1, Range of values is 2 to 2
  5942                           ; switch strategies available:
  5943                           ; Name         Instructions Cycles
  5944                           ; simple_byte            4     3 (average)
  5945                           ;	Chosen strategy is simple_byte
  5946  0027FA  0A02               	xorlw	2	; case 2
  5947  0027FC  B4D8               	btfsc	status,2,c
  5948  0027FE  D7FA               	goto	l236
  5949                           
  5950                           ;emulator.c: 182: return 0;
  5951  002800  0E00               	movlw	0
  5952  002802  0012               	return	
  5953  002804                     __end_of_getPortData:
  5954                           	opt stack 0
  5955                           tblptru	equ	0xFF8
  5956                           tblptrh	equ	0xFF7
  5957                           tblptrl	equ	0xFF6
  5958                           tablat	equ	0xFF5
  5959                           prodh	equ	0xFF4
  5960                           prodl	equ	0xFF3
  5961                           postinc0	equ	0xFEE
  5962                           wreg	equ	0xFE8
  5963                           postdec1	equ	0xFE5
  5964                           fsr1h	equ	0xFE2
  5965                           fsr1l	equ	0xFE1
  5966                           indf2	equ	0xFDF
  5967                           fsr2h	equ	0xFDA
  5968                           fsr2l	equ	0xFD9
  5969                           status	equ	0xFD8
  5970                           
  5971 ;; *************** function _getMXbits *****************
  5972 ;; Defined at:
  5973 ;;		line 20 in file "source/emulator.c"
  5974 ;; Parameters:    Size  Location     Type
  5975 ;;  subRegister     1    wreg     unsigned char 
  5976 ;; Auto vars:     Size  Location     Type
  5977 ;;  subRegister     1    2[COMRAM] unsigned char 
  5978 ;;  regMX_temp      2    0[COMRAM] unsigned int 
  5979 ;; Return value:  Size  Location     Type
  5980 ;;                  1    wreg      unsigned char 
  5981 ;; Registers used:
  5982 ;;		wreg, status,2
  5983 ;; Tracked objects:
  5984 ;;		On entry : 0/0
  5985 ;;		On exit  : 0/0
  5986 ;;		Unchanged: 0/0
  5987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5989 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5991 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5992 ;;Total ram usage:        3 bytes
  5993 ;; Hardware stack levels used:    1
  5994 ;; This function calls:
  5995 ;;		Nothing
  5996 ;; This function is called by:
  5997 ;;		_processOpcode
  5998 ;; This function uses a non-reentrant model
  5999 ;;
  6000                           
  6001                           	psect	text13
  6002  002804                     __ptext13:
  6003                           	opt stack 0
  6004  002804                     _getMXbits:
  6005                           	opt stack 29
  6006                           
  6007                           ;incstack = 0
  6008                           ;getMXbits@subRegister stored from wreg
  6009  002804  CFE8 F003          	movff	wreg,getMXbits@subRegister
  6010                           
  6011                           ;emulator.c: 22: uint16_t regMX_temp = regMX;
  6012  002808  C018  F001         	movff	_regMX,getMXbits@regMX_temp
  6013  00280C  C019  F002         	movff	_regMX+1,getMXbits@regMX_temp+1
  6014                           
  6015                           ;emulator.c: 27: }
  6016                           ;emulator.c: 29: return (uint8_t) regMX_temp;
  6017  002810  5001               	movf	getMXbits@regMX_temp,w,c
  6018  002812  0012               	return	
  6019  002814                     __end_of_getMXbits:
  6020                           	opt stack 0
  6021                           tblptru	equ	0xFF8
  6022                           tblptrh	equ	0xFF7
  6023                           tblptrl	equ	0xFF6
  6024                           tablat	equ	0xFF5
  6025                           prodh	equ	0xFF4
  6026                           prodl	equ	0xFF3
  6027                           postinc0	equ	0xFEE
  6028                           wreg	equ	0xFE8
  6029                           postdec1	equ	0xFE5
  6030                           fsr1h	equ	0xFE2
  6031                           fsr1l	equ	0xFE1
  6032                           indf2	equ	0xFDF
  6033                           fsr2h	equ	0xFDA
  6034                           fsr2l	equ	0xFD9
  6035                           status	equ	0xFD8
  6036                           
  6037 ;; *************** function _getFbits *****************
  6038 ;; Defined at:
  6039 ;;		line 65 in file "source/emulator.c"
  6040 ;; Parameters:    Size  Location     Type
  6041 ;;  subRegister     1    wreg     unsigned char 
  6042 ;; Auto vars:     Size  Location     Type
  6043 ;;  subRegister     1    0[COMRAM] unsigned char 
  6044 ;;  regF_temp       1    1[COMRAM] unsigned char 
  6045 ;; Return value:  Size  Location     Type
  6046 ;;                  1    wreg      unsigned char 
  6047 ;; Registers used:
  6048 ;;		wreg, status,2, status,0
  6049 ;; Tracked objects:
  6050 ;;		On entry : 0/0
  6051 ;;		On exit  : 0/0
  6052 ;;		Unchanged: 0/0
  6053 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6054 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6057 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6058 ;;Total ram usage:        2 bytes
  6059 ;; Hardware stack levels used:    1
  6060 ;; This function calls:
  6061 ;;		Nothing
  6062 ;; This function is called by:
  6063 ;;		_processOpcode
  6064 ;; This function uses a non-reentrant model
  6065 ;;
  6066                           
  6067                           	psect	text14
  6068  002794                     __ptext14:
  6069                           	opt stack 0
  6070  002794                     _getFbits:
  6071                           	opt stack 29
  6072                           
  6073                           ;incstack = 0
  6074                           ;getFbits@subRegister stored from wreg
  6075  002794  CFE8 F001          	movff	wreg,getFbits@subRegister
  6076                           
  6077                           ;emulator.c: 67: uint8_t regF_temp = regF;
  6078  002798  C021  F002         	movff	_regF,getFbits@regF_temp
  6079                           
  6080                           ;emulator.c: 95: }
  6081                           
  6082                           ;emulator.c: 94: break;
  6083                           
  6084                           ;emulator.c: 91: case 4:
  6085                           
  6086                           ;emulator.c: 89: break;
  6087                           
  6088                           ;emulator.c: 86: case 3:
  6089                           
  6090                           ;emulator.c: 84: break;
  6091                           
  6092                           ;emulator.c: 81: case 2:
  6093                           
  6094                           ;emulator.c: 79: break;
  6095                           
  6096                           ;emulator.c: 76: case 1:
  6097                           
  6098                           ;emulator.c: 74: break;
  6099                           
  6100                           ;emulator.c: 70: {
  6101                           ;emulator.c: 71: case 0:
  6102                           
  6103                           ;emulator.c: 69: switch(subRegister)
  6104  00279C  5001               	movf	getFbits@subRegister,w,c
  6105                           
  6106                           ; Switch size 1, requested type "space"
  6107                           ; Number of cases is 5, Range of values is 0 to 4
  6108                           ; switch strategies available:
  6109                           ; Name         Instructions Cycles
  6110                           ; simple_byte           16     9 (average)
  6111                           ;	Chosen strategy is simple_byte
  6112  00279E  0A00               	xorlw	0	; case 0
  6113  0027A0  B4D8               	btfsc	status,2,c
  6114  0027A2  D009               	goto	l211
  6115  0027A4  0A01               	xorlw	1	; case 1
  6116  0027A6  B4D8               	btfsc	status,2,c
  6117  0027A8  D006               	goto	l211
  6118  0027AA  0A03               	xorlw	3	; case 2
  6119  0027AC  B4D8               	btfsc	status,2,c
  6120  0027AE  D003               	goto	l211
  6121  0027B0  0A01               	xorlw	1	; case 3
  6122  0027B2  A4D8               	btfss	status,2,c
  6123  0027B4  0A07               	xorlw	7	; case 4
  6124  0027B6                     l211:
  6125                           
  6126                           ;emulator.c: 97: return regF_temp;
  6127  0027B6  5002               	movf	getFbits@regF_temp,w,c
  6128  0027B8  0012               	return	
  6129  0027BA                     __end_of_getFbits:
  6130                           	opt stack 0
  6131                           tblptru	equ	0xFF8
  6132                           tblptrh	equ	0xFF7
  6133                           tblptrl	equ	0xFF6
  6134                           tablat	equ	0xFF5
  6135                           prodh	equ	0xFF4
  6136                           prodl	equ	0xFF3
  6137                           postinc0	equ	0xFEE
  6138                           wreg	equ	0xFE8
  6139                           postdec1	equ	0xFE5
  6140                           fsr1h	equ	0xFE2
  6141                           fsr1l	equ	0xFE1
  6142                           indf2	equ	0xFDF
  6143                           fsr2h	equ	0xFDA
  6144                           fsr2l	equ	0xFD9
  6145                           status	equ	0xFD8
  6146                           
  6147 ;; *************** function _initializeRegisters *****************
  6148 ;; Defined at:
  6149 ;;		line 158 in file "source/emulator.c"
  6150 ;; Parameters:    Size  Location     Type
  6151 ;;		None
  6152 ;; Auto vars:     Size  Location     Type
  6153 ;;		None
  6154 ;; Return value:  Size  Location     Type
  6155 ;;		None               void
  6156 ;; Registers used:
  6157 ;;		wreg, status,2
  6158 ;; Tracked objects:
  6159 ;;		On entry : 0/0
  6160 ;;		On exit  : 0/0
  6161 ;;		Unchanged: 0/0
  6162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6165 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6166 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6167 ;;Total ram usage:        1 bytes
  6168 ;; Hardware stack levels used:    1
  6169 ;; This function calls:
  6170 ;;		Nothing
  6171 ;; This function is called by:
  6172 ;;		_main
  6173 ;; This function uses a non-reentrant model
  6174 ;;
  6175                           
  6176                           	psect	text15
  6177  00270A                     __ptext15:
  6178                           	opt stack 0
  6179  00270A                     _initializeRegisters:
  6180                           	opt stack 30
  6181                           
  6182                           ;emulator.c: 160: haltFlag = 0;
  6183                           
  6184                           ;incstack = 0
  6185  00270A  6E01               	movwf	??_initializeRegisters& (0+255),c
  6186  00270C  0E00               	movlw	0
  6187  00270E  6E1C               	movwf	_haltFlag,c
  6188  002710  5001               	movf	??_initializeRegisters& (0+255),w,c
  6189                           
  6190                           ;emulator.c: 161: regA = 0;
  6191  002712  6E01               	movwf	??_initializeRegisters& (0+255),c
  6192  002714  0E00               	movlw	0
  6193  002716  6E1F               	movwf	_regA,c
  6194  002718  5001               	movf	??_initializeRegisters& (0+255),w,c
  6195                           
  6196                           ;emulator.c: 162: regB = 0;
  6197  00271A  6E01               	movwf	??_initializeRegisters& (0+255),c
  6198  00271C  0E00               	movlw	0
  6199  00271E  6E20               	movwf	_regB,c
  6200  002720  5001               	movf	??_initializeRegisters& (0+255),w,c
  6201                           
  6202                           ;emulator.c: 163: regPC = 0;
  6203  002722  0E00               	movlw	0
  6204  002724  6E1B               	movwf	_regPC+1,c
  6205  002726  0E00               	movlw	0
  6206  002728  6E1A               	movwf	_regPC,c
  6207                           
  6208                           ;emulator.c: 164: regSP = 0;
  6209  00272A  6E01               	movwf	??_initializeRegisters& (0+255),c
  6210  00272C  0E00               	movlw	0
  6211  00272E  6E22               	movwf	_regSP,c
  6212  002730  5001               	movf	??_initializeRegisters& (0+255),w,c
  6213                           
  6214                           ;emulator.c: 165: regF = 0;
  6215  002732  6E01               	movwf	??_initializeRegisters& (0+255),c
  6216  002734  0E00               	movlw	0
  6217  002736  6E21               	movwf	_regF,c
  6218  002738  5001               	movf	??_initializeRegisters& (0+255),w,c
  6219  00273A  0012               	return	
  6220  00273C                     __end_of_initializeRegisters:
  6221                           	opt stack 0
  6222                           tblptru	equ	0xFF8
  6223                           tblptrh	equ	0xFF7
  6224                           tblptrl	equ	0xFF6
  6225                           tablat	equ	0xFF5
  6226                           prodh	equ	0xFF4
  6227                           prodl	equ	0xFF3
  6228                           postinc0	equ	0xFEE
  6229                           wreg	equ	0xFE8
  6230                           postdec1	equ	0xFE5
  6231                           fsr1h	equ	0xFE2
  6232                           fsr1l	equ	0xFE1
  6233                           indf2	equ	0xFDF
  6234                           fsr2h	equ	0xFDA
  6235                           fsr2l	equ	0xFD9
  6236                           status	equ	0xFD8
  6237                           
  6238 ;; *************** function _initPorts *****************
  6239 ;; Defined at:
  6240 ;;		line 26 in file "source/system.c"
  6241 ;; Parameters:    Size  Location     Type
  6242 ;;		None
  6243 ;; Auto vars:     Size  Location     Type
  6244 ;;		None
  6245 ;; Return value:  Size  Location     Type
  6246 ;;		None               void
  6247 ;; Registers used:
  6248 ;;		wreg, status,2
  6249 ;; Tracked objects:
  6250 ;;		On entry : 0/0
  6251 ;;		On exit  : 0/0
  6252 ;;		Unchanged: 0/0
  6253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6258 ;;Total ram usage:        0 bytes
  6259 ;; Hardware stack levels used:    1
  6260 ;; This function calls:
  6261 ;;		Nothing
  6262 ;; This function is called by:
  6263 ;;		_main
  6264 ;; This function uses a non-reentrant model
  6265 ;;
  6266                           
  6267                           	psect	text16
  6268  00273C                     __ptext16:
  6269                           	opt stack 0
  6270  00273C                     _initPorts:
  6271                           	opt stack 30
  6272                           
  6273                           ;system.c: 28: TRISA = 0;
  6274                           
  6275                           ;incstack = 0
  6276  00273C  0E00               	movlw	0
  6277  00273E  6E92               	movwf	3986,c	;volatile
  6278                           
  6279                           ;system.c: 29: TRISC = 0;
  6280  002740  0E00               	movlw	0
  6281  002742  6E94               	movwf	3988,c	;volatile
  6282                           
  6283                           ;system.c: 30: TRISE = 0;
  6284  002744  0E00               	movlw	0
  6285  002746  6E96               	movwf	3990,c	;volatile
  6286                           
  6287                           ;system.c: 32: ANSELD = 0;
  6288  002748  0E00               	movlw	0
  6289  00274A  010F               	movlb	15	; () banked
  6290  00274C  010F               	movlb	15	; () banked
  6291  00274E  6F3B               	movwf	59,b	;volatile
  6292                           
  6293                           ; BSR set to: 15
  6294                           ;system.c: 33: TRISDbits.RD3 = 0;
  6295  002750  9695               	bcf	3989,3,c	;volatile
  6296                           
  6297                           ; BSR set to: 15
  6298                           ;system.c: 34: TRISDbits.RD4 = 1;
  6299  002752  8895               	bsf	3989,4,c	;volatile
  6300                           
  6301                           ; BSR set to: 15
  6302                           ;system.c: 35: TRISDbits.RD5 = 0;
  6303  002754  9A95               	bcf	3989,5,c	;volatile
  6304                           
  6305                           ; BSR set to: 15
  6306                           ;system.c: 36: TRISDbits.RD7 = 1;
  6307  002756  8E95               	bsf	3989,7,c	;volatile
  6308                           
  6309                           ; BSR set to: 15
  6310                           ;system.c: 37: TRISDbits.RD6 = 0;
  6311  002758  9C95               	bcf	3989,6,c	;volatile
  6312                           
  6313                           ;system.c: 39: LATA = 0;
  6314  00275A  0E00               	movlw	0
  6315  00275C  6E89               	movwf	3977,c	;volatile
  6316                           
  6317                           ;system.c: 40: LATC = 0;
  6318  00275E  0E00               	movlw	0
  6319  002760  6E8B               	movwf	3979,c	;volatile
  6320                           
  6321                           ;system.c: 41: LATD = 0;
  6322  002762  0E00               	movlw	0
  6323  002764  6E8C               	movwf	3980,c	;volatile
  6324                           
  6325                           ;system.c: 42: LATE = 0;
  6326  002766  0E00               	movlw	0
  6327  002768  6E8D               	movwf	3981,c	;volatile
  6328                           
  6329                           ; BSR set to: 15
  6330  00276A  0012               	return	
  6331  00276C                     __end_of_initPorts:
  6332                           	opt stack 0
  6333                           tblptru	equ	0xFF8
  6334                           tblptrh	equ	0xFF7
  6335                           tblptrl	equ	0xFF6
  6336                           tablat	equ	0xFF5
  6337                           prodh	equ	0xFF4
  6338                           prodl	equ	0xFF3
  6339                           postinc0	equ	0xFEE
  6340                           wreg	equ	0xFE8
  6341                           postdec1	equ	0xFE5
  6342                           fsr1h	equ	0xFE2
  6343                           fsr1l	equ	0xFE1
  6344                           indf2	equ	0xFDF
  6345                           fsr2h	equ	0xFDA
  6346                           fsr2l	equ	0xFD9
  6347                           status	equ	0xFD8
  6348                           
  6349 ;; *************** function _initOscillator *****************
  6350 ;; Defined at:
  6351 ;;		line 9 in file "source/system.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;		None
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;		None
  6356 ;; Return value:  Size  Location     Type
  6357 ;;		None               void
  6358 ;; Registers used:
  6359 ;;		wreg, status,2
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;Total ram usage:        0 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; This function calls:
  6372 ;;		Nothing
  6373 ;; This function is called by:
  6374 ;;		_main
  6375 ;; This function uses a non-reentrant model
  6376 ;;
  6377                           
  6378                           	psect	text17
  6379  0027BA                     __ptext17:
  6380                           	opt stack 0
  6381  0027BA                     _initOscillator:
  6382                           	opt stack 30
  6383                           
  6384                           ;system.c: 11: OSCCONbits.IDLEN = 0;
  6385                           
  6386                           ; BSR set to: 15
  6387                           ;incstack = 0
  6388  0027BA  9ED3               	bcf	4051,7,c	;volatile
  6389                           
  6390                           ;system.c: 12: OSCCONbits.IRCF = 0b111;
  6391  0027BC  88D3               	bsf	4051,4,c	;volatile
  6392  0027BE  8AD3               	bsf	4051,5,c	;volatile
  6393  0027C0  8CD3               	bsf	4051,6,c	;volatile
  6394                           
  6395                           ;system.c: 13: OSCCONbits.SCS = 0b10;
  6396  0027C2  50D3               	movf	4051,w,c	;volatile
  6397  0027C4  0BFC               	andlw	-4
  6398  0027C6  0902               	iorlw	2
  6399  0027C8  6ED3               	movwf	4051,c	;volatile
  6400                           
  6401                           ;system.c: 14: OSCCON2bits.MFIOSEL = 0;
  6402  0027CA  98D2               	bcf	4050,4,c	;volatile
  6403                           
  6404                           ;system.c: 15: OSCCON2bits.SOSCGO = 0;
  6405  0027CC  96D2               	bcf	4050,3,c	;volatile
  6406                           
  6407                           ;system.c: 16: OSCCON2bits.PRISD = 0;
  6408  0027CE  94D2               	bcf	4050,2,c	;volatile
  6409  0027D0                     l126:
  6410  0027D0  B4D3               	btfsc	4051,2,c	;volatile
  6411  0027D2  0012               	return	
  6412  0027D4  D7FD               	goto	l126
  6413  0027D6                     __end_of_initOscillator:
  6414                           	opt stack 0
  6415                           tblptru	equ	0xFF8
  6416                           tblptrh	equ	0xFF7
  6417                           tblptrl	equ	0xFF6
  6418                           tablat	equ	0xFF5
  6419                           prodh	equ	0xFF4
  6420                           prodl	equ	0xFF3
  6421                           postinc0	equ	0xFEE
  6422                           wreg	equ	0xFE8
  6423                           postdec1	equ	0xFE5
  6424                           fsr1h	equ	0xFE2
  6425                           fsr1l	equ	0xFE1
  6426                           indf2	equ	0xFDF
  6427                           fsr2h	equ	0xFDA
  6428                           fsr2l	equ	0xFD9
  6429                           status	equ	0xFD8
  6430                           tblptru	equ	0xFF8
  6431                           tblptrh	equ	0xFF7
  6432                           tblptrl	equ	0xFF6
  6433                           tablat	equ	0xFF5
  6434                           prodh	equ	0xFF4
  6435                           prodl	equ	0xFF3
  6436                           postinc0	equ	0xFEE
  6437                           wreg	equ	0xFE8
  6438                           postdec1	equ	0xFE5
  6439                           fsr1h	equ	0xFE2
  6440                           fsr1l	equ	0xFE1
  6441                           indf2	equ	0xFDF
  6442                           fsr2h	equ	0xFDA
  6443                           fsr2l	equ	0xFD9
  6444                           status	equ	0xFD8
  6445                           
  6446                           	psect	rparam
  6447  0000                     tblptru	equ	0xFF8
  6448                           tblptrh	equ	0xFF7
  6449                           tblptrl	equ	0xFF6
  6450                           tablat	equ	0xFF5
  6451                           prodh	equ	0xFF4
  6452                           prodl	equ	0xFF3
  6453                           postinc0	equ	0xFEE
  6454                           wreg	equ	0xFE8
  6455                           postdec1	equ	0xFE5
  6456                           fsr1h	equ	0xFE2
  6457                           fsr1l	equ	0xFE1
  6458                           indf2	equ	0xFDF
  6459                           fsr2h	equ	0xFDA
  6460                           fsr2l	equ	0xFD9
  6461                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        2048
    BSS         271
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     19      34
    BANK0           160      0       0
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_processOpcode
    _wait_ms->___wmul
    _processOpcode->_setPortData
    _setPortData->_enableSerial

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    5978
                                             18 COMRAM     1     1      0
                            _dispSeg
                     _initOscillator
                          _initPorts
                _initializeRegisters
                      _processOpcode
                            _wait_ms
 ---------------------------------------------------------------------------------
 (1) _wait_ms                                              2     0      2     834
                                              6 COMRAM     2     0      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     173
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _processOpcode                                        9     9      0    3431
                                              9 COMRAM     9     9      0
                           _getFbits
                          _getMXbits
                        _getPortData
                  _immData_toPointer
                           _setFbits
                          _setMXbits
                        _setPortData
                     _update_immData
 ---------------------------------------------------------------------------------
 (2) _update_immData                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setPortData                                          5     4      1    2089
                                              4 COMRAM     5     4      1
                            _dispSeg
                       _enableSerial
                          _hexToChar
 ---------------------------------------------------------------------------------
 (3) _hexToChar                                            1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _enableSerial                                         4     2      2      49
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _dispSeg                                              2     1      1    1713
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _setMXbits                                            6     5      1     196
                                              0 COMRAM     6     5      1
 ---------------------------------------------------------------------------------
 (2) _setFbits                                             5     4      1     876
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (2) _immData_toPointer                                    4     2      2      15
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _getPortData                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMXbits                                            3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getFbits                                             2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initializeRegisters                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initOscillator                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dispSeg
   _initOscillator
   _initPorts
   _initializeRegisters
   _processOpcode
     _getFbits
     _getMXbits
     _getPortData
     _immData_toPointer
     _setFbits
     _setMXbits
     _setPortData
       _dispSeg
       _enableSerial
       _hexToChar
     _update_immData
   _wait_ms
     ___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     800      37       52.6%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     13      22       1       35.8%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     122      12        0.0%
DATA                 0      0     922       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Mon Mar 17 23:21:49 2014

                          l60 200C                            l70 20CA                            l62 2032  
                          l39 2608                            l80 2188                            l72 20F0  
                          l64 2058                            l56 1FE6                            l74 2116  
                          l66 207E                            l83 21AE                            l92 2220  
                          l76 213C                            l68 20A4                            l86 21D4  
                          l78 2162                            l95 2246                            l89 21FA  
                          l98 226C           ___wmul@multiplicand 0003                _update_immData 2476  
                __CFG_CP0$OFF 000000                  __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000  
                __CFG_CP3$OFF 000000                           l211 27B6                           l126 27D0  
                         l137 2686                           l242 23D4                           l236 27F4  
                         l249 242C                           l281 18D6                           l354 1D28  
                         l282 18DC                           l283 18E2                           l275 189A  
                         l292 191E                           l284 18E8                           l276 18A0  
                         l357 1D6E                           l277 18A6                           l295 1948  
                         l298 1972                           l299 197C                  __CFG_CPB$OFF 000000  
                __CFG_CPD$OFF 000000                           prod 000FF3                           wreg 000FE8  
       getPortData@portNumber 0001                    _TXSTA2bits 000F72                  __CFG_LVP$OFF 000000  
                        l1011 201C                          l1003 1FD0                          l1031 20DA  
                        l1023 208E                          l1015 2042                          l1007 1FF6  
                        l1051 2198                          l1043 214C                          l1035 2100  
                        l1027 20B4                          l1019 2068                          l1211 2358  
                        l1203 2350                          l1071 2256                          l1063 220A  
                        l1055 21BE                          l1047 2172                          l1039 2126  
                        l1223 2364                          l1215 235C                          l1207 2354  
                        l1401 181E                          l1067 2230                          l1059 21E4  
                        l1219 2360                          l1171 2330                          l1163 2328  
                        l1403 182E                          l1261 26C6                          l1077 227C  
                        l1229 2368                          l1341 2494                          l1413 185A  
                        l1405 183E                          l1255 26A2                          l1191 2344  
                        l1183 233C                          l1175 2334                          l1167 232C  
                        l1431 18BE                          l1423 187E                          l1415 1866  
                        l1407 1848                          l1345 24B2                          l1505 1A28  
                        l1433 18CA                          l1425 188A                          l1409 1850  
                        l1361 2676                          l1275 27F8                          l1259 26AC  
                        l1291 251C                          l1195 2348                          l1187 2340  
                        l1179 2338                          l1371 23EE                          l1515 1A42  
                        l1451 1914                          l1443 1902                          l1427 1892  
                        l1419 1872                          l1293 2520                          l1285 2510  
                        l1349 24D2                          l1621 1C96                          l1613 1C50  
                        l1605 1C18                          l1525 1A5E                          l1509 1A30  
                        l1461 1938                          l1445 1908                          l1437 18F6  
                        l1429 18AC                          l1287 2514                          l1295 2526  
                        l1199 234C                          l1383 241E                          l1375 23FE  
                        l1367 23E0                          l1391 245A                          l1631 1CEA  
                        l1535 1A7A                          l1519 1A4A                          l1455 191A  
                        l1439 18FC                          l1801 2550                          l1289 2518  
                        l1297 257E                          l1385 2432                          l1633 1CF0  
                        l1625 1CB8                          l1617 1C74                          l1609 1C34  
                        l1561 1AE2                          l1553 1AB2                          l1545 1A96  
                        l1529 1A66                          l1473 1984                          l1449 190E  
       setPortData@portNumber 0006                          l1803 2556                          l1387 2446  
                        l1379 240E                          l1555 1ABC                          l1539 1A82  
                        l1491 19F6                          l1483 19C0                          l1467 1962  
                        l1805 2560                          l1661 1DB8                          l1637 1D14  
                        l1629 1CDC                          l1549 1AA0                          l1485 19CE  
                        l1477 199A                          l1807 256A                          l1655 1DA0  
                        l1647 1D5A                          l1639 1D22                          l1591 1BC4  
                        l1583 1B86                          l1575 1B52                          l1495 19FC  
                        l1479 19A8                          l1809 2574                          l1673 1E0C  
                        l1665 1DE0                          l1657 1DAE                          l1649 1D68  
                        l1569 1B04                          l1489 19E6                          l1681 1FC4  
                        l1675 1E1A                          l1667 1DEE                          l1595 1BE2  
                        l1587 1BA4                          l1579 1B6C                          l1499 1A0C  
                        l1669 1DF2                          l1693 25D6                          l1599 1BFC  
                        l1679 1E1E                          l1689 25C0                          l1697 25E6  
                        _LATA 000F89                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          _main 2596                          _regA 001F  
                        _regB 0020                          _regF 0021                          fsr1h 000FE2  
                        fsr1l 000FE1                          indf2 000FDF                          fsr2l 000FD9  
               __CFG_BORV$190 000000                          prodh 000FF4                          prodl 000FF3  
                        start 0000                 __CFG_IESO$OFF 000000        __end_of_update_immData 250C  
       setPortData@outputData 0005             getFbits@regF_temp 0002                  _BAUDCON2bits 000F70  
                       ?_main 0001                         _TRISA 000F92                         _TRISC 000F94  
                       _TRISE 000F96                 __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000  
               __CFG_WRT2$OFF 000000                 __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000  
              __CFG_FCMEN$OFF 000000                __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000  
              __CFG_EBTR3$OFF 000000               __end_of_dispSeg 2316                 __CFG_WRTB$OFF 000000  
               __CFG_WRTC$OFF 000000                 __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000  
             ??_processOpcode 000A                         _regPC 001A                         _regMX 0018  
                       _regSP 0022            __CFG_MCLRE$EXTMCLR 000000                         _stack 0100  
    processOpcode@regA_temp16 0011                __CFG_BOREN$OFF 000000                         tablat 000FF5  
             __end_of_wait_ms 2694                         status 000FD8                __CFG_HFOFST$ON 000000  
             __initialization 260A                  __end_of_main 260A               ?_update_immData 0001  
  __end_of_virtualMemory_size 1005          __end_of_enableSerial 2596                        ??_main 0013  
               __activetblptr 000003          enableSerial@baudRate 0001            setFbits@regF_temp1 0004  
          setFbits@regF_temp2 0005                  ?_setPortData 0005                        _ANSELD 000F3B  
              __CFG_WDTEN$OFF 000000          __size_of_getPortData 0016                        _RCREG2 000F74  
                      _SPBRG2 000F75           getMXbits@regMX_temp 0001           setMXbits@regMX_temp 0004  
                      _TXREG2 000F73              __end_of_getFbits 27BA                __CFG_XINST$OFF 000000  
                      ___wmul 26D0                __CFG_STVREN$ON 000000  __size_of_initializeRegisters 0032  
                      clear_0 2612                        clear_1 2624                     ??_dispSeg 0002  
            __end_of_setFbits 26D0                  __pdataBIGRAM 0200                  __mediumconst 0000  
               _virtualMemory 0200                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8             _immData_toPointer 27D6                     ??_wait_ms 0009  
             hexToChar@number 0001            ?_immData_toPointer 0001                    __accesstop 0060  
     __end_of__initialization 264E               __CFG_PBADEN$OFF 000000  setPortData@outputData_temp16 0007  
               setFbits@value 0001           ??_immData_toPointer 0003           setMXbits@value_temp 0002  
              __pcstackCOMRAM 0001            __size_of_getMXbits 0010     __end_of_immData_toPointer 27EE  
          __size_of_hexToChar 00B8       __size_of_initOscillator 001C                    __pbssBANK1 0100  
             __CFG_PLLCFG$OFF 000000            __size_of_initPorts 0030            __CFG_CCP2MX$PORTC1 000000  
 setPortData@outputData_temp8 0009         __size_of_enableSerial 008A            __size_of_setMXbits 0028  
                     ?___wmul 0001            __CFG_CCP3MX$PORTB5 000000                     ?_getFbits 0001  
           __CFG_PRICLKEN$OFF 000000                       _SPBRGH2 000F76          __size_of_setPortData 00A8  
                _enableSerial 250C             __end_of_getMXbits 2814                     ?_setFbits 0001  
            ??_update_immData 0001               __CFG_PWRTEN$OFF 000000                       __Hparam 0000  
                     __Lparam 0000             __end_of_hexToChar 23CE               __size_of___wmul 003A  
                __psmallconst 1000                       __pcinit 260A                       __ramtop 1000  
                     __ptext0 2596                       __ptext1 2654                       __ptext2 26D0  
                     __ptext3 1806                       __ptext4 2476                       __ptext5 23CE  
                     __ptext6 2316                       __ptext7 250C                       __ptext8 1FCA  
                     __ptext9 276C                       _dispSeg 1FCA             __end_of_initPorts 276C  
  __size_of_immData_toPointer 0018                    ??_getFbits 0001                       _wait_ms 2654  
          _virtualMemory_size 1001             __end_of_setMXbits 2794          end_of_initialization 264E  
       __end_of_processOpcode 1FCA           _initializeRegisters 270A                    ??_setFbits 0002  
                     postdec1 000FE5                       postinc0 000FEE                   wait_ms@time 0007  
         getFbits@subRegister 0001          ?_initializeRegisters 0001           setFbits@subRegister 0003  
     processOpcode@carriedBit 000F                     _TRISDbits 000F95                 ??_getPortData 0001  
              _initOscillator 27BA                setMXbits@value 0001          getMXbits@subRegister 0003  
        setMXbits@subRegister 0006         ??_initializeRegisters 0001                 __pidataBIGRAM 1006  
              __end_of___wmul 270A       processOpcode@regPC_temp 000D       processOpcode@regA_temp8 0010  
         start_initialization 260A        __end_of_initOscillator 27D6           __end_of_getPortData 2804  
                    ??___wmul 0005                   __pbssCOMRAM 0014               ?_initOscillator 0001  
           __size_of_getFbits 0026                     _getMXbits 2804             __size_of_setFbits 003C  
                   _hexToChar 2316                     _immData_1 001D                     _immData_2 001E  
                    ?_dispSeg 0001                   __smallconst 1000                      ?_wait_ms 0007  
                   _initPorts 273C                   _getPortData 27EE                 ??_setPortData 0006  
                   _setMXbits 276C                ___wmul@product 0005                      _LATAbits 000F89  
                    _LATCbits 000F8B                      _LATDbits 000F8C                      _LATEbits 000F8D  
                  ?_getMXbits 0001              __CFG_WDTPS$32768 000000                    ?_hexToChar 0001  
           ___wmul@multiplier 0001                    ?_initPorts 0001                     copy_data0 263E  
                  ?_setMXbits 0001           __end_of_setPortData 2476                      __Hrparam 0000  
                    __Lrparam 0000             __CFG_P2BMX$PORTD2 000000        __size_of_processOpcode 07C4  
     __size_of_update_immData 0096              __size_of_dispSeg 034C                      _getFbits 2794  
                    _haltFlag 001C                      __ptext10 2694                      __ptext11 27D6  
                    __ptext12 27EE                      __ptext13 2804                      __ptext14 2794  
                    __ptext15 270A                      __ptext16 273C                      __ptext17 27BA  
            __size_of_wait_ms 0040                   _OSCCON2bits 000FD2      immData_toPointer@pointer 0003  
               __size_of_main 0074                      _setFbits 2694   __end_of_initializeRegisters 273C  
                 ??_getMXbits 0001                   ??_hexToChar 0001              ??_initOscillator 0001  
                 ??_initPorts 0001                   _setPortData 23CE                 ?_enableSerial 0001  
               _processOpcode 1806                   ??_setMXbits 0002                    _RCSTA2bits 000F71  
                  _OSCCONbits 000FD3                dispSeg@segment 0002                  wait_ms@timel 0014  
           __CFG_T3CMX$PORTC0 000000                 dispSeg@letter 0001                  ?_getPortData 0001  
              ??_enableSerial 0003                ?_processOpcode 0001             __CFG_FOSC$INTIO67 000000  
