

Microchip Technology PIC18 LITE Macro Assembler V1.30 build 55553 
                                                                                               Wed Mar 19 21:36:50 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 55553
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBIGRAM,global,class=CODE,delta=1
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1
    11                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	text0,global,reloc=2,class=CODE,delta=1
    13                           	psect	text1,global,reloc=2,class=CODE,delta=1
    14                           	psect	text2,global,reloc=2,class=CODE,delta=1
    15                           	psect	text3,global,reloc=2,class=CODE,delta=1
    16                           	psect	text4,global,reloc=2,class=CODE,delta=1
    17                           	psect	text5,global,reloc=2,class=CODE,delta=1
    18                           	psect	text6,global,reloc=2,class=CODE,delta=1
    19                           	psect	text7,global,reloc=2,class=CODE,delta=1
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	text9,global,reloc=2,class=CODE,delta=1
    22                           	psect	text10,global,reloc=2,class=CODE,delta=1
    23                           	psect	text11,global,reloc=2,class=CODE,delta=1
    24                           	psect	text12,global,reloc=2,class=CODE,delta=1
    25                           	psect	text13,global,reloc=2,class=CODE,delta=1
    26                           	psect	text14,global,reloc=2,class=CODE,delta=1
    27                           	psect	text15,global,reloc=2,class=CODE,delta=1
    28                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    29                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    30  0000                     
    31                           	psect	idataBIGRAM
    32  001FE6                     __pidataBIGRAM:
    33                           	opt stack 0
    34                           
    35                           ;initializer for _virtualMemory
    36  001FE6  07                 	db	7
    37  001FE7  03                 	db	3
    38  001FE8  00                 	db	0
    39  001FE9  54                 	db	84
    40  001FEA  3F                 	db	63
    41  001FEB  00                 	db	0
    42  001FEC  0A                 	db	10
    43  001FED  31                 	db	49
    44  001FEE  00                 	db	0
    45  001FEF  03                 	db	3
    46  001FF0  06                 	db	6
    47  001FF1  04                 	db	4
    48  001FF2  40                 	db	64
    49  001FF3                     	ds	2035
    50                           
    51                           	psect	smallconst
    52  001000                     __psmallconst:
    53                           	opt stack 0
    54  001000  00                 	db	0
    55  001001                     _virtualMemory_size:
    56                           	opt stack 0
    57  001001  0800               	dw	2048
    58  001003  0000               	dw	0
    59  001005                     __end_of_virtualMemory_size:
    60                           	opt stack 0
    61  0000                     _ANSELD	set	3899
    62  0000                     _BAUDCON2bits	set	3952
    63  0000                     _LATA	set	3977
    64  0000                     _LATAbits	set	3977
    65  0000                     _LATC	set	3979
    66  0000                     _LATCbits	set	3979
    67  0000                     _LATD	set	3980
    68  0000                     _LATDbits	set	3980
    69  0000                     _LATE	set	3981
    70  0000                     _LATEbits	set	3981
    71  0000                     _OSCCON2bits	set	4050
    72  0000                     _OSCCONbits	set	4051
    73  0000                     _RCREG2	set	3956
    74  0000                     _RCSTA2bits	set	3953
    75  0000                     _SPBRG2	set	3957
    76  0000                     _SPBRGH2	set	3958
    77  0000                     _TRISA	set	3986
    78  0000                     _TRISC	set	3988
    79  0000                     _TRISDbits	set	3989
    80  0000                     _TRISE	set	3990
    81  0000                     _TXREG2	set	3955
    82  0000                     _TXSTA2bits	set	3954
    83                           
    84                           ; #config settings
    85  001005  00                 	db	0	; dummy byte at the end
    86  0000                     
    87                           	psect	cinit
    88  001E56                     __pcinit:
    89                           	opt stack 0
    90  001E56                     start_initialization:
    91                           	opt stack 0
    92  001E56                     __initialization:
    93                           	opt stack 0
    94                           
    95                           ; Clear objects allocated to BANK1 (256 bytes)
    96  001E56  EE01  F000         	lfsr	0,__pbssBANK1
    97  001E5A  EE11 F000          	lfsr	1,256
    98  001E5E                     clear_0:
    99  001E5E  6AEE               	clrf	postinc0,c
   100  001E60  50E5               	movf	postdec1,w,c
   101  001E62  50E1               	movf	fsr1l,w,c
   102  001E64  E1FC               	bnz	clear_0
   103  001E66  50E2               	movf	fsr1h,w,c
   104  001E68  E1FA               	bnz	clear_0
   105                           
   106                           ; Clear objects allocated to COMRAM (15 bytes)
   107  001E6A  EE00  F012         	lfsr	0,__pbssCOMRAM
   108  001E6E  0E0F               	movlw	15
   109  001E70                     clear_1:
   110  001E70  6AEE               	clrf	postinc0,c
   111  001E72  06E8               	decf	wreg,f,c
   112  001E74  E1FD               	bnz	clear_1
   113                           
   114                           ; Initialize objects allocated to BIGRAM (2048 bytes)
   115                           ; load TBLPTR registers with __pidataBIGRAM
   116  001E76  0EE6               	movlw	low __pidataBIGRAM
   117  001E78  6EF6               	movwf	tblptrl,c
   118  001E7A  0E1F               	movlw	high __pidataBIGRAM
   119  001E7C  6EF7               	movwf	tblptrh,c
   120  001E7E  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
   121  001E80  6EF8               	movwf	tblptru,c
   122  001E82  EE02  F000         	lfsr	0,__pdataBIGRAM
   123  001E86  EE18 F000          	lfsr	1,2048
   124  001E8A                     copy_data0:
   125  001E8A  0009               	tblrd		*+
   126  001E8C  CFF5 FFEE          	movff	tablat,postinc0
   127  001E90  50E5               	movf	postdec1,w,c
   128  001E92  50E1               	movf	fsr1l,w,c
   129  001E94  E1FA               	bnz	copy_data0
   130  001E96  50E2               	movf	fsr1h,w,c
   131  001E98  E1F8               	bnz	copy_data0
   132  001E9A                     end_of_initialization:
   133                           	opt stack 0
   134  001E9A                     __end_of__initialization:
   135                           	opt stack 0
   136  001E9A  0100               	movlb	0
   137  001E9C  EFF7  F00E         	goto	_main	;jump to C main() function
   138                           tblptru	equ	0xFF8
   139                           tblptrh	equ	0xFF7
   140                           tblptrl	equ	0xFF6
   141                           tablat	equ	0xFF5
   142                           postinc0	equ	0xFEE
   143                           wreg	equ	0xFE8
   144                           postdec1	equ	0xFE5
   145                           fsr1h	equ	0xFE2
   146                           fsr1l	equ	0xFE1
   147                           
   148                           	psect	bssCOMRAM
   149  000012                     __pbssCOMRAM:
   150                           	opt stack 0
   151  000012                     wait_ms@timel:
   152                           	opt stack 0
   153  000012                     	ds	4
   154  000016                     _regMX:
   155                           	opt stack 0
   156  000016                     	ds	2
   157  000018                     _regPC:
   158                           	opt stack 0
   159  000018                     	ds	2
   160  00001A                     _haltFlag:
   161                           	opt stack 0
   162  00001A                     	ds	1
   163  00001B                     _immData_1:
   164                           	opt stack 0
   165  00001B                     	ds	1
   166  00001C                     _immData_2:
   167                           	opt stack 0
   168  00001C                     	ds	1
   169  00001D                     _regA:
   170                           	opt stack 0
   171  00001D                     	ds	1
   172  00001E                     _regB:
   173                           	opt stack 0
   174  00001E                     	ds	1
   175  00001F                     _regF:
   176                           	opt stack 0
   177  00001F                     	ds	1
   178  000020                     _regSP:
   179                           	opt stack 0
   180  000020                     	ds	1
   181                           tblptru	equ	0xFF8
   182                           tblptrh	equ	0xFF7
   183                           tblptrl	equ	0xFF6
   184                           tablat	equ	0xFF5
   185                           postinc0	equ	0xFEE
   186                           wreg	equ	0xFE8
   187                           postdec1	equ	0xFE5
   188                           fsr1h	equ	0xFE2
   189                           fsr1l	equ	0xFE1
   190                           
   191                           	psect	bssBANK1
   192  000100                     __pbssBANK1:
   193                           	opt stack 0
   194  000100                     _stack:
   195                           	opt stack 0
   196  000100                     	ds	256
   197                           tblptru	equ	0xFF8
   198                           tblptrh	equ	0xFF7
   199                           tblptrl	equ	0xFF6
   200                           tablat	equ	0xFF5
   201                           postinc0	equ	0xFEE
   202                           wreg	equ	0xFE8
   203                           postdec1	equ	0xFE5
   204                           fsr1h	equ	0xFE2
   205                           fsr1l	equ	0xFE1
   206                           
   207                           	psect	dataBIGRAM
   208  000200                     __pdataBIGRAM:
   209                           	opt stack 0
   210  000200                     _virtualMemory:
   211                           	opt stack 0
   212  000200                     	ds	2048
   213                           tblptru	equ	0xFF8
   214                           tblptrh	equ	0xFF7
   215                           tblptrl	equ	0xFF6
   216                           tablat	equ	0xFF5
   217                           postinc0	equ	0xFEE
   218                           wreg	equ	0xFE8
   219                           postdec1	equ	0xFE5
   220                           fsr1h	equ	0xFE2
   221                           fsr1l	equ	0xFE1
   222                           
   223                           	psect	cstackCOMRAM
   224  000001                     __pcstackCOMRAM:
   225                           	opt stack 0
   226  000001                     ??_initializeRegisters:
   227  000001                     ??_update_immData:
   228  000001                     ?_immData_toPointer:
   229                           	opt stack 0
   230  000001                     dispSeg@letter:
   231                           	opt stack 0
   232  000001                     hexToChar@number:
   233                           	opt stack 0
   234  000001                     setMXbits@value:
   235                           	opt stack 0
   236  000001                     getFbits@subRegister:
   237                           	opt stack 0
   238  000001                     setFbits@value:
   239                           	opt stack 0
   240  000001                     getPortData@portNumber:
   241                           	opt stack 0
   242  000001                     getMXbits@regMX_temp:
   243                           	opt stack 0
   244  000001                     enableSerial@baudRate:
   245                           	opt stack 0
   246                           
   247                           ; 2 bytes @ 0x0
   248  000001                     	ds	1
   249  000002                     ??_setFbits:
   250  000002                     dispSeg@segment:
   251                           	opt stack 0
   252  000002                     getFbits@regF_temp:
   253                           	opt stack 0
   254  000002                     setMXbits@value_temp:
   255                           	opt stack 0
   256                           
   257                           ; 2 bytes @ 0x1
   258  000002                     	ds	1
   259  000003                     ??_enableSerial:
   260  000003                     getMXbits@subRegister:
   261                           	opt stack 0
   262  000003                     setFbits@subRegister:
   263                           	opt stack 0
   264  000003                     immData_toPointer@pointer:
   265                           	opt stack 0
   266                           
   267                           ; 2 bytes @ 0x2
   268  000003                     	ds	1
   269  000004                     setFbits@regF_temp1:
   270                           	opt stack 0
   271  000004                     setMXbits@regMX_temp:
   272                           	opt stack 0
   273                           
   274                           ; 2 bytes @ 0x3
   275  000004                     	ds	1
   276  000005                     setFbits@regF_temp2:
   277                           	opt stack 0
   278  000005                     setPortData@outputData:
   279                           	opt stack 0
   280                           
   281                           ; 1 bytes @ 0x4
   282  000005                     	ds	1
   283  000006                     setMXbits@subRegister:
   284                           	opt stack 0
   285  000006                     setPortData@portNumber:
   286                           	opt stack 0
   287                           
   288                           ; 1 bytes @ 0x5
   289  000006                     	ds	1
   290  000007                     setPortData@outputData_temp16:
   291                           	opt stack 0
   292                           
   293                           ; 2 bytes @ 0x6
   294  000007                     	ds	2
   295  000009                     setPortData@outputData_temp8:
   296                           	opt stack 0
   297                           
   298                           ; 1 bytes @ 0x8
   299  000009                     	ds	1
   300  00000A                     ??_processOpcode:
   301                           
   302                           ; 0 bytes @ 0x9
   303  00000A                     	ds	1
   304  00000B                     processOpcode@carriedBit:
   305                           	opt stack 0
   306                           
   307                           ; 1 bytes @ 0xA
   308  00000B                     	ds	1
   309  00000C                     processOpcode@regPC_temp:
   310                           	opt stack 0
   311                           
   312                           ; 2 bytes @ 0xB
   313  00000C                     	ds	2
   314  00000E                     processOpcode@regA_temp8:
   315                           	opt stack 0
   316                           
   317                           ; 1 bytes @ 0xD
   318  00000E                     	ds	1
   319  00000F                     processOpcode@regA_temp16:
   320                           	opt stack 0
   321                           
   322                           ; 2 bytes @ 0xE
   323  00000F                     	ds	2
   324  000011                     ??_main:
   325                           
   326                           ; 0 bytes @ 0x10
   327  000011                     	ds	1
   328                           tblptru	equ	0xFF8
   329                           tblptrh	equ	0xFF7
   330                           tblptrl	equ	0xFF6
   331                           tablat	equ	0xFF5
   332                           postinc0	equ	0xFEE
   333                           wreg	equ	0xFE8
   334                           postdec1	equ	0xFE5
   335                           fsr1h	equ	0xFE2
   336                           fsr1l	equ	0xFE1
   337                           
   338 ;;
   339 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   340 ;;
   341 ;; *************** function _main *****************
   342 ;; Defined at:
   343 ;;		line 19 in file "source/main.c"
   344 ;; Parameters:    Size  Location     Type
   345 ;;		None
   346 ;; Auto vars:     Size  Location     Type
   347 ;;		None
   348 ;; Return value:  Size  Location     Type
   349 ;;		None               void
   350 ;; Registers used:
   351 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   352 ;; Tracked objects:
   353 ;;		On entry : 0/0
   354 ;;		On exit  : 0/0
   355 ;;		Unchanged: 0/0
   356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   359 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   360 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   361 ;;Total ram usage:        1 bytes
   362 ;; Hardware stack levels required when called:    3
   363 ;; This function calls:
   364 ;;		_dispSeg
   365 ;;		_initOscillator
   366 ;;		_initPorts
   367 ;;		_initializeRegisters
   368 ;;		_processOpcode
   369 ;; This function is called by:
   370 ;;		Startup code after reset
   371 ;; This function uses a non-reentrant model
   372 ;;
   373                           
   374                           	psect	text0
   375  001DEE                     __ptext0:
   376                           	opt stack 0
   377  001DEE                     _main:
   378                           	opt stack 28
   379                           
   380                           ;main.c: 21: initOscillator();
   381                           
   382                           ;incstack = 0
   383  001DEE  ECC6  F00F         	call	_initOscillator	;wreg free
   384                           
   385                           ;main.c: 22: initPorts();
   386  001DF2  EC87  F00F         	call	_initPorts	;wreg free
   387                           
   388                           ;main.c: 23: dispSeg(1, '-'); dispSeg(2, '-');
   389  001DF6  6E11               	movwf	??_main& (0+255),c
   390  001DF8  0E2D               	movlw	45
   391  001DFA  6E01               	movwf	dispSeg@letter,c
   392  001DFC  5011               	movf	??_main& (0+255),w,c
   393  001DFE  0E01               	movlw	1
   394  001E00  EC11  F00C         	call	_dispSeg
   395  001E04  6E11               	movwf	??_main& (0+255),c
   396  001E06  0E2D               	movlw	45
   397  001E08  6E01               	movwf	dispSeg@letter,c
   398  001E0A  5011               	movf	??_main& (0+255),w,c
   399  001E0C  0E02               	movlw	2
   400  001E0E  EC11  F00C         	call	_dispSeg
   401                           
   402                           ;main.c: 25: initializeRegisters();
   403  001E12  EC6E  F00F         	call	_initializeRegisters	;wreg free
   404                           
   405                           ;main.c: 27: while (haltFlag == 0)
   406  001E16  D00D               	goto	l1721
   407  001E18                     l1715:
   408                           
   409                           ;main.c: 28: {
   410                           ;main.c: 29: if (regPC > 2047)
   411  001E18  0E00               	movlw	0
   412  001E1A  5C18               	subwf	_regPC,w,c
   413  001E1C  0E08               	movlw	8
   414  001E1E  5819               	subwfb	_regPC+1,w,c
   415  001E20  A0D8               	btfss	status,0,c
   416  001E22  D005               	goto	l1719
   417                           
   418                           ;main.c: 30: {
   419                           ;main.c: 31: regPC = 0;
   420  001E24  0E00               	movlw	0
   421  001E26  6E19               	movwf	_regPC+1,c
   422  001E28  0E00               	movlw	0
   423  001E2A  6E18               	movwf	_regPC,c
   424                           
   425                           ;main.c: 32: continue;
   426  001E2C  D002               	goto	l1721
   427  001E2E                     l1719:
   428                           
   429                           ;main.c: 33: }
   430                           ;main.c: 36: processOpcode();
   431  001E2E  EC03  F008         	call	_processOpcode	;wreg free
   432  001E32                     l1721:
   433  001E32  501A               	movf	_haltFlag,w,c
   434  001E34  B4D8               	btfsc	status,2,c
   435  001E36  D7F0               	goto	l1715
   436                           
   437                           ;main.c: 37: }
   438                           ;main.c: 40: dispSeg(1, '-'); dispSeg(2, '-');
   439  001E38  6E11               	movwf	??_main& (0+255),c
   440  001E3A  0E2D               	movlw	45
   441  001E3C  6E01               	movwf	dispSeg@letter,c
   442  001E3E  5011               	movf	??_main& (0+255),w,c
   443  001E40  0E01               	movlw	1
   444  001E42  EC11  F00C         	call	_dispSeg
   445  001E46  6E11               	movwf	??_main& (0+255),c
   446  001E48  0E2D               	movlw	45
   447  001E4A  6E01               	movwf	dispSeg@letter,c
   448  001E4C  5011               	movf	??_main& (0+255),w,c
   449  001E4E  0E02               	movlw	2
   450  001E50  EC11  F00C         	call	_dispSeg
   451  001E54                     l37:
   452  001E54  D7FF               	goto	l37
   453  001E56                     __end_of_main:
   454                           	opt stack 0
   455                           tblptru	equ	0xFF8
   456                           tblptrh	equ	0xFF7
   457                           tblptrl	equ	0xFF6
   458                           tablat	equ	0xFF5
   459                           postinc0	equ	0xFEE
   460                           wreg	equ	0xFE8
   461                           postdec1	equ	0xFE5
   462                           fsr1h	equ	0xFE2
   463                           fsr1l	equ	0xFE1
   464                           status	equ	0xFD8
   465                           
   466 ;; *************** function _processOpcode *****************
   467 ;; Defined at:
   468 ;;		line 238 in file "source/emulator.c"
   469 ;; Parameters:    Size  Location     Type
   470 ;;		None
   471 ;; Auto vars:     Size  Location     Type
   472 ;;  regA_temp16     2   14[COMRAM] unsigned int 
   473 ;;  regPC_temp      2   11[COMRAM] unsigned int 
   474 ;;  regA_temp8      1   13[COMRAM] unsigned char 
   475 ;;  carriedBit      1   10[COMRAM] unsigned char 
   476 ;; Return value:  Size  Location     Type
   477 ;;		None               void
   478 ;; Registers used:
   479 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   480 ;; Tracked objects:
   481 ;;		On entry : 0/0
   482 ;;		On exit  : 0/0
   483 ;;		Unchanged: 0/0
   484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   486 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   487 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   488 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   489 ;;Total ram usage:        7 bytes
   490 ;; Hardware stack levels used:    1
   491 ;; Hardware stack levels required when called:    2
   492 ;; This function calls:
   493 ;;		_getFbits
   494 ;;		_getMXbits
   495 ;;		_getPortData
   496 ;;		_immData_toPointer
   497 ;;		_setFbits
   498 ;;		_setMXbits
   499 ;;		_setPortData
   500 ;;		_update_immData
   501 ;; This function is called by:
   502 ;;		_main
   503 ;; This function uses a non-reentrant model
   504 ;;
   505                           
   506                           	psect	text1
   507  001006                     __ptext1:
   508                           	opt stack 0
   509  001006                     _processOpcode:
   510                           	opt stack 28
   511                           
   512                           ;emulator.c: 241: update_immData();
   513                           
   514                           ;incstack = 0
   515  001006  EC67  F00E         	call	_update_immData	;wreg free
   516                           
   517                           ;emulator.c: 244: uint8_t regA_temp8 = regA;
   518  00100A  C01D  F00E         	movff	_regA,processOpcode@regA_temp8
   519                           
   520                           ;emulator.c: 245: uint16_t regA_temp16 = (uint16_t) regA;
   521  00100E  C01D  F00F         	movff	_regA,processOpcode@regA_temp16
   522  001012  6A10               	clrf	processOpcode@regA_temp16+1,c
   523                           
   524                           ;emulator.c: 246: uint16_t regPC_temp = regPC;
   525  001014  C018  F00C         	movff	_regPC,processOpcode@regPC_temp
   526  001018  C019  F00D         	movff	_regPC+1,processOpcode@regPC_temp+1
   527                           
   528                           ;emulator.c: 247: uint8_t carriedBit;
   529                           ;emulator.c: 250: switch (virtualMemory[regPC])
   530  00101C  D32C               	goto	l1705
   531  00101E                     l1393:
   532                           
   533                           ;emulator.c: 258: setFbits(0, 1);
   534  00101E  6E0A               	movwf	??_processOpcode& (0+255),c
   535  001020  0E01               	movlw	1
   536  001022  6E01               	movwf	setFbits@value,c
   537  001024  500A               	movf	??_processOpcode& (0+255),w,c
   538  001026  0E00               	movlw	0
   539  001028  EC50  F00F         	call	_setFbits
   540                           
   541                           ;emulator.c: 259: break;
   542  00102C  D3F7               	goto	l1707
   543  00102E                     l1395:
   544                           
   545                           ;emulator.c: 262: setFbits(0, 0);
   546  00102E  6E0A               	movwf	??_processOpcode& (0+255),c
   547  001030  0E00               	movlw	0
   548  001032  6E01               	movwf	setFbits@value,c
   549  001034  500A               	movf	??_processOpcode& (0+255),w,c
   550  001036  0E00               	movlw	0
   551  001038  EC50  F00F         	call	_setFbits
   552                           
   553                           ;emulator.c: 263: break;
   554  00103C  D3EF               	goto	l1707
   555  00103E                     l1397:
   556                           
   557                           ;emulator.c: 266: haltFlag = 1;
   558  00103E  6E0A               	movwf	??_processOpcode& (0+255),c
   559  001040  0E01               	movlw	1
   560  001042  6E1A               	movwf	_haltFlag,c
   561  001044  500A               	movf	??_processOpcode& (0+255),w,c
   562                           
   563                           ;emulator.c: 267: break;
   564  001046  D3EA               	goto	l1707
   565  001048                     l1399:
   566                           
   567                           ;emulator.c: 273: regA = getPortData(regB);
   568  001048  501E               	movf	_regB,w,c
   569  00104A  ECE0  F00F         	call	_getPortData
   570  00104E  D21C               	goto	L10
   571  001050                     l1401:
   572                           
   573                           ;emulator.c: 277: regA = getPortData(immData_1);
   574  001050  501B               	movf	_immData_1,w,c
   575  001052  ECE0  F00F         	call	_getPortData
   576  001056  6E1D               	movwf	_regA,c
   577  001058  D2D8               	goto	L20
   578  00105A                     l1405:
   579                           
   580                           ;emulator.c: 282: setPortData(regB, regA);
   581  00105A  C01D  F005         	movff	_regA,setPortData@outputData
   582  00105E  501E               	movf	_regB,w,c
   583  001060  EC13  F00E         	call	_setPortData
   584                           
   585                           ;emulator.c: 283: break;
   586  001064  D3DB               	goto	l1707
   587  001066                     l1407:
   588                           
   589                           ;emulator.c: 286: setPortData(immData_1, regA);
   590  001066  C01D  F005         	movff	_regA,setPortData@outputData
   591  00106A  501B               	movf	_immData_1,w,c
   592  00106C  EC13  F00E         	call	_setPortData
   593  001070  D2CC               	goto	L20
   594  001072                     l1411:
   595                           
   596                           ;emulator.c: 291: setPortData(immData_1, immData_2);
   597  001072  C01C  F005         	movff	_immData_2,setPortData@outputData
   598  001076  501B               	movf	_immData_1,w,c
   599  001078  EC13  F00E         	call	_setPortData
   600  00107C  D107               	goto	l1535
   601  00107E                     l1415:
   602                           
   603                           ;emulator.c: 299: regA = virtualMemory[regMX];
   604  00107E  0E00               	movlw	low _virtualMemory
   605  001080  2416               	addwf	_regMX,w,c
   606  001082  6ED9               	movwf	fsr2l,c
   607  001084  0E02               	movlw	high _virtualMemory
   608  001086  2017               	addwfc	_regMX+1,w,c
   609  001088  D1FD               	goto	L23
   610  00108A                     l1417:
   611                           
   612                           ;emulator.c: 303: regA = getMXbits(0);
   613  00108A  0E00               	movlw	0
   614  00108C  ECEB  F00F         	call	_getMXbits
   615  001090  D1FB               	goto	L10
   616  001092                     l1419:
   617                           
   618                           ;emulator.c: 307: regA = getMXbits(1);
   619  001092  0E01               	movlw	1
   620  001094  ECEB  F00F         	call	_getMXbits
   621  001098  D1F7               	goto	L10
   622  00109A                     l273:
   623                           
   624                           ;emulator.c: 311: regA = regSP;
   625  00109A  C020  F01D         	movff	_regSP,_regA
   626                           
   627                           ;emulator.c: 312: break;
   628  00109E  D3BE               	goto	l1707
   629  0010A0                     l274:
   630                           
   631                           ;emulator.c: 315: regA = regF;
   632  0010A0  C01F  F01D         	movff	_regF,_regA
   633                           
   634                           ;emulator.c: 316: break;
   635  0010A4  D3BB               	goto	l1707
   636  0010A6                     l275:
   637                           
   638                           ;emulator.c: 319: regA = regB;
   639  0010A6  C01E  F01D         	movff	_regB,_regA
   640                           
   641                           ;emulator.c: 320: break;
   642  0010AA  D3B8               	goto	l1707
   643  0010AC                     l1421:
   644                           
   645                           ;emulator.c: 332: virtualMemory[regMX] = regA;
   646  0010AC  0E00               	movlw	low _virtualMemory
   647  0010AE  2416               	addwf	_regMX,w,c
   648  0010B0  6ED9               	movwf	fsr2l,c
   649  0010B2  0E02               	movlw	high _virtualMemory
   650  0010B4  2017               	addwfc	_regMX+1,w,c
   651  0010B6  6EDA               	movwf	fsr2h,c
   652  0010B8  C01D  FFDF         	movff	_regA,indf2
   653                           
   654                           ;emulator.c: 334: break;
   655  0010BC  D3AF               	goto	l1707
   656  0010BE                     l1423:
   657                           
   658                           ;emulator.c: 337: setMXbits(0, regA);
   659  0010BE  C01D  F001         	movff	_regA,setMXbits@value
   660  0010C2  0E00               	movlw	0
   661  0010C4  EC9F  F00F         	call	_setMXbits
   662                           
   663                           ;emulator.c: 338: break;
   664  0010C8  D3A9               	goto	l1707
   665  0010CA                     l1425:
   666                           
   667                           ;emulator.c: 341: setMXbits(1, regA);
   668  0010CA  C01D  F001         	movff	_regA,setMXbits@value
   669  0010CE  0E01               	movlw	1
   670  0010D0  EC9F  F00F         	call	_setMXbits
   671                           
   672                           ;emulator.c: 342: break;
   673  0010D4  D3A3               	goto	l1707
   674  0010D6                     l279:
   675                           
   676                           ;emulator.c: 345: regSP = regA;
   677  0010D6  C01D  F020         	movff	_regA,_regSP
   678                           
   679                           ;emulator.c: 346: break;
   680  0010DA  D3A0               	goto	l1707
   681  0010DC                     l280:
   682                           
   683                           ;emulator.c: 349: regB = regA;
   684  0010DC  C01D  F01E         	movff	_regA,_regB
   685                           
   686                           ;emulator.c: 350: break;
   687  0010E0  D39D               	goto	l1707
   688  0010E2                     l281:
   689                           
   690                           ;emulator.c: 353: regA = immData_1;
   691  0010E2  C01B  F01D         	movff	_immData_1,_regA
   692  0010E6  D291               	goto	L20
   693  0010E8                     l282:
   694                           
   695                           ;emulator.c: 359: regA_temp8 = regA;
   696  0010E8  C01D  F00E         	movff	_regA,processOpcode@regA_temp8
   697                           
   698                           ;emulator.c: 360: regA = regB;
   699  0010EC  C01E  F01D         	movff	_regB,_regA
   700                           
   701                           ;emulator.c: 361: regB = regA_temp8;
   702  0010F0  C00E  F01E         	movff	processOpcode@regA_temp8,_regB
   703                           
   704                           ;emulator.c: 362: break;
   705  0010F4  D393               	goto	l1707
   706  0010F6                     l1429:
   707                           
   708                           ;emulator.c: 368: regA &= regB;
   709  0010F6  501E               	movf	_regB,w,c
   710  0010F8  161D               	andwf	_regA,f,c
   711                           
   712                           ;emulator.c: 369: break;
   713  0010FA  D390               	goto	l1707
   714  0010FC                     l1431:
   715                           
   716                           ;emulator.c: 373: regA = regA & regB;
   717  0010FC  501D               	movf	_regA,w,c
   718  0010FE  141E               	andwf	_regB,w,c
   719  001100  D00B               	goto	L9
   720  001102                     l1435:
   721                           
   722                           ;emulator.c: 378: regA |= regB;
   723  001102  501E               	movf	_regB,w,c
   724  001104  121D               	iorwf	_regA,f,c
   725                           
   726                           ;emulator.c: 379: break;
   727  001106  D38A               	goto	l1707
   728  001108                     l1437:
   729                           
   730                           ;emulator.c: 383: regA = regA | regB;
   731  001108  501D               	movf	_regA,w,c
   732  00110A  101E               	iorwf	_regB,w,c
   733  00110C  D005               	goto	L9
   734  00110E                     l1441:
   735                           
   736                           ;emulator.c: 388: regA ^= regB;
   737  00110E  501E               	movf	_regB,w,c
   738  001110  1A1D               	xorwf	_regA,f,c
   739                           
   740                           ;emulator.c: 389: break;
   741  001112  D384               	goto	l1707
   742  001114                     l1443:
   743                           
   744                           ;emulator.c: 393: regA = regA ^ regB;
   745  001114  501D               	movf	_regA,w,c
   746  001116  181E               	xorwf	_regB,w,c
   747  001118                     L9:
   748  001118  6E1D               	movwf	_regA,c
   749  00111A                     l1447:
   750                           
   751                           ;emulator.c: 398: regA =~ regA;
   752  00111A  1E1D               	comf	_regA,f,c
   753                           
   754                           ;emulator.c: 399: break;
   755  00111C  D37F               	goto	l1707
   756  00111E                     l290:
   757                           
   758                           ;emulator.c: 403: regA_temp8 = regA;
   759  00111E  C01D  F00E         	movff	_regA,processOpcode@regA_temp8
   760                           
   761                           ;emulator.c: 405: if (regA_temp8 == 1) setFbits(0, 1);
   762  001122  040E               	decf	processOpcode@regA_temp8,w,c
   763  001124  A4D8               	btfss	status,2,c
   764  001126  D008               	goto	l1453
   765  001128  6E0A               	movwf	??_processOpcode& (0+255),c
   766  00112A  0E01               	movlw	1
   767  00112C  6E01               	movwf	setFbits@value,c
   768  00112E  500A               	movf	??_processOpcode& (0+255),w,c
   769  001130  0E00               	movlw	0
   770  001132  EC50  F00F         	call	_setFbits
   771  001136  D372               	goto	l1707
   772  001138                     l1453:
   773                           
   774                           ;emulator.c: 406: else setFbits(0, 0);
   775  001138  6E0A               	movwf	??_processOpcode& (0+255),c
   776  00113A  0E00               	movlw	0
   777  00113C  6E01               	movwf	setFbits@value,c
   778  00113E  500A               	movf	??_processOpcode& (0+255),w,c
   779  001140  0E00               	movlw	0
   780  001142  EC50  F00F         	call	_setFbits
   781  001146  D36A               	goto	l1707
   782  001148                     l293:
   783                           
   784                           ;emulator.c: 414: regA_temp8 = regA;
   785  001148  C01D  F00E         	movff	_regA,processOpcode@regA_temp8
   786                           
   787                           ;emulator.c: 417: if (regA_temp8 == 1) setFbits(0, 1);
   788  00114C  040E               	decf	processOpcode@regA_temp8,w,c
   789  00114E  A4D8               	btfss	status,2,c
   790  001150  D008               	goto	l1459
   791  001152  6E0A               	movwf	??_processOpcode& (0+255),c
   792  001154  0E01               	movlw	1
   793  001156  6E01               	movwf	setFbits@value,c
   794  001158  500A               	movf	??_processOpcode& (0+255),w,c
   795  00115A  0E00               	movlw	0
   796  00115C  EC50  F00F         	call	_setFbits
   797  001160  D35D               	goto	l1707
   798  001162                     l1459:
   799                           
   800                           ;emulator.c: 418: else setFbits(0, 0);
   801  001162  6E0A               	movwf	??_processOpcode& (0+255),c
   802  001164  0E00               	movlw	0
   803  001166  6E01               	movwf	setFbits@value,c
   804  001168  500A               	movf	??_processOpcode& (0+255),w,c
   805  00116A  0E00               	movlw	0
   806  00116C  EC50  F00F         	call	_setFbits
   807  001170  D355               	goto	l1707
   808  001172                     l296:
   809                           
   810                           ;emulator.c: 426: carriedBit = regA;
   811  001172  C01D  F00B         	movff	_regA,processOpcode@carriedBit
   812                           
   813                           ;emulator.c: 433: regA = regA + carriedBit;
   814  001176  501D               	movf	_regA,w,c
   815  001178  240B               	addwf	processOpcode@carriedBit,w,c
   816  00117A  D186               	goto	L10
   817  00117C                     l297:
   818                           
   819                           ;emulator.c: 438: carriedBit = regA;
   820  00117C  C01D  F00B         	movff	_regA,processOpcode@carriedBit
   821                           
   822                           ;emulator.c: 445: regA += carriedBit;
   823  001180  500B               	movf	processOpcode@carriedBit,w,c
   824  001182  D1E0               	goto	L11
   825  001184                     l1465:
   826                           
   827                           ;emulator.c: 450: if (regA == regB) setFbits(3, 1);
   828  001184  501E               	movf	_regB,w,c
   829  001186  621D               	cpfseq	_regA,c
   830  001188  D008               	goto	l1469
   831  00118A  6E0A               	movwf	??_processOpcode& (0+255),c
   832  00118C  0E01               	movlw	1
   833  00118E  6E01               	movwf	setFbits@value,c
   834  001190  500A               	movf	??_processOpcode& (0+255),w,c
   835  001192  0E03               	movlw	3
   836  001194  EC50  F00F         	call	_setFbits
   837  001198  D007               	goto	l1471
   838  00119A                     l1469:
   839                           
   840                           ;emulator.c: 451: else setFbits(3, 0);
   841  00119A  6E0A               	movwf	??_processOpcode& (0+255),c
   842  00119C  0E00               	movlw	0
   843  00119E  6E01               	movwf	setFbits@value,c
   844  0011A0  500A               	movf	??_processOpcode& (0+255),w,c
   845  0011A2  0E03               	movlw	3
   846  0011A4  EC50  F00F         	call	_setFbits
   847  0011A8                     l1471:
   848                           
   849                           ;emulator.c: 454: if (regA < regB) setFbits(2, 1);
   850  0011A8  501E               	movf	_regB,w,c
   851  0011AA  5C1D               	subwf	_regA,w,c
   852  0011AC  B0D8               	btfsc	status,0,c
   853  0011AE  D008               	goto	l1475
   854  0011B0  6E0A               	movwf	??_processOpcode& (0+255),c
   855  0011B2  0E01               	movlw	1
   856  0011B4  6E01               	movwf	setFbits@value,c
   857  0011B6  500A               	movf	??_processOpcode& (0+255),w,c
   858  0011B8  0E02               	movlw	2
   859  0011BA  EC50  F00F         	call	_setFbits
   860  0011BE  D007               	goto	l1477
   861  0011C0                     l1475:
   862                           
   863                           ;emulator.c: 455: else setFbits(2, 0);
   864  0011C0  6E0A               	movwf	??_processOpcode& (0+255),c
   865  0011C2  0E00               	movlw	0
   866  0011C4  6E01               	movwf	setFbits@value,c
   867  0011C6  500A               	movf	??_processOpcode& (0+255),w,c
   868  0011C8  0E02               	movlw	2
   869  0011CA  EC50  F00F         	call	_setFbits
   870  0011CE                     l1477:
   871                           
   872                           ;emulator.c: 458: if (regA > regB) setFbits(1, 1);
   873  0011CE  501D               	movf	_regA,w,c
   874  0011D0  5C1E               	subwf	_regB,w,c
   875  0011D2  B0D8               	btfsc	status,0,c
   876  0011D4  D008               	goto	l1481
   877  0011D6  6E0A               	movwf	??_processOpcode& (0+255),c
   878  0011D8  0E01               	movlw	1
   879  0011DA  6E01               	movwf	setFbits@value,c
   880  0011DC  500A               	movf	??_processOpcode& (0+255),w,c
   881  0011DE  0E01               	movlw	1
   882  0011E0  EC50  F00F         	call	_setFbits
   883  0011E4  D31B               	goto	l1707
   884  0011E6                     l1481:
   885                           
   886                           ;emulator.c: 459: else setFbits(1, 0);
   887  0011E6  6E0A               	movwf	??_processOpcode& (0+255),c
   888  0011E8  0E00               	movlw	0
   889  0011EA  6E01               	movwf	setFbits@value,c
   890  0011EC  500A               	movf	??_processOpcode& (0+255),w,c
   891  0011EE  0E01               	movlw	1
   892  0011F0  EC50  F00F         	call	_setFbits
   893  0011F4  D313               	goto	l1707
   894  0011F6                     l1485:
   895                           
   896                           ;emulator.c: 473: regPC = immData_toPointer();
   897  0011F6  ECD4  F00F         	call	_immData_toPointer	;wreg free
   898  0011FA  D021               	goto	L30
   899  0011FC                     l1489:
   900                           
   901                           ;emulator.c: 479: if (getFbits(3) == 1) regPC = regMX;
   902  0011FC  0E03               	movlw	3
   903  0011FE  ECB3  F00F         	call	_getFbits
   904  001202                     L34:
   905  001202  6E0A               	movwf	??_processOpcode& (0+255),c
   906  001204  040A               	decf	??_processOpcode,w,c
   907  001206  D024               	goto	L31
   908  001208                     L27:
   909  001208  C016  F018         	movff	_regMX,_regPC
   910  00120C  C017  F019         	movff	_regMX+1,_regPC+1
   911  001210  D0C8               	goto	L15
   912  001212                     l1495:
   913                           
   914                           ;emulator.c: 485: if (getFbits(3) == 1) regPC = immData_toPointer();
   915  001212  0E03               	movlw	3
   916  001214  ECB3  F00F         	call	_getFbits
   917  001218  6E0A               	movwf	??_processOpcode& (0+255),c
   918  00121A  040A               	decf	??_processOpcode,w,c
   919  00121C  A4D8               	btfss	status,2,c
   920  00121E  D0C1               	goto	L15
   921  001220  ECD4  F00F         	call	_immData_toPointer	;wreg free
   922  001224  D00C               	goto	L30
   923  001226                     l1501:
   924                           
   925                           ;emulator.c: 491: if (getFbits(3) == 0) regPC = regMX;
   926  001226  0E03               	movlw	3
   927  001228  ECB3  F00F         	call	_getFbits
   928  00122C  D045               	goto	L33
   929  00122E                     l1507:
   930                           
   931                           ;emulator.c: 497: if (getFbits(3) == 0) regPC = immData_toPointer();
   932  00122E  0E03               	movlw	3
   933  001230  ECB3  F00F         	call	_getFbits
   934  001234  0900               	iorlw	0
   935  001236  A4D8               	btfss	status,2,c
   936  001238  D0B4               	goto	L15
   937  00123A  ECD4  F00F         	call	_immData_toPointer	;wreg free
   938  00123E                     L30:
   939  00123E  C001  F018         	movff	?_immData_toPointer,_regPC
   940  001242  C002  F019         	movff	?_immData_toPointer+1,_regPC+1
   941  001246  D0AD               	goto	L15
   942  001248                     l1513:
   943                           
   944                           ;emulator.c: 503: if (getFbits(1) == 1) regPC = regMX;
   945  001248  0E01               	movlw	1
   946  00124A  ECB3  F00F         	call	_getFbits
   947  00124E  D7D9               	goto	L34
   948  001250                     L31:
   949  001250  A4D8               	btfss	status,2,c
   950  001252  D0A7               	goto	L15
   951  001254  D7D9               	goto	L27
   952  001256                     l1519:
   953                           
   954                           ;emulator.c: 509: if (getFbits(1) == 1) regPC = immData_toPointer();
   955  001256  0E01               	movlw	1
   956  001258  ECB3  F00F         	call	_getFbits
   957  00125C  6E0A               	movwf	??_processOpcode& (0+255),c
   958  00125E  040A               	decf	??_processOpcode,w,c
   959  001260  A4D8               	btfss	status,2,c
   960  001262  D09F               	goto	L15
   961  001264  ECD4  F00F         	call	_immData_toPointer	;wreg free
   962  001268  D7EA               	goto	L30
   963  00126A                     l1525:
   964                           
   965                           ;emulator.c: 515: if (getFbits(2) == 1) regPC = regMX;
   966  00126A  0E02               	movlw	2
   967  00126C  ECB3  F00F         	call	_getFbits
   968  001270  D7C8               	goto	L34
   969  001272                     l1531:
   970                           
   971                           ;emulator.c: 521: if (getFbits(2) == 1) regPC = immData_toPointer();
   972  001272  0E02               	movlw	2
   973  001274  ECB3  F00F         	call	_getFbits
   974  001278  6E0A               	movwf	??_processOpcode& (0+255),c
   975  00127A  040A               	decf	??_processOpcode,w,c
   976  00127C  A4D8               	btfss	status,2,c
   977  00127E  D006               	goto	l1535
   978  001280  ECD4  F00F         	call	_immData_toPointer	;wreg free
   979  001284  C001  F018         	movff	?_immData_toPointer,_regPC
   980  001288  C002  F019         	movff	?_immData_toPointer+1,_regPC+1
   981  00128C                     l1535:
   982                           
   983                           ;emulator.c: 522: regPC += 2;
   984  00128C  0E02               	movlw	2
   985  00128E  2618               	addwf	_regPC,f,c
   986  001290  0E00               	movlw	0
   987  001292  2219               	addwfc	_regPC+1,f,c
   988                           
   989                           ;emulator.c: 523: break;
   990  001294  D2C3               	goto	l1707
   991  001296                     l1537:
   992                           
   993                           ;emulator.c: 526: if (getFbits(0) == 1) regPC = regMX;
   994  001296  0E00               	movlw	0
   995  001298  ECB3  F00F         	call	_getFbits
   996  00129C  D7B2               	goto	L34
   997  00129E                     l1543:
   998                           
   999                           ;emulator.c: 532: if (getFbits(0) == 1) regPC = immData_toPointer();
  1000  00129E  0E00               	movlw	0
  1001  0012A0  ECB3  F00F         	call	_getFbits
  1002  0012A4  6E0A               	movwf	??_processOpcode& (0+255),c
  1003  0012A6  040A               	decf	??_processOpcode,w,c
  1004  0012A8  A4D8               	btfss	status,2,c
  1005  0012AA  D07B               	goto	L15
  1006  0012AC  ECD4  F00F         	call	_immData_toPointer	;wreg free
  1007  0012B0  D7C6               	goto	L30
  1008  0012B2                     l1549:
  1009                           
  1010                           ;emulator.c: 538: if (getFbits(0) == 0) regPC = regMX;
  1011  0012B2  0E00               	movlw	0
  1012  0012B4  ECB3  F00F         	call	_getFbits
  1013  0012B8                     L33:
  1014  0012B8  0900               	iorlw	0
  1015  0012BA  D7CA               	goto	L31
  1016  0012BC                     l1555:
  1017                           
  1018                           ;emulator.c: 544: if (getFbits(0) == 0) regPC = immData_toPointer();
  1019  0012BC  0E00               	movlw	0
  1020  0012BE  ECB3  F00F         	call	_getFbits
  1021  0012C2  0900               	iorlw	0
  1022  0012C4  A4D8               	btfss	status,2,c
  1023  0012C6  D06D               	goto	L15
  1024  0012C8  ECD4  F00F         	call	_immData_toPointer	;wreg free
  1025  0012CC  D7B8               	goto	L30
  1026  0012CE                     l1561:
  1027                           
  1028                           ;emulator.c: 551: regPC++;
  1029  0012CE  4A18               	infsnz	_regPC,f,c
  1030  0012D0  2A19               	incf	_regPC+1,f,c
  1031                           
  1032                           ;emulator.c: 552: regPC_temp = regPC;
  1033  0012D2  C018  F00C         	movff	_regPC,processOpcode@regPC_temp
  1034  0012D6  C019  F00D         	movff	_regPC+1,processOpcode@regPC_temp+1
  1035                           
  1036                           ;emulator.c: 554: stack[regSP] = (uint8_t) regPC_temp;
  1037  0012DA  5020               	movf	_regSP,w,c
  1038  0012DC  0D01               	mullw	1
  1039  0012DE  0101               	movlb	1	; () banked
  1040  0012E0  0E00               	movlw	low _stack
  1041  0012E2  24F3               	addwf	prodl,w,c
  1042  0012E4  6ED9               	movwf	fsr2l,c
  1043  0012E6  0101               	movlb	1	; () banked
  1044  0012E8  0E01               	movlw	high _stack
  1045  0012EA  20F4               	addwfc	prodh,w,c
  1046  0012EC  6EDA               	movwf	fsr2h,c
  1047  0012EE  C00C  FFDF         	movff	processOpcode@regPC_temp,indf2
  1048                           
  1049                           ; BSR set to: 1
  1050                           ;emulator.c: 555: regSP++;
  1051  0012F2  2A20               	incf	_regSP,f,c
  1052                           
  1053                           ;emulator.c: 556: stack[regSP] = (uint8_t) regPC;
  1054  0012F4  5020               	movf	_regSP,w,c
  1055  0012F6  0D01               	mullw	1
  1056  0012F8  0101               	movlb	1	; () banked
  1057  0012FA  0E00               	movlw	low _stack
  1058  0012FC  24F3               	addwf	prodl,w,c
  1059  0012FE  6ED9               	movwf	fsr2l,c
  1060  001300  0101               	movlb	1	; () banked
  1061  001302  0E01               	movlw	high _stack
  1062  001304  20F4               	addwfc	prodh,w,c
  1063  001306  6EDA               	movwf	fsr2h,c
  1064  001308  C018  FFDF         	movff	_regPC,indf2
  1065                           
  1066                           ; BSR set to: 1
  1067                           ;emulator.c: 557: regSP++;
  1068  00130C  2A20               	incf	_regSP,f,c
  1069  00130E  D77C               	goto	L27
  1070  001310                     l1575:
  1071                           
  1072                           ;emulator.c: 565: regPC += 3;
  1073  001310  0E03               	movlw	3
  1074  001312  2618               	addwf	_regPC,f,c
  1075  001314  0E00               	movlw	0
  1076  001316  2219               	addwfc	_regPC+1,f,c
  1077                           
  1078                           ;emulator.c: 566: regPC_temp = regPC;
  1079  001318  C018  F00C         	movff	_regPC,processOpcode@regPC_temp
  1080  00131C  C019  F00D         	movff	_regPC+1,processOpcode@regPC_temp+1
  1081                           
  1082                           ;emulator.c: 568: stack[regSP] = (uint8_t) regPC_temp;
  1083  001320  5020               	movf	_regSP,w,c
  1084  001322  0D01               	mullw	1
  1085  001324  0101               	movlb	1	; () banked
  1086  001326  0E00               	movlw	low _stack
  1087  001328  24F3               	addwf	prodl,w,c
  1088  00132A  6ED9               	movwf	fsr2l,c
  1089  00132C  0101               	movlb	1	; () banked
  1090  00132E  0E01               	movlw	high _stack
  1091  001330  20F4               	addwfc	prodh,w,c
  1092  001332  6EDA               	movwf	fsr2h,c
  1093  001334  C00C  FFDF         	movff	processOpcode@regPC_temp,indf2
  1094                           
  1095                           ; BSR set to: 1
  1096                           ;emulator.c: 569: regSP++;
  1097  001338  2A20               	incf	_regSP,f,c
  1098                           
  1099                           ; BSR set to: 1
  1100                           ;emulator.c: 570: stack[regSP] = (uint8_t) regPC;
  1101  00133A  5020               	movf	_regSP,w,c
  1102  00133C  0D01               	mullw	1
  1103  00133E  0101               	movlb	1	; () banked
  1104  001340  0E00               	movlw	low _stack
  1105  001342  24F3               	addwf	prodl,w,c
  1106  001344  6ED9               	movwf	fsr2l,c
  1107  001346  0101               	movlb	1	; () banked
  1108  001348  0E01               	movlw	high _stack
  1109  00134A  20F4               	addwfc	prodh,w,c
  1110  00134C  6EDA               	movwf	fsr2h,c
  1111  00134E  C018  FFDF         	movff	_regPC,indf2
  1112                           
  1113                           ; BSR set to: 1
  1114                           ;emulator.c: 571: regSP++;
  1115  001352  2A20               	incf	_regSP,f,c
  1116                           
  1117                           ; BSR set to: 1
  1118                           ;emulator.c: 572: regPC = immData_toPointer();
  1119  001354  ECD4  F00F         	call	_immData_toPointer	;wreg free
  1120  001358  D772               	goto	L30
  1121  00135A                     l1591:
  1122                           
  1123                           ;emulator.c: 578: regSP--;
  1124  00135A  0620               	decf	_regSP,f,c
  1125                           
  1126                           ;emulator.c: 579: regPC = (uint16_t) stack[regSP];
  1127  00135C  5020               	movf	_regSP,w,c
  1128  00135E  0D01               	mullw	1
  1129  001360  0101               	movlb	1	; () banked
  1130  001362  0E00               	movlw	low _stack
  1131  001364  24F3               	addwf	prodl,w,c
  1132  001366  6ED9               	movwf	fsr2l,c
  1133  001368  0101               	movlb	1	; () banked
  1134  00136A  0E01               	movlw	high _stack
  1135  00136C  20F4               	addwfc	prodh,w,c
  1136  00136E  6EDA               	movwf	fsr2h,c
  1137  001370  50DF               	movf	indf2,w,c
  1138  001372  6E0A               	movwf	??_processOpcode& (0+255),c
  1139  001374  500A               	movf	??_processOpcode,w,c
  1140  001376  6E18               	movwf	_regPC,c
  1141  001378  6A19               	clrf	_regPC+1,c
  1142                           
  1143                           ; BSR set to: 1
  1144                           ;emulator.c: 580: regSP--;
  1145  00137A  0620               	decf	_regSP,f,c
  1146                           
  1147                           ;emulator.c: 581: regPC_temp = (uint16_t) stack[regSP];
  1148  00137C  5020               	movf	_regSP,w,c
  1149  00137E  0D01               	mullw	1
  1150  001380  0101               	movlb	1	; () banked
  1151  001382  0E00               	movlw	low _stack
  1152  001384  24F3               	addwf	prodl,w,c
  1153  001386  6ED9               	movwf	fsr2l,c
  1154  001388  0101               	movlb	1	; () banked
  1155  00138A  0E01               	movlw	high _stack
  1156  00138C  20F4               	addwfc	prodh,w,c
  1157  00138E  6EDA               	movwf	fsr2h,c
  1158  001390  50DF               	movf	indf2,w,c
  1159  001392  6E0A               	movwf	??_processOpcode& (0+255),c
  1160  001394  500A               	movf	??_processOpcode,w,c
  1161  001396  6E0C               	movwf	processOpcode@regPC_temp,c
  1162  001398  6A0D               	clrf	processOpcode@regPC_temp+1,c
  1163                           
  1164                           ; BSR set to: 1
  1165                           ;emulator.c: 583: regPC += regPC_temp;
  1166  00139A  500C               	movf	processOpcode@regPC_temp,w,c
  1167  00139C  2618               	addwf	_regPC,f,c
  1168  00139E  500D               	movf	processOpcode@regPC_temp+1,w,c
  1169  0013A0  2219               	addwfc	_regPC+1,f,c
  1170  0013A2                     L15:
  1171                           
  1172                           ; BSR set to: 1
  1173                           ;emulator.c: 585: regPC--;
  1174  0013A2  0618               	decf	_regPC,f,c
  1175  0013A4  A0D8               	btfss	status,0,c
  1176  0013A6  0619               	decf	_regPC+1,f,c
  1177                           
  1178                           ;emulator.c: 586: break;
  1179  0013A8  D239               	goto	l1707
  1180  0013AA                     l1601:
  1181                           
  1182                           ;emulator.c: 592: stack[regSP] = regA;
  1183  0013AA  5020               	movf	_regSP,w,c
  1184  0013AC  0D01               	mullw	1
  1185  0013AE  0101               	movlb	1	; () banked
  1186  0013B0  0E00               	movlw	low _stack
  1187  0013B2  24F3               	addwf	prodl,w,c
  1188  0013B4  6ED9               	movwf	fsr2l,c
  1189  0013B6  0101               	movlb	1	; () banked
  1190  0013B8  0E01               	movlw	high _stack
  1191  0013BA  20F4               	addwfc	prodh,w,c
  1192  0013BC  6EDA               	movwf	fsr2h,c
  1193  0013BE  C01D  FFDF         	movff	_regA,indf2
  1194  0013C2  D02A               	goto	L17
  1195  0013C4                     l1605:
  1196                           
  1197                           ;emulator.c: 597: stack[regSP] = regB;
  1198  0013C4  5020               	movf	_regSP,w,c
  1199  0013C6  0D01               	mullw	1
  1200  0013C8  0101               	movlb	1	; () banked
  1201  0013CA  0E00               	movlw	low _stack
  1202  0013CC  24F3               	addwf	prodl,w,c
  1203  0013CE  6ED9               	movwf	fsr2l,c
  1204  0013D0  0101               	movlb	1	; () banked
  1205  0013D2  0E01               	movlw	high _stack
  1206  0013D4  20F4               	addwfc	prodh,w,c
  1207  0013D6  6EDA               	movwf	fsr2h,c
  1208  0013D8  C01E  FFDF         	movff	_regB,indf2
  1209  0013DC  D01D               	goto	L17
  1210  0013DE                     l1609:
  1211                           
  1212                           ;emulator.c: 602: stack[regSP] = regMX;
  1213  0013DE  5020               	movf	_regSP,w,c
  1214  0013E0  0D01               	mullw	1
  1215  0013E2  0101               	movlb	1	; () banked
  1216  0013E4  0E00               	movlw	low _stack
  1217  0013E6  24F3               	addwf	prodl,w,c
  1218  0013E8  6ED9               	movwf	fsr2l,c
  1219  0013EA  0101               	movlb	1	; () banked
  1220  0013EC  0E01               	movlw	high _stack
  1221  0013EE  20F4               	addwfc	prodh,w,c
  1222  0013F0  6EDA               	movwf	fsr2h,c
  1223  0013F2  C016  FFDF         	movff	_regMX,indf2
  1224                           
  1225                           ; BSR set to: 1
  1226                           ;emulator.c: 603: regSP += 2;
  1227  0013F6  0E02               	movlw	2
  1228  0013F8  2620               	addwf	_regSP,f,c
  1229                           
  1230                           ;emulator.c: 604: break;
  1231  0013FA  D210               	goto	l1707
  1232  0013FC                     l1613:
  1233                           
  1234                           ;emulator.c: 607: stack[regSP] = getMXbits(0);
  1235  0013FC  5020               	movf	_regSP,w,c
  1236  0013FE  0D01               	mullw	1
  1237  001400  0101               	movlb	1	; () banked
  1238  001402  0E00               	movlw	low _stack
  1239  001404  24F3               	addwf	prodl,w,c
  1240  001406  6ED9               	movwf	fsr2l,c
  1241  001408  0101               	movlb	1	; () banked
  1242  00140A  0E01               	movlw	high _stack
  1243  00140C  20F4               	addwfc	prodh,w,c
  1244  00140E  6EDA               	movwf	fsr2h,c
  1245  001410  0E00               	movlw	0
  1246  001412  ECEB  F00F         	call	_getMXbits
  1247  001416  D00F               	goto	L18
  1248  001418                     L17:
  1249                           
  1250                           ;emulator.c: 608: regSP++;
  1251  001418  2A20               	incf	_regSP,f,c
  1252                           
  1253                           ;emulator.c: 609: break;
  1254  00141A  D200               	goto	l1707
  1255  00141C                     l1617:
  1256                           
  1257                           ;emulator.c: 612: stack[regSP] = getMXbits(1);
  1258  00141C  5020               	movf	_regSP,w,c
  1259  00141E  0D01               	mullw	1
  1260  001420  0101               	movlb	1	; () banked
  1261  001422  0E00               	movlw	low _stack
  1262  001424  24F3               	addwf	prodl,w,c
  1263  001426  6ED9               	movwf	fsr2l,c
  1264  001428  0101               	movlb	1	; () banked
  1265  00142A  0E01               	movlw	high _stack
  1266  00142C  20F4               	addwfc	prodh,w,c
  1267  00142E  6EDA               	movwf	fsr2h,c
  1268  001430  0E01               	movlw	1
  1269  001432  ECEB  F00F         	call	_getMXbits
  1270  001436                     L18:
  1271  001436  6EDF               	movwf	indf2,c
  1272  001438  D7EF               	goto	L17
  1273  00143A                     l1621:
  1274                           
  1275                           ;emulator.c: 617: stack[regSP] = regF;
  1276  00143A  5020               	movf	_regSP,w,c
  1277  00143C  0D01               	mullw	1
  1278  00143E  0101               	movlb	1	; () banked
  1279  001440  0E00               	movlw	low _stack
  1280  001442  24F3               	addwf	prodl,w,c
  1281  001444  6ED9               	movwf	fsr2l,c
  1282  001446  0101               	movlb	1	; () banked
  1283  001448  0E01               	movlw	high _stack
  1284  00144A  20F4               	addwfc	prodh,w,c
  1285  00144C  6EDA               	movwf	fsr2h,c
  1286  00144E  C01F  FFDF         	movff	_regF,indf2
  1287  001452  D7E2               	goto	L17
  1288  001454                     l1625:
  1289                           
  1290                           ;emulator.c: 622: stack[regSP] = immData_1;
  1291  001454  5020               	movf	_regSP,w,c
  1292  001456  0D01               	mullw	1
  1293  001458  0101               	movlb	1	; () banked
  1294  00145A  0E00               	movlw	low _stack
  1295  00145C  24F3               	addwf	prodl,w,c
  1296  00145E  6ED9               	movwf	fsr2l,c
  1297  001460  0101               	movlb	1	; () banked
  1298  001462  0E01               	movlw	high _stack
  1299  001464  20F4               	addwfc	prodh,w,c
  1300  001466  6EDA               	movwf	fsr2h,c
  1301  001468  C01B  FFDF         	movff	_immData_1,indf2
  1302                           
  1303                           ; BSR set to: 1
  1304                           ;emulator.c: 623: regSP++;
  1305  00146C  2A20               	incf	_regSP,f,c
  1306  00146E  D0CD               	goto	L20
  1307  001470                     l1631:
  1308                           
  1309                           ;emulator.c: 628: regSP--;
  1310  001470  0620               	decf	_regSP,f,c
  1311                           
  1312                           ;emulator.c: 629: regA = stack[regSP];
  1313  001472  5020               	movf	_regSP,w,c
  1314  001474  0D01               	mullw	1
  1315  001476  0101               	movlb	1	; () banked
  1316  001478  0E00               	movlw	low _stack
  1317  00147A  24F3               	addwf	prodl,w,c
  1318  00147C  6ED9               	movwf	fsr2l,c
  1319  00147E  0101               	movlb	1	; () banked
  1320  001480  0E01               	movlw	high _stack
  1321  001482  20F4               	addwfc	prodh,w,c
  1322  001484                     L23:
  1323  001484  6EDA               	movwf	fsr2h,c
  1324  001486  50DF               	movf	indf2,w,c
  1325  001488                     L10:
  1326  001488  6E1D               	movwf	_regA,c
  1327                           
  1328                           ;emulator.c: 630: break;
  1329  00148A  D1C8               	goto	l1707
  1330  00148C                     l1635:
  1331                           
  1332                           ;emulator.c: 633: regSP--;
  1333  00148C  0620               	decf	_regSP,f,c
  1334                           
  1335                           ;emulator.c: 634: regB = stack[regSP];
  1336  00148E  5020               	movf	_regSP,w,c
  1337  001490  0D01               	mullw	1
  1338  001492  0101               	movlb	1	; () banked
  1339  001494  0E00               	movlw	low _stack
  1340  001496  24F3               	addwf	prodl,w,c
  1341  001498  6ED9               	movwf	fsr2l,c
  1342  00149A  0101               	movlb	1	; () banked
  1343  00149C  0E01               	movlw	high _stack
  1344  00149E  20F4               	addwfc	prodh,w,c
  1345  0014A0  6EDA               	movwf	fsr2h,c
  1346  0014A2  50DF               	movf	indf2,w,c
  1347  0014A4  6E1E               	movwf	_regB,c
  1348                           
  1349                           ;emulator.c: 635: break;
  1350  0014A6  D1BA               	goto	l1707
  1351  0014A8                     l1639:
  1352                           
  1353                           ;emulator.c: 638: regSP -= 2;
  1354  0014A8  0E02               	movlw	2
  1355  0014AA  5E20               	subwf	_regSP,f,c
  1356                           
  1357                           ;emulator.c: 639: regMX = stack[regSP];
  1358  0014AC  5020               	movf	_regSP,w,c
  1359  0014AE  0D01               	mullw	1
  1360  0014B0  0101               	movlb	1	; () banked
  1361  0014B2  0E00               	movlw	low _stack
  1362  0014B4  24F3               	addwf	prodl,w,c
  1363  0014B6  6ED9               	movwf	fsr2l,c
  1364  0014B8  0101               	movlb	1	; () banked
  1365  0014BA  0E01               	movlw	high _stack
  1366  0014BC  20F4               	addwfc	prodh,w,c
  1367  0014BE  6EDA               	movwf	fsr2h,c
  1368  0014C0  50DF               	movf	indf2,w,c
  1369  0014C2  6E0A               	movwf	??_processOpcode& (0+255),c
  1370  0014C4  500A               	movf	??_processOpcode,w,c
  1371  0014C6  6E16               	movwf	_regMX,c
  1372  0014C8  6A17               	clrf	_regMX+1,c
  1373                           
  1374                           ;emulator.c: 640: break;
  1375  0014CA  D1A8               	goto	l1707
  1376  0014CC                     l1643:
  1377                           
  1378                           ;emulator.c: 643: regSP--;
  1379  0014CC  0620               	decf	_regSP,f,c
  1380                           
  1381                           ;emulator.c: 644: setMXbits(0, stack[regSP]);
  1382  0014CE  5020               	movf	_regSP,w,c
  1383  0014D0  0D01               	mullw	1
  1384  0014D2  0101               	movlb	1	; () banked
  1385  0014D4  0E00               	movlw	low _stack
  1386  0014D6  24F3               	addwf	prodl,w,c
  1387  0014D8  6ED9               	movwf	fsr2l,c
  1388  0014DA  0101               	movlb	1	; () banked
  1389  0014DC  0E01               	movlw	high _stack
  1390  0014DE  20F4               	addwfc	prodh,w,c
  1391  0014E0  6EDA               	movwf	fsr2h,c
  1392  0014E2  50DF               	movf	indf2,w,c
  1393  0014E4  6E01               	movwf	setMXbits@value,c
  1394  0014E6  0E00               	movlw	0
  1395  0014E8  EC9F  F00F         	call	_setMXbits
  1396                           
  1397                           ;emulator.c: 645: break;
  1398  0014EC  D197               	goto	l1707
  1399  0014EE                     l1647:
  1400                           
  1401                           ;emulator.c: 648: regSP--;
  1402  0014EE  0620               	decf	_regSP,f,c
  1403                           
  1404                           ;emulator.c: 649: setMXbits(1, stack[regSP]);
  1405  0014F0  5020               	movf	_regSP,w,c
  1406  0014F2  0D01               	mullw	1
  1407  0014F4  0101               	movlb	1	; () banked
  1408  0014F6  0E00               	movlw	low _stack
  1409  0014F8  24F3               	addwf	prodl,w,c
  1410  0014FA  6ED9               	movwf	fsr2l,c
  1411  0014FC  0101               	movlb	1	; () banked
  1412  0014FE  0E01               	movlw	high _stack
  1413  001500  20F4               	addwfc	prodh,w,c
  1414  001502  6EDA               	movwf	fsr2h,c
  1415  001504  50DF               	movf	indf2,w,c
  1416  001506  6E01               	movwf	setMXbits@value,c
  1417  001508  0E01               	movlw	1
  1418  00150A  EC9F  F00F         	call	_setMXbits
  1419                           
  1420                           ;emulator.c: 650: break;
  1421  00150E  D186               	goto	l1707
  1422  001510                     l1651:
  1423                           
  1424                           ;emulator.c: 657: regA_temp16 += (uint16_t) regB;
  1425  001510  501E               	movf	_regB,w,c
  1426  001512  260F               	addwf	processOpcode@regA_temp16,f,c
  1427  001514  0E00               	movlw	0
  1428  001516  2210               	addwfc	processOpcode@regA_temp16+1,f,c
  1429                           
  1430                           ;emulator.c: 658: if (regA_temp16 > 255) setFbits(4, 1);
  1431  001518  0E00               	movlw	0
  1432  00151A  5C0F               	subwf	processOpcode@regA_temp16,w,c
  1433  00151C  0E01               	movlw	1
  1434  00151E  5810               	subwfb	processOpcode@regA_temp16+1,w,c
  1435  001520  A0D8               	btfss	status,0,c
  1436  001522  D008               	goto	l1655
  1437  001524  6E0A               	movwf	??_processOpcode& (0+255),c
  1438  001526  0E01               	movlw	1
  1439  001528  6E01               	movwf	setFbits@value,c
  1440  00152A  500A               	movf	??_processOpcode& (0+255),w,c
  1441  00152C  0E04               	movlw	4
  1442  00152E  EC50  F00F         	call	_setFbits
  1443  001532  D007               	goto	l1657
  1444  001534                     l1655:
  1445                           
  1446                           ;emulator.c: 659: else setFbits(4, 0);
  1447  001534  6E0A               	movwf	??_processOpcode& (0+255),c
  1448  001536  0E00               	movlw	0
  1449  001538  6E01               	movwf	setFbits@value,c
  1450  00153A  500A               	movf	??_processOpcode& (0+255),w,c
  1451  00153C  0E04               	movlw	4
  1452  00153E  EC50  F00F         	call	_setFbits
  1453  001542                     l1657:
  1454                           
  1455                           ;emulator.c: 660: regA += regB;
  1456  001542  501E               	movf	_regB,w,c
  1457  001544                     L11:
  1458  001544  261D               	addwf	_regA,f,c
  1459                           
  1460                           ;emulator.c: 661: break;
  1461  001546  D16A               	goto	l1707
  1462  001548                     l1659:
  1463                           
  1464                           ;emulator.c: 665: regA_temp16 += (uint16_t) immData_1;
  1465  001548  501B               	movf	_immData_1,w,c
  1466  00154A  260F               	addwf	processOpcode@regA_temp16,f,c
  1467  00154C  0E00               	movlw	0
  1468  00154E  2210               	addwfc	processOpcode@regA_temp16+1,f,c
  1469                           
  1470                           ;emulator.c: 666: if (regA_temp16 > 255) setFbits(4, 1);
  1471  001550  0E00               	movlw	0
  1472  001552  5C0F               	subwf	processOpcode@regA_temp16,w,c
  1473  001554  0E01               	movlw	1
  1474  001556  5810               	subwfb	processOpcode@regA_temp16+1,w,c
  1475  001558  A0D8               	btfss	status,0,c
  1476  00155A  D008               	goto	l1663
  1477  00155C  6E0A               	movwf	??_processOpcode& (0+255),c
  1478  00155E  0E01               	movlw	1
  1479  001560  6E01               	movwf	setFbits@value,c
  1480  001562  500A               	movf	??_processOpcode& (0+255),w,c
  1481  001564  0E04               	movlw	4
  1482  001566  EC50  F00F         	call	_setFbits
  1483  00156A  D007               	goto	l1665
  1484  00156C                     l1663:
  1485                           
  1486                           ;emulator.c: 667: else setFbits(4, 0);
  1487  00156C  6E0A               	movwf	??_processOpcode& (0+255),c
  1488  00156E  0E00               	movlw	0
  1489  001570  6E01               	movwf	setFbits@value,c
  1490  001572  500A               	movf	??_processOpcode& (0+255),w,c
  1491  001574  0E04               	movlw	4
  1492  001576  EC50  F00F         	call	_setFbits
  1493  00157A                     l1665:
  1494                           
  1495                           ;emulator.c: 669: regA += immData_1;
  1496  00157A  501B               	movf	_immData_1,w,c
  1497  00157C  261D               	addwf	_regA,f,c
  1498  00157E  D045               	goto	L20
  1499  001580                     l352:
  1500                           
  1501                           ;emulator.c: 676: regA_temp16 = regA;
  1502  001580  C01D  F00F         	movff	_regA,processOpcode@regA_temp16
  1503  001584  6A10               	clrf	processOpcode@regA_temp16+1,c
  1504                           
  1505                           ;emulator.c: 678: regA_temp16 += 255;
  1506  001586  0EFF               	movlw	255
  1507  001588  260F               	addwf	processOpcode@regA_temp16,f,c
  1508  00158A  0E00               	movlw	0
  1509  00158C  2210               	addwfc	processOpcode@regA_temp16+1,f,c
  1510                           
  1511                           ;emulator.c: 679: regA_temp16 -= regB;
  1512  00158E  501E               	movf	_regB,w,c
  1513  001590  5E0F               	subwf	processOpcode@regA_temp16,f,c
  1514  001592  0E00               	movlw	0
  1515  001594  5A10               	subwfb	processOpcode@regA_temp16+1,f,c
  1516                           
  1517                           ;emulator.c: 680: if (regA_temp16 < 255) setFbits(4, 1);
  1518  001596  0EFF               	movlw	255
  1519  001598  5C0F               	subwf	processOpcode@regA_temp16,w,c
  1520  00159A  0E00               	movlw	0
  1521  00159C  5810               	subwfb	processOpcode@regA_temp16+1,w,c
  1522  00159E  B0D8               	btfsc	status,0,c
  1523  0015A0  D008               	goto	l1673
  1524  0015A2  6E0A               	movwf	??_processOpcode& (0+255),c
  1525  0015A4  0E01               	movlw	1
  1526  0015A6  6E01               	movwf	setFbits@value,c
  1527  0015A8  500A               	movf	??_processOpcode& (0+255),w,c
  1528  0015AA  0E04               	movlw	4
  1529  0015AC  EC50  F00F         	call	_setFbits
  1530  0015B0  D007               	goto	l1675
  1531  0015B2                     l1673:
  1532                           
  1533                           ;emulator.c: 681: else setFbits(4, 0);
  1534  0015B2  6E0A               	movwf	??_processOpcode& (0+255),c
  1535  0015B4  0E00               	movlw	0
  1536  0015B6  6E01               	movwf	setFbits@value,c
  1537  0015B8  500A               	movf	??_processOpcode& (0+255),w,c
  1538  0015BA  0E04               	movlw	4
  1539  0015BC  EC50  F00F         	call	_setFbits
  1540  0015C0                     l1675:
  1541                           
  1542                           ;emulator.c: 682: regA -= regB;
  1543  0015C0  501E               	movf	_regB,w,c
  1544  0015C2  5E1D               	subwf	_regA,f,c
  1545                           
  1546                           ;emulator.c: 683: break;
  1547  0015C4  D12B               	goto	l1707
  1548  0015C6                     l355:
  1549                           
  1550                           ;emulator.c: 687: regA_temp16 = regA;
  1551  0015C6  C01D  F00F         	movff	_regA,processOpcode@regA_temp16
  1552  0015CA  6A10               	clrf	processOpcode@regA_temp16+1,c
  1553                           
  1554                           ;emulator.c: 689: regA_temp16 += 255;
  1555  0015CC  0EFF               	movlw	255
  1556  0015CE  260F               	addwf	processOpcode@regA_temp16,f,c
  1557  0015D0  0E00               	movlw	0
  1558  0015D2  2210               	addwfc	processOpcode@regA_temp16+1,f,c
  1559                           
  1560                           ;emulator.c: 690: regA_temp16 -= immData_1;
  1561  0015D4  501B               	movf	_immData_1,w,c
  1562  0015D6  5E0F               	subwf	processOpcode@regA_temp16,f,c
  1563  0015D8  0E00               	movlw	0
  1564  0015DA  5A10               	subwfb	processOpcode@regA_temp16+1,f,c
  1565                           
  1566                           ;emulator.c: 691: if (regA_temp16 < 255) setFbits(4, 1);
  1567  0015DC  0EFF               	movlw	255
  1568  0015DE  5C0F               	subwf	processOpcode@regA_temp16,w,c
  1569  0015E0  0E00               	movlw	0
  1570  0015E2  5810               	subwfb	processOpcode@regA_temp16+1,w,c
  1571  0015E4  B0D8               	btfsc	status,0,c
  1572  0015E6  D008               	goto	l1681
  1573  0015E8  6E0A               	movwf	??_processOpcode& (0+255),c
  1574  0015EA  0E01               	movlw	1
  1575  0015EC  6E01               	movwf	setFbits@value,c
  1576  0015EE  500A               	movf	??_processOpcode& (0+255),w,c
  1577  0015F0  0E04               	movlw	4
  1578  0015F2  EC50  F00F         	call	_setFbits
  1579  0015F6  D007               	goto	l1683
  1580  0015F8                     l1681:
  1581                           
  1582                           ;emulator.c: 692: else setFbits(4, 0);
  1583  0015F8  6E0A               	movwf	??_processOpcode& (0+255),c
  1584  0015FA  0E00               	movlw	0
  1585  0015FC  6E01               	movwf	setFbits@value,c
  1586  0015FE  500A               	movf	??_processOpcode& (0+255),w,c
  1587  001600  0E04               	movlw	4
  1588  001602  EC50  F00F         	call	_setFbits
  1589  001606                     l1683:
  1590                           
  1591                           ;emulator.c: 693: regA -= immData_1;
  1592  001606  501B               	movf	_immData_1,w,c
  1593  001608  5E1D               	subwf	_regA,f,c
  1594  00160A                     L20:
  1595                           
  1596                           ;emulator.c: 694: regPC++;
  1597  00160A  4A18               	infsnz	_regPC,f,c
  1598  00160C  2A19               	incf	_regPC+1,f,c
  1599                           
  1600                           ;emulator.c: 695: break;
  1601  00160E  D106               	goto	l1707
  1602  001610                     l1687:
  1603                           
  1604                           ;emulator.c: 699: regA_temp16 = regA + 1;
  1605  001610  0E01               	movlw	1
  1606  001612  241D               	addwf	_regA,w,c
  1607  001614  6E0F               	movwf	processOpcode@regA_temp16,c
  1608  001616  6A10               	clrf	processOpcode@regA_temp16+1,c
  1609  001618  0E00               	movlw	0
  1610  00161A  2210               	addwfc	processOpcode@regA_temp16+1,f,c
  1611                           
  1612                           ;emulator.c: 700: if (regA_temp16 > 255) setFbits(4, 1);
  1613  00161C  0E00               	movlw	0
  1614  00161E  5C0F               	subwf	processOpcode@regA_temp16,w,c
  1615  001620  0E01               	movlw	1
  1616  001622  5810               	subwfb	processOpcode@regA_temp16+1,w,c
  1617  001624  A0D8               	btfss	status,0,c
  1618  001626  D008               	goto	l1691
  1619  001628  6E0A               	movwf	??_processOpcode& (0+255),c
  1620  00162A  0E01               	movlw	1
  1621  00162C  6E01               	movwf	setFbits@value,c
  1622  00162E  500A               	movf	??_processOpcode& (0+255),w,c
  1623  001630  0E04               	movlw	4
  1624  001632  EC50  F00F         	call	_setFbits
  1625  001636  D007               	goto	l1693
  1626  001638                     l1691:
  1627                           
  1628                           ;emulator.c: 701: else setFbits(4, 0);
  1629  001638  6E0A               	movwf	??_processOpcode& (0+255),c
  1630  00163A  0E00               	movlw	0
  1631  00163C  6E01               	movwf	setFbits@value,c
  1632  00163E  500A               	movf	??_processOpcode& (0+255),w,c
  1633  001640  0E04               	movlw	4
  1634  001642  EC50  F00F         	call	_setFbits
  1635  001646                     l1693:
  1636                           
  1637                           ;emulator.c: 702: regA++;
  1638  001646  2A1D               	incf	_regA,f,c
  1639                           
  1640                           ;emulator.c: 703: break;
  1641  001648  D0E9               	goto	l1707
  1642  00164A                     l1695:
  1643                           
  1644                           ;emulator.c: 707: regA_temp8 = regA - 1;
  1645  00164A  041D               	decf	_regA,w,c
  1646  00164C  6E0E               	movwf	processOpcode@regA_temp8,c
  1647                           
  1648                           ;emulator.c: 708: if (regA_temp8 == 255) setFbits(4, 1);
  1649  00164E  280E               	incf	processOpcode@regA_temp8,w,c
  1650  001650  A4D8               	btfss	status,2,c
  1651  001652  D008               	goto	l1699
  1652  001654  6E0A               	movwf	??_processOpcode& (0+255),c
  1653  001656  0E01               	movlw	1
  1654  001658  6E01               	movwf	setFbits@value,c
  1655  00165A  500A               	movf	??_processOpcode& (0+255),w,c
  1656  00165C  0E04               	movlw	4
  1657  00165E  EC50  F00F         	call	_setFbits
  1658  001662  D007               	goto	l1701
  1659  001664                     l1699:
  1660                           
  1661                           ;emulator.c: 709: else setFbits(4, 0);
  1662  001664  6E0A               	movwf	??_processOpcode& (0+255),c
  1663  001666  0E00               	movlw	0
  1664  001668  6E01               	movwf	setFbits@value,c
  1665  00166A  500A               	movf	??_processOpcode& (0+255),w,c
  1666  00166C  0E04               	movlw	4
  1667  00166E  EC50  F00F         	call	_setFbits
  1668  001672                     l1701:
  1669                           
  1670                           ;emulator.c: 710: regA--;
  1671  001672  061D               	decf	_regA,f,c
  1672                           
  1673                           ;emulator.c: 711: break;
  1674  001674  D0D3               	goto	l1707
  1675  001676                     l1705:
  1676  001676  0E00               	movlw	low _virtualMemory
  1677  001678  2418               	addwf	_regPC,w,c
  1678  00167A  6ED9               	movwf	fsr2l,c
  1679  00167C  0E02               	movlw	high _virtualMemory
  1680  00167E  2019               	addwfc	_regPC+1,w,c
  1681  001680  6EDA               	movwf	fsr2h,c
  1682  001682  50DF               	movf	indf2,w,c
  1683                           
  1684                           ; Switch size 1, requested type "space"
  1685                           ; Number of cases is 68, Range of values is 1 to 85
  1686                           ; switch strategies available:
  1687                           ; Name         Instructions Cycles
  1688                           ; simple_byte          205   103 (average)
  1689                           ;	Chosen strategy is simple_byte
  1690  001684  0A01               	xorlw	1	; case 1
  1691  001686  B4D8               	btfsc	status,2,c
  1692  001688  D4CA               	goto	l1393
  1693  00168A  0A03               	xorlw	3	; case 2
  1694  00168C  B4D8               	btfsc	status,2,c
  1695  00168E  D4CF               	goto	l1395
  1696  001690  0A01               	xorlw	1	; case 3
  1697  001692  B4D8               	btfsc	status,2,c
  1698  001694  D4D9               	goto	l1399
  1699  001696  0A07               	xorlw	7	; case 4
  1700  001698  B4D8               	btfsc	status,2,c
  1701  00169A  D4DA               	goto	l1401
  1702  00169C  0A01               	xorlw	1	; case 5
  1703  00169E  B4D8               	btfsc	status,2,c
  1704  0016A0  D4DC               	goto	l1405
  1705  0016A2  0A03               	xorlw	3	; case 6
  1706  0016A4  B4D8               	btfsc	status,2,c
  1707  0016A6  D4DF               	goto	l1407
  1708  0016A8  0A01               	xorlw	1	; case 7
  1709  0016AA  B4D8               	btfsc	status,2,c
  1710  0016AC  D4E2               	goto	l1411
  1711  0016AE  0A0F               	xorlw	15	; case 8
  1712  0016B0  B4D8               	btfsc	status,2,c
  1713  0016B2  D4C5               	goto	l1397
  1714  0016B4  0A18               	xorlw	24	; case 16
  1715  0016B6  B4D8               	btfsc	status,2,c
  1716  0016B8  D4E2               	goto	l1415
  1717  0016BA  0A01               	xorlw	1	; case 17
  1718  0016BC  B4D8               	btfsc	status,2,c
  1719  0016BE  D4E5               	goto	l1417
  1720  0016C0  0A03               	xorlw	3	; case 18
  1721  0016C2  B4D8               	btfsc	status,2,c
  1722  0016C4  D4E6               	goto	l1419
  1723  0016C6  0A01               	xorlw	1	; case 19
  1724  0016C8  B4D8               	btfsc	status,2,c
  1725  0016CA  D4E7               	goto	l273
  1726  0016CC  0A07               	xorlw	7	; case 20
  1727  0016CE  B4D8               	btfsc	status,2,c
  1728  0016D0  D4E7               	goto	l274
  1729  0016D2  0A01               	xorlw	1	; case 21
  1730  0016D4  B4D8               	btfsc	status,2,c
  1731  0016D6  D4E7               	goto	l275
  1732  0016D8  0A03               	xorlw	3	; case 22
  1733  0016DA  B4D8               	btfsc	status,2,c
  1734  0016DC  D4E7               	goto	l1421
  1735  0016DE  0A01               	xorlw	1	; case 23
  1736  0016E0  B4D8               	btfsc	status,2,c
  1737  0016E2  D4ED               	goto	l1423
  1738  0016E4  0A0F               	xorlw	15	; case 24
  1739  0016E6  B4D8               	btfsc	status,2,c
  1740  0016E8  D4F0               	goto	l1425
  1741  0016EA  0A01               	xorlw	1	; case 25
  1742  0016EC  B4D8               	btfsc	status,2,c
  1743  0016EE  D4F3               	goto	l279
  1744  0016F0  0A03               	xorlw	3	; case 26
  1745  0016F2  B4D8               	btfsc	status,2,c
  1746  0016F4  D4F3               	goto	l280
  1747  0016F6  0A01               	xorlw	1	; case 27
  1748  0016F8  B4D8               	btfsc	status,2,c
  1749  0016FA  D4F3               	goto	l281
  1750  0016FC  0A07               	xorlw	7	; case 28
  1751  0016FE  B4D8               	btfsc	status,2,c
  1752  001700  D4F3               	goto	l282
  1753  001702  0A3C               	xorlw	60	; case 32
  1754  001704  B4D8               	btfsc	status,2,c
  1755  001706  D4F7               	goto	l1429
  1756  001708  0A01               	xorlw	1	; case 33
  1757  00170A  B4D8               	btfsc	status,2,c
  1758  00170C  D4F7               	goto	l1431
  1759  00170E  0A03               	xorlw	3	; case 34
  1760  001710  B4D8               	btfsc	status,2,c
  1761  001712  D4F7               	goto	l1435
  1762  001714  0A01               	xorlw	1	; case 35
  1763  001716  B4D8               	btfsc	status,2,c
  1764  001718  D4F7               	goto	l1437
  1765  00171A  0A07               	xorlw	7	; case 36
  1766  00171C  B4D8               	btfsc	status,2,c
  1767  00171E  D4FA               	goto	l1443
  1768  001720  0A01               	xorlw	1	; case 37
  1769  001722  B4D8               	btfsc	status,2,c
  1770  001724  D4FA               	goto	l1447
  1771  001726  0A03               	xorlw	3	; case 38
  1772  001728  B4D8               	btfsc	status,2,c
  1773  00172A  D4F9               	goto	l290
  1774  00172C  0A01               	xorlw	1	; case 39
  1775  00172E  B4D8               	btfsc	status,2,c
  1776  001730  D50B               	goto	l293
  1777  001732  0A0F               	xorlw	15	; case 40
  1778  001734  B4D8               	btfsc	status,2,c
  1779  001736  D51D               	goto	l296
  1780  001738  0A01               	xorlw	1	; case 41
  1781  00173A  B4D8               	btfsc	status,2,c
  1782  00173C  D51F               	goto	l297
  1783  00173E  0A03               	xorlw	3	; case 42
  1784  001740  B4D8               	btfsc	status,2,c
  1785  001742  D520               	goto	l1465
  1786  001744  0A01               	xorlw	1	; case 43
  1787  001746  B4D8               	btfsc	status,2,c
  1788  001748  D4E2               	goto	l1441
  1789  00174A  0A1B               	xorlw	27	; case 48
  1790  00174C  B4D8               	btfsc	status,2,c
  1791  00174E  D55C               	goto	L27
  1792  001750  0A01               	xorlw	1	; case 49
  1793  001752  B4D8               	btfsc	status,2,c
  1794  001754  D550               	goto	l1485
  1795  001756  0A03               	xorlw	3	; case 50
  1796  001758  B4D8               	btfsc	status,2,c
  1797  00175A  D550               	goto	l1489
  1798  00175C  0A01               	xorlw	1	; case 51
  1799  00175E  B4D8               	btfsc	status,2,c
  1800  001760  D558               	goto	l1495
  1801  001762  0A07               	xorlw	7	; case 52
  1802  001764  B4D8               	btfsc	status,2,c
  1803  001766  D55F               	goto	l1501
  1804  001768  0A01               	xorlw	1	; case 53
  1805  00176A  B4D8               	btfsc	status,2,c
  1806  00176C  D560               	goto	l1507
  1807  00176E  0A03               	xorlw	3	; case 54
  1808  001770  B4D8               	btfsc	status,2,c
  1809  001772  D56A               	goto	l1513
  1810  001774  0A01               	xorlw	1	; case 55
  1811  001776  B4D8               	btfsc	status,2,c
  1812  001778  D56E               	goto	l1519
  1813  00177A  0A0F               	xorlw	15	; case 56
  1814  00177C  B4D8               	btfsc	status,2,c
  1815  00177E  D575               	goto	l1525
  1816  001780  0A01               	xorlw	1	; case 57
  1817  001782  B4D8               	btfsc	status,2,c
  1818  001784  D576               	goto	l1531
  1819  001786  0A03               	xorlw	3	; case 58
  1820  001788  B4D8               	btfsc	status,2,c
  1821  00178A  D585               	goto	l1537
  1822  00178C  0A01               	xorlw	1	; case 59
  1823  00178E  B4D8               	btfsc	status,2,c
  1824  001790  D586               	goto	l1543
  1825  001792  0A07               	xorlw	7	; case 60
  1826  001794  B4D8               	btfsc	status,2,c
  1827  001796  D58D               	goto	l1549
  1828  001798  0A01               	xorlw	1	; case 61
  1829  00179A  B4D8               	btfsc	status,2,c
  1830  00179C  D58F               	goto	l1555
  1831  00179E  0A03               	xorlw	3	; case 62
  1832  0017A0  B4D8               	btfsc	status,2,c
  1833  0017A2  D595               	goto	l1561
  1834  0017A4  0A01               	xorlw	1	; case 63
  1835  0017A6  B4D8               	btfsc	status,2,c
  1836  0017A8  D5B3               	goto	l1575
  1837  0017AA  0A7F               	xorlw	127	; case 64
  1838  0017AC  B4D8               	btfsc	status,2,c
  1839  0017AE  D5D5               	goto	l1591
  1840  0017B0  0A01               	xorlw	1	; case 65
  1841  0017B2  B4D8               	btfsc	status,2,c
  1842  0017B4  D5FA               	goto	l1601
  1843  0017B6  0A03               	xorlw	3	; case 66
  1844  0017B8  B4D8               	btfsc	status,2,c
  1845  0017BA  D604               	goto	l1605
  1846  0017BC  0A01               	xorlw	1	; case 67
  1847  0017BE  B4D8               	btfsc	status,2,c
  1848  0017C0  D60E               	goto	l1609
  1849  0017C2  0A07               	xorlw	7	; case 68
  1850  0017C4  B4D8               	btfsc	status,2,c
  1851  0017C6  D61A               	goto	l1613
  1852  0017C8  0A01               	xorlw	1	; case 69
  1853  0017CA  B4D8               	btfsc	status,2,c
  1854  0017CC  D627               	goto	l1617
  1855  0017CE  0A03               	xorlw	3	; case 70
  1856  0017D0  B4D8               	btfsc	status,2,c
  1857  0017D2  D633               	goto	l1621
  1858  0017D4  0A01               	xorlw	1	; case 71
  1859  0017D6  B4D8               	btfsc	status,2,c
  1860  0017D8  D63D               	goto	l1625
  1861  0017DA  0A0F               	xorlw	15	; case 72
  1862  0017DC  B4D8               	btfsc	status,2,c
  1863  0017DE  D648               	goto	l1631
  1864  0017E0  0A01               	xorlw	1	; case 73
  1865  0017E2  B4D8               	btfsc	status,2,c
  1866  0017E4  D653               	goto	l1635
  1867  0017E6  0A03               	xorlw	3	; case 74
  1868  0017E8  B4D8               	btfsc	status,2,c
  1869  0017EA  D65E               	goto	l1639
  1870  0017EC  0A01               	xorlw	1	; case 75
  1871  0017EE  B4D8               	btfsc	status,2,c
  1872  0017F0  D66D               	goto	l1643
  1873  0017F2  0A07               	xorlw	7	; case 76
  1874  0017F4  B4D8               	btfsc	status,2,c
  1875  0017F6  D67B               	goto	l1647
  1876  0017F8  0A1C               	xorlw	28	; case 80
  1877  0017FA  B4D8               	btfsc	status,2,c
  1878  0017FC  D689               	goto	l1651
  1879  0017FE  0A01               	xorlw	1	; case 81
  1880  001800  B4D8               	btfsc	status,2,c
  1881  001802  D6A2               	goto	l1659
  1882  001804  0A03               	xorlw	3	; case 82
  1883  001806  B4D8               	btfsc	status,2,c
  1884  001808  D6BB               	goto	l352
  1885  00180A  0A01               	xorlw	1	; case 83
  1886  00180C  B4D8               	btfsc	status,2,c
  1887  00180E  D6DB               	goto	l355
  1888  001810  0A07               	xorlw	7	; case 84
  1889  001812  B4D8               	btfsc	status,2,c
  1890  001814  D6FD               	goto	l1687
  1891  001816  0A01               	xorlw	1	; case 85
  1892  001818  B4D8               	btfsc	status,2,c
  1893  00181A  D717               	goto	l1695
  1894  00181C                     l1707:
  1895                           
  1896                           ;emulator.c: 715: regPC++;
  1897  00181C  4A18               	infsnz	_regPC,f,c
  1898  00181E  2A19               	incf	_regPC+1,f,c
  1899  001820  0012               	return	
  1900  001822                     __end_of_processOpcode:
  1901                           	opt stack 0
  1902                           tblptru	equ	0xFF8
  1903                           tblptrh	equ	0xFF7
  1904                           tblptrl	equ	0xFF6
  1905                           tablat	equ	0xFF5
  1906                           prodh	equ	0xFF4
  1907                           prodl	equ	0xFF3
  1908                           postinc0	equ	0xFEE
  1909                           wreg	equ	0xFE8
  1910                           postdec1	equ	0xFE5
  1911                           fsr1h	equ	0xFE2
  1912                           fsr1l	equ	0xFE1
  1913                           indf2	equ	0xFDF
  1914                           fsr2h	equ	0xFDA
  1915                           fsr2l	equ	0xFD9
  1916                           status	equ	0xFD8
  1917                           
  1918 ;; *************** function _update_immData *****************
  1919 ;; Defined at:
  1920 ;;		line 221 in file "source/emulator.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;		None
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;		None
  1925 ;; Return value:  Size  Location     Type
  1926 ;;		None               void
  1927 ;; Registers used:
  1928 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1929 ;; Tracked objects:
  1930 ;;		On entry : 0/0
  1931 ;;		On exit  : 0/0
  1932 ;;		Unchanged: 0/0
  1933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1936 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1937 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1938 ;;Total ram usage:        2 bytes
  1939 ;; Hardware stack levels used:    1
  1940 ;; This function calls:
  1941 ;;		Nothing
  1942 ;; This function is called by:
  1943 ;;		_processOpcode
  1944 ;; This function uses a non-reentrant model
  1945 ;;
  1946                           
  1947                           	psect	text2
  1948  001CCE                     __ptext2:
  1949                           	opt stack 0
  1950  001CCE                     _update_immData:
  1951                           	opt stack 29
  1952                           
  1953                           ;emulator.c: 224: if (regPC + 1 == 2047 + 1) immData_1 = 0;
  1954                           
  1955                           ;incstack = 0
  1956  001CCE  0E01               	movlw	1
  1957  001CD0  2418               	addwf	_regPC,w,c
  1958  001CD2  6E01               	movwf	??_update_immData& (0+255),c
  1959  001CD4  0E00               	movlw	0
  1960  001CD6  2019               	addwfc	_regPC+1,w,c
  1961  001CD8  6E02               	movwf	(??_update_immData+1)& (0+255),c
  1962  001CDA  5002               	movf	??_update_immData+1,w,c
  1963  001CDC  0A08               	xorlw	8
  1964  001CDE  1001               	iorwf	??_update_immData,w,c
  1965  001CE0  A4D8               	btfss	status,2,c
  1966  001CE2  D004               	goto	l1343
  1967  001CE4  6E01               	movwf	??_update_immData& (0+255),c
  1968  001CE6  0E00               	movlw	0
  1969  001CE8  6E1B               	movwf	_immData_1,c
  1970  001CEA  5001               	movf	??_update_immData& (0+255),w,c
  1971  001CEC                     l1343:
  1972                           
  1973                           ;emulator.c: 225: if (regPC + 2 == 2047 + 1) immData_2 = 0;
  1974  001CEC  0E02               	movlw	2
  1975  001CEE  2418               	addwf	_regPC,w,c
  1976  001CF0  6E01               	movwf	??_update_immData& (0+255),c
  1977  001CF2  0E00               	movlw	0
  1978  001CF4  2019               	addwfc	_regPC+1,w,c
  1979  001CF6  6E02               	movwf	(??_update_immData+1)& (0+255),c
  1980  001CF8  5002               	movf	??_update_immData+1,w,c
  1981  001CFA  0A08               	xorlw	8
  1982  001CFC  1001               	iorwf	??_update_immData,w,c
  1983  001CFE  A4D8               	btfss	status,2,c
  1984  001D00  D004               	goto	l1347
  1985  001D02  6E01               	movwf	??_update_immData& (0+255),c
  1986  001D04  0E00               	movlw	0
  1987  001D06  6E1C               	movwf	_immData_2,c
  1988  001D08  5001               	movf	??_update_immData& (0+255),w,c
  1989  001D0A                     l1347:
  1990                           
  1991                           ;emulator.c: 226: if (regPC + 2 == 2047 + 2) immData_2 = 1;
  1992  001D0A  0E02               	movlw	2
  1993  001D0C  2418               	addwf	_regPC,w,c
  1994  001D0E  6E01               	movwf	??_update_immData& (0+255),c
  1995  001D10  0E00               	movlw	0
  1996  001D12  2019               	addwfc	_regPC+1,w,c
  1997  001D14  6E02               	movwf	(??_update_immData+1)& (0+255),c
  1998  001D16  0401               	decf	??_update_immData,w,c
  1999  001D18  0E08               	movlw	8
  2000  001D1A  B4D8               	btfsc	status,2,c
  2001  001D1C  1802               	xorwf	??_update_immData+1,w,c
  2002  001D1E  A4D8               	btfss	status,2,c
  2003  001D20  D004               	goto	l1351
  2004  001D22  6E01               	movwf	??_update_immData& (0+255),c
  2005  001D24  0E01               	movlw	1
  2006  001D26  6E1C               	movwf	_immData_2,c
  2007  001D28  5001               	movf	??_update_immData& (0+255),w,c
  2008  001D2A                     l1351:
  2009                           
  2010                           ;emulator.c: 230: immData_1 = virtualMemory[regPC + 1];
  2011  001D2A  0E01               	movlw	1
  2012  001D2C  2418               	addwf	_regPC,w,c
  2013  001D2E  6E01               	movwf	??_update_immData& (0+255),c
  2014  001D30  0E00               	movlw	0
  2015  001D32  2019               	addwfc	_regPC+1,w,c
  2016  001D34  6E02               	movwf	(??_update_immData+1)& (0+255),c
  2017  001D36  0E00               	movlw	low _virtualMemory
  2018  001D38  2401               	addwf	??_update_immData,w,c
  2019  001D3A  6ED9               	movwf	fsr2l,c
  2020  001D3C  0E02               	movlw	high _virtualMemory
  2021  001D3E  2002               	addwfc	??_update_immData+1,w,c
  2022  001D40  6EDA               	movwf	fsr2h,c
  2023  001D42  50DF               	movf	indf2,w,c
  2024  001D44  6E1B               	movwf	_immData_1,c
  2025                           
  2026                           ;emulator.c: 231: immData_2 = virtualMemory[regPC + 2];
  2027  001D46  0E02               	movlw	2
  2028  001D48  2418               	addwf	_regPC,w,c
  2029  001D4A  6E01               	movwf	??_update_immData& (0+255),c
  2030  001D4C  0E00               	movlw	0
  2031  001D4E  2019               	addwfc	_regPC+1,w,c
  2032  001D50  6E02               	movwf	(??_update_immData+1)& (0+255),c
  2033  001D52  0E00               	movlw	low _virtualMemory
  2034  001D54  2401               	addwf	??_update_immData,w,c
  2035  001D56  6ED9               	movwf	fsr2l,c
  2036  001D58  0E02               	movlw	high _virtualMemory
  2037  001D5A  2002               	addwfc	??_update_immData+1,w,c
  2038  001D5C  6EDA               	movwf	fsr2h,c
  2039  001D5E  50DF               	movf	indf2,w,c
  2040  001D60  6E1C               	movwf	_immData_2,c
  2041  001D62  0012               	return	
  2042  001D64                     __end_of_update_immData:
  2043                           	opt stack 0
  2044                           tblptru	equ	0xFF8
  2045                           tblptrh	equ	0xFF7
  2046                           tblptrl	equ	0xFF6
  2047                           tablat	equ	0xFF5
  2048                           prodh	equ	0xFF4
  2049                           prodl	equ	0xFF3
  2050                           postinc0	equ	0xFEE
  2051                           wreg	equ	0xFE8
  2052                           postdec1	equ	0xFE5
  2053                           fsr1h	equ	0xFE2
  2054                           fsr1l	equ	0xFE1
  2055                           indf2	equ	0xFDF
  2056                           fsr2h	equ	0xFDA
  2057                           fsr2l	equ	0xFD9
  2058                           status	equ	0xFD8
  2059                           
  2060 ;; *************** function _setPortData *****************
  2061 ;; Defined at:
  2062 ;;		line 190 in file "source/emulator.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;  portNumber      1    wreg     unsigned char 
  2065 ;;  outputData      1    4[COMRAM] unsigned char 
  2066 ;; Auto vars:     Size  Location     Type
  2067 ;;  portNumber      1    5[COMRAM] unsigned char 
  2068 ;;  outputData_t    2    6[COMRAM] unsigned int 
  2069 ;;  outputData_t    1    8[COMRAM] unsigned char 
  2070 ;; Return value:  Size  Location     Type
  2071 ;;		None               void
  2072 ;; Registers used:
  2073 ;;		wreg, status,2, status,0, cstack
  2074 ;; Tracked objects:
  2075 ;;		On entry : 0/0
  2076 ;;		On exit  : 0/0
  2077 ;;		Unchanged: 0/0
  2078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2079 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2080 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2082 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2083 ;;Total ram usage:        5 bytes
  2084 ;; Hardware stack levels used:    1
  2085 ;; Hardware stack levels required when called:    1
  2086 ;; This function calls:
  2087 ;;		_dispSeg
  2088 ;;		_enableSerial
  2089 ;;		_hexToChar
  2090 ;; This function is called by:
  2091 ;;		_processOpcode
  2092 ;; This function uses a non-reentrant model
  2093 ;;
  2094                           
  2095                           	psect	text3
  2096  001C26                     __ptext3:
  2097                           	opt stack 0
  2098  001C26                     _setPortData:
  2099                           	opt stack 28
  2100                           
  2101                           ;incstack = 0
  2102                           ;setPortData@portNumber stored from wreg
  2103  001C26  CFE8 F006          	movff	wreg,setPortData@portNumber
  2104                           
  2105                           ;emulator.c: 192: uint16_t outputData_temp16;
  2106                           ;emulator.c: 193: uint8_t outputData_temp8;
  2107                           ;emulator.c: 194: switch (portNumber)
  2108  001C2A  D043               	goto	l1383
  2109  001C2C                     l240:
  2110                           
  2111                           ;emulator.c: 197: if (outputData == 0) outputData_temp16 = 1200;
  2112  001C2C  6605               	tstfsz	setPortData@outputData,c
  2113  001C2E  D004               	goto	l1359
  2114  001C30  0E04               	movlw	4
  2115  001C32  6E08               	movwf	setPortData@outputData_temp16+1,c
  2116  001C34  0EB0               	movlw	176
  2117  001C36  6E07               	movwf	setPortData@outputData_temp16,c
  2118  001C38                     l1359:
  2119                           
  2120                           ;emulator.c: 198: if (outputData == 1) outputData_temp16 = 2400;
  2121  001C38  0405               	decf	setPortData@outputData,w,c
  2122  001C3A  A4D8               	btfss	status,2,c
  2123  001C3C  D004               	goto	l1363
  2124  001C3E  0E09               	movlw	9
  2125  001C40  6E08               	movwf	setPortData@outputData_temp16+1,c
  2126  001C42  0E60               	movlw	96
  2127  001C44  6E07               	movwf	setPortData@outputData_temp16,c
  2128  001C46                     l1363:
  2129                           
  2130                           ;emulator.c: 199: if (outputData == 2) outputData_temp16 = 9600;
  2131  001C46  5005               	movf	setPortData@outputData,w,c
  2132  001C48  0A02               	xorlw	2
  2133  001C4A  A4D8               	btfss	status,2,c
  2134  001C4C  D004               	goto	l1367
  2135  001C4E  0E25               	movlw	37
  2136  001C50  6E08               	movwf	setPortData@outputData_temp16+1,c
  2137  001C52  0E80               	movlw	128
  2138  001C54  6E07               	movwf	setPortData@outputData_temp16,c
  2139  001C56                     l1367:
  2140                           
  2141                           ;emulator.c: 200: if (outputData == 3) outputData_temp16 = 10417;
  2142  001C56  5005               	movf	setPortData@outputData,w,c
  2143  001C58  0A03               	xorlw	3
  2144  001C5A  A4D8               	btfss	status,2,c
  2145  001C5C  D004               	goto	l1371
  2146  001C5E  0E28               	movlw	40
  2147  001C60  6E08               	movwf	setPortData@outputData_temp16+1,c
  2148  001C62  0EB1               	movlw	177
  2149  001C64  6E07               	movwf	setPortData@outputData_temp16,c
  2150  001C66                     l1371:
  2151                           
  2152                           ;emulator.c: 201: if (outputData == 4) outputData_temp16 = 19200;
  2153  001C66  5005               	movf	setPortData@outputData,w,c
  2154  001C68  0A04               	xorlw	4
  2155  001C6A  A4D8               	btfss	status,2,c
  2156  001C6C  D004               	goto	l1375
  2157  001C6E  0E4B               	movlw	75
  2158  001C70  6E08               	movwf	setPortData@outputData_temp16+1,c
  2159  001C72  0E00               	movlw	0
  2160  001C74  6E07               	movwf	setPortData@outputData_temp16,c
  2161  001C76                     l1375:
  2162                           
  2163                           ;emulator.c: 202: enableSerial(outputData_temp16);
  2164  001C76  C007  F001         	movff	setPortData@outputData_temp16,enableSerial@baudRate
  2165  001C7A  C008  F002         	movff	setPortData@outputData_temp16+1,enableSerial@baudRate+1
  2166  001C7E  ECB2  F00E         	call	_enableSerial	;wreg free
  2167                           
  2168                           ;emulator.c: 203: break;
  2169  001C82  0012               	return	
  2170  001C84                     l247:
  2171                           
  2172                           ;emulator.c: 206: TXREG2 = outputData;
  2173  001C84  C005  FF73         	movff	setPortData@outputData,3955	;volatile
  2174                           
  2175                           ;emulator.c: 207: break;
  2176  001C88  0012               	return	
  2177  001C8A                     l1377:
  2178                           
  2179                           ;emulator.c: 210: outputData_temp8 = hexToChar(outputData);
  2180  001C8A  5005               	movf	setPortData@outputData,w,c
  2181  001C8C  ECB7  F00D         	call	_hexToChar
  2182  001C90  6E09               	movwf	setPortData@outputData_temp8,c
  2183                           
  2184                           ;emulator.c: 211: dispSeg(1, outputData_temp8);
  2185  001C92  C009  F001         	movff	setPortData@outputData_temp8,dispSeg@letter
  2186  001C96  0E01               	movlw	1
  2187  001C98  EC11  F00C         	call	_dispSeg
  2188                           
  2189                           ;emulator.c: 212: break;
  2190  001C9C  0012               	return	
  2191  001C9E                     l1379:
  2192                           
  2193                           ;emulator.c: 215: outputData_temp8 = hexToChar(outputData);
  2194  001C9E  5005               	movf	setPortData@outputData,w,c
  2195  001CA0  ECB7  F00D         	call	_hexToChar
  2196  001CA4  6E09               	movwf	setPortData@outputData_temp8,c
  2197                           
  2198                           ;emulator.c: 216: dispSeg(2, outputData_temp8);
  2199  001CA6  C009  F001         	movff	setPortData@outputData_temp8,dispSeg@letter
  2200  001CAA  0E02               	movlw	2
  2201  001CAC  EC11  F00C         	call	_dispSeg
  2202                           
  2203                           ;emulator.c: 217: break;
  2204  001CB0  0012               	return	
  2205  001CB2                     l1383:
  2206  001CB2  5006               	movf	setPortData@portNumber,w,c
  2207                           
  2208                           ; Switch size 1, requested type "space"
  2209                           ; Number of cases is 4, Range of values is 0 to 4
  2210                           ; switch strategies available:
  2211                           ; Name         Instructions Cycles
  2212                           ; simple_byte           13     7 (average)
  2213                           ;	Chosen strategy is simple_byte
  2214  001CB4  0A00               	xorlw	0	; case 0
  2215  001CB6  B4D8               	btfsc	status,2,c
  2216  001CB8  D7B9               	goto	l240
  2217  001CBA  0A01               	xorlw	1	; case 1
  2218  001CBC  B4D8               	btfsc	status,2,c
  2219  001CBE  D7E2               	goto	l247
  2220  001CC0  0A02               	xorlw	2	; case 3
  2221  001CC2  B4D8               	btfsc	status,2,c
  2222  001CC4  D7E2               	goto	l1377
  2223  001CC6  0A07               	xorlw	7	; case 4
  2224  001CC8  A4D8               	btfss	status,2,c
  2225  001CCA  0012               	return	
  2226  001CCC  D7E8               	goto	l1379
  2227  001CCE                     __end_of_setPortData:
  2228                           	opt stack 0
  2229                           tblptru	equ	0xFF8
  2230                           tblptrh	equ	0xFF7
  2231                           tblptrl	equ	0xFF6
  2232                           tablat	equ	0xFF5
  2233                           prodh	equ	0xFF4
  2234                           prodl	equ	0xFF3
  2235                           postinc0	equ	0xFEE
  2236                           wreg	equ	0xFE8
  2237                           postdec1	equ	0xFE5
  2238                           fsr1h	equ	0xFE2
  2239                           fsr1l	equ	0xFE1
  2240                           indf2	equ	0xFDF
  2241                           fsr2h	equ	0xFDA
  2242                           fsr2l	equ	0xFD9
  2243                           status	equ	0xFD8
  2244                           
  2245 ;; *************** function _hexToChar *****************
  2246 ;; Defined at:
  2247 ;;		line 63 in file "source/system.c"
  2248 ;; Parameters:    Size  Location     Type
  2249 ;;  number          1    wreg     unsigned char 
  2250 ;; Auto vars:     Size  Location     Type
  2251 ;;  number          1    0[COMRAM] unsigned char 
  2252 ;; Return value:  Size  Location     Type
  2253 ;;                  1    wreg      unsigned char 
  2254 ;; Registers used:
  2255 ;;		wreg, status,2, status,0
  2256 ;; Tracked objects:
  2257 ;;		On entry : 0/0
  2258 ;;		On exit  : 0/0
  2259 ;;		Unchanged: 0/0
  2260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2262 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2264 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2265 ;;Total ram usage:        1 bytes
  2266 ;; Hardware stack levels used:    1
  2267 ;; This function calls:
  2268 ;;		Nothing
  2269 ;; This function is called by:
  2270 ;;		_setPortData
  2271 ;; This function uses a non-reentrant model
  2272 ;;
  2273                           
  2274                           	psect	text4
  2275  001B6E                     __ptext4:
  2276                           	opt stack 0
  2277  001B6E                     _hexToChar:
  2278                           	opt stack 28
  2279                           
  2280                           ;incstack = 0
  2281                           ;hexToChar@number stored from wreg
  2282  001B6E  CFE8 F001          	movff	wreg,hexToChar@number
  2283                           
  2284                           ;system.c: 65: number = number << 4;
  2285  001B72  3801               	swapf	hexToChar@number,w,c
  2286  001B74  0BF0               	andlw	240
  2287  001B76  6E01               	movwf	hexToChar@number,c
  2288                           
  2289                           ;system.c: 66: number = number >> 4;
  2290  001B78  3801               	swapf	hexToChar@number,w,c
  2291  001B7A  0B0F               	andlw	15
  2292  001B7C  6E01               	movwf	hexToChar@number,c
  2293                           
  2294                           ;system.c: 67: switch (number)
  2295  001B7E  D020               	goto	l1231
  2296  001B80                     l1165:
  2297                           
  2298                           ;system.c: 70: return '0';
  2299  001B80  0E30               	movlw	48
  2300  001B82  0012               	return	
  2301  001B84                     l1169:
  2302                           
  2303                           ;system.c: 72: return '1';
  2304  001B84  0E31               	movlw	49
  2305  001B86  0012               	return	
  2306  001B88                     l1173:
  2307                           
  2308                           ;system.c: 74: return '2';
  2309  001B88  0E32               	movlw	50
  2310  001B8A  0012               	return	
  2311  001B8C                     l1177:
  2312                           
  2313                           ;system.c: 76: return '3';
  2314  001B8C  0E33               	movlw	51
  2315  001B8E  0012               	return	
  2316  001B90                     l1181:
  2317                           
  2318                           ;system.c: 78: return '4';
  2319  001B90  0E34               	movlw	52
  2320  001B92  0012               	return	
  2321  001B94                     l1185:
  2322                           
  2323                           ;system.c: 80: return '5';
  2324  001B94  0E35               	movlw	53
  2325  001B96  0012               	return	
  2326  001B98                     l1189:
  2327                           
  2328                           ;system.c: 82: return '6';
  2329  001B98  0E36               	movlw	54
  2330  001B9A  0012               	return	
  2331  001B9C                     l1193:
  2332                           
  2333                           ;system.c: 84: return '7';
  2334  001B9C  0E37               	movlw	55
  2335  001B9E  0012               	return	
  2336  001BA0                     l1197:
  2337                           
  2338                           ;system.c: 86: return '8';
  2339  001BA0  0E38               	movlw	56
  2340  001BA2  0012               	return	
  2341  001BA4                     l1201:
  2342                           
  2343                           ;system.c: 88: return '9';
  2344  001BA4  0E39               	movlw	57
  2345  001BA6  0012               	return	
  2346  001BA8                     l1205:
  2347                           
  2348                           ;system.c: 90: return 'A';
  2349  001BA8  0E41               	movlw	65
  2350  001BAA  0012               	return	
  2351  001BAC                     l1209:
  2352                           
  2353                           ;system.c: 92: return 'B';
  2354  001BAC  0E42               	movlw	66
  2355  001BAE  0012               	return	
  2356  001BB0                     l1213:
  2357                           
  2358                           ;system.c: 94: return 'C';
  2359  001BB0  0E43               	movlw	67
  2360  001BB2  0012               	return	
  2361  001BB4                     l1217:
  2362                           
  2363                           ;system.c: 96: return 'D';
  2364  001BB4  0E44               	movlw	68
  2365  001BB6  0012               	return	
  2366  001BB8                     l1221:
  2367                           
  2368                           ;system.c: 98: return 'E';
  2369  001BB8  0E45               	movlw	69
  2370  001BBA  0012               	return	
  2371  001BBC                     l1225:
  2372                           
  2373                           ;system.c: 100: return 'F';
  2374  001BBC  0E46               	movlw	70
  2375  001BBE  0012               	return	
  2376  001BC0                     l1231:
  2377  001BC0  5001               	movf	hexToChar@number,w,c
  2378                           
  2379                           ; Switch size 1, requested type "space"
  2380                           ; Number of cases is 16, Range of values is 0 to 15
  2381                           ; switch strategies available:
  2382                           ; Name         Instructions Cycles
  2383                           ; simple_byte           49    25 (average)
  2384                           ;	Chosen strategy is simple_byte
  2385  001BC2  0A00               	xorlw	0	; case 0
  2386  001BC4  B4D8               	btfsc	status,2,c
  2387  001BC6  D7DC               	goto	l1165
  2388  001BC8  0A01               	xorlw	1	; case 1
  2389  001BCA  B4D8               	btfsc	status,2,c
  2390  001BCC  D7DB               	goto	l1169
  2391  001BCE  0A03               	xorlw	3	; case 2
  2392  001BD0  B4D8               	btfsc	status,2,c
  2393  001BD2  D7DA               	goto	l1173
  2394  001BD4  0A01               	xorlw	1	; case 3
  2395  001BD6  B4D8               	btfsc	status,2,c
  2396  001BD8  D7D9               	goto	l1177
  2397  001BDA  0A07               	xorlw	7	; case 4
  2398  001BDC  B4D8               	btfsc	status,2,c
  2399  001BDE  D7D8               	goto	l1181
  2400  001BE0  0A01               	xorlw	1	; case 5
  2401  001BE2  B4D8               	btfsc	status,2,c
  2402  001BE4  D7D7               	goto	l1185
  2403  001BE6  0A03               	xorlw	3	; case 6
  2404  001BE8  B4D8               	btfsc	status,2,c
  2405  001BEA  D7D6               	goto	l1189
  2406  001BEC  0A01               	xorlw	1	; case 7
  2407  001BEE  B4D8               	btfsc	status,2,c
  2408  001BF0  D7D5               	goto	l1193
  2409  001BF2  0A0F               	xorlw	15	; case 8
  2410  001BF4  B4D8               	btfsc	status,2,c
  2411  001BF6  D7D4               	goto	l1197
  2412  001BF8  0A01               	xorlw	1	; case 9
  2413  001BFA  B4D8               	btfsc	status,2,c
  2414  001BFC  D7D3               	goto	l1201
  2415  001BFE  0A03               	xorlw	3	; case 10
  2416  001C00  B4D8               	btfsc	status,2,c
  2417  001C02  D7D2               	goto	l1205
  2418  001C04  0A01               	xorlw	1	; case 11
  2419  001C06  B4D8               	btfsc	status,2,c
  2420  001C08  D7D1               	goto	l1209
  2421  001C0A  0A07               	xorlw	7	; case 12
  2422  001C0C  B4D8               	btfsc	status,2,c
  2423  001C0E  D7D0               	goto	l1213
  2424  001C10  0A01               	xorlw	1	; case 13
  2425  001C12  B4D8               	btfsc	status,2,c
  2426  001C14  D7CF               	goto	l1217
  2427  001C16  0A03               	xorlw	3	; case 14
  2428  001C18  B4D8               	btfsc	status,2,c
  2429  001C1A  D7CE               	goto	l1221
  2430  001C1C  0A01               	xorlw	1	; case 15
  2431  001C1E  B4D8               	btfsc	status,2,c
  2432  001C20  D7CD               	goto	l1225
  2433                           
  2434                           ;system.c: 102: return 0;
  2435  001C22  0E00               	movlw	0
  2436  001C24  0012               	return	
  2437  001C26                     __end_of_hexToChar:
  2438                           	opt stack 0
  2439                           tblptru	equ	0xFF8
  2440                           tblptrh	equ	0xFF7
  2441                           tblptrl	equ	0xFF6
  2442                           tablat	equ	0xFF5
  2443                           prodh	equ	0xFF4
  2444                           prodl	equ	0xFF3
  2445                           postinc0	equ	0xFEE
  2446                           wreg	equ	0xFE8
  2447                           postdec1	equ	0xFE5
  2448                           fsr1h	equ	0xFE2
  2449                           fsr1l	equ	0xFE1
  2450                           indf2	equ	0xFDF
  2451                           fsr2h	equ	0xFDA
  2452                           fsr2l	equ	0xFD9
  2453                           status	equ	0xFD8
  2454                           
  2455 ;; *************** function _enableSerial *****************
  2456 ;; Defined at:
  2457 ;;		line 21 in file "source/serial.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;  baudRate        2    0[COMRAM] unsigned int 
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;		None
  2462 ;; Return value:  Size  Location     Type
  2463 ;;		None               void
  2464 ;; Registers used:
  2465 ;;		wreg, status,2, status,0
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2471 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2473 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2474 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2475 ;;Total ram usage:        4 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; This function calls:
  2478 ;;		Nothing
  2479 ;; This function is called by:
  2480 ;;		_setPortData
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483                           
  2484                           	psect	text5
  2485  001D64                     __ptext5:
  2486                           	opt stack 0
  2487  001D64                     _enableSerial:
  2488                           	opt stack 28
  2489                           
  2490                           ;serial.c: 23: LATDbits.LD3 = 1;
  2491                           
  2492                           ;incstack = 0
  2493  001D64  868C               	bsf	3980,3,c	;volatile
  2494                           
  2495                           ;serial.c: 26: switch (baudRate) {
  2496  001D66  D00B               	goto	l1297
  2497  001D68                     l1287:
  2498                           
  2499                           ;serial.c: 31: SPBRG2 = 103;
  2500  001D68  0E67               	movlw	103
  2501  001D6A  D007               	goto	L39
  2502  001D6C                     l1289:
  2503                           
  2504                           ;serial.c: 34: SPBRG2 = 25;
  2505  001D6C  0E19               	movlw	25
  2506  001D6E  D005               	goto	L39
  2507  001D70                     l1291:
  2508                           
  2509                           ;serial.c: 37: SPBRG2 = 23;
  2510  001D70  0E17               	movlw	23
  2511  001D72  D003               	goto	L39
  2512  001D74                     l1293:
  2513                           
  2514                           ;serial.c: 40: SPBRG2 = 12;
  2515  001D74  0E0C               	movlw	12
  2516  001D76  D001               	goto	L39
  2517  001D78                     l1295:
  2518                           
  2519                           ;serial.c: 43: SPBRG2 = 207;
  2520  001D78  0ECF               	movlw	207
  2521  001D7A                     L39:
  2522  001D7A  6E75               	movwf	3957,c	;volatile
  2523                           
  2524                           ;serial.c: 44: }
  2525  001D7C  D02C               	goto	l1299
  2526  001D7E                     l1297:
  2527  001D7E  C001  F003         	movff	enableSerial@baudRate,??_enableSerial
  2528  001D82  C002  F004         	movff	enableSerial@baudRate+1,??_enableSerial+1
  2529                           
  2530                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 5 sub-sw
      +                          itches
  2531                           ; Switch size 1, requested type "space"
  2532                           ; Number of cases is 5, Range of values is 4 to 75
  2533                           ; switch strategies available:
  2534                           ; Name         Instructions Cycles
  2535                           ; simple_byte           16     9 (average)
  2536                           ;	Chosen strategy is simple_byte
  2537  001D86  5004               	movf	??_enableSerial+1,w,c
  2538  001D88  0A04               	xorlw	4	; case 4
  2539  001D8A  B4D8               	btfsc	status,2,c
  2540  001D8C  D00D               	goto	l1825
  2541  001D8E  0A0D               	xorlw	13	; case 9
  2542  001D90  B4D8               	btfsc	status,2,c
  2543  001D92  D00D               	goto	l1827
  2544  001D94  0A2C               	xorlw	44	; case 37
  2545  001D96  B4D8               	btfsc	status,2,c
  2546  001D98  D00F               	goto	l1829
  2547  001D9A  0A0D               	xorlw	13	; case 40
  2548  001D9C  B4D8               	btfsc	status,2,c
  2549  001D9E  D011               	goto	l1831
  2550  001DA0  0A63               	xorlw	99	; case 75
  2551  001DA2  B4D8               	btfsc	status,2,c
  2552  001DA4  D013               	goto	l1833
  2553  001DA6  D7E8               	goto	l1295
  2554  001DA8                     l1825:
  2555                           
  2556                           ; Switch size 1, requested type "space"
  2557                           ; Number of cases is 1, Range of values is 176 to 176
  2558                           ; switch strategies available:
  2559                           ; Name         Instructions Cycles
  2560                           ; simple_byte            4     3 (average)
  2561                           ;	Chosen strategy is simple_byte
  2562  001DA8  5003               	movf	??_enableSerial,w,c
  2563  001DAA  0AB0               	xorlw	176	; case 176
  2564  001DAC  D7E5               	goto	l1295
  2565  001DAE                     l1827:
  2566                           
  2567                           ; Switch size 1, requested type "space"
  2568                           ; Number of cases is 1, Range of values is 96 to 96
  2569                           ; switch strategies available:
  2570                           ; Name         Instructions Cycles
  2571                           ; simple_byte            4     3 (average)
  2572                           ;	Chosen strategy is simple_byte
  2573  001DAE  5003               	movf	??_enableSerial,w,c
  2574  001DB0  0A60               	xorlw	96	; case 96
  2575  001DB2  B4D8               	btfsc	status,2,c
  2576  001DB4  D7D9               	goto	l1287
  2577  001DB6  D7E0               	goto	l1295
  2578  001DB8                     l1829:
  2579                           
  2580                           ; Switch size 1, requested type "space"
  2581                           ; Number of cases is 1, Range of values is 128 to 128
  2582                           ; switch strategies available:
  2583                           ; Name         Instructions Cycles
  2584                           ; simple_byte            4     3 (average)
  2585                           ;	Chosen strategy is simple_byte
  2586  001DB8  5003               	movf	??_enableSerial,w,c
  2587  001DBA  0A80               	xorlw	128	; case 128
  2588  001DBC  B4D8               	btfsc	status,2,c
  2589  001DBE  D7D6               	goto	l1289
  2590  001DC0  D7DB               	goto	l1295
  2591  001DC2                     l1831:
  2592                           
  2593                           ; Switch size 1, requested type "space"
  2594                           ; Number of cases is 1, Range of values is 177 to 177
  2595                           ; switch strategies available:
  2596                           ; Name         Instructions Cycles
  2597                           ; simple_byte            4     3 (average)
  2598                           ;	Chosen strategy is simple_byte
  2599  001DC2  5003               	movf	??_enableSerial,w,c
  2600  001DC4  0AB1               	xorlw	177	; case 177
  2601  001DC6  B4D8               	btfsc	status,2,c
  2602  001DC8  D7D3               	goto	l1291
  2603  001DCA  D7D6               	goto	l1295
  2604  001DCC                     l1833:
  2605                           
  2606                           ; Switch size 1, requested type "space"
  2607                           ; Number of cases is 1, Range of values is 0 to 0
  2608                           ; switch strategies available:
  2609                           ; Name         Instructions Cycles
  2610                           ; simple_byte            4     3 (average)
  2611                           ;	Chosen strategy is simple_byte
  2612  001DCC  5003               	movf	??_enableSerial,w,c
  2613  001DCE  0A00               	xorlw	0	; case 0
  2614  001DD0  B4D8               	btfsc	status,2,c
  2615  001DD2  D7D0               	goto	l1293
  2616  001DD4  D7D1               	goto	l1295
  2617  001DD6                     l1299:
  2618                           
  2619                           ;serial.c: 46: SPBRGH2 = 0;
  2620  001DD6  0E00               	movlw	0
  2621  001DD8  6E76               	movwf	3958,c	;volatile
  2622                           
  2623                           ;serial.c: 47: TXSTA2bits.BRGH = 0;
  2624  001DDA  9472               	bcf	3954,2,c	;volatile
  2625                           
  2626                           ;serial.c: 48: BAUDCON2bits.BRG16 = 0;
  2627  001DDC  9670               	bcf	3952,3,c	;volatile
  2628                           
  2629                           ;serial.c: 50: TXSTA2bits.TX9 = 0;
  2630  001DDE  9C72               	bcf	3954,6,c	;volatile
  2631                           
  2632                           ;serial.c: 51: RCSTA2bits.RX9 = 0;
  2633  001DE0  9C71               	bcf	3953,6,c	;volatile
  2634                           
  2635                           ;serial.c: 53: TXSTA2bits.SYNC = 0;
  2636  001DE2  9872               	bcf	3954,4,c	;volatile
  2637                           
  2638                           ;serial.c: 54: BAUDCON2bits.DTRXP = 0;
  2639  001DE4  9A70               	bcf	3952,5,c	;volatile
  2640                           
  2641                           ;serial.c: 56: TXSTA2bits.TXEN = 1;
  2642  001DE6  8A72               	bsf	3954,5,c	;volatile
  2643                           
  2644                           ;serial.c: 57: RCSTA2bits.CREN = 1;
  2645  001DE8  8871               	bsf	3953,4,c	;volatile
  2646                           
  2647                           ;serial.c: 59: RCSTA2bits.SPEN = 1;
  2648  001DEA  8E71               	bsf	3953,7,c	;volatile
  2649  001DEC  0012               	return	
  2650  001DEE                     __end_of_enableSerial:
  2651                           	opt stack 0
  2652                           tblptru	equ	0xFF8
  2653                           tblptrh	equ	0xFF7
  2654                           tblptrl	equ	0xFF6
  2655                           tablat	equ	0xFF5
  2656                           prodh	equ	0xFF4
  2657                           prodl	equ	0xFF3
  2658                           postinc0	equ	0xFEE
  2659                           wreg	equ	0xFE8
  2660                           postdec1	equ	0xFE5
  2661                           fsr1h	equ	0xFE2
  2662                           fsr1l	equ	0xFE1
  2663                           indf2	equ	0xFDF
  2664                           fsr2h	equ	0xFDA
  2665                           fsr2l	equ	0xFD9
  2666                           status	equ	0xFD8
  2667                           
  2668 ;; *************** function _dispSeg *****************
  2669 ;; Defined at:
  2670 ;;		line 13 in file "source/segment.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;  segment         1    wreg     unsigned char 
  2673 ;;  letter          1    0[COMRAM] unsigned char 
  2674 ;; Auto vars:     Size  Location     Type
  2675 ;;  segment         1    1[COMRAM] unsigned char 
  2676 ;; Return value:  Size  Location     Type
  2677 ;;		None               void
  2678 ;; Registers used:
  2679 ;;		wreg, status,2, status,0
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2685 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2686 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2688 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2689 ;;Total ram usage:        2 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; This function calls:
  2692 ;;		Nothing
  2693 ;; This function is called by:
  2694 ;;		_main
  2695 ;;		_setPortData
  2696 ;;		_cycleSegDisplays
  2697 ;; This function uses a non-reentrant model
  2698 ;;
  2699                           
  2700                           	psect	text6
  2701  001822                     __ptext6:
  2702                           	opt stack 0
  2703  001822                     _dispSeg:
  2704                           	opt stack 28
  2705                           
  2706                           ;incstack = 0
  2707                           ;dispSeg@segment stored from wreg
  2708  001822  CFE8 F002          	movff	wreg,dispSeg@segment
  2709                           
  2710                           ;segment.c: 15: switch (letter) {
  2711  001826  D156               	goto	l1075
  2712  001828                     l1001:
  2713                           
  2714                           ;segment.c: 17: case 'X':
  2715                           ;segment.c: 18: if (segment == 1) {
  2716  001828  0402               	decf	dispSeg@segment,w,c
  2717  00182A  A4D8               	btfss	status,2,c
  2718  00182C  D008               	goto	l54
  2719                           
  2720                           ;segment.c: 19: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = LATAbits.LA1 = 0;
  2721  00182E  9289               	bcf	3977,1,c	;volatile
  2722  001830  9089               	bcf	3977,0,c	;volatile
  2723  001832  908D               	bcf	3981,0,c	;volatile
  2724  001834  9A89               	bcf	3977,5,c	;volatile
  2725  001836  9889               	bcf	3977,4,c	;volatile
  2726  001838  9689               	bcf	3977,3,c	;volatile
  2727  00183A  9489               	bcf	3977,2,c	;volatile
  2728                           
  2729                           ;segment.c: 20: return;
  2730  00183C  0012               	return	
  2731  00183E                     l54:
  2732                           
  2733                           ;segment.c: 21: }
  2734                           ;segment.c: 22: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = LATEbits.LE2 = 0;
  2735  00183E  948D               	bcf	3981,2,c	;volatile
  2736  001840  928D               	bcf	3981,1,c	;volatile
  2737  001842  928B               	bcf	3979,1,c	;volatile
  2738  001844  908B               	bcf	3979,0,c	;volatile
  2739  001846  948B               	bcf	3979,2,c	;volatile
  2740  001848  9C89               	bcf	3977,6,c	;volatile
  2741  00184A  9E89               	bcf	3977,7,c	;volatile
  2742                           
  2743                           ;segment.c: 23: break;
  2744  00184C  0012               	return	
  2745  00184E                     l1005:
  2746                           
  2747                           ;segment.c: 25: if (segment == 1) {
  2748  00184E  0402               	decf	dispSeg@segment,w,c
  2749  001850  A4D8               	btfss	status,2,c
  2750  001852  D008               	goto	l58
  2751                           
  2752                           ;segment.c: 26: LATAbits.LA1 = 1;
  2753  001854  8289               	bsf	3977,1,c	;volatile
  2754                           
  2755                           ;segment.c: 27: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = 0;
  2756  001856  9089               	bcf	3977,0,c	;volatile
  2757  001858  908D               	bcf	3981,0,c	;volatile
  2758  00185A  9A89               	bcf	3977,5,c	;volatile
  2759  00185C  9889               	bcf	3977,4,c	;volatile
  2760  00185E  9689               	bcf	3977,3,c	;volatile
  2761  001860  9489               	bcf	3977,2,c	;volatile
  2762                           
  2763                           ;segment.c: 28: return;
  2764  001862  0012               	return	
  2765  001864                     l58:
  2766                           
  2767                           ;segment.c: 29: }
  2768                           ;segment.c: 30: LATEbits.LE2 = 1;
  2769  001864  848D               	bsf	3981,2,c	;volatile
  2770                           
  2771                           ;segment.c: 31: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = 0;
  2772  001866  928D               	bcf	3981,1,c	;volatile
  2773  001868  928B               	bcf	3979,1,c	;volatile
  2774  00186A  908B               	bcf	3979,0,c	;volatile
  2775  00186C  948B               	bcf	3979,2,c	;volatile
  2776  00186E  9C89               	bcf	3977,6,c	;volatile
  2777  001870  9E89               	bcf	3977,7,c	;volatile
  2778                           
  2779                           ;segment.c: 32: break;
  2780  001872  0012               	return	
  2781  001874                     l1009:
  2782                           
  2783                           ;segment.c: 34: if (segment == 1) {
  2784  001874  0402               	decf	dispSeg@segment,w,c
  2785  001876  A4D8               	btfss	status,2,c
  2786  001878  D008               	goto	l60
  2787                           
  2788                           ;segment.c: 35: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0
      +                           = LATAbits.LA0 = 1;
  2789  00187A  8089               	bsf	3977,0,c	;volatile
  2790  00187C  808D               	bsf	3981,0,c	;volatile
  2791  00187E  8A89               	bsf	3977,5,c	;volatile
  2792  001880  8889               	bsf	3977,4,c	;volatile
  2793  001882  8689               	bsf	3977,3,c	;volatile
  2794  001884  8489               	bsf	3977,2,c	;volatile
  2795                           
  2796                           ;segment.c: 36: LATAbits.LA1 = 0;
  2797  001886  9289               	bcf	3977,1,c	;volatile
  2798                           
  2799                           ;segment.c: 37: return;
  2800  001888  0012               	return	
  2801  00188A                     l60:
  2802                           
  2803                           ;segment.c: 38: }
  2804                           ;segment.c: 39: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1
      +                           = LATEbits.LE1 = 1;
  2805  00188A  828D               	bsf	3981,1,c	;volatile
  2806  00188C  828B               	bsf	3979,1,c	;volatile
  2807  00188E  808B               	bsf	3979,0,c	;volatile
  2808  001890  848B               	bsf	3979,2,c	;volatile
  2809  001892  8C89               	bsf	3977,6,c	;volatile
  2810  001894  8E89               	bsf	3977,7,c	;volatile
  2811                           
  2812                           ;segment.c: 40: LATEbits.LE2 = 0;
  2813  001896  948D               	bcf	3981,2,c	;volatile
  2814                           
  2815                           ;segment.c: 41: break;
  2816  001898  0012               	return	
  2817  00189A                     l1013:
  2818                           
  2819                           ;segment.c: 43: if (segment == 1) {
  2820  00189A  0402               	decf	dispSeg@segment,w,c
  2821  00189C  A4D8               	btfss	status,2,c
  2822  00189E  D008               	goto	l62
  2823                           
  2824                           ;segment.c: 44: LATAbits.LA3 = LATAbits.LA4 = 1;
  2825  0018A0  8889               	bsf	3977,4,c	;volatile
  2826  0018A2  8689               	bsf	3977,3,c	;volatile
  2827                           
  2828                           ;segment.c: 45: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1
      +                           = 0;
  2829  0018A4  9289               	bcf	3977,1,c	;volatile
  2830  0018A6  9089               	bcf	3977,0,c	;volatile
  2831  0018A8  908D               	bcf	3981,0,c	;volatile
  2832  0018AA  9A89               	bcf	3977,5,c	;volatile
  2833  0018AC  9489               	bcf	3977,2,c	;volatile
  2834                           
  2835                           ;segment.c: 46: return;
  2836  0018AE  0012               	return	
  2837  0018B0                     l62:
  2838                           
  2839                           ;segment.c: 47: }
  2840                           ;segment.c: 48: LATAbits.LA6 = LATCbits.LC2 = 1;
  2841  0018B0  848B               	bsf	3979,2,c	;volatile
  2842  0018B2  8C89               	bsf	3977,6,c	;volatile
  2843                           
  2844                           ;segment.c: 49: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2
      +                           = 0;
  2845  0018B4  948D               	bcf	3981,2,c	;volatile
  2846  0018B6  928D               	bcf	3981,1,c	;volatile
  2847  0018B8  928B               	bcf	3979,1,c	;volatile
  2848  0018BA  908B               	bcf	3979,0,c	;volatile
  2849  0018BC  9E89               	bcf	3977,7,c	;volatile
  2850                           
  2851                           ;segment.c: 50: break;
  2852  0018BE  0012               	return	
  2853  0018C0                     l1017:
  2854                           
  2855                           ;segment.c: 52: if (segment == 1) {
  2856  0018C0  0402               	decf	dispSeg@segment,w,c
  2857  0018C2  A4D8               	btfss	status,2,c
  2858  0018C4  D008               	goto	l64
  2859                           
  2860                           ;segment.c: 53: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA1 = LATEbits.LE0 = LATAbits.LA5
      +                           = 1;
  2861  0018C6  8A89               	bsf	3977,5,c	;volatile
  2862  0018C8  808D               	bsf	3981,0,c	;volatile
  2863  0018CA  8289               	bsf	3977,1,c	;volatile
  2864  0018CC  8689               	bsf	3977,3,c	;volatile
  2865  0018CE  8489               	bsf	3977,2,c	;volatile
  2866                           
  2867                           ;segment.c: 54: LATAbits.LA4 = LATAbits.LA0 = 0;
  2868  0018D0  9089               	bcf	3977,0,c	;volatile
  2869  0018D2  9889               	bcf	3977,4,c	;volatile
  2870                           
  2871                           ;segment.c: 55: return;
  2872  0018D4  0012               	return	
  2873  0018D6                     l64:
  2874                           
  2875                           ;segment.c: 56: }
  2876                           ;segment.c: 57: LATAbits.LA7 = LATAbits.LA6 = LATEbits.LE2 = LATCbits.LC1 = LATCbits.LC0
      +                           = 1;
  2877  0018D6  808B               	bsf	3979,0,c	;volatile
  2878  0018D8  828B               	bsf	3979,1,c	;volatile
  2879  0018DA  848D               	bsf	3981,2,c	;volatile
  2880  0018DC  8C89               	bsf	3977,6,c	;volatile
  2881  0018DE  8E89               	bsf	3977,7,c	;volatile
  2882                           
  2883                           ;segment.c: 58: LATCbits.LC2 = LATEbits.LE1 = 0;
  2884  0018E0  928D               	bcf	3981,1,c	;volatile
  2885  0018E2  948B               	bcf	3979,2,c	;volatile
  2886                           
  2887                           ;segment.c: 59: break;
  2888  0018E4  0012               	return	
  2889  0018E6                     l1021:
  2890                           
  2891                           ;segment.c: 61: if (segment == 1) {
  2892  0018E6  0402               	decf	dispSeg@segment,w,c
  2893  0018E8  A4D8               	btfss	status,2,c
  2894  0018EA  D008               	goto	l66
  2895                           
  2896                           ;segment.c: 62: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = 1;
  2897  0018EC  8A89               	bsf	3977,5,c	;volatile
  2898  0018EE  8889               	bsf	3977,4,c	;volatile
  2899  0018F0  8289               	bsf	3977,1,c	;volatile
  2900  0018F2  8689               	bsf	3977,3,c	;volatile
  2901  0018F4  8489               	bsf	3977,2,c	;volatile
  2902                           
  2903                           ;segment.c: 63: LATEbits.LE0 = LATAbits.LA0 = 0;
  2904  0018F6  9089               	bcf	3977,0,c	;volatile
  2905  0018F8  908D               	bcf	3981,0,c	;volatile
  2906                           
  2907                           ;segment.c: 64: return;
  2908  0018FA  0012               	return	
  2909  0018FC                     l66:
  2910                           
  2911                           ;segment.c: 65: }
  2912                           ;segment.c: 66: LATAbits.LA7 = LATAbits.LA6 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = 1;
  2913  0018FC  808B               	bsf	3979,0,c	;volatile
  2914  0018FE  848B               	bsf	3979,2,c	;volatile
  2915  001900  848D               	bsf	3981,2,c	;volatile
  2916  001902  8C89               	bsf	3977,6,c	;volatile
  2917  001904  8E89               	bsf	3977,7,c	;volatile
  2918                           
  2919                           ;segment.c: 67: LATCbits.LC1 = LATEbits.LE1 = 0;
  2920  001906  928D               	bcf	3981,1,c	;volatile
  2921  001908  928B               	bcf	3979,1,c	;volatile
  2922                           
  2923                           ;segment.c: 68: break;
  2924  00190A  0012               	return	
  2925  00190C                     l1025:
  2926                           
  2927                           ;segment.c: 70: if (segment == 1) {
  2928  00190C  0402               	decf	dispSeg@segment,w,c
  2929  00190E  A4D8               	btfss	status,2,c
  2930  001910  D008               	goto	l68
  2931                           
  2932                           ;segment.c: 71: LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA3 = LATAbits.LA4 = 1;
  2933  001912  8889               	bsf	3977,4,c	;volatile
  2934  001914  8689               	bsf	3977,3,c	;volatile
  2935  001916  8289               	bsf	3977,1,c	;volatile
  2936  001918  8089               	bsf	3977,0,c	;volatile
  2937                           
  2938                           ;segment.c: 72: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = 0;
  2939  00191A  908D               	bcf	3981,0,c	;volatile
  2940  00191C  9A89               	bcf	3977,5,c	;volatile
  2941  00191E  9489               	bcf	3977,2,c	;volatile
  2942                           
  2943                           ;segment.c: 73: return;
  2944  001920  0012               	return	
  2945  001922                     l68:
  2946                           
  2947                           ;segment.c: 74: }
  2948                           ;segment.c: 75: LATEbits.LE1 = LATEbits.LE2 = LATAbits.LA6 = LATCbits.LC2 = 1;
  2949  001922  848B               	bsf	3979,2,c	;volatile
  2950  001924  8C89               	bsf	3977,6,c	;volatile
  2951  001926  848D               	bsf	3981,2,c	;volatile
  2952  001928  828D               	bsf	3981,1,c	;volatile
  2953                           
  2954                           ;segment.c: 76: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = 0;
  2955  00192A  928B               	bcf	3979,1,c	;volatile
  2956  00192C  908B               	bcf	3979,0,c	;volatile
  2957  00192E  9E89               	bcf	3977,7,c	;volatile
  2958                           
  2959                           ;segment.c: 77: break;
  2960  001930  0012               	return	
  2961  001932                     l1029:
  2962                           
  2963                           ;segment.c: 79: if (segment == 1) {
  2964  001932  0402               	decf	dispSeg@segment,w,c
  2965  001934  A4D8               	btfss	status,2,c
  2966  001936  D008               	goto	l70
  2967                           
  2968                           ;segment.c: 80: LATAbits.LA2 = LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = 1;
  2969  001938  8A89               	bsf	3977,5,c	;volatile
  2970  00193A  8889               	bsf	3977,4,c	;volatile
  2971  00193C  8289               	bsf	3977,1,c	;volatile
  2972  00193E  8089               	bsf	3977,0,c	;volatile
  2973  001940  8489               	bsf	3977,2,c	;volatile
  2974                           
  2975                           ;segment.c: 81: LATAbits.LA3 = LATEbits.LE0 = 0;
  2976  001942  908D               	bcf	3981,0,c	;volatile
  2977  001944  9689               	bcf	3977,3,c	;volatile
  2978                           
  2979                           ;segment.c: 82: return;
  2980  001946  0012               	return	
  2981  001948                     l70:
  2982                           
  2983                           ;segment.c: 83: }
  2984                           ;segment.c: 84: LATAbits.LA7 = LATEbits.LE1 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = 1;
  2985  001948  808B               	bsf	3979,0,c	;volatile
  2986  00194A  848B               	bsf	3979,2,c	;volatile
  2987  00194C  848D               	bsf	3981,2,c	;volatile
  2988  00194E  828D               	bsf	3981,1,c	;volatile
  2989  001950  8E89               	bsf	3977,7,c	;volatile
  2990                           
  2991                           ;segment.c: 85: LATAbits.LA6 = LATCbits.LC1 = 0;
  2992  001952  928B               	bcf	3979,1,c	;volatile
  2993  001954  9C89               	bcf	3977,6,c	;volatile
  2994                           
  2995                           ;segment.c: 86: break;
  2996  001956  0012               	return	
  2997  001958                     l1033:
  2998                           
  2999                           ;segment.c: 88: if (segment == 1) {
  3000  001958  0402               	decf	dispSeg@segment,w,c
  3001  00195A  A4D8               	btfss	status,2,c
  3002  00195C  D008               	goto	l72
  3003                           
  3004                           ;segment.c: 89: LATAbits.LA2 = LATAbits.LA0 = LATAbits.LA1 = LATAbits.LA4 = LATAbits.LA5
      +                           = LATEbits.LE0 = 1;
  3005  00195E  808D               	bsf	3981,0,c	;volatile
  3006  001960  8A89               	bsf	3977,5,c	;volatile
  3007  001962  8889               	bsf	3977,4,c	;volatile
  3008  001964  8289               	bsf	3977,1,c	;volatile
  3009  001966  8089               	bsf	3977,0,c	;volatile
  3010  001968  8489               	bsf	3977,2,c	;volatile
  3011                           
  3012                           ;segment.c: 90: LATAbits.LA3 = 0;
  3013  00196A  9689               	bcf	3977,3,c	;volatile
  3014                           
  3015                           ;segment.c: 91: return;
  3016  00196C  0012               	return	
  3017  00196E                     l72:
  3018                           
  3019                           ;segment.c: 92: }
  3020                           ;segment.c: 93: LATAbits.LA7 = LATEbits.LE1 = LATEbits.LE2 = LATCbits.LC2 = LATCbits.LC0
      +                           = LATCbits.LC1 = 1;
  3021  00196E  828B               	bsf	3979,1,c	;volatile
  3022  001970  808B               	bsf	3979,0,c	;volatile
  3023  001972  848B               	bsf	3979,2,c	;volatile
  3024  001974  848D               	bsf	3981,2,c	;volatile
  3025  001976  828D               	bsf	3981,1,c	;volatile
  3026  001978  8E89               	bsf	3977,7,c	;volatile
  3027                           
  3028                           ;segment.c: 94: LATAbits.LA6 = 0;
  3029  00197A  9C89               	bcf	3977,6,c	;volatile
  3030                           
  3031                           ;segment.c: 95: break;
  3032  00197C  0012               	return	
  3033  00197E                     l1037:
  3034                           
  3035                           ;segment.c: 97: if (segment == 1) {
  3036  00197E  0402               	decf	dispSeg@segment,w,c
  3037  001980  A4D8               	btfss	status,2,c
  3038  001982  D008               	goto	l74
  3039                           
  3040                           ;segment.c: 98: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = 1;
  3041  001984  8889               	bsf	3977,4,c	;volatile
  3042  001986  8689               	bsf	3977,3,c	;volatile
  3043  001988  8489               	bsf	3977,2,c	;volatile
  3044                           
  3045                           ;segment.c: 99: LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1 = 0;
  3046  00198A  9289               	bcf	3977,1,c	;volatile
  3047  00198C  9089               	bcf	3977,0,c	;volatile
  3048  00198E  908D               	bcf	3981,0,c	;volatile
  3049  001990  9A89               	bcf	3977,5,c	;volatile
  3050                           
  3051                           ;segment.c: 100: return;
  3052  001992  0012               	return	
  3053  001994                     l74:
  3054                           
  3055                           ;segment.c: 101: }
  3056                           ;segment.c: 102: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = 1;
  3057  001994  848B               	bsf	3979,2,c	;volatile
  3058  001996  8C89               	bsf	3977,6,c	;volatile
  3059  001998  8E89               	bsf	3977,7,c	;volatile
  3060                           
  3061                           ;segment.c: 103: LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2 = 0;
  3062  00199A  948D               	bcf	3981,2,c	;volatile
  3063  00199C  928D               	bcf	3981,1,c	;volatile
  3064  00199E  928B               	bcf	3979,1,c	;volatile
  3065  0019A0  908B               	bcf	3979,0,c	;volatile
  3066                           
  3067                           ;segment.c: 104: break;
  3068  0019A2  0012               	return	
  3069  0019A4                     l1041:
  3070                           
  3071                           ;segment.c: 106: if (segment == 1) {
  3072  0019A4  0402               	decf	dispSeg@segment,w,c
  3073  0019A6  A4D8               	btfss	status,2,c
  3074  0019A8  D008               	goto	l76
  3075                           
  3076                           ;segment.c: 107: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE
      +                          0 = LATAbits.LA0 = LATAbits.LA1 = 1;
  3077  0019AA  8289               	bsf	3977,1,c	;volatile
  3078  0019AC  8089               	bsf	3977,0,c	;volatile
  3079  0019AE  808D               	bsf	3981,0,c	;volatile
  3080  0019B0  8A89               	bsf	3977,5,c	;volatile
  3081  0019B2  8889               	bsf	3977,4,c	;volatile
  3082  0019B4  8689               	bsf	3977,3,c	;volatile
  3083  0019B6  8489               	bsf	3977,2,c	;volatile
  3084                           
  3085                           ;segment.c: 108: return;
  3086  0019B8  0012               	return	
  3087  0019BA                     l76:
  3088                           
  3089                           ;segment.c: 109: }
  3090                           ;segment.c: 110: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC
      +                          1 = LATEbits.LE1 = LATEbits.LE2 = 1;
  3091  0019BA  848D               	bsf	3981,2,c	;volatile
  3092  0019BC  828D               	bsf	3981,1,c	;volatile
  3093  0019BE  828B               	bsf	3979,1,c	;volatile
  3094  0019C0  808B               	bsf	3979,0,c	;volatile
  3095  0019C2  848B               	bsf	3979,2,c	;volatile
  3096  0019C4  8C89               	bsf	3977,6,c	;volatile
  3097  0019C6  8E89               	bsf	3977,7,c	;volatile
  3098                           
  3099                           ;segment.c: 111: break;
  3100  0019C8  0012               	return	
  3101  0019CA                     l1045:
  3102                           
  3103                           ;segment.c: 113: if (segment == 1) {
  3104  0019CA  0402               	decf	dispSeg@segment,w,c
  3105  0019CC  A4D8               	btfss	status,2,c
  3106  0019CE  D008               	goto	l78
  3107                           
  3108                           ;segment.c: 114: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATAbits.LA
      +                          0 = LATAbits.LA1 = 1;
  3109  0019D0  8289               	bsf	3977,1,c	;volatile
  3110  0019D2  8089               	bsf	3977,0,c	;volatile
  3111  0019D4  8A89               	bsf	3977,5,c	;volatile
  3112  0019D6  8889               	bsf	3977,4,c	;volatile
  3113  0019D8  8689               	bsf	3977,3,c	;volatile
  3114  0019DA  8489               	bsf	3977,2,c	;volatile
  3115                           
  3116                           ;segment.c: 115: LATEbits.LE0 = 0;
  3117  0019DC  908D               	bcf	3981,0,c	;volatile
  3118                           
  3119                           ;segment.c: 116: return;
  3120  0019DE  0012               	return	
  3121  0019E0                     l78:
  3122                           
  3123                           ;segment.c: 117: }
  3124                           ;segment.c: 118: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATEbits.LE
      +                          1 = LATEbits.LE2 = 1;
  3125  0019E0  848D               	bsf	3981,2,c	;volatile
  3126  0019E2  828D               	bsf	3981,1,c	;volatile
  3127  0019E4  808B               	bsf	3979,0,c	;volatile
  3128  0019E6  848B               	bsf	3979,2,c	;volatile
  3129  0019E8  8C89               	bsf	3977,6,c	;volatile
  3130  0019EA  8E89               	bsf	3977,7,c	;volatile
  3131                           
  3132                           ;segment.c: 119: LATCbits.LC1 = 0;
  3133  0019EC  928B               	bcf	3979,1,c	;volatile
  3134                           
  3135                           ;segment.c: 120: break;
  3136  0019EE  0012               	return	
  3137  0019F0                     l1049:
  3138                           
  3139                           ;segment.c: 122: case 'A':
  3140                           ;segment.c: 123: if (segment == 1) {
  3141  0019F0  0402               	decf	dispSeg@segment,w,c
  3142  0019F2  A4D8               	btfss	status,2,c
  3143  0019F4  D008               	goto	l81
  3144                           
  3145                           ;segment.c: 124: LATAbits.LA2 = LATAbits.LA3 = LATAbits.LA4 = LATEbits.LE0 = LATAbits.LA
      +                          0 = LATAbits.LA1 = 1;
  3146  0019F6  8289               	bsf	3977,1,c	;volatile
  3147  0019F8  8089               	bsf	3977,0,c	;volatile
  3148  0019FA  808D               	bsf	3981,0,c	;volatile
  3149  0019FC  8889               	bsf	3977,4,c	;volatile
  3150  0019FE  8689               	bsf	3977,3,c	;volatile
  3151  001A00  8489               	bsf	3977,2,c	;volatile
  3152                           
  3153                           ;segment.c: 125: LATAbits.LA5 = 0;
  3154  001A02  9A89               	bcf	3977,5,c	;volatile
  3155                           
  3156                           ;segment.c: 126: return;
  3157  001A04  0012               	return	
  3158  001A06                     l81:
  3159                           
  3160                           ;segment.c: 127: }
  3161                           ;segment.c: 128: LATAbits.LA7 = LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC1 = LATEbits.LE
      +                          1 = LATEbits.LE2 = 1;
  3162  001A06  848D               	bsf	3981,2,c	;volatile
  3163  001A08  828D               	bsf	3981,1,c	;volatile
  3164  001A0A  828B               	bsf	3979,1,c	;volatile
  3165  001A0C  848B               	bsf	3979,2,c	;volatile
  3166  001A0E  8C89               	bsf	3977,6,c	;volatile
  3167  001A10  8E89               	bsf	3977,7,c	;volatile
  3168                           
  3169                           ;segment.c: 129: LATCbits.LC0 = 0;
  3170  001A12  908B               	bcf	3979,0,c	;volatile
  3171                           
  3172                           ;segment.c: 130: break;
  3173  001A14  0012               	return	
  3174  001A16                     l1053:
  3175                           
  3176                           ;segment.c: 132: case 'B':
  3177                           ;segment.c: 133: if (segment == 1) {
  3178  001A16  0402               	decf	dispSeg@segment,w,c
  3179  001A18  A4D8               	btfss	status,2,c
  3180  001A1A  D008               	goto	l84
  3181                           
  3182                           ;segment.c: 134: LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA
      +                          1 = 1;
  3183  001A1C  8289               	bsf	3977,1,c	;volatile
  3184  001A1E  8089               	bsf	3977,0,c	;volatile
  3185  001A20  808D               	bsf	3981,0,c	;volatile
  3186  001A22  8A89               	bsf	3977,5,c	;volatile
  3187  001A24  8889               	bsf	3977,4,c	;volatile
  3188                           
  3189                           ;segment.c: 135: LATAbits.LA2 = LATAbits.LA3 = 0;
  3190  001A26  9689               	bcf	3977,3,c	;volatile
  3191  001A28  9489               	bcf	3977,2,c	;volatile
  3192                           
  3193                           ;segment.c: 136: return;
  3194  001A2A  0012               	return	
  3195  001A2C                     l84:
  3196                           
  3197                           ;segment.c: 137: }
  3198                           ;segment.c: 138: LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE
      +                          2 = 1;
  3199  001A2C  848D               	bsf	3981,2,c	;volatile
  3200  001A2E  828D               	bsf	3981,1,c	;volatile
  3201  001A30  828B               	bsf	3979,1,c	;volatile
  3202  001A32  808B               	bsf	3979,0,c	;volatile
  3203  001A34  848B               	bsf	3979,2,c	;volatile
  3204                           
  3205                           ;segment.c: 139: LATAbits.LA7 = LATAbits.LA6 = 0;
  3206  001A36  9C89               	bcf	3977,6,c	;volatile
  3207  001A38  9E89               	bcf	3977,7,c	;volatile
  3208                           
  3209                           ;segment.c: 140: break;
  3210  001A3A  0012               	return	
  3211  001A3C                     l1057:
  3212                           
  3213                           ;segment.c: 142: case 'C':
  3214                           ;segment.c: 143: if (segment == 1) {
  3215  001A3C  0402               	decf	dispSeg@segment,w,c
  3216  001A3E  A4D8               	btfss	status,2,c
  3217  001A40  D008               	goto	l87
  3218                           
  3219                           ;segment.c: 144: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = 1;
  3220  001A42  8089               	bsf	3977,0,c	;volatile
  3221  001A44  808D               	bsf	3981,0,c	;volatile
  3222  001A46  8A89               	bsf	3977,5,c	;volatile
  3223  001A48  8489               	bsf	3977,2,c	;volatile
  3224                           
  3225                           ;segment.c: 145: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA1 = 0;
  3226  001A4A  9289               	bcf	3977,1,c	;volatile
  3227  001A4C  9889               	bcf	3977,4,c	;volatile
  3228  001A4E  9689               	bcf	3977,3,c	;volatile
  3229                           
  3230                           ;segment.c: 146: return;
  3231  001A50  0012               	return	
  3232  001A52                     l87:
  3233                           
  3234                           ;segment.c: 147: }
  3235                           ;segment.c: 148: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = 1;
  3236  001A52  828D               	bsf	3981,1,c	;volatile
  3237  001A54  828B               	bsf	3979,1,c	;volatile
  3238  001A56  808B               	bsf	3979,0,c	;volatile
  3239  001A58  8E89               	bsf	3977,7,c	;volatile
  3240                           
  3241                           ;segment.c: 149: LATAbits.LA6 = LATCbits.LC2 = LATEbits.LE2 = 0;
  3242  001A5A  948D               	bcf	3981,2,c	;volatile
  3243  001A5C  948B               	bcf	3979,2,c	;volatile
  3244  001A5E  9C89               	bcf	3977,6,c	;volatile
  3245                           
  3246                           ;segment.c: 150: break;
  3247  001A60  0012               	return	
  3248  001A62                     l1061:
  3249                           
  3250                           ;segment.c: 152: case 'D':
  3251                           ;segment.c: 153: if (segment == 1) {
  3252  001A62  0402               	decf	dispSeg@segment,w,c
  3253  001A64  A4D8               	btfss	status,2,c
  3254  001A66  D008               	goto	l90
  3255                           
  3256                           ;segment.c: 154: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA
      +                          1 = 1;
  3257  001A68  8289               	bsf	3977,1,c	;volatile
  3258  001A6A  808D               	bsf	3981,0,c	;volatile
  3259  001A6C  8A89               	bsf	3977,5,c	;volatile
  3260  001A6E  8889               	bsf	3977,4,c	;volatile
  3261  001A70  8689               	bsf	3977,3,c	;volatile
  3262                           
  3263                           ;segment.c: 155: LATAbits.LA2 = LATAbits.LA0 = 0;
  3264  001A72  9089               	bcf	3977,0,c	;volatile
  3265  001A74  9489               	bcf	3977,2,c	;volatile
  3266                           
  3267                           ;segment.c: 156: return;
  3268  001A76  0012               	return	
  3269  001A78                     l90:
  3270                           
  3271                           ;segment.c: 157: }
  3272                           ;segment.c: 158: LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE
      +                          2 = 1;
  3273  001A78  848D               	bsf	3981,2,c	;volatile
  3274  001A7A  828B               	bsf	3979,1,c	;volatile
  3275  001A7C  808B               	bsf	3979,0,c	;volatile
  3276  001A7E  848B               	bsf	3979,2,c	;volatile
  3277  001A80  8C89               	bsf	3977,6,c	;volatile
  3278                           
  3279                           ;segment.c: 159: LATAbits.LA7 = LATEbits.LE1 = 0;
  3280  001A82  928D               	bcf	3981,1,c	;volatile
  3281  001A84  9E89               	bcf	3977,7,c	;volatile
  3282                           
  3283                           ;segment.c: 160: break;
  3284  001A86  0012               	return	
  3285  001A88                     l1065:
  3286                           
  3287                           ;segment.c: 162: case 'E':
  3288                           ;segment.c: 163: if (segment == 1) {
  3289  001A88  0402               	decf	dispSeg@segment,w,c
  3290  001A8A  A4D8               	btfss	status,2,c
  3291  001A8C  D008               	goto	l93
  3292                           
  3293                           ;segment.c: 164: LATAbits.LA2 = LATAbits.LA5 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA
      +                          1 = 1;
  3294  001A8E  8289               	bsf	3977,1,c	;volatile
  3295  001A90  8089               	bsf	3977,0,c	;volatile
  3296  001A92  808D               	bsf	3981,0,c	;volatile
  3297  001A94  8A89               	bsf	3977,5,c	;volatile
  3298  001A96  8489               	bsf	3977,2,c	;volatile
  3299                           
  3300                           ;segment.c: 165: LATAbits.LA3 = LATAbits.LA4 = 0;
  3301  001A98  9889               	bcf	3977,4,c	;volatile
  3302  001A9A  9689               	bcf	3977,3,c	;volatile
  3303                           
  3304                           ;segment.c: 166: return;
  3305  001A9C  0012               	return	
  3306  001A9E                     l93:
  3307                           
  3308                           ;segment.c: 167: }
  3309                           ;segment.c: 168: LATAbits.LA7 = LATCbits.LC0 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE
      +                          2 = 1;
  3310  001A9E  848D               	bsf	3981,2,c	;volatile
  3311  001AA0  828D               	bsf	3981,1,c	;volatile
  3312  001AA2  828B               	bsf	3979,1,c	;volatile
  3313  001AA4  808B               	bsf	3979,0,c	;volatile
  3314  001AA6  8E89               	bsf	3977,7,c	;volatile
  3315                           
  3316                           ;segment.c: 169: LATAbits.LA6 = LATCbits.LC2 = 0;
  3317  001AA8  948B               	bcf	3979,2,c	;volatile
  3318  001AAA  9C89               	bcf	3977,6,c	;volatile
  3319                           
  3320                           ;segment.c: 170: break;
  3321  001AAC  0012               	return	
  3322  001AAE                     l1069:
  3323                           
  3324                           ;segment.c: 172: case 'F':
  3325                           ;segment.c: 173: if (segment == 1) {
  3326  001AAE  0402               	decf	dispSeg@segment,w,c
  3327  001AB0  A4D8               	btfss	status,2,c
  3328  001AB2  D008               	goto	l96
  3329                           
  3330                           ;segment.c: 174: LATAbits.LA2 = LATEbits.LE0 = LATAbits.LA0 = LATAbits.LA1 = 1;
  3331  001AB4  8289               	bsf	3977,1,c	;volatile
  3332  001AB6  8089               	bsf	3977,0,c	;volatile
  3333  001AB8  808D               	bsf	3981,0,c	;volatile
  3334  001ABA  8489               	bsf	3977,2,c	;volatile
  3335                           
  3336                           ;segment.c: 175: LATAbits.LA3 = LATAbits.LA4 = LATAbits.LA5 = 0;
  3337  001ABC  9A89               	bcf	3977,5,c	;volatile
  3338  001ABE  9889               	bcf	3977,4,c	;volatile
  3339  001AC0  9689               	bcf	3977,3,c	;volatile
  3340                           
  3341                           ;segment.c: 176: return;
  3342  001AC2  0012               	return	
  3343  001AC4                     l96:
  3344                           
  3345                           ;segment.c: 177: }
  3346                           ;segment.c: 178: LATAbits.LA7 = LATCbits.LC1 = LATEbits.LE1 = LATEbits.LE2 = 1;
  3347  001AC4  848D               	bsf	3981,2,c	;volatile
  3348  001AC6  828D               	bsf	3981,1,c	;volatile
  3349  001AC8  828B               	bsf	3979,1,c	;volatile
  3350  001ACA  8E89               	bsf	3977,7,c	;volatile
  3351                           
  3352                           ;segment.c: 179: LATAbits.LA6 = LATCbits.LC2 = LATCbits.LC0 = 0;
  3353  001ACC  908B               	bcf	3979,0,c	;volatile
  3354  001ACE  948B               	bcf	3979,2,c	;volatile
  3355  001AD0  9C89               	bcf	3977,6,c	;volatile
  3356                           
  3357                           ;segment.c: 180: break;
  3358  001AD2  0012               	return	
  3359  001AD4                     l1075:
  3360  001AD4  5001               	movf	dispSeg@letter,w,c
  3361                           
  3362                           ; Switch size 1, requested type "space"
  3363                           ; Number of cases is 25, Range of values is 45 to 120
  3364                           ; switch strategies available:
  3365                           ; Name         Instructions Cycles
  3366                           ; simple_byte           76    39 (average)
  3367                           ;	Chosen strategy is simple_byte
  3368  001AD6  0A2D               	xorlw	45	; case 45
  3369  001AD8  B4D8               	btfsc	status,2,c
  3370  001ADA  D6B9               	goto	l1005
  3371  001ADC  0A1D               	xorlw	29	; case 48
  3372  001ADE  B4D8               	btfsc	status,2,c
  3373  001AE0  D6C9               	goto	l1009
  3374  001AE2  0A01               	xorlw	1	; case 49
  3375  001AE4  B4D8               	btfsc	status,2,c
  3376  001AE6  D6D9               	goto	l1013
  3377  001AE8  0A03               	xorlw	3	; case 50
  3378  001AEA  B4D8               	btfsc	status,2,c
  3379  001AEC  D6E9               	goto	l1017
  3380  001AEE  0A01               	xorlw	1	; case 51
  3381  001AF0  B4D8               	btfsc	status,2,c
  3382  001AF2  D6F9               	goto	l1021
  3383  001AF4  0A07               	xorlw	7	; case 52
  3384  001AF6  B4D8               	btfsc	status,2,c
  3385  001AF8  D709               	goto	l1025
  3386  001AFA  0A01               	xorlw	1	; case 53
  3387  001AFC  B4D8               	btfsc	status,2,c
  3388  001AFE  D719               	goto	l1029
  3389  001B00  0A03               	xorlw	3	; case 54
  3390  001B02  B4D8               	btfsc	status,2,c
  3391  001B04  D729               	goto	l1033
  3392  001B06  0A01               	xorlw	1	; case 55
  3393  001B08  B4D8               	btfsc	status,2,c
  3394  001B0A  D739               	goto	l1037
  3395  001B0C  0A0F               	xorlw	15	; case 56
  3396  001B0E  B4D8               	btfsc	status,2,c
  3397  001B10  D749               	goto	l1041
  3398  001B12  0A01               	xorlw	1	; case 57
  3399  001B14  B4D8               	btfsc	status,2,c
  3400  001B16  D759               	goto	l1045
  3401  001B18  0A78               	xorlw	120	; case 65
  3402  001B1A  B4D8               	btfsc	status,2,c
  3403  001B1C  D769               	goto	l1049
  3404  001B1E  0A03               	xorlw	3	; case 66
  3405  001B20  B4D8               	btfsc	status,2,c
  3406  001B22  D779               	goto	l1053
  3407  001B24  0A01               	xorlw	1	; case 67
  3408  001B26  B4D8               	btfsc	status,2,c
  3409  001B28  D789               	goto	l1057
  3410  001B2A  0A07               	xorlw	7	; case 68
  3411  001B2C  B4D8               	btfsc	status,2,c
  3412  001B2E  D799               	goto	l1061
  3413  001B30  0A01               	xorlw	1	; case 69
  3414  001B32  B4D8               	btfsc	status,2,c
  3415  001B34  D7A9               	goto	l1065
  3416  001B36  0A03               	xorlw	3	; case 70
  3417  001B38  B4D8               	btfsc	status,2,c
  3418  001B3A  D7B9               	goto	l1069
  3419  001B3C  0A1E               	xorlw	30	; case 88
  3420  001B3E  B4D8               	btfsc	status,2,c
  3421  001B40  D673               	goto	l1001
  3422  001B42  0A39               	xorlw	57	; case 97
  3423  001B44  B4D8               	btfsc	status,2,c
  3424  001B46  D754               	goto	l1049
  3425  001B48  0A03               	xorlw	3	; case 98
  3426  001B4A  B4D8               	btfsc	status,2,c
  3427  001B4C  D764               	goto	l1053
  3428  001B4E  0A01               	xorlw	1	; case 99
  3429  001B50  B4D8               	btfsc	status,2,c
  3430  001B52  D774               	goto	l1057
  3431  001B54  0A07               	xorlw	7	; case 100
  3432  001B56  B4D8               	btfsc	status,2,c
  3433  001B58  D784               	goto	l1061
  3434  001B5A  0A01               	xorlw	1	; case 101
  3435  001B5C  B4D8               	btfsc	status,2,c
  3436  001B5E  D794               	goto	l1065
  3437  001B60  0A03               	xorlw	3	; case 102
  3438  001B62  B4D8               	btfsc	status,2,c
  3439  001B64  D7A4               	goto	l1069
  3440  001B66  0A1E               	xorlw	30	; case 120
  3441  001B68  A4D8               	btfss	status,2,c
  3442  001B6A  0012               	return	
  3443  001B6C  D65D               	goto	l1001
  3444  001B6E                     __end_of_dispSeg:
  3445                           	opt stack 0
  3446                           tblptru	equ	0xFF8
  3447                           tblptrh	equ	0xFF7
  3448                           tblptrl	equ	0xFF6
  3449                           tablat	equ	0xFF5
  3450                           prodh	equ	0xFF4
  3451                           prodl	equ	0xFF3
  3452                           postinc0	equ	0xFEE
  3453                           wreg	equ	0xFE8
  3454                           postdec1	equ	0xFE5
  3455                           fsr1h	equ	0xFE2
  3456                           fsr1l	equ	0xFE1
  3457                           indf2	equ	0xFDF
  3458                           fsr2h	equ	0xFDA
  3459                           fsr2l	equ	0xFD9
  3460                           status	equ	0xFD8
  3461                           
  3462 ;; *************** function _setMXbits *****************
  3463 ;; Defined at:
  3464 ;;		line 37 in file "source/emulator.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;  subRegister     1    wreg     unsigned char 
  3467 ;;  value           1    0[COMRAM] unsigned char 
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;  subRegister     1    5[COMRAM] unsigned char 
  3470 ;;  regMX_temp      2    3[COMRAM] unsigned int 
  3471 ;;  value_temp      2    1[COMRAM] unsigned int 
  3472 ;; Return value:  Size  Location     Type
  3473 ;;		None               void
  3474 ;; Registers used:
  3475 ;;		wreg, status,2, status,0
  3476 ;; Tracked objects:
  3477 ;;		On entry : 0/0
  3478 ;;		On exit  : 0/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3481 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3484 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3485 ;;Total ram usage:        6 bytes
  3486 ;; Hardware stack levels used:    1
  3487 ;; This function calls:
  3488 ;;		Nothing
  3489 ;; This function is called by:
  3490 ;;		_processOpcode
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           	psect	text7
  3495  001F3E                     __ptext7:
  3496                           	opt stack 0
  3497  001F3E                     _setMXbits:
  3498                           	opt stack 29
  3499                           
  3500                           ;incstack = 0
  3501                           ;setMXbits@subRegister stored from wreg
  3502  001F3E  CFE8 F006          	movff	wreg,setMXbits@subRegister
  3503                           
  3504                           ;emulator.c: 39: uint16_t value_temp = (uint16_t) value;
  3505  001F42  C001  F002         	movff	setMXbits@value,setMXbits@value_temp
  3506  001F46  6A03               	clrf	setMXbits@value_temp+1,c
  3507                           
  3508                           ;emulator.c: 40: uint16_t regMX_temp = regMX;
  3509  001F48  C016  F004         	movff	_regMX,setMXbits@regMX_temp
  3510  001F4C  C017  F005         	movff	_regMX+1,setMXbits@regMX_temp+1
  3511                           
  3512                           ;emulator.c: 54: }
  3513                           
  3514                           ;emulator.c: 53: break;
  3515                           
  3516                           ;emulator.c: 50: case 1:
  3517                           
  3518                           ;emulator.c: 48: break;
  3519                           
  3520                           ;emulator.c: 43: {
  3521                           ;emulator.c: 44: case 0:
  3522                           
  3523                           ;emulator.c: 42: switch(subRegister)
  3524  001F50  5006               	movf	setMXbits@subRegister,w,c
  3525                           
  3526                           ; Switch size 1, requested type "space"
  3527                           ; Number of cases is 2, Range of values is 0 to 1
  3528                           ; switch strategies available:
  3529                           ; Name         Instructions Cycles
  3530                           ; simple_byte            7     4 (average)
  3531                           ;	Chosen strategy is simple_byte
  3532  001F52  0A00               	xorlw	0	; case 0
  3533  001F54  A4D8               	btfss	status,2,c
  3534  001F56  0A01               	xorlw	1	; case 1
  3535                           
  3536                           ;emulator.c: 56: regMX = regMX_temp + value_temp;
  3537  001F58  5002               	movf	setMXbits@value_temp,w,c
  3538  001F5A  2404               	addwf	setMXbits@regMX_temp,w,c
  3539  001F5C  6E16               	movwf	_regMX,c
  3540  001F5E  5003               	movf	setMXbits@value_temp+1,w,c
  3541  001F60  2005               	addwfc	setMXbits@regMX_temp+1,w,c
  3542  001F62  6E17               	movwf	_regMX+1,c
  3543  001F64  0012               	return	
  3544  001F66                     __end_of_setMXbits:
  3545                           	opt stack 0
  3546                           tblptru	equ	0xFF8
  3547                           tblptrh	equ	0xFF7
  3548                           tblptrl	equ	0xFF6
  3549                           tablat	equ	0xFF5
  3550                           prodh	equ	0xFF4
  3551                           prodl	equ	0xFF3
  3552                           postinc0	equ	0xFEE
  3553                           wreg	equ	0xFE8
  3554                           postdec1	equ	0xFE5
  3555                           fsr1h	equ	0xFE2
  3556                           fsr1l	equ	0xFE1
  3557                           indf2	equ	0xFDF
  3558                           fsr2h	equ	0xFDA
  3559                           fsr2l	equ	0xFD9
  3560                           status	equ	0xFD8
  3561                           
  3562 ;; *************** function _setFbits *****************
  3563 ;; Defined at:
  3564 ;;		line 105 in file "source/emulator.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;  subRegister     1    wreg     unsigned char 
  3567 ;;  value           1    0[COMRAM] unsigned char 
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;  subRegister     1    2[COMRAM] unsigned char 
  3570 ;;  regF_temp2      1    4[COMRAM] unsigned char 
  3571 ;;  regF_temp1      1    3[COMRAM] unsigned char 
  3572 ;; Return value:  Size  Location     Type
  3573 ;;		None               void
  3574 ;; Registers used:
  3575 ;;		wreg, status,2, status,0
  3576 ;; Tracked objects:
  3577 ;;		On entry : 0/0
  3578 ;;		On exit  : 0/0
  3579 ;;		Unchanged: 0/0
  3580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3581 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3582 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3583 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3584 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3585 ;;Total ram usage:        5 bytes
  3586 ;; Hardware stack levels used:    1
  3587 ;; This function calls:
  3588 ;;		Nothing
  3589 ;; This function is called by:
  3590 ;;		_processOpcode
  3591 ;; This function uses a non-reentrant model
  3592 ;;
  3593                           
  3594                           	psect	text8
  3595  001EA0                     __ptext8:
  3596                           	opt stack 0
  3597  001EA0                     _setFbits:
  3598                           	opt stack 29
  3599                           
  3600                           ;incstack = 0
  3601                           ;setFbits@subRegister stored from wreg
  3602  001EA0  CFE8 F003          	movff	wreg,setFbits@subRegister
  3603                           
  3604                           ;emulator.c: 107: uint8_t regF_temp1 = regF;
  3605  001EA4  C01F  F004         	movff	_regF,setFbits@regF_temp1
  3606                           
  3607                           ;emulator.c: 108: uint8_t regF_temp2 = regF;
  3608  001EA8  C01F  F005         	movff	_regF,setFbits@regF_temp2
  3609                           
  3610                           ;emulator.c: 110: switch(subRegister)
  3611  001EAC  D005               	goto	l1261
  3612  001EAE                     l1257:
  3613                           
  3614                           ;emulator.c: 115: regF_temp2 = 0;
  3615  001EAE  6E02               	movwf	??_setFbits& (0+255),c
  3616  001EB0  0E00               	movlw	0
  3617  001EB2  6E05               	movwf	setFbits@regF_temp2,c
  3618  001EB4  5002               	movf	??_setFbits& (0+255),w,c
  3619                           
  3620                           ;emulator.c: 116: break;
  3621  001EB6  D00D               	goto	l1263
  3622  001EB8                     l1261:
  3623  001EB8  5003               	movf	setFbits@subRegister,w,c
  3624                           
  3625                           ; Switch size 1, requested type "space"
  3626                           ; Number of cases is 5, Range of values is 0 to 4
  3627                           ; switch strategies available:
  3628                           ; Name         Instructions Cycles
  3629                           ; simple_byte           16     9 (average)
  3630                           ;	Chosen strategy is simple_byte
  3631  001EBA  0A00               	xorlw	0	; case 0
  3632  001EBC  B4D8               	btfsc	status,2,c
  3633  001EBE  D7F7               	goto	l1257
  3634  001EC0  0A01               	xorlw	1	; case 1
  3635  001EC2  B4D8               	btfsc	status,2,c
  3636  001EC4  D006               	goto	l1263
  3637  001EC6  0A03               	xorlw	3	; case 2
  3638  001EC8  B4D8               	btfsc	status,2,c
  3639  001ECA  D003               	goto	l1263
  3640  001ECC  0A01               	xorlw	1	; case 3
  3641  001ECE  A4D8               	btfss	status,2,c
  3642  001ED0  0A07               	xorlw	7	; case 4
  3643  001ED2                     l1263:
  3644                           
  3645                           ;emulator.c: 147: regF = regF_temp1 + regF_temp2 + value;
  3646  001ED2  5004               	movf	setFbits@regF_temp1,w,c
  3647  001ED4  2405               	addwf	setFbits@regF_temp2,w,c
  3648  001ED6  2401               	addwf	setFbits@value,w,c
  3649  001ED8  6E1F               	movwf	_regF,c
  3650  001EDA  0012               	return	
  3651  001EDC                     __end_of_setFbits:
  3652                           	opt stack 0
  3653                           tblptru	equ	0xFF8
  3654                           tblptrh	equ	0xFF7
  3655                           tblptrl	equ	0xFF6
  3656                           tablat	equ	0xFF5
  3657                           prodh	equ	0xFF4
  3658                           prodl	equ	0xFF3
  3659                           postinc0	equ	0xFEE
  3660                           wreg	equ	0xFE8
  3661                           postdec1	equ	0xFE5
  3662                           fsr1h	equ	0xFE2
  3663                           fsr1l	equ	0xFE1
  3664                           indf2	equ	0xFDF
  3665                           fsr2h	equ	0xFDA
  3666                           fsr2l	equ	0xFD9
  3667                           status	equ	0xFD8
  3668                           
  3669 ;; *************** function _immData_toPointer *****************
  3670 ;; Defined at:
  3671 ;;		line 150 in file "source/emulator.c"
  3672 ;; Parameters:    Size  Location     Type
  3673 ;;		None
  3674 ;; Auto vars:     Size  Location     Type
  3675 ;;  pointer         2    2[COMRAM] unsigned int 
  3676 ;; Return value:  Size  Location     Type
  3677 ;;                  2    0[COMRAM] unsigned int 
  3678 ;; Registers used:
  3679 ;;		wreg, status,2, status,0
  3680 ;; Tracked objects:
  3681 ;;		On entry : 0/0
  3682 ;;		On exit  : 0/0
  3683 ;;		Unchanged: 0/0
  3684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3685 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3686 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;Total ram usage:        4 bytes
  3690 ;; Hardware stack levels used:    1
  3691 ;; This function calls:
  3692 ;;		Nothing
  3693 ;; This function is called by:
  3694 ;;		_processOpcode
  3695 ;; This function uses a non-reentrant model
  3696 ;;
  3697                           
  3698                           	psect	text9
  3699  001FA8                     __ptext9:
  3700                           	opt stack 0
  3701  001FA8                     _immData_toPointer:
  3702                           	opt stack 29
  3703                           
  3704                           ;emulator.c: 152: uint16_t pointer = (uint16_t) immData_1;
  3705                           
  3706                           ;incstack = 0
  3707  001FA8  C01B  F003         	movff	_immData_1,immData_toPointer@pointer
  3708  001FAC  6A04               	clrf	immData_toPointer@pointer+1,c
  3709                           
  3710                           ;emulator.c: 154: pointer += immData_2;
  3711  001FAE  501C               	movf	_immData_2,w,c
  3712  001FB0  2603               	addwf	immData_toPointer@pointer,f,c
  3713  001FB2  0E00               	movlw	0
  3714  001FB4  2204               	addwfc	immData_toPointer@pointer+1,f,c
  3715                           
  3716                           ;emulator.c: 155: return pointer;
  3717  001FB6  C003  F001         	movff	immData_toPointer@pointer,?_immData_toPointer
  3718  001FBA  C004  F002         	movff	immData_toPointer@pointer+1,?_immData_toPointer+1
  3719  001FBE  0012               	return	
  3720  001FC0                     __end_of_immData_toPointer:
  3721                           	opt stack 0
  3722                           tblptru	equ	0xFF8
  3723                           tblptrh	equ	0xFF7
  3724                           tblptrl	equ	0xFF6
  3725                           tablat	equ	0xFF5
  3726                           prodh	equ	0xFF4
  3727                           prodl	equ	0xFF3
  3728                           postinc0	equ	0xFEE
  3729                           wreg	equ	0xFE8
  3730                           postdec1	equ	0xFE5
  3731                           fsr1h	equ	0xFE2
  3732                           fsr1l	equ	0xFE1
  3733                           indf2	equ	0xFDF
  3734                           fsr2h	equ	0xFDA
  3735                           fsr2l	equ	0xFD9
  3736                           status	equ	0xFD8
  3737                           
  3738 ;; *************** function _getPortData *****************
  3739 ;; Defined at:
  3740 ;;		line 174 in file "source/emulator.c"
  3741 ;; Parameters:    Size  Location     Type
  3742 ;;  portNumber      1    wreg     unsigned char 
  3743 ;; Auto vars:     Size  Location     Type
  3744 ;;  portNumber      1    0[COMRAM] unsigned char 
  3745 ;; Return value:  Size  Location     Type
  3746 ;;                  1    wreg      unsigned char 
  3747 ;; Registers used:
  3748 ;;		wreg, status,2, status,0
  3749 ;; Tracked objects:
  3750 ;;		On entry : 0/0
  3751 ;;		On exit  : 0/0
  3752 ;;		Unchanged: 0/0
  3753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3755 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3757 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3758 ;;Total ram usage:        1 bytes
  3759 ;; Hardware stack levels used:    1
  3760 ;; This function calls:
  3761 ;;		Nothing
  3762 ;; This function is called by:
  3763 ;;		_processOpcode
  3764 ;; This function uses a non-reentrant model
  3765 ;;
  3766                           
  3767                           	psect	text10
  3768  001FC0                     __ptext10:
  3769                           	opt stack 0
  3770  001FC0                     _getPortData:
  3771                           	opt stack 29
  3772                           
  3773                           ;incstack = 0
  3774                           ;getPortData@portNumber stored from wreg
  3775  001FC0  CFE8 F001          	movff	wreg,getPortData@portNumber
  3776                           
  3777                           ;emulator.c: 176: switch (portNumber)
  3778  001FC4  D002               	goto	l1277
  3779  001FC6                     l234:
  3780                           
  3781                           ;emulator.c: 179: return RCREG2;
  3782  001FC6  5074               	movf	3956,w,c	;volatile
  3783  001FC8  0012               	return	
  3784  001FCA                     l1277:
  3785  001FCA  5001               	movf	getPortData@portNumber,w,c
  3786                           
  3787                           ; Switch size 1, requested type "space"
  3788                           ; Number of cases is 1, Range of values is 2 to 2
  3789                           ; switch strategies available:
  3790                           ; Name         Instructions Cycles
  3791                           ; simple_byte            4     3 (average)
  3792                           ;	Chosen strategy is simple_byte
  3793  001FCC  0A02               	xorlw	2	; case 2
  3794  001FCE  B4D8               	btfsc	status,2,c
  3795  001FD0  D7FA               	goto	l234
  3796                           
  3797                           ;emulator.c: 182: return 0;
  3798  001FD2  0E00               	movlw	0
  3799  001FD4  0012               	return	
  3800  001FD6                     __end_of_getPortData:
  3801                           	opt stack 0
  3802                           tblptru	equ	0xFF8
  3803                           tblptrh	equ	0xFF7
  3804                           tblptrl	equ	0xFF6
  3805                           tablat	equ	0xFF5
  3806                           prodh	equ	0xFF4
  3807                           prodl	equ	0xFF3
  3808                           postinc0	equ	0xFEE
  3809                           wreg	equ	0xFE8
  3810                           postdec1	equ	0xFE5
  3811                           fsr1h	equ	0xFE2
  3812                           fsr1l	equ	0xFE1
  3813                           indf2	equ	0xFDF
  3814                           fsr2h	equ	0xFDA
  3815                           fsr2l	equ	0xFD9
  3816                           status	equ	0xFD8
  3817                           
  3818 ;; *************** function _getMXbits *****************
  3819 ;; Defined at:
  3820 ;;		line 20 in file "source/emulator.c"
  3821 ;; Parameters:    Size  Location     Type
  3822 ;;  subRegister     1    wreg     unsigned char 
  3823 ;; Auto vars:     Size  Location     Type
  3824 ;;  subRegister     1    2[COMRAM] unsigned char 
  3825 ;;  regMX_temp      2    0[COMRAM] unsigned int 
  3826 ;; Return value:  Size  Location     Type
  3827 ;;                  1    wreg      unsigned char 
  3828 ;; Registers used:
  3829 ;;		wreg, status,2
  3830 ;; Tracked objects:
  3831 ;;		On entry : 0/0
  3832 ;;		On exit  : 0/0
  3833 ;;		Unchanged: 0/0
  3834 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3836 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3837 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;Total ram usage:        3 bytes
  3840 ;; Hardware stack levels used:    1
  3841 ;; This function calls:
  3842 ;;		Nothing
  3843 ;; This function is called by:
  3844 ;;		_processOpcode
  3845 ;; This function uses a non-reentrant model
  3846 ;;
  3847                           
  3848                           	psect	text11
  3849  001FD6                     __ptext11:
  3850                           	opt stack 0
  3851  001FD6                     _getMXbits:
  3852                           	opt stack 29
  3853                           
  3854                           ;incstack = 0
  3855                           ;getMXbits@subRegister stored from wreg
  3856  001FD6  CFE8 F003          	movff	wreg,getMXbits@subRegister
  3857                           
  3858                           ;emulator.c: 22: uint16_t regMX_temp = regMX;
  3859  001FDA  C016  F001         	movff	_regMX,getMXbits@regMX_temp
  3860  001FDE  C017  F002         	movff	_regMX+1,getMXbits@regMX_temp+1
  3861                           
  3862                           ;emulator.c: 27: }
  3863                           ;emulator.c: 29: return (uint8_t) regMX_temp;
  3864  001FE2  5001               	movf	getMXbits@regMX_temp,w,c
  3865  001FE4  0012               	return	
  3866  001FE6                     __end_of_getMXbits:
  3867                           	opt stack 0
  3868                           tblptru	equ	0xFF8
  3869                           tblptrh	equ	0xFF7
  3870                           tblptrl	equ	0xFF6
  3871                           tablat	equ	0xFF5
  3872                           prodh	equ	0xFF4
  3873                           prodl	equ	0xFF3
  3874                           postinc0	equ	0xFEE
  3875                           wreg	equ	0xFE8
  3876                           postdec1	equ	0xFE5
  3877                           fsr1h	equ	0xFE2
  3878                           fsr1l	equ	0xFE1
  3879                           indf2	equ	0xFDF
  3880                           fsr2h	equ	0xFDA
  3881                           fsr2l	equ	0xFD9
  3882                           status	equ	0xFD8
  3883                           
  3884 ;; *************** function _getFbits *****************
  3885 ;; Defined at:
  3886 ;;		line 65 in file "source/emulator.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;  subRegister     1    wreg     unsigned char 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  subRegister     1    0[COMRAM] unsigned char 
  3891 ;;  regF_temp       1    1[COMRAM] unsigned char 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  1    wreg      unsigned char 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3904 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3905 ;;Total ram usage:        2 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; This function calls:
  3908 ;;		Nothing
  3909 ;; This function is called by:
  3910 ;;		_processOpcode
  3911 ;; This function uses a non-reentrant model
  3912 ;;
  3913                           
  3914                           	psect	text12
  3915  001F66                     __ptext12:
  3916                           	opt stack 0
  3917  001F66                     _getFbits:
  3918                           	opt stack 29
  3919                           
  3920                           ;incstack = 0
  3921                           ;getFbits@subRegister stored from wreg
  3922  001F66  CFE8 F001          	movff	wreg,getFbits@subRegister
  3923                           
  3924                           ;emulator.c: 67: uint8_t regF_temp = regF;
  3925  001F6A  C01F  F002         	movff	_regF,getFbits@regF_temp
  3926                           
  3927                           ;emulator.c: 95: }
  3928                           
  3929                           ;emulator.c: 94: break;
  3930                           
  3931                           ;emulator.c: 91: case 4:
  3932                           
  3933                           ;emulator.c: 89: break;
  3934                           
  3935                           ;emulator.c: 86: case 3:
  3936                           
  3937                           ;emulator.c: 84: break;
  3938                           
  3939                           ;emulator.c: 81: case 2:
  3940                           
  3941                           ;emulator.c: 79: break;
  3942                           
  3943                           ;emulator.c: 76: case 1:
  3944                           
  3945                           ;emulator.c: 74: break;
  3946                           
  3947                           ;emulator.c: 70: {
  3948                           ;emulator.c: 71: case 0:
  3949                           
  3950                           ;emulator.c: 69: switch(subRegister)
  3951  001F6E  5001               	movf	getFbits@subRegister,w,c
  3952                           
  3953                           ; Switch size 1, requested type "space"
  3954                           ; Number of cases is 5, Range of values is 0 to 4
  3955                           ; switch strategies available:
  3956                           ; Name         Instructions Cycles
  3957                           ; simple_byte           16     9 (average)
  3958                           ;	Chosen strategy is simple_byte
  3959  001F70  0A00               	xorlw	0	; case 0
  3960  001F72  B4D8               	btfsc	status,2,c
  3961  001F74  D009               	goto	l209
  3962  001F76  0A01               	xorlw	1	; case 1
  3963  001F78  B4D8               	btfsc	status,2,c
  3964  001F7A  D006               	goto	l209
  3965  001F7C  0A03               	xorlw	3	; case 2
  3966  001F7E  B4D8               	btfsc	status,2,c
  3967  001F80  D003               	goto	l209
  3968  001F82  0A01               	xorlw	1	; case 3
  3969  001F84  A4D8               	btfss	status,2,c
  3970  001F86  0A07               	xorlw	7	; case 4
  3971  001F88                     l209:
  3972                           
  3973                           ;emulator.c: 97: return regF_temp;
  3974  001F88  5002               	movf	getFbits@regF_temp,w,c
  3975  001F8A  0012               	return	
  3976  001F8C                     __end_of_getFbits:
  3977                           	opt stack 0
  3978                           tblptru	equ	0xFF8
  3979                           tblptrh	equ	0xFF7
  3980                           tblptrl	equ	0xFF6
  3981                           tablat	equ	0xFF5
  3982                           prodh	equ	0xFF4
  3983                           prodl	equ	0xFF3
  3984                           postinc0	equ	0xFEE
  3985                           wreg	equ	0xFE8
  3986                           postdec1	equ	0xFE5
  3987                           fsr1h	equ	0xFE2
  3988                           fsr1l	equ	0xFE1
  3989                           indf2	equ	0xFDF
  3990                           fsr2h	equ	0xFDA
  3991                           fsr2l	equ	0xFD9
  3992                           status	equ	0xFD8
  3993                           
  3994 ;; *************** function _initializeRegisters *****************
  3995 ;; Defined at:
  3996 ;;		line 158 in file "source/emulator.c"
  3997 ;; Parameters:    Size  Location     Type
  3998 ;;		None
  3999 ;; Auto vars:     Size  Location     Type
  4000 ;;		None
  4001 ;; Return value:  Size  Location     Type
  4002 ;;		None               void
  4003 ;; Registers used:
  4004 ;;		wreg, status,2
  4005 ;; Tracked objects:
  4006 ;;		On entry : 0/0
  4007 ;;		On exit  : 0/0
  4008 ;;		Unchanged: 0/0
  4009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4012 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4013 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4014 ;;Total ram usage:        1 bytes
  4015 ;; Hardware stack levels used:    1
  4016 ;; This function calls:
  4017 ;;		Nothing
  4018 ;; This function is called by:
  4019 ;;		_main
  4020 ;; This function uses a non-reentrant model
  4021 ;;
  4022                           
  4023                           	psect	text13
  4024  001EDC                     __ptext13:
  4025                           	opt stack 0
  4026  001EDC                     _initializeRegisters:
  4027                           	opt stack 30
  4028                           
  4029                           ;emulator.c: 160: haltFlag = 0;
  4030                           
  4031                           ;incstack = 0
  4032  001EDC  6E01               	movwf	??_initializeRegisters& (0+255),c
  4033  001EDE  0E00               	movlw	0
  4034  001EE0  6E1A               	movwf	_haltFlag,c
  4035  001EE2  5001               	movf	??_initializeRegisters& (0+255),w,c
  4036                           
  4037                           ;emulator.c: 161: regA = 0;
  4038  001EE4  6E01               	movwf	??_initializeRegisters& (0+255),c
  4039  001EE6  0E00               	movlw	0
  4040  001EE8  6E1D               	movwf	_regA,c
  4041  001EEA  5001               	movf	??_initializeRegisters& (0+255),w,c
  4042                           
  4043                           ;emulator.c: 162: regB = 0;
  4044  001EEC  6E01               	movwf	??_initializeRegisters& (0+255),c
  4045  001EEE  0E00               	movlw	0
  4046  001EF0  6E1E               	movwf	_regB,c
  4047  001EF2  5001               	movf	??_initializeRegisters& (0+255),w,c
  4048                           
  4049                           ;emulator.c: 163: regPC = 0;
  4050  001EF4  0E00               	movlw	0
  4051  001EF6  6E19               	movwf	_regPC+1,c
  4052  001EF8  0E00               	movlw	0
  4053  001EFA  6E18               	movwf	_regPC,c
  4054                           
  4055                           ;emulator.c: 164: regSP = 0;
  4056  001EFC  6E01               	movwf	??_initializeRegisters& (0+255),c
  4057  001EFE  0E00               	movlw	0
  4058  001F00  6E20               	movwf	_regSP,c
  4059  001F02  5001               	movf	??_initializeRegisters& (0+255),w,c
  4060                           
  4061                           ;emulator.c: 165: regF = 0;
  4062  001F04  6E01               	movwf	??_initializeRegisters& (0+255),c
  4063  001F06  0E00               	movlw	0
  4064  001F08  6E1F               	movwf	_regF,c
  4065  001F0A  5001               	movf	??_initializeRegisters& (0+255),w,c
  4066  001F0C  0012               	return	
  4067  001F0E                     __end_of_initializeRegisters:
  4068                           	opt stack 0
  4069                           tblptru	equ	0xFF8
  4070                           tblptrh	equ	0xFF7
  4071                           tblptrl	equ	0xFF6
  4072                           tablat	equ	0xFF5
  4073                           prodh	equ	0xFF4
  4074                           prodl	equ	0xFF3
  4075                           postinc0	equ	0xFEE
  4076                           wreg	equ	0xFE8
  4077                           postdec1	equ	0xFE5
  4078                           fsr1h	equ	0xFE2
  4079                           fsr1l	equ	0xFE1
  4080                           indf2	equ	0xFDF
  4081                           fsr2h	equ	0xFDA
  4082                           fsr2l	equ	0xFD9
  4083                           status	equ	0xFD8
  4084                           
  4085 ;; *************** function _initPorts *****************
  4086 ;; Defined at:
  4087 ;;		line 26 in file "source/system.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;		None
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;		None
  4092 ;; Return value:  Size  Location     Type
  4093 ;;		None               void
  4094 ;; Registers used:
  4095 ;;		wreg, status,2
  4096 ;; Tracked objects:
  4097 ;;		On entry : 0/0
  4098 ;;		On exit  : 0/0
  4099 ;;		Unchanged: 0/0
  4100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4104 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4105 ;;Total ram usage:        0 bytes
  4106 ;; Hardware stack levels used:    1
  4107 ;; This function calls:
  4108 ;;		Nothing
  4109 ;; This function is called by:
  4110 ;;		_main
  4111 ;; This function uses a non-reentrant model
  4112 ;;
  4113                           
  4114                           	psect	text14
  4115  001F0E                     __ptext14:
  4116                           	opt stack 0
  4117  001F0E                     _initPorts:
  4118                           	opt stack 30
  4119                           
  4120                           ;system.c: 28: TRISA = 0;
  4121                           
  4122                           ;incstack = 0
  4123  001F0E  0E00               	movlw	0
  4124  001F10  6E92               	movwf	3986,c	;volatile
  4125                           
  4126                           ;system.c: 29: TRISC = 0;
  4127  001F12  0E00               	movlw	0
  4128  001F14  6E94               	movwf	3988,c	;volatile
  4129                           
  4130                           ;system.c: 30: TRISE = 0;
  4131  001F16  0E00               	movlw	0
  4132  001F18  6E96               	movwf	3990,c	;volatile
  4133                           
  4134                           ;system.c: 32: ANSELD = 0;
  4135  001F1A  0E00               	movlw	0
  4136  001F1C  010F               	movlb	15	; () banked
  4137  001F1E  010F               	movlb	15	; () banked
  4138  001F20  6F3B               	movwf	59,b	;volatile
  4139                           
  4140                           ; BSR set to: 15
  4141                           ;system.c: 33: TRISDbits.RD3 = 0;
  4142  001F22  9695               	bcf	3989,3,c	;volatile
  4143                           
  4144                           ; BSR set to: 15
  4145                           ;system.c: 34: TRISDbits.RD4 = 1;
  4146  001F24  8895               	bsf	3989,4,c	;volatile
  4147                           
  4148                           ; BSR set to: 15
  4149                           ;system.c: 35: TRISDbits.RD5 = 0;
  4150  001F26  9A95               	bcf	3989,5,c	;volatile
  4151                           
  4152                           ; BSR set to: 15
  4153                           ;system.c: 36: TRISDbits.RD7 = 1;
  4154  001F28  8E95               	bsf	3989,7,c	;volatile
  4155                           
  4156                           ; BSR set to: 15
  4157                           ;system.c: 37: TRISDbits.RD6 = 0;
  4158  001F2A  9C95               	bcf	3989,6,c	;volatile
  4159                           
  4160                           ;system.c: 39: LATA = 0;
  4161  001F2C  0E00               	movlw	0
  4162  001F2E  6E89               	movwf	3977,c	;volatile
  4163                           
  4164                           ;system.c: 40: LATC = 0;
  4165  001F30  0E00               	movlw	0
  4166  001F32  6E8B               	movwf	3979,c	;volatile
  4167                           
  4168                           ;system.c: 41: LATD = 0;
  4169  001F34  0E00               	movlw	0
  4170  001F36  6E8C               	movwf	3980,c	;volatile
  4171                           
  4172                           ;system.c: 42: LATE = 0;
  4173  001F38  0E00               	movlw	0
  4174  001F3A  6E8D               	movwf	3981,c	;volatile
  4175                           
  4176                           ; BSR set to: 15
  4177  001F3C  0012               	return	
  4178  001F3E                     __end_of_initPorts:
  4179                           	opt stack 0
  4180                           tblptru	equ	0xFF8
  4181                           tblptrh	equ	0xFF7
  4182                           tblptrl	equ	0xFF6
  4183                           tablat	equ	0xFF5
  4184                           prodh	equ	0xFF4
  4185                           prodl	equ	0xFF3
  4186                           postinc0	equ	0xFEE
  4187                           wreg	equ	0xFE8
  4188                           postdec1	equ	0xFE5
  4189                           fsr1h	equ	0xFE2
  4190                           fsr1l	equ	0xFE1
  4191                           indf2	equ	0xFDF
  4192                           fsr2h	equ	0xFDA
  4193                           fsr2l	equ	0xFD9
  4194                           status	equ	0xFD8
  4195                           
  4196 ;; *************** function _initOscillator *****************
  4197 ;; Defined at:
  4198 ;;		line 9 in file "source/system.c"
  4199 ;; Parameters:    Size  Location     Type
  4200 ;;		None
  4201 ;; Auto vars:     Size  Location     Type
  4202 ;;		None
  4203 ;; Return value:  Size  Location     Type
  4204 ;;		None               void
  4205 ;; Registers used:
  4206 ;;		wreg, status,2
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4216 ;;Total ram usage:        0 bytes
  4217 ;; Hardware stack levels used:    1
  4218 ;; This function calls:
  4219 ;;		Nothing
  4220 ;; This function is called by:
  4221 ;;		_main
  4222 ;; This function uses a non-reentrant model
  4223 ;;
  4224                           
  4225                           	psect	text15
  4226  001F8C                     __ptext15:
  4227                           	opt stack 0
  4228  001F8C                     _initOscillator:
  4229                           	opt stack 30
  4230                           
  4231                           ;system.c: 11: OSCCONbits.IDLEN = 0;
  4232                           
  4233                           ; BSR set to: 15
  4234                           ;incstack = 0
  4235  001F8C  9ED3               	bcf	4051,7,c	;volatile
  4236                           
  4237                           ;system.c: 12: OSCCONbits.IRCF = 0b111;
  4238  001F8E  88D3               	bsf	4051,4,c	;volatile
  4239  001F90  8AD3               	bsf	4051,5,c	;volatile
  4240  001F92  8CD3               	bsf	4051,6,c	;volatile
  4241                           
  4242                           ;system.c: 13: OSCCONbits.SCS = 0b10;
  4243  001F94  50D3               	movf	4051,w,c	;volatile
  4244  001F96  0BFC               	andlw	-4
  4245  001F98  0902               	iorlw	2
  4246  001F9A  6ED3               	movwf	4051,c	;volatile
  4247                           
  4248                           ;system.c: 14: OSCCON2bits.MFIOSEL = 0;
  4249  001F9C  98D2               	bcf	4050,4,c	;volatile
  4250                           
  4251                           ;system.c: 15: OSCCON2bits.SOSCGO = 0;
  4252  001F9E  96D2               	bcf	4050,3,c	;volatile
  4253                           
  4254                           ;system.c: 16: OSCCON2bits.PRISD = 0;
  4255  001FA0  94D2               	bcf	4050,2,c	;volatile
  4256  001FA2                     l124:
  4257  001FA2  B4D3               	btfsc	4051,2,c	;volatile
  4258  001FA4  0012               	return	
  4259  001FA6  D7FD               	goto	l124
  4260  001FA8                     __end_of_initOscillator:
  4261                           	opt stack 0
  4262                           tblptru	equ	0xFF8
  4263                           tblptrh	equ	0xFF7
  4264                           tblptrl	equ	0xFF6
  4265                           tablat	equ	0xFF5
  4266                           prodh	equ	0xFF4
  4267                           prodl	equ	0xFF3
  4268                           postinc0	equ	0xFEE
  4269                           wreg	equ	0xFE8
  4270                           postdec1	equ	0xFE5
  4271                           fsr1h	equ	0xFE2
  4272                           fsr1l	equ	0xFE1
  4273                           indf2	equ	0xFDF
  4274                           fsr2h	equ	0xFDA
  4275                           fsr2l	equ	0xFD9
  4276                           status	equ	0xFD8
  4277                           tblptru	equ	0xFF8
  4278                           tblptrh	equ	0xFF7
  4279                           tblptrl	equ	0xFF6
  4280                           tablat	equ	0xFF5
  4281                           prodh	equ	0xFF4
  4282                           prodl	equ	0xFF3
  4283                           postinc0	equ	0xFEE
  4284                           wreg	equ	0xFE8
  4285                           postdec1	equ	0xFE5
  4286                           fsr1h	equ	0xFE2
  4287                           fsr1l	equ	0xFE1
  4288                           indf2	equ	0xFDF
  4289                           fsr2h	equ	0xFDA
  4290                           fsr2l	equ	0xFD9
  4291                           status	equ	0xFD8
  4292                           
  4293                           	psect	rparam
  4294  0000                     tblptru	equ	0xFF8
  4295                           tblptrh	equ	0xFF7
  4296                           tblptrl	equ	0xFF6
  4297                           tablat	equ	0xFF5
  4298                           prodh	equ	0xFF4
  4299                           prodl	equ	0xFF3
  4300                           postinc0	equ	0xFEE
  4301                           wreg	equ	0xFE8
  4302                           postdec1	equ	0xFE5
  4303                           fsr1h	equ	0xFE2
  4304                           fsr1l	equ	0xFE1
  4305                           indf2	equ	0xFDF
  4306                           fsr2h	equ	0xFDA
  4307                           fsr2l	equ	0xFD9
  4308                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    4
    Data        2048
    BSS         271
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     17      32
    BANK0           160      0       0
    BANK1           256      0     256
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_processOpcode
    _processOpcode->_setPortData
    _setPortData->_enableSerial

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    5174
                                             16 COMRAM     1     1      0
                            _dispSeg
                     _initOscillator
                          _initPorts
                _initializeRegisters
                      _processOpcode
 ---------------------------------------------------------------------------------
 (1) _processOpcode                                        7     7      0    3461
                                              9 COMRAM     7     7      0
                           _getFbits
                          _getMXbits
                        _getPortData
                  _immData_toPointer
                           _setFbits
                          _setMXbits
                        _setPortData
                     _update_immData
 ---------------------------------------------------------------------------------
 (2) _update_immData                                       2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setPortData                                          5     4      1    2089
                                              4 COMRAM     5     4      1
                            _dispSeg
                       _enableSerial
                          _hexToChar
 ---------------------------------------------------------------------------------
 (3) _hexToChar                                            1     1      0      45
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _enableSerial                                         4     2      2      49
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (3) _dispSeg                                              2     1      1    1713
                                              0 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _setMXbits                                            6     5      1     196
                                              0 COMRAM     6     5      1
 ---------------------------------------------------------------------------------
 (2) _setFbits                                             5     4      1     876
                                              0 COMRAM     5     4      1
 ---------------------------------------------------------------------------------
 (2) _immData_toPointer                                    4     2      2      15
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _getPortData                                          1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMXbits                                            3     3      0      30
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getFbits                                             2     2      0      30
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _initializeRegisters                                  1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initPorts                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initOscillator                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dispSeg
   _initOscillator
   _initPorts
   _initializeRegisters
   _processOpcode
     _getFbits
     _getMXbits
     _getPortData
     _immData_toPointer
     _setFbits
     _setMXbits
     _setPortData
       _dispSeg
       _enableSerial
       _hexToChar
     _update_immData

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0     800      37       52.6%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     11      20       1       33.7%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     120      12        0.0%
DATA                 0      0     920       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.30 build 55553 
Symbol Table                                                                                   Wed Mar 19 21:36:50 2014

                          l60 188A                            l37 1E54                            l70 1948  
                          l62 18B0                            l54 183E                            l72 196E  
                          l64 18D6                            l81 1A06                            l90 1A78  
                          l74 1994                            l66 18FC                            l58 1864  
                          l84 1A2C                            l76 19BA                            l68 1922  
                          l93 1A9E                            l78 19E0                            l87 1A52  
                          l96 1AC4                _update_immData 1CCE                  __CFG_CP0$OFF 000000  
                __CFG_CP1$OFF 000000                  __CFG_CP2$OFF 000000                  __CFG_CP3$OFF 000000  
                         l124 1FA2                           l240 1C2C                           l209 1F88  
                         l234 1FC6                           l247 1C84                           l352 1580  
                         l280 10DC                           l281 10E2                           l273 109A  
                         l290 111E                           l282 10E8                           l274 10A0  
                         l355 15C6                           l275 10A6                           l293 1148  
                         l279 10D6                           l296 1172                           l297 117C  
                __CFG_CPB$OFF 000000                  __CFG_CPD$OFF 000000                           prod 000FF3  
                         wreg 000FE8         getPortData@portNumber 0001                    _TXSTA2bits 000F72  
                __CFG_LVP$OFF 000000                          l1001 1828                          l1021 18E6  
                        l1013 189A                          l1005 184E                          l1041 19A4  
                        l1033 1958                          l1025 190C                          l1017 18C0  
                        l1009 1874                          l1201 1BA4                          l1061 1A62  
                        l1053 1A16                          l1045 19CA                          l1037 197E  
                        l1029 1932                          l1221 1BB8                          l1213 1BB0  
                        l1205 1BA8                          l1231 1BC0                          l1065 1A88  
                        l1057 1A3C                          l1049 19F0                          l1225 1BBC  
                        l1217 1BB4                          l1209 1BAC                          l1401 1050  
                        l1075 1AD4                          l1411 1072                          l1261 1EB8  
                        l1069 1AAE                          l1181 1B90                          l1173 1B88  
                        l1165 1B80                          l1501 1226                          l1421 10AC  
                        l1405 105A                          l1263 1ED2                          l1351 1D2A  
                        l1343 1CEC                          l1431 10FC                          l1423 10BE  
                        l1415 107E                          l1407 1066                          l1257 1EAE  
                        l1193 1B9C                          l1185 1B94                          l1177 1B8C  
                        l1169 1B84                          l1601 13AA                          l1513 1248  
                        l1441 110E                          l1425 10CA                          l1417 108A  
                        l1291 1D70                          l1371 1C66                          l1363 1C46  
                        l1347 1D0A                          l1531 1272                          l1507 122E  
                        l1443 1114                          l1435 1102                          l1419 1092  
                        l1277 1FCA                          l1293 1D74                          l1197 1BA0  
                        l1189 1B98                          l1701 1672                          l1621 143A  
                        l1613 13FC                          l1605 13C4                          l1525 126A  
                        l1453 1138                          l1437 1108                          l1429 10F6  
                        l1295 1D78                          l1287 1D68                          l1375 1C76  
                        l1367 1C56                          l1359 1C38                          l1383 1CB2  
                        l1631 1470                          l1543 129E                          l1535 128C  
                        l1519 1256                          l1471 11A8                          l1447 111A  
                        l1289 1D6C                          l1297 1D7E                          l1377 1C8A  
                        l1625 1454                          l1617 141C                          l1609 13DE  
                        l1561 12CE                          l1537 1296                          l1481 11E6  
                        l1465 1184                          l1393 101E                          l1705 1676  
                        l1721 1E32         setPortData@portNumber 0006                          l1299 1DD6  
                        l1379 1C9E                          l1651 1510                          l1643 14CC  
                        l1635 148C                          l1555 12BC                          l1475 11C0  
                        l1459 1162                          l1395 102E                          l1707 181C  
                        l1715 1E18                          l1549 12B2                          l1485 11F6  
                        l1477 11CE                          l1469 119A                          l1397 103E  
                        l1831 1DC2                          l1663 156C                          l1655 1534  
                        l1647 14EE                          l1639 14A8                          l1591 135A  
                        l1575 1310                          l1495 1212                          l1399 1048  
                        l1719 1E2E                          l1833 1DCC                          l1825 1DA8  
                        l1681 15F8                          l1673 15B2                          l1665 157A  
                        l1657 1542                          l1489 11FC                          l1827 1DAE  
                        l1691 1638                          l1683 1606                          l1675 15C0  
                        l1659 1548                          l1829 1DB8                          l1693 1646  
                        l1695 164A                          l1687 1610                          l1699 1664  
                        _LATA 000F89                          _LATC 000F8B                          _LATD 000F8C  
                        _LATE 000F8D                          _main 1DEE                          _regA 001D  
                        _regB 001E                          _regF 001F                          fsr1h 000FE2  
                        fsr1l 000FE1                          indf2 000FDF                          fsr2l 000FD9  
               __CFG_BORV$190 000000                          prodl 000FF3                          start 0000  
               __CFG_IESO$OFF 000000        __end_of_update_immData 1D64         setPortData@outputData 0005  
           getFbits@regF_temp 0002                  _BAUDCON2bits 000F70                         ?_main 0001  
                       _TRISA 000F92                         _TRISC 000F94                         _TRISE 000F96  
               __CFG_WRT0$OFF 000000                 __CFG_WRT1$OFF 000000                 __CFG_WRT2$OFF 000000  
               __CFG_WRT3$OFF 000000                __CFG_EBTR0$OFF 000000                __CFG_FCMEN$OFF 000000  
              __CFG_EBTR1$OFF 000000                __CFG_EBTR2$OFF 000000                __CFG_EBTR3$OFF 000000  
             __end_of_dispSeg 1B6E                 __CFG_WRTB$OFF 000000                 __CFG_WRTC$OFF 000000  
               __CFG_WRTD$OFF 000000                __CFG_EBTRB$OFF 000000               ??_processOpcode 000A  
                       _regPC 0018                         _regMX 0016                         _regSP 0020  
          __CFG_MCLRE$EXTMCLR 000000                         _stack 0100      processOpcode@regA_temp16 000F  
              __CFG_BOREN$OFF 000000                         tablat 000FF5                         status 000FD8  
              __CFG_HFOFST$ON 000000               __initialization 1E56                  __end_of_main 1E56  
             ?_update_immData 0001    __end_of_virtualMemory_size 1005          __end_of_enableSerial 1DEE  
                      ??_main 0011                 __activetblptr 000003          enableSerial@baudRate 0001  
          setFbits@regF_temp1 0004            setFbits@regF_temp2 0005                  ?_setPortData 0005  
                      _ANSELD 000F3B                __CFG_WDTEN$OFF 000000          __size_of_getPortData 0016  
                      _RCREG2 000F74                        _SPBRG2 000F75           getMXbits@regMX_temp 0001  
         setMXbits@regMX_temp 0004                        _TXREG2 000F73              __end_of_getFbits 1F8C  
              __CFG_XINST$OFF 000000                __CFG_STVREN$ON 000000  __size_of_initializeRegisters 0032  
                      clear_0 1E5E                        clear_1 1E70                     ??_dispSeg 0002  
            __end_of_setFbits 1EDC                  __pdataBIGRAM 0200                  __mediumconst 0000  
               _virtualMemory 0200                        tblptrh 000FF7                        tblptrl 000FF6  
                      tblptru 000FF8             _immData_toPointer 1FA8               hexToChar@number 0001  
          ?_immData_toPointer 0001                    __accesstop 0060       __end_of__initialization 1E9A  
             __CFG_PBADEN$OFF 000000  setPortData@outputData_temp16 0007                 setFbits@value 0001  
         ??_immData_toPointer 0003           setMXbits@value_temp 0002                __pcstackCOMRAM 0001  
          __size_of_getMXbits 0010     __end_of_immData_toPointer 1FC0            __size_of_hexToChar 00B8  
     __size_of_initOscillator 001C                    __pbssBANK1 0100               __CFG_PLLCFG$OFF 000000  
          __size_of_initPorts 0030            __CFG_CCP2MX$PORTC1 000000   setPortData@outputData_temp8 0009  
       __size_of_enableSerial 008A            __size_of_setMXbits 0028            __CFG_CCP3MX$PORTB5 000000  
                   ?_getFbits 0001             __CFG_PRICLKEN$OFF 000000                       _SPBRGH2 000F76  
        __size_of_setPortData 00A8                  _enableSerial 1D64             __end_of_getMXbits 1FE6  
                   ?_setFbits 0001              ??_update_immData 0001               __CFG_PWRTEN$OFF 000000  
                     __Hparam 0000                       __Lparam 0000             __end_of_hexToChar 1C26  
                __psmallconst 1000                       __pcinit 1E56                       __ramtop 1000  
                     __ptext0 1DEE                       __ptext1 1006                       __ptext2 1CCE  
                     __ptext3 1C26                       __ptext4 1B6E                       __ptext5 1D64  
                     __ptext6 1822                       __ptext7 1F3E                       __ptext8 1EA0  
                     __ptext9 1FA8                       _dispSeg 1822             __end_of_initPorts 1F3E  
  __size_of_immData_toPointer 0018                    ??_getFbits 0001            _virtualMemory_size 1001  
           __end_of_setMXbits 1F66          end_of_initialization 1E9A         __end_of_processOpcode 1822  
         _initializeRegisters 1EDC                    ??_setFbits 0002                       postdec1 000FE5  
                     postinc0 000FEE           getFbits@subRegister 0001          ?_initializeRegisters 0001  
         setFbits@subRegister 0003       processOpcode@carriedBit 000B                     _TRISDbits 000F95  
               ??_getPortData 0001                _initOscillator 1F8C                setMXbits@value 0001  
        getMXbits@subRegister 0003          setMXbits@subRegister 0006         ??_initializeRegisters 0001  
               __pidataBIGRAM 1FE6       processOpcode@regPC_temp 000C       processOpcode@regA_temp8 000E  
         start_initialization 1E56        __end_of_initOscillator 1FA8           __end_of_getPortData 1FD6  
                 __pbssCOMRAM 0012               ?_initOscillator 0001             __size_of_getFbits 0026  
                   _getMXbits 1FD6             __size_of_setFbits 003C                     _hexToChar 1B6E  
                   _immData_1 001B                     _immData_2 001C                      ?_dispSeg 0001  
                 __smallconst 1000                     _initPorts 1F0E                   _getPortData 1FC0  
               ??_setPortData 0006                     _setMXbits 1F3E                      _LATAbits 000F89  
                    _LATCbits 000F8B                      _LATDbits 000F8C                      _LATEbits 000F8D  
                  ?_getMXbits 0001              __CFG_WDTPS$32768 000000                    ?_hexToChar 0001  
                  ?_initPorts 0001                     copy_data0 1E8A                    ?_setMXbits 0001  
         __end_of_setPortData 1CCE                      __Hrparam 0000                      __Lrparam 0000  
           __CFG_P2BMX$PORTD2 000000        __size_of_processOpcode 081C       __size_of_update_immData 0096  
            __size_of_dispSeg 034C                      _getFbits 1F66                      _haltFlag 001A  
                    __ptext10 1FC0                      __ptext11 1FD6                      __ptext12 1F66  
                    __ptext13 1EDC                      __ptext14 1F0E                      __ptext15 1F8C  
                 _OSCCON2bits 000FD2      immData_toPointer@pointer 0003                 __size_of_main 0068  
                    _setFbits 1EA0   __end_of_initializeRegisters 1F0E                   ??_getMXbits 0001  
                 ??_hexToChar 0001              ??_initOscillator 0001                   ??_initPorts 0001  
                 _setPortData 1C26                 ?_enableSerial 0001                 _processOpcode 1006  
                 ??_setMXbits 0002                    _RCSTA2bits 000F71                    _OSCCONbits 000FD3  
              dispSeg@segment 0002                  wait_ms@timel 0012             __CFG_T3CMX$PORTC0 000000  
               dispSeg@letter 0001                  ?_getPortData 0001                ??_enableSerial 0003  
              ?_processOpcode 0001             __CFG_FOSC$INTIO67 000000  
